<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design on Justice的小站</title><link>https://justice.bj.cn/tags/design/</link><description>Recent content in design on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 15 Mar 2023 13:30:59 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/tags/design/index.xml" rel="self" type="application/rss+xml"/><item><title>实现 Trie (前缀树)</title><link>https://justice.bj.cn/post/leetcode/208.%E5%AE%9E%E7%8E%B0trie/</link><pubDate>Wed, 15 Mar 2023 13:30:59 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/208.%E5%AE%9E%E7%8E%B0trie/</guid><description>实现 Trie (前缀树) Category Difficulty Likes Dislikes algorithms Medium (64.69%) 210 - Tags design | trie Companies bloomberg | facebook | google | microsoft | twitter | uber 实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。 示例: 1 2 3 4 5 6 7 8 Trie trie =</description></item><item><title>二叉搜索树迭代器</title><link>https://justice.bj.cn/post/leetcode/173.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8/</link><pubDate>Sun, 12 Mar 2023 09:46:04 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/173.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid><description>二叉搜索树迭代器 Category Difficulty Likes Dislikes algorithms Medium (80.79%) 582 - Tags stack | tree | design Companies facebook | google | linkedin | microsoft 实现一个二叉搜索树迭代器类BSTIterator ，表示一个按中序遍历二叉搜索树</description></item><item><title>LFU缓存</title><link>https://justice.bj.cn/post/leetcode/460.lfu%E7%BC%93%E5%AD%98/</link><pubDate>Fri, 03 Mar 2023 14:04:58 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/460.lfu%E7%BC%93%E5%AD%98/</guid><description>LFU缓存 Category Difficulty Likes Dislikes algorithms Hard (34.03%) 81 - Tags design Companies amazon | google 设计并实现最不经常使用（LFU）缓存的数据结构。它应该支持以下操作：get 和 put。 get(key) - 如果键存在于</description></item><item><title>LRU缓存机制</title><link>https://justice.bj.cn/post/leetcode/146.lru%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link><pubDate>Fri, 03 Mar 2023 14:04:58 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/146.lru%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid><description>LRU缓存机制 Category Difficulty Likes Dislikes algorithms Medium (44.70%) 332 - Tags design Companies amazon | bloomberg | facebook | google | microsoft | palantir | snapchat | twitter | uber | yahoo | zenefits 运用你所掌握的数据结构，设计和实现一个 LRU (最近最少使用) 缓存</description></item><item><title>最小栈</title><link>https://justice.bj.cn/post/leetcode/155.%E6%9C%80%E5%B0%8F%E6%A0%88/</link><pubDate>Wed, 04 May 2022 10:33:52 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/155.%E6%9C%80%E5%B0%8F%E6%A0%88/</guid><description>最小栈 Category Difficulty Likes Dislikes algorithms Easy (58.03%) 1293 - Tags stack | design Companies amazon | bloomberg | google | snapchat | uber | zenefits 设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。 实现 MinStack 类: MinStack()</description></item><item><title>数据流的中位数</title><link>https://justice.bj.cn/post/leetcode/295.%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</link><pubDate>Sat, 02 Apr 2022 10:47:30 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/295.%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</guid><description>数据流的中位数 Category Difficulty Likes Dislikes algorithms Hard (52.43%) 657 - Tags heap | design Companies google 中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。 例如， [2,3,4] 的中位数是 3</description></item></channel></rss>