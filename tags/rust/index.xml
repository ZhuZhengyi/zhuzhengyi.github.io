<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on Justice的小站</title><link>https://justice.bj.cn/tags/rust/</link><description>Recent content in rust on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 02 Apr 2022 10:47:30 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust宏</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%AE%8F/</link><pubDate>Sat, 02 Apr 2022 10:47:30 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%AE%8F/</guid><description>Rust宏 简介 卫生宏，编译器或运行时会保证宏里面定义的变量或函数不会与外面的冲突，在宏里面以普通方式定义的变量作用域不会跑到宏外面。 rust</description></item><item><title>Rust数据类型</title><link>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sat, 02 Apr 2022 10:47:30 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>Rust 数据类型 简介 Rust的数据类型分为标量(scalar)类型和复合(compound)类型、集合类型。 标量类型(scalar)：表示一个单独</description></item><item><title>Rust错误处理</title><link>https://justice.bj.cn/post/14.language/rust/40.rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link><pubDate>Mon, 21 Mar 2022 09:44:56 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/40.rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid><description>Rust错误处理 简介 Rust 将错误两个主要类别： 可恢复错误（recoverable） ： 由 Result&amp;lt;T, E&amp;gt; 表示，代表向用户报告错误和重试操作是合理的情况，比如未</description></item><item><title>RustTrait</title><link>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</link><pubDate>Thu, 17 Mar 2022 09:56:25 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</guid><description>Rust Trait 简介 trait(特性) 是一组方法的集合，实现trait的类型可以访问该 trait 中定义的其他方法。 任何类型都可以实现 trait； 要点 Trait必</description></item><item><title>Rust基础</title><link>https://justice.bj.cn/post/14.language/rust/01.rust%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 17 Mar 2022 09:56:25 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/01.rust%E5%9F%BA%E7%A1%80/</guid><description>Rust 基础 简介 Rust是由Graydon Hoare于2009年发起的一门系统级、编译型编程语言，其设计准则为“安全，并发，实用”，支持函数式，并</description></item><item><title>Rust指针</title><link>https://justice.bj.cn/post/14.language/rust/10.rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link><pubDate>Thu, 17 Mar 2022 09:56:25 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/10.rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid><description>Rust指针 简介 Rust中的指针 裸指针 rust裸指针就像C++中的指针一样, 类型 *mut T和 *const t； 使用裸指针是不安全的，Rust不会追踪它指向的内</description></item><item><title>Rust中的Pin</title><link>https://justice.bj.cn/post/14.language/rust/rust-pin/</link><pubDate>Sat, 19 Feb 2022 17:31:39 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust-pin/</guid><description>Rust中的Pin 简介 Pin&amp;lt;P&amp;lt;T&amp;gt;&amp;gt;是一个struct, 作用是将P所指向的T在内存中固定住，不能移动。不能通过s</description></item><item><title>Rustß迭代器</title><link>https://justice.bj.cn/post/14.language/rust/rust%E8%BF%AD%E4%BB%A3%E5%99%A8/</link><pubDate>Fri, 18 Feb 2022 10:14:15 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid><description>Rustß迭代器 简介 迭代器是一个trait； 迭代器（iterator）负责遍历序列中的每一项和决定序列何时结束的逻辑； 迭代器是 惰性的（laz</description></item><item><title>Rust命令工具</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7/</link><pubDate>Fri, 18 Feb 2022 10:14:15 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7/</guid><description>Rust命令工具 简介 Cargo cargo test 1 $ cargo test Rustup 参考</description></item><item><title>Rust异步框架之Tokio</title><link>https://justice.bj.cn/post/14.language/rust/rust-tokio/</link><pubDate>Fri, 18 Feb 2022 10:14:15 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust-tokio/</guid><description>Rust异步框架之Tokio 简介 参考 tokio 高级用法 - lack 的个人博客</description></item><item><title>Rust异步编程</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%82%E6%AD%A5/</link><pubDate>Fri, 18 Feb 2022 10:14:15 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%82%E6%AD%A5/</guid><description>Rust 异步编程 简介 异步编程经历了三个阶段： 第一阶段：异步回调模式，存在回调地狱问题； 第二阶段：nodejs 中的Promise/Future模式，</description></item><item><title>Rust模块及包管理</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%8C%85%E7%AE%A1%E7%90%86/</link><pubDate>Fri, 18 Feb 2022 10:14:15 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%8C%85%E7%AE%A1%E7%90%86/</guid><description>Rust模块及包管理 简介 Rust程序代码组织分为两个层级： 包(crate)：是一个独立的可编译单元； 模块(mod)：是包内代码组织单元； 包(</description></item><item><title>枚举(Enum)</title><link>https://justice.bj.cn/post/14.language/rust/22.rust-enum/</link><pubDate>Fri, 18 Feb 2022 10:14:15 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/22.rust-enum/</guid><description>枚举(Enum) define 1 2 3 4 5 6 7 8 9 10 enum Option&amp;lt;T&amp;gt;{Some(T),None,}implOption{pubfn as_ref(&amp;amp;self)-&amp;gt; Option&amp;lt;&amp;amp;T&amp;gt;//从`&amp;amp;Option&amp;lt;T&amp;gt;`转换为</description></item><item><title>Rust注释</title><link>https://justice.bj.cn/post/14.language/rust/rust%E6%B3%A8%E9%87%8A/</link><pubDate>Fri, 29 Oct 2021 21:50:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E6%B3%A8%E9%87%8A/</guid><description>Rust注释 简介 Rust 里的注释和C语言中的一样，分成两种: 行注释: 以//开头的一行，直到行结束符的一行所有内容。 1 // I love Rust, but I hate Rustc. 块注释：/* 和</description></item><item><title>Rust测试</title><link>https://justice.bj.cn/post/14.language/rust/rust%E6%B5%8B%E8%AF%95/</link><pubDate>Tue, 05 Oct 2021 20:20:03 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E6%B5%8B%E8%AF%95/</guid><description>Rust测试 简介 Rust测试包括单元测试、集成测试、文档测试和性能测试； 单元测试一般和相应的源码位于同一个源文件中； 单元测试mod上一般增加</description></item><item><title>Rust安装配置</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 06 Sep 2021 10:05:25 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>Rust安装配置 安装 1 2 3 4 5 6 7 8 9 10 11 12 # 安装rustup, rustc, cargo curl https://sh.rustup.rs -sSf | sh # 安装源码, rls rustup component add rust-src rls # 启用国内rustup 清华镜像(bas</description></item><item><title>Rust泛型</title><link>https://justice.bj.cn/post/14.language/rust/25.rust%E6%B3%9B%E5%9E%8B/</link><pubDate>Mon, 06 Sep 2021 10:05:25 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/25.rust%E6%B3%9B%E5%9E%8B/</guid><description>Rust泛型 简介 泛型（generic）是关于泛化类型和函数功能, 以扩大其适用范围, 泛型极大地 减少了代码的重复。 Rust泛型支持struct，</description></item><item><title>Rust二叉树</title><link>https://justice.bj.cn/post/14.language/rust/rust-%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Fri, 25 Dec 2020 10:57:29 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust-%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>Rust 二叉树 定义 1 2 3 4 5 6 #[derive(Debug, Default)]struct Tree{value: i32,left: Option&amp;lt;Box&amp;lt;Tree&amp;gt;&amp;gt;,right: Option&amp;lt;Box&amp;lt;Tree&amp;gt;&amp;gt;} 基本方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 implTree{fn get_val(&amp;amp;self)-&amp;gt; i32 {returnself.value;}fn</description></item><item><title>Rust函数</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%87%BD%E6%95%B0/</link><pubDate>Fri, 25 Dec 2020 10:57:29 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%87%BD%E6%95%B0/</guid><description>Rust 函数 简介 fn 1 2 3 4 // 函数声明 fn func_name(arg1: arg1_type)-&amp;gt; {// func_body } 闭包(closure) rust中closure 就是一个捕获了当前上下文变量的结构体。 1 2 3 4 5 6 7</description></item><item><title>Rust链表</title><link>https://justice.bj.cn/post/14.language/rust/rust%E9%93%BE%E8%A1%A8/</link><pubDate>Fri, 25 Dec 2020 10:57:29 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E9%93%BE%E8%A1%A8/</guid><description>Rust链表 定义 由于所有权的关系，在rust中实现链表一直是一个比较困难的问题。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Definition for singly-linked list. #[derive(PartialEq, Eq, Clone, Debug)]pubstruct ListNode{pubval: i32,pubnext: Option&amp;lt;Box&amp;lt;ListNode&amp;gt;&amp;gt;}implListNode{#[inline]fn new(val: i32)-&amp;gt;</description></item></channel></rss>