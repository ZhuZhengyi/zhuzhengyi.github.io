<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ulities on Justice的小站</title><link>https://justice.bj.cn/tags/ulities/</link><description>Recent content in ulities on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 05 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/tags/ulities/index.xml" rel="self" type="application/rss+xml"/><item><title>C++ 队列设计</title><link>https://justice.bj.cn/post/14.language/c++/ulities/current-queue/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/current-queue/</guid><description>C++ 队列设计 简单 Queue 同步 Queue 无锁同步 Queue</description></item><item><title>C++日志</title><link>https://justice.bj.cn/post/14.language/c++/ulities/c++log/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/c++log/</guid><description>C++日志 muduo-AsyncLog 双缓冲异步日志 双缓冲buffer 优化时间 zlog z-log是一个高性能、线程安全、灵活、概念清晰的纯C日志函数库。 g3log G3log 是一个开源、支持</description></item><item><title>fastcommon</title><link>https://justice.bj.cn/post/14.language/c++/ulities/fastcommon/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/fastcommon/</guid><description>fastcommon 简介 build error Fixes deprecated syscall issue on macOS 10.12 gettid 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include &amp;lt;pthread.h&amp;gt; pid_t GetCurrentThreadId(){ pid_t tid = 0; #if defined(__linux__) tid = syscall(SYS_gettid); #elif defined(__APPLE__) &amp;amp;&amp;amp; defined(__MACH__) tid = syscall(SYS_thread_selfid); uint64_t tid64; pthread_threadid_np(NULL, &amp;amp;tid64); tid = (pid_t)tid64; #endif return tid; }</description></item><item><title>jsoncpp</title><link>https://justice.bj.cn/post/14.language/c++/ulities/jsoncpp/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/jsoncpp/</guid><description>jsoncpp 简介 用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // build: -ljson #include &amp;#34;json/json.h&amp;#34; string func() { Json::Value person; person[&amp;#34;ID&amp;#34;] = student.ID; person[&amp;#34;name&amp;#34;] = student.name; person[&amp;#34;age&amp;#34;]=student.age; person[&amp;#34;gender&amp;#34;]=student.gender; person[&amp;#34;major&amp;#34;]=student.major; Json::StreamWriterBuilder builder; ostringstream oss; //builder.settings_[&amp;#34;indentation&amp;#34;] = &amp;#34;&amp;#34;; std::unique_ptr&amp;lt;Json::StreamWriter&amp;gt; writer(builder.newStreamWriter()); writer-&amp;gt;write(person, &amp;amp;oss); return oss.str(); }</description></item></channel></rss>