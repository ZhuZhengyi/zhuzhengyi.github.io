<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithm on Justice的小站</title><link>https://justice.bj.cn/tags/algorithm/</link><description>Recent content in algorithm on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 28 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>Kademlia算法</title><link>https://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</guid><description>Kademlia算法 Kademlia算法是一种分布式存储及路由的算法。 什么是分布式存储？试想一下，一所1000人的学校，现在学校突然决定拆掉</description></item><item><title>股票买卖算法</title><link>https://justice.bj.cn/post/13.algorithm/%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96%E7%AE%97%E6%B3%95/</guid><description>股票买卖算法 核心代码 1 2 3 4 5 6 for (let i = 1; i &amp;lt; n; i++) { //卖出时利润：求最大值（上次交易卖出时利润，本次交易卖出时利润） profit_out = Math.max(profit_out, profit_in + prices[i]); //买入时</description></item></channel></rss>