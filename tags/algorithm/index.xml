<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithm on Justice的小站</title><link>https://justice.bj.cn/tags/algorithm/</link><description>Recent content in algorithm on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 30 Apr 2022 17:04:39 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>CLOCK算法</title><link>https://justice.bj.cn/post/13.algorithm/clock%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/clock%E7%AE%97%E6%B3%95/</guid><description>CLOCK算法 简介 CLOCK算法(时钟置换算法)是一种LRU算法的一个变种，将LRU的链表缓存环形数组； 即逐出的页面都是最近没有使用的那个。</description></item><item><title>Jump一致性哈希算法</title><link>https://justice.bj.cn/post/13.algorithm/jumpconsistenthash%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/jumpconsistenthash%E7%AE%97%E6%B3%95/</guid><description>Jump一致性哈希算法 简介 Jump consistent hash是一种一致性哈希算法, 此算法零内存消耗，均匀分配，快速，并且只有5行代码。 这个算法是 Google 的 John Lamping 和 Eric Veach 创造</description></item><item><title>KMP算法</title><link>https://justice.bj.cn/post/13.algorithm/kmp%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/kmp%E7%AE%97%E6%B3%95/</guid><description>KMP算法 简介 KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt共同发明； KMP算法的关键</description></item><item><title>SnowFlake 算法</title><link>https://justice.bj.cn/post/13.algorithm/snowflake%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/snowflake%E7%AE%97%E6%B3%95/</guid><description>SnowFlake 算法 概述 Snowflake 算法是 Twitter 发明的一种算法，用于在分布式的高并发环境中，生成 64 位自增 ID。这种算法产生的背景是，Twitter 每秒钟能产生上万条信息</description></item><item><title>一致性哈希算法</title><link>https://justice.bj.cn/post/13.algorithm/%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95/</guid><description>一致性哈希算法 一致性哈希算法在 1997 年由麻省理工学院的 Karger 等人在解决分布式 Cache 中提出的，设计目标是为了解决因特网中的热点(Hot spot)问题，初衷</description></item><item><title>堆排序</title><link>https://justice.bj.cn/post/13.algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/</guid><description>堆排序 简介 堆排序是借助于堆这个数据结构来实现排序的一种算法。 堆(heap)的性质 堆是一个完全二叉树； 堆的每个非叶子结点值均大于(大顶堆)/小</description></item><item><title>并发</title><link>https://justice.bj.cn/post/13.algorithm/concurrent/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/concurrent/</guid><description>并发 进程 进程间通信 管道(Pipe) 共享内存(SharedMemory) 消息队列(MQ) 文件(File) socket 线程 线程间同步 互斥量(mutex) 条</description></item><item><title>设计模式及准则</title><link>https://justice.bj.cn/post/13.algorithm/design_pattern/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/design_pattern/</guid><description>设计模式及准则 设计准则 单一职责原则(SDP): 一个类自有一个引起变化的原因。 开发封闭原则(ODP): 对扩展开发, 对修改封闭。 依赖倒置原则(D</description></item><item><title>纠删码(ErasureCode)</title><link>https://justice.bj.cn/post/13.algorithm/erasurecode/</link><pubDate>Sun, 13 Feb 2022 13:20:16 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/erasurecode/</guid><description>纠删码(ErasureCode) 简介 纠删码是通过利用纠删码算法将原始的数据进行编码得到校验，并将数据和校验一并存储起来，以达到容错的目的; 其</description></item><item><title>快速排序</title><link>https://justice.bj.cn/post/13.algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link><pubDate>Thu, 30 Dec 2021 21:26:14 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid><description>快速排序 基本思想 选择一个基准，将整个未排序序列按基准分为大小两个部分，递归进行，直到整个序列有序为止。 时间复杂度 Avg: $O(nlogn)$ Max: O(n^2) Min: O(n) 空间复杂度 code 1 2</description></item><item><title>排序算法总结</title><link>https://justice.bj.cn/post/13.algorithm/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 30 Dec 2021 21:26:14 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid><description>排序算法总结 概述 排序是最基础算法之一。 分类 十种常见排序算法可以分为两大类： 比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突</description></item><item><title>查找算法</title><link>https://justice.bj.cn/post/13.algorithm/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</link><pubDate>Wed, 22 Dec 2021 10:04:41 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</guid><description>查找算法 简介 查找算法是计算机科学中最基本的算法之一，其用途在查找给定序列中的特定值。 二分查找 二分查找法是对有序序列的快速查找方法，其时间复杂</description></item><item><title>PForDelta算法</title><link>https://justice.bj.cn/post/13.algorithm/pfordelta%E7%AE%97%E6%B3%95/</link><pubDate>Sun, 10 Oct 2021 13:44:29 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/pfordelta%E7%AE%97%E6%B3%95/</guid><description>PForDelta算法 简介 由于倒排索引文件往往占用巨大的磁盘空间，我们自然想到对数据进行压缩。同时，引进压缩算法后，使得磁盘占用减少，操作系</description></item><item><title>股票买卖算法</title><link>https://justice.bj.cn/post/13.algorithm/%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96%E7%AE%97%E6%B3%95/</link><pubDate>Sun, 26 Sep 2021 23:23:46 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96%E7%AE%97%E6%B3%95/</guid><description>股票买卖算法 核心代码 1 2 3 4 5 6 for (let i = 1; i &amp;lt; n; i++) { //卖出时利润：求最大值（上次交易卖出时利润，本次交易卖出时利润） profit_out = Math.max(profit_out, profit_in + prices[i]); //买入时</description></item><item><title>算法简介</title><link>https://justice.bj.cn/post/13.algorithm/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 26 Sep 2021 20:37:02 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</guid><description>算法简介 title: 算法基础 description: toc: true authors: [] tags: [] categories: [] series: [] 算法基础 算法定义 算法评估 空间复杂度 时间复杂度 常用算法 排序 比较类 冒泡排序 选择排序 插入排序 归并排序 希尔排</description></item><item><title>Kademlia算法</title><link>https://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 04 Sep 2021 11:58:06 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</guid><description>Kademlia算法 Kademlia算法是一种分布式存储及路由的算法。 什么是分布式存储？试想一下，一所1000人的学校，现在学校突然决定拆掉</description></item></channel></rss>