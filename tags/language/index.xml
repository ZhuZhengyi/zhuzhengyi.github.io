<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>language on Justice的小站</title><link>https://justice.bj.cn/tags/language/</link><description>Recent content in language on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 10 Mar 2023 20:02:47 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/tags/language/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust指针</title><link>https://justice.bj.cn/post/14.language/rust/10.rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link><pubDate>Fri, 10 Mar 2023 20:02:47 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/10.rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid><description>Rust指针 简介 Rust中的指针是一个包含了内存地址的变量，该内存地址引用或者指向了另外的数据。 裸指针 rust裸指针就像C++中的指针一样;</description></item><item><title>Golang内存管理</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Wed, 08 Mar 2023 19:49:11 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>Golang内存管理 简介 Golang内存管理采用类似tcmalloc的分级分配算法，主要由MHeap、MCentral、MCache 3 级组成</description></item><item><title>Golang数据结构之map</title><link>https://justice.bj.cn/post/14.language/golang/golang%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bmap/</link><pubDate>Wed, 08 Mar 2023 19:49:11 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bmap/</guid><description>Golang数据结构之map 简介 用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //字面量初始化 hash1 := map[string]int{ &amp;#34;1&amp;#34;: 2, &amp;#34;3&amp;#34;: 4, &amp;#34;5&amp;#34;: 6, } //make初始化 hash2</description></item><item><title>golang最佳实践</title><link>https://justice.bj.cn/post/14.language/golang/golang%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Wed, 08 Mar 2023 19:49:11 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>golang最佳实践 最佳实践 字符切片转string 1 // []byte -&amp;gt; string 参考</description></item><item><title>Go内存管理</title><link>https://justice.bj.cn/post/14.language/golang/go%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Wed, 08 Mar 2023 19:49:11 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/go%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>Go内存管理 Go内部内存结构 首先，让我们看看Go内部的内存结构是什么样子的。 Go运行时将Goroutines（G）调度到逻辑处理器（P）上执</description></item><item><title>Go语言之cgo</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bcgo/</link><pubDate>Wed, 08 Mar 2023 19:49:11 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bcgo/</guid><description>Go语言之cgo 简介 Go语言通过自带的CGO的工具来支持C语言函数调用，也可以用Go语言导出C动态库接口给其它语言使用。 原理 Go的代码执行环</description></item><item><title>Rust数据类型</title><link>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Wed, 08 Mar 2023 19:49:11 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>Rust数据类型 简介 Rust的数据类型分为标量(scalar)、复合(compound)和集合3种类型： 类型写法 描述 值举例 i8, i16, i32, i64, u8, u16, u32, u64 i</description></item><item><title>ASM汇编语言基础</title><link>https://justice.bj.cn/post/14.language/asm/asm/</link><pubDate>Fri, 03 Mar 2023 14:04:58 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/asm/asm/</guid><description>ASM汇编语言基础 简介 汇编语言是 CPU架构 寄存器 8086寄存器 8个8位通用寄存器：AL,AH,BL,BH,CL,CH,DL,DH 8个16位通</description></item><item><title>Rust基础</title><link>https://justice.bj.cn/post/14.language/rust/01.rust%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 03 Mar 2023 14:04:58 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/01.rust%E5%9F%BA%E7%A1%80/</guid><description>Rust基础 简介 Rust是由Graydon Hoare于2009年发起的一门系统级、编译型编程语言，其设计准则为“安全，并发，实用”，支持函数</description></item><item><title>汇编基础</title><link>https://justice.bj.cn/post/14.language/asm/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 03 Mar 2023 14:04:58 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/asm/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</guid><description>汇编基础 基础知识 1.1 机器语言 机器语言是机器指令的集合。电子计算机的机器指令是一系列二进制数字。计算机将之转换为一系列高低电平脉冲信号来驱动硬件</description></item><item><title>Rust测试</title><link>https://justice.bj.cn/post/14.language/rust/rust%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 20 Feb 2023 10:33:38 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E6%B5%8B%E8%AF%95/</guid><description>Rust测试 简介 Rust测试包括单元测试、集成测试、文档测试和性能测试； 单元测试一般和相应的源码位于同一个源文件中； 单元测试mod上一般增加</description></item><item><title>Rust宏</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%AE%8F/</link><pubDate>Thu, 09 Feb 2023 08:19:52 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%AE%8F/</guid><description>Rust宏 简介 卫生宏，编译器或运行时会保证宏里面定义的变量或函数不会与外面的冲突，在宏里面以普通方式定义的变量作用域不会跑到宏外面。 rust</description></item><item><title>Rust 异步编程</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%82%E6%AD%A5/</link><pubDate>Sat, 10 Dec 2022 14:02:24 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%82%E6%AD%A5/</guid><description>Rust 异步编程 简介 异步编程经历了三个阶段： 第一阶段：异步回调模式，存在回调地狱问题； 第二阶段：nodejs 中的Promise/Future模式，</description></item><item><title>Rust并发</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%B9%B6%E5%8F%91/</link><pubDate>Fri, 02 Dec 2022 20:49:42 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%B9%B6%E5%8F%91/</guid><description>Rust并发 简介 线程 线程同步 互斥量 锁 原子量 Send和Sync std::marker 中的 Sync 和 Send Send 允许在线程间转移所有权; Send 标记 trait 表明类型的所有权可以在线程间传递。</description></item><item><title>Rust中的Pin</title><link>https://justice.bj.cn/post/14.language/rust/rust-pin/</link><pubDate>Thu, 01 Dec 2022 14:33:17 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust-pin/</guid><description>Rust中的Pin 简介 Pin&amp;lt;P&amp;lt;T&amp;gt;&amp;gt;是一个struct, 作用是将P所指向的T在内存中固定住，不能移动。不能通过s</description></item><item><title>Rust模块及包管理</title><link>https://justice.bj.cn/post/14.language/rust/80.rust%E5%8C%85%E7%AE%A1%E7%90%86/</link><pubDate>Fri, 11 Nov 2022 10:32:40 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/80.rust%E5%8C%85%E7%AE%A1%E7%90%86/</guid><description>Rust模块及包管理 简介 Rust程序代码组织分为三个层级： 项目(package)：一个项目工程，一个项目通常由一个cargo.toml定义，</description></item><item><title>scala的monad(转)</title><link>https://justice.bj.cn/post/14.language/scala/scala%E4%B9%8Bmonad/</link><pubDate>Sat, 15 Oct 2022 10:19:58 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/scala/scala%E4%B9%8Bmonad/</guid><description>scala的monad(转) 转自我所理解的monad(1)：半群(semigroup)与幺半群(monoid) google到数学里定义的群(</description></item><item><title>Rust安装配置</title><link>https://justice.bj.cn/post/14.language/rust/85.rust%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 25 Sep 2022 18:42:51 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/85.rust%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>Rust安装配置 简介 rust官方提供了一系列工具，用于rust的开发及管理, 包括： rustup cargo 安装 rust官方提供了rustup用于rust的安装管</description></item><item><title>Rust枚举(enum)</title><link>https://justice.bj.cn/post/14.language/rust/22.rust%E6%9E%9A%E4%B8%BEenum/</link><pubDate>Sun, 25 Sep 2022 18:42:51 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/22.rust%E6%9E%9A%E4%B8%BEenum/</guid><description>Rust枚举(enum) 简介 enum是rust中用于表示同一个可能拥有可数不同状态对象的结构； enum包含枚举类型和枚举值, 枚举类型是该枚举</description></item><item><title>Rust泛型(generic)</title><link>https://justice.bj.cn/post/14.language/rust/25.rust%E6%B3%9B%E5%9E%8Bgenric/</link><pubDate>Sun, 25 Sep 2022 18:42:51 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/25.rust%E6%B3%9B%E5%9E%8Bgenric/</guid><description>Rust泛型(generic) 简介 泛型（generic）是关于泛化类型和函数功能, 以扩大其适用范围, 泛型极大地减少了代码的重复。 Rust泛型</description></item></channel></rss>