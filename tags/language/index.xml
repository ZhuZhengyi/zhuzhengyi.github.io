<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>language on Justice的小站</title><link>https://justice.bj.cn/tags/language/</link><description>Recent content in language on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 21 May 2022 21:27:53 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/tags/language/index.xml" rel="self" type="application/rss+xml"/><item><title>ConcurrentHashMap 原理分析</title><link>https://justice.bj.cn/post/14.language/java/concurrenthashmap/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/java/concurrenthashmap/</guid><description>ConcurrentHashMap 原理分析 简介 java 中，hash 表总共有hashmap, hashtable,concurrenthashmap等多种实现方式。hashmap是从</description></item><item><title>Golang Channel</title><link>https://justice.bj.cn/post/14.language/golang/golang-channel/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-channel/</guid><description>Golang Channel 简介 Go语言channel是first-class的，可以被存储到变量中，可以作为参数传递给函数，也可以作为函数的返回值返回; chann</description></item><item><title>Golang Runtime</title><link>https://justice.bj.cn/post/14.language/golang/golang-runtime/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-runtime/</guid><description>Golang Runtime 简介 Go调度器的演化 源码分析 Go 程序启动后需要对自身运行时进行初始化，其真正的程序入口由 runtime 包控制。 以 AMD64 架构上的 Linux 和 macOS 为例，分别位于：src</description></item><item><title>Golang 内存管理</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>Golang 内存管理 简介 Golang内存管理采用类似tcmalloc的分级分配算法，主要由MHeap、MCentral、MCache 3 级组成。按分配对</description></item><item><title>Golang之interface</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Binterface/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Binterface/</guid><description>Golang之interface 简介 接口是一个或多个方法签名的集合 只要某个类型拥有该接口的所有方法签名，即算实现该接口，无需显示声明实现了哪</description></item><item><title>Golang之unsafe</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bunsafe/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bunsafe/</guid><description>Golang之unsafe 简介 unsafe包 unsafe 包中的几个函数都是在编译期间执行的。 1 2 3 4 5 6 type ArbitraryType int type Pointer *ArbitraryType func Sizeof(x ArbitraryType) uintptr func Offsetof(x ArbitraryType) uintptr func Alignof(x ArbitraryType) uintptr Pointer unsa</description></item><item><title>Golang基础</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</guid><description>Golang基础 简介 初始化 规则： 每个package 只会被初始化一次； 同一个 package，不同文件是按照文件名的顺序来初始化； 不能循环 import , 例</description></item><item><title>Golang数据结构之map</title><link>https://justice.bj.cn/post/14.language/golang/go%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bmap/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/go%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bmap/</guid><description>Golang数据结构之map 简介 用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //字面量初始化 hash1 := map[string]int{ &amp;#34;1&amp;#34;: 2, &amp;#34;3&amp;#34;: 4, &amp;#34;5&amp;#34;: 6, } //make初始化 hash2</description></item><item><title>Golang汇编</title><link>https://justice.bj.cn/post/14.language/golang/golang%E6%B1%87%E7%BC%96/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E6%B1%87%E7%BC%96/</guid><description>Golang汇编 简介 golang的汇编基于plan9汇编,是一个中间汇编方式，以忽略底层不同架构之间的一些差别； 寄存器 各种伪计数器: FP: Frame pointer: arguments</description></item><item><title>Goroutine</title><link>https://justice.bj.cn/post/14.language/golang/goroutine/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/goroutine/</guid><description>Goroutine 简介 goroutine是go中的协程。goroutine基于线程池+任务队列模型，实现了用户态的任务调度功能。 历史演化 历史上几个不同版本的</description></item><item><title>JAVA基础</title><link>https://justice.bj.cn/post/14.language/java/java%E5%9F%BA%E7%A1%80/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/java/java%E5%9F%BA%E7%A1%80/</guid><description>JAVA基础 简介 内存对象 jvm 程序计数器(PC) 栈(Stack) 虚拟机栈(VM stack) 本地方法栈(Native stack) 堆(Heap) 所有对象 新生代(Eden</description></item><item><title>Java线程池</title><link>https://justice.bj.cn/post/14.language/java/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/java/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid><description>Java线程池 简介 创建线程需要操作系统资源（线程资源，栈空间等），频繁创建和销毁大量线程需要消耗大量时间。 可以把很多小任务让一组线程来执行，</description></item><item><title>java调试</title><link>https://justice.bj.cn/post/14.language/java/java%E8%B0%83%E8%AF%95/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/java/java%E8%B0%83%E8%AF%95/</guid><description>java调试 简介 jvm内存布局 工具 jps: 查看jvm 进程信息； jstack：查看jvm栈信息； jmap：查看jvm堆相关信息 jstat: JVM统计监测工具 jhat:</description></item><item><title>Java锁</title><link>https://justice.bj.cn/post/14.language/java/java%E9%94%81/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/java/java%E9%94%81/</guid><description>Java锁 简介 Synchronized synchronized是悲观锁； synchronized通过java对象头中的monitor来实现线程同步； Monitor</description></item><item><title>Rust 数据类型</title><link>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>Rust 数据类型 简介 Rust的数据类型分为标量(scalar)类型和复合(compound)类型、集合类型。 标量类型(scalar)：表示一个单独</description></item><item><title>sed</title><link>https://justice.bj.cn/post/14.language/shell/sed/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/shell/sed/</guid><description>sed 简介 sed是unix下常用的文本处理工具之一， 常用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43</description></item><item><title>Spring的注解</title><link>https://justice.bj.cn/post/14.language/java/spring%E6%B3%A8%E8%A7%A3/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/java/spring%E6%B3%A8%E8%A7%A3/</guid><description>Spring的注解 什么是注解 传统的Spring做法是使用.xml文件来对bean进行注入或者是配置aop、事务，这么做有两个缺点： 如果所有的</description></item><item><title>可视化Go内存管理</title><link>https://justice.bj.cn/post/14.language/golang/go%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/go%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>可视化Go内存管理 这篇文章基于Go 1.13的默认官方实现，有些概念细节可能会在Go的未来版本中发生变化 Go内部内存结构 首先，让我们看看Go内</description></item><item><title>图解 Golang 的 GC 算法</title><link>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</guid><description>图解 Golang 的 GC 算法 简介 虽然 Golang 的 GC 自打一开始，就被人所诟病，但是经过这么多年的发展，Golang 的 GC 已经改善了非常多，变得非常优秀了。 以下是 Golang GC 算</description></item><item><title>Java常用概念</title><link>https://justice.bj.cn/post/14.language/java/java%E5%B8%B8%E7%94%A8%E6%A6%82%E5%BF%B5/</link><pubDate>Fri, 29 Apr 2022 21:42:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/java/java%E5%B8%B8%E7%94%A8%E6%A6%82%E5%BF%B5/</guid><description>Java常用概念 简介 POJO: Plain Old Java Object, 简单java对象，指那些没有继承任何类、也没有实现任何接口，更没有被其它框架侵入的java对象。 JavaBean: 是一种满足一</description></item></channel></rss>