<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>language on Justice的小站</title><link>https://justice.bj.cn/tags/language/</link><description>Recent content in language on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 01 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/tags/language/index.xml" rel="self" type="application/rss+xml"/><item><title>ASM-汇编基础</title><link>https://justice.bj.cn/post/14.language/asm/asm/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/asm/asm/</guid><description>ASM-汇编基础 简介 Intel 和 AT&amp;amp;T 汇编语言区别 1 2 OP-code dst src //Intel语法 Op-code src dst //AT&amp;amp;T语法 Intel Code AT&amp;amp;T Code mov eax,1 movl $1,%eax mov ebx,0ffh movl $0xff,%ebx int 80h int $0x80 mov ebx, eax movl %eax, %ebx</description></item><item><title>awk</title><link>https://justice.bj.cn/post/14.language/shell/awk/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/awk/</guid><description>awk 简介 常用操作 1 2 3 4 5 6 7 8 9 10 ## 打印奇数行 $ awk &amp;#39;NR%2&amp;#39; file ## 打印偶数行 $ awk &amp;#39;!(NR%2)&amp;#39; file $ awk &amp;#39;NR==M, NR==N&amp;#39; filename #输出从M行N行之间的内容$ $ awk &amp;#34;/PARTERN1/,/PARTERN2/&amp;#34; filename #输出从PARTER</description></item><item><title>Bash基础</title><link>https://justice.bj.cn/post/14.language/shell/bash%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/bash%E5%9F%BA%E7%A1%80/</guid><description>Bash基础 简介 特殊变量 1 2 3 4 5 6 7 $# # 参数个数 $@ # 所有参数, 每个参数分别用&amp;#34;&amp;#34;包含 $* # 所有参数，所有参数使用一个外层&amp;#</description></item><item><title>Bash字符串操作</title><link>https://justice.bj.cn/post/14.language/shell/bash%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/bash%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</guid><description>Bash字符串操作 取长度 1 2 3 4 str=&amp;#34;abcd&amp;#34; expr length $str # 4 echo ${#str} # 4 expr &amp;#34;$str&amp;#34; : &amp;#34;.*&amp;#34; # 4 好像一般使用第二种 查找子串的位置 1 2 3 4 5 str=&amp;#34;abc&amp;#34; expr index $str &amp;#34;a&amp;#34; # 1 expr index $str &amp;#34;b&amp;#34; # 2 expr index $str &amp;#34;x&amp;#34;</description></item><item><title>Bash最佳实践</title><link>https://justice.bj.cn/post/14.language/shell/bash%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/bash%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>Bash最佳实践 基本规则 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58</description></item><item><title>C++ 左值引用与右值引用</title><link>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid><description>C++ 左值引用与右值引用 左值、右值 左值： 可以放到等号左边; 可以取地址并且有名字 右值： 不可以放到等号左边的东西就叫右值。 不能取地址的没有名字的东西</description></item><item><title>C++ 队列设计</title><link>https://justice.bj.cn/post/14.language/c++/ulities/current-queue/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/current-queue/</guid><description>C++ 队列设计 简单 Queue 同步 Queue 无锁同步 Queue</description></item><item><title>C++11</title><link>https://justice.bj.cn/post/14.language/c++/c++11/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++11/</guid><description>C++11 左值与右值 可以取地址的，有名字的，非临时的就是左值； 不能取地址的，没有名字的，临时的就是右值； thread_local thread_local 变量是 C++ 11 新引入的一种存储类型,这些变量</description></item><item><title>c++基础</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</guid><description>c++基础 简介 构造析构 默认函数(Defaulted 函数) 1 2 3 4 5 6 Object() {} //默认构造函数 ~Object() {} //析构函数 Object(const Object&amp;amp;) {} //复制构造函数 Object(Object&amp;amp;&amp;amp;) {} //移动构</description></item><item><title>C++字符串</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>C++字符串 std::string C++ 字符串库支持三种通用字符串类型： std::basic_string ——为操作任何字符类型的字符串设计的模板类。 std::basic_string_view (C++17) ——对于字符串子序列的轻量无所有权的只读视</description></item><item><title>C++并发</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%B9%B6%E5%8F%91/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%B9%B6%E5%8F%91/</guid><description>C++并发 多线程 同步 互斥量(mutex) mutex: lock_guard: 严格基于作用域的互斥体所有权包装器, 通过 RAII 机制实现 mutex 的封装，创建 lock_guard 对象时，它试图接收给定互斥的所</description></item><item><title>C++日志</title><link>https://justice.bj.cn/post/14.language/c++/ulities/c++log/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/c++log/</guid><description>C++日志 muduo-AsyncLog 双缓冲异步日志 双缓冲buffer 优化时间 zlog z-log是一个高性能、线程安全、灵活、概念清晰的纯C日志函数库。 g3log G3log 是一个开源、支持</description></item><item><title>c++时钟</title><link>https://justice.bj.cn/post/14.language/c++/c++%E6%97%B6%E9%92%9F/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E6%97%B6%E9%92%9F/</guid><description>c++时钟 简介 ratio 时间间隔(duration) 时间点(time_point) 时钟(clock) system_clock steady_clock High_resolution_clock 参考 https://blog.csdn.net/luotuo44/article/details/39374759#t0</description></item><item><title>ConcurrentHashMap 原理分析</title><link>https://justice.bj.cn/post/14.language/java/concurrenthashmap/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/java/concurrenthashmap/</guid><description>ConcurrentHashMap 原理分析 简介 java 中，hash 表总共有hashmap, hashtable,concurrenthashmap等多种实现方式。hashmap是从</description></item><item><title>context</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%B8%B8%E7%94%A8%E5%BA%93/context/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%B8%B8%E7%94%A8%E5%BA%93/context/</guid><description>context 简介 context 是 go 1.7 引入的，用于在 goroutine 之间传递上下文信息，包括：取消信号、超时时间、截止时间、k-v 等。 context.Context 类型的值可以协调多个 groutine 中的代码执行 “取消”</description></item><item><title>fastcommon</title><link>https://justice.bj.cn/post/14.language/c++/ulities/fastcommon/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/fastcommon/</guid><description>fastcommon 简介 build error Fixes deprecated syscall issue on macOS 10.12 gettid 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include &amp;lt;pthread.h&amp;gt; pid_t GetCurrentThreadId(){ pid_t tid = 0; #if defined(__linux__) tid = syscall(SYS_gettid); #elif defined(__APPLE__) &amp;amp;&amp;amp; defined(__MACH__) tid = syscall(SYS_thread_selfid); uint64_t tid64; pthread_threadid_np(NULL, &amp;amp;tid64); tid = (pid_t)tid64; #endif return tid; }</description></item><item><title>GC</title><link>https://justice.bj.cn/post/14.language/java/gc/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/java/gc/</guid><description>GC 简介 参考 一文了解JVM全部垃圾回收器，从Serial到ZGC - Zack说码 - SegmentFault 思否</description></item><item><title>Go generate</title><link>https://justice.bj.cn/post/14.language/golang/go-generate/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/go-generate/</guid><description>Go generate 简介 go generate命令是在Go语言 1.4 版本里面新添加的一个命令，当运行该命令时，它将扫描与当前包相关的源代码文件，找出所有包含//go</description></item><item><title>Golang Channel</title><link>https://justice.bj.cn/post/14.language/golang/golang-channel/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-channel/</guid><description>Golang Channel 简介 Go语言channel是first-class的，可以被存储到变量中，可以作为参数传递给函数，也可以作为函数的返回值返回 定义 1 2 3 4</description></item><item><title>Golang Runtime</title><link>https://justice.bj.cn/post/14.language/golang/golang-runtime/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-runtime/</guid><description>Golang Runtime 简介 Go调度器的演化 源码分析 Go 程序启动后需要对自身运行时进行初始化，其真正的程序入口由 runtime 包控制。 以 AMD64 架构上的 Linux 和 macOS 为例，分别位于：src</description></item></channel></rss>