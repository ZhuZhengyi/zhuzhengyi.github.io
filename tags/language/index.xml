<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>language on Justice的小站</title><link>https://justice.bj.cn/tags/language/</link><description>Recent content in language on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 06 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/tags/language/index.xml" rel="self" type="application/rss+xml"/><item><title>STL容器</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl%E5%AE%B9%E5%99%A8/</link><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl%E5%AE%B9%E5%99%A8/</guid><description>STL容器 简介 容器库是类模板与算法的汇集，允许程序员简单地访问常见数据结构，例如队列、链表和栈。 有三类容器——顺序容器、关联容器和无序关联容</description></item><item><title>Golang Runtime</title><link>https://justice.bj.cn/post/14.language/golang/golang-runtime/</link><pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-runtime/</guid><description>Golang Runtime 简介 Go调度器的演化 源码分析 Go 程序启动后需要对自身运行时进行初始化，其真正的程序入口由 runtime 包控制。 以 AMD64 架构上的 Linux 和 macOS 为例，分别位于：src</description></item><item><title>Golang 内存管理</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>Golang 内存管理 简介 Golang内存管理采用类似tcmalloc的分级分配算法，主要由MHeap、MCentral、MCache 3 级组成。按分配对</description></item><item><title>Rust 数据类型</title><link>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>Rust 数据类型 简介 Rust的数据类型分为标量(scalar)类型和复合(compound)类型、集合类型。 标量类型(scalar)：表示一个单独</description></item><item><title>Rust宏</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%AE%8F/</link><pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%AE%8F/</guid><description>Rust宏 简介 卫生宏，编译器或运行时会保证宏里面定义的变量或函数不会与外面的冲突，在宏里面以普通方式定义的变量作用域不会跑到宏外面。 rust</description></item><item><title>Rust错误处理</title><link>https://justice.bj.cn/post/14.language/rust/40.rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/40.rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid><description>Rust错误处理 简介 Rust 将错误两个主要类别： 可恢复错误（recoverable） ： 由 Result&amp;lt;T, E&amp;gt; 表示，代表向用户报告错误和重试操作是合理的情况，比如未</description></item><item><title>Golang Channel</title><link>https://justice.bj.cn/post/14.language/golang/golang-channel/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-channel/</guid><description>Golang Channel 简介 Go语言channel是first-class的，可以被存储到变量中，可以作为参数传递给函数，也可以作为函数的返回值返回; chann</description></item><item><title>Rust Trait</title><link>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</guid><description>Rust Trait 简介 trait(特性) 是一组方法的集合，实现trait的类型可以访问该 trait 中定义的其他方法。 任何类型都可以实现 trait； 要点 Trait必</description></item><item><title>Rust 基础</title><link>https://justice.bj.cn/post/14.language/rust/01.rust%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/01.rust%E5%9F%BA%E7%A1%80/</guid><description>Rust 基础 简介 Rust是由Graydon Hoare于2009年发起的一门系统级、编译型编程语言，其设计准则为“安全，并发，实用”，支持函数式，并</description></item><item><title>Rust指针</title><link>https://justice.bj.cn/post/14.language/rust/10.rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/10.rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid><description>Rust指针 简介 Rust中的指针 裸指针 rust裸指针就像C++中的指针一样, 类型 *mut T和 *const t； 使用裸指针是不安全的，Rust不会追踪它指向的内</description></item><item><title>Golang 调试</title><link>https://justice.bj.cn/post/14.language/golang/golang%E8%B0%83%E8%AF%95/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E8%B0%83%E8%AF%95/</guid><description>Golang 调试 简介 Golang程序的调试工具包括gdb调试、go pprof性能调试工具及go gc分析工具。熟练掌握这些工具的基本用法对golang的</description></item><item><title>Golang数据结构之map</title><link>https://justice.bj.cn/post/14.language/golang/go%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bmap/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/go%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bmap/</guid><description>Golang数据结构之map 简介 用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //字面量初始化 hash1 := map[string]int{ &amp;#34;1&amp;#34;: 2, &amp;#34;3&amp;#34;: 4, &amp;#34;5&amp;#34;: 6, } //make初始化 hash2</description></item><item><title>Rust中的Pin</title><link>https://justice.bj.cn/post/14.language/rust/rust-pin/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust-pin/</guid><description>Rust中的Pin 简介 Pin&amp;lt;P&amp;lt;T&amp;gt;&amp;gt;是一个struct, 作用是将P所指向的T在内存中固定住，不能移动。不能通过s</description></item><item><title>Golang内存对齐</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid><description>Golang内存对齐 简介 CPU 始终以字长访问内存， 对齐保证(align guarantee) 结构体的成员变量，第一个成员变量的偏移量为 0。往后的每个成员变量的对齐值</description></item><item><title>Rust 异步编程</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%82%E6%AD%A5/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%82%E6%AD%A5/</guid><description>Rust 异步编程 简介 异步编程经历了三个阶段： 第一阶段：异步回调模式，存在回调地狱问题； 第二阶段：nodejs 中的Promise/Future模式，</description></item><item><title>Rustß迭代器</title><link>https://justice.bj.cn/post/14.language/rust/rust%E8%BF%AD%E4%BB%A3%E5%99%A8/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid><description>Rustß迭代器 简介 迭代器是一个trait； 迭代器（iterator）负责遍历序列中的每一项和决定序列何时结束的逻辑； 迭代器是 惰性的（laz</description></item><item><title>Rust命令工具</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7/</guid><description>Rust命令工具 简介 Cargo cargo test 1 $ cargo test Rustup 参考</description></item><item><title>Rust异步框架之Tokio</title><link>https://justice.bj.cn/post/14.language/rust/rust-tokio/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust-tokio/</guid><description>Rust异步框架之Tokio 简介 参考 tokio 高级用法 - lack 的个人博客</description></item><item><title>Rust模块及包管理</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%8C%85%E7%AE%A1%E7%90%86/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%8C%85%E7%AE%A1%E7%90%86/</guid><description>Rust模块及包管理 简介 Rust程序代码组织分为两个层级： 包(crate)：是一个独立的可编译单元； 模块(mod)：是包内代码组织单元； 包(</description></item><item><title>枚举(Enum)</title><link>https://justice.bj.cn/post/14.language/rust/22.rust-enum/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/22.rust-enum/</guid><description>枚举(Enum) define 1 2 3 4 5 6 7 8 9 10 enum Option&amp;lt;T&amp;gt;{Some(T),None,}implOption{pubfn as_ref(&amp;amp;self)-&amp;gt; Option&amp;lt;&amp;amp;T&amp;gt;//从`&amp;amp;Option&amp;lt;T&amp;gt;`转换为</description></item></channel></rss>