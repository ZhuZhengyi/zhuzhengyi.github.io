<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tree on Justice的小站</title><link>https://justice.bj.cn/tags/tree/</link><description>Recent content in Tree on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 11 Sep 2023 10:17:31 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/tags/tree/index.xml" rel="self" type="application/rss+xml"/><item><title>二叉树的层序遍历</title><link>https://justice.bj.cn/post/leetcode/102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</link><pubDate>Mon, 11 Sep 2023 10:17:31 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</guid><description>二叉树的层序遍历 Category Difficulty Likes Dislikes algorithms Medium (60.88%) 391 - Tags tree | breadth-first-search Companies amazon | apple | bloomberg | facebook | linkedin | microsoft 给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点</description></item><item><title>二叉树的层序遍历 II</title><link>https://justice.bj.cn/post/leetcode/107.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86ii/</link><pubDate>Mon, 11 Sep 2023 10:17:31 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/107.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86ii/</guid><description>二叉树的层序遍历 II Category Difficulty Likes Dislikes algorithms Medium (72.24%) 666 - Tags tree | breadth-first-search Companies Unknown 给你二叉树的根节点 root ，返回其节点值 自底向上的层序遍历 。 （即按从叶子节点所在层到根节点所在的层</description></item><item><title>二叉树展开为链表</title><link>https://justice.bj.cn/post/leetcode/114.%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</link><pubDate>Wed, 09 Aug 2023 20:44:08 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/114.%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</guid><description>二叉树展开为链表 Category Difficulty Likes Dislikes algorithms Medium (68.83%) 340 - Tags tree | depth-first-search Companies microsoft 给定一个二叉树，原地将它展开为一个单链表。 例如，给定二叉树 1 2 3 4 5 1 / \ 2 5 / \ \ 3 4 6 将其</description></item><item><title>二叉树的最小深度</title><link>https://justice.bj.cn/post/leetcode/111.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</link><pubDate>Wed, 09 Aug 2023 20:44:08 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/111.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</guid><description>二叉树的最小深度 Category Difficulty Likes Dislikes algorithms Easy (49.24%) 656 - Tags tree | depth-first-search | breadth-first-search Companies Unknown 给定一个二叉树，找出其最小深度。 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。 说</description></item><item><title>平衡二叉树</title><link>https://justice.bj.cn/post/leetcode/110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Wed, 09 Aug 2023 08:26:16 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>平衡二叉树 Category Difficulty Likes Dislikes algorithms Easy (56.52%) 872 - Tags tree | depth-first-search Companies bloomberg 给定一个二叉树，判断它是否是高度平衡的二叉树。 本题中，一棵高度平衡二叉树定义为： 一个二叉树每个节点 的</description></item><item><title>将有序数组转换为二叉搜索树</title><link>https://justice.bj.cn/post/leetcode/108.%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link><pubDate>Tue, 08 Aug 2023 12:18:45 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/108.%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid><description>将有序数组转换为二叉搜索树 Category Difficulty Likes Dislikes algorithms Easy (76.25%) 917 - Tags tree | depth-first-search Companies airbnb 给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 高度平衡 二叉搜索树。 高</description></item><item><title>恢复二叉搜索树</title><link>https://justice.bj.cn/post/leetcode/99.%E6%81%A2%E5%A4%8D%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link><pubDate>Tue, 08 Aug 2023 08:13:14 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/99.%E6%81%A2%E5%A4%8D%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid><description>恢复二叉搜索树 Category Difficulty Likes Dislikes algorithms Medium (60.48%) 708 - Tags tree | depth-first-search Companies Unknown 给你二叉搜索树的根节点 root ，该树中的 恰好 两个节点的值被错误地交换。请在不改变其结构的情况下，恢复这</description></item><item><title>不同的二叉搜索树</title><link>https://justice.bj.cn/post/leetcode/96.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link><pubDate>Mon, 07 Aug 2023 08:47:08 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/96.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid><description>不同的二叉搜索树 Category Difficulty Likes Dislikes algorithms Medium (69.94%) 1502 - Tags dynamic-programming | tree Companies snapchat 给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的</description></item><item><title>验证二叉搜索树</title><link>https://justice.bj.cn/post/leetcode/98.%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link><pubDate>Mon, 07 Aug 2023 08:47:08 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/98.%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid><description>验证二叉搜索树 Category Difficulty Likes Dislikes algorithms Medium (35.36%) 1387 - Tags tree | depth-first-search Companies amazon | bloomberg | facebook | microsoft 给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。 有效 二叉搜索树定义如下：</description></item><item><title>对称二叉树</title><link>https://justice.bj.cn/post/leetcode/101.%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Sun, 06 Aug 2023 09:45:20 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/101.%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>对称二叉树 Category Difficulty Likes Dislikes algorithms Easy (56.66%) 1665 - Tags tree | depth-first-search | breadth-first-search Companies bloomberg | linkedin | microsoft 给定一个二叉树，检查它是否是镜像对称的。 例如，二叉树 [1,2,2,3,4,4,3] 是对称的。 1 2 3 4 5 1 / \ 2 2 / \</description></item><item><title>相同的树</title><link>https://justice.bj.cn/post/leetcode/100.%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/</link><pubDate>Sun, 06 Aug 2023 07:33:12 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/100.%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/</guid><description>相同的树 Category Difficulty Likes Dislikes algorithms Easy (59.91%) 753 - Tags tree | depth-first-search Companies bloomberg 给你两棵二叉树的根节点 p 和 q ，编写一个函数来检验这两棵树是否相同。 如果两个树在结构上相同，并且节点具有</description></item><item><title>TrieTree(字典树)</title><link>https://justice.bj.cn/post/12.data_struct/tree/trietree/</link><pubDate>Fri, 16 Jun 2023 21:45:26 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/trietree/</guid><description>TrieTree(字典树) 简介 Trie Tree,前缀树或字典树，是一种有序树，用于保存关联数组。 其中的键通常是字符串。 与二叉查找树不同，键不是直接</description></item><item><title>基数树(Radix Tree)</title><link>https://justice.bj.cn/post/12.data_struct/tree/radixtree/</link><pubDate>Fri, 16 Jun 2023 21:45:26 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/radixtree/</guid><description>基数树(Radix Tree) 简介 Radix tree(也被称为 radix trie，或者 compact prefix tree)是一种空间优化的前缀树(prefix tree)数据结构。 针对这对这</description></item><item><title>前序遍历构造二叉搜索树</title><link>https://justice.bj.cn/post/leetcode/1008.%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link><pubDate>Wed, 15 Mar 2023 13:30:59 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/1008.%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid><description>前序遍历构造二叉搜索树 Category Difficulty Likes Dislikes algorithms Medium (72.08%) 248 - Tags dynamic-programming | tree | depth-first-search Companies Unknown 给定一个整数数组，它表示BST(即 二叉搜索树 )的 先****序遍历 ，构造树并返回其根。</description></item><item><title>二叉树的右视图</title><link>https://justice.bj.cn/post/leetcode/199.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/</link><pubDate>Wed, 15 Mar 2023 09:42:25 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/199.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/</guid><description>二叉树的右视图 Category Difficulty Likes Dislikes algorithms Medium (65.76%) 827 - Tags tree | depth-first-search | breadth-first-search Companies amazon 给定一个二叉树的 根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能</description></item><item><title>二叉搜索树迭代器</title><link>https://justice.bj.cn/post/leetcode/173.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8/</link><pubDate>Sun, 12 Mar 2023 09:46:04 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/173.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid><description>二叉搜索树迭代器 Category Difficulty Likes Dislikes algorithms Medium (80.79%) 582 - Tags stack | tree | design Companies facebook | google | linkedin | microsoft 实现一个二叉搜索树迭代器类BSTIterator ，表示一个按中序遍历二叉搜索树</description></item><item><title>输出二叉树</title><link>https://justice.bj.cn/post/leetcode/655.%E8%BE%93%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Sun, 12 Mar 2023 09:46:04 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/655.%E8%BE%93%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>输出二叉树 Category Difficulty Likes Dislikes algorithms Medium (69.52%) 207 - Tags tree Companies Unknown 给你一棵二叉树的根节点 root ，请你构造一个下标从 0 开始、大小为 m x n 的字符串矩阵 res ，用以表示树的 格式化布局 。</description></item><item><title>奇偶跳</title><link>https://justice.bj.cn/post/leetcode/975.%E5%A5%87%E5%81%B6%E8%B7%B3/</link><pubDate>Wed, 08 Mar 2023 20:30:23 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/975.%E5%A5%87%E5%81%B6%E8%B7%B3/</guid><description>奇偶跳 Category Difficulty Likes Dislikes algorithms Hard (47.96%) 163 - Tags tree | recursion Companies Unknown 给定一个整数数组 A，你可以从某一起始索引出发，跳跃一定次数。在你跳跃的过程中，第 1、3、5&amp;hellip</description></item><item><title>BTree, B+Tree, B*Tree</title><link>https://justice.bj.cn/post/12.data_struct/tree/b-tree/</link><pubDate>Wed, 08 Mar 2023 19:49:11 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/b-tree/</guid><description>BTree, B+Tree, B*Tree BTree B-Tree(B树)又叫平衡多路查找树(Balance Multiple Search Tree); 是一种平衡多叉树； m阶B-Tree的每个节点最多有m个子节点； 特性 一棵 m</description></item><item><title>B-Link-Tree</title><link>https://justice.bj.cn/post/12.data_struct/tree/b-link-tree/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/b-link-tree/</guid><description>B-Link-Tree 简介 B-Link-Tree是B+ Tree的一个变种；优化了B+ Tree结构调整时的锁粒度，提升并发度，保持高并发下的性能稳定 在中间节点增加</description></item></channel></rss>