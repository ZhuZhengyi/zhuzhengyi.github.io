<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>data_struct on Justice的小站</title><link>https://justice.bj.cn/tags/data_struct/</link><description>Recent content in data_struct on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 07 Mar 2024 11:58:54 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/tags/data_struct/index.xml" rel="self" type="application/rss+xml"/><item><title>基础数据结构</title><link>https://justice.bj.cn/post/12.data_struct/00.%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/00.%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>基础数据结构 简介 数据结构是用来描述数据在计算机内存中组织方式的形式。 Bit/Byte bit 是内存中最小的数据单位，为一个数据位； 8 个 bit 组成一个 byte。 字符串</description></item><item><title>并查集</title><link>https://justice.bj.cn/post/12.data_struct/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid><description>并查集 简介 实现 1 参考</description></item><item><title>数组</title><link>https://justice.bj.cn/post/12.data_struct/02.%E6%95%B0%E7%BB%84/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/02.%E6%95%B0%E7%BB%84/</guid><description>数组 简介 数组是同类元素的在内存中的连续存储结构。 数组中的每一个元素类型相同，所占存储空间为一个定长，因此数组中的每一个元素地址=数组头地址+</description></item><item><title>跳表(skiplist)</title><link>https://justice.bj.cn/post/12.data_struct/20.%E8%B7%B3%E8%A1%A8/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/20.%E8%B7%B3%E8%A1%A8/</guid><description>跳表(skiplist) 简介 跳表(SkipList)由 William Pugh 于 1990 年发明； 是平衡树的一种替代的数据结构； 和红黑树不相同的是，跳表对于树的平衡的实</description></item><item><title>队列</title><link>https://justice.bj.cn/post/12.data_struct/04.%E9%98%9F%E5%88%97/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/04.%E9%98%9F%E5%88%97/</guid><description>队列 简介 队列是一种 参考</description></item><item><title>B-Tree, B+Tree, B*Tree</title><link>https://justice.bj.cn/post/12.data_struct/tree/b-tree/</link><pubDate>Sat, 30 Sep 2023 18:21:10 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/b-tree/</guid><description>B-Tree, B+Tree, B*Tree B树(B-Tree) B-Tree是1972年由Rudolf Bayer和Ed M. McCreight在Boeing Research Labs发明的一种数据结</description></item><item><title>TrieTree(字典树)</title><link>https://justice.bj.cn/post/12.data_struct/tree/trietree/</link><pubDate>Fri, 16 Jun 2023 21:45:26 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/trietree/</guid><description>TrieTree(字典树) 简介 Trie Tree,前缀树或字典树，是一种有序树，用于保存关联数组。 其中的键通常是字符串。 与二叉查找树不同，键不是直接</description></item><item><title>基数树(Radix Tree)</title><link>https://justice.bj.cn/post/12.data_struct/tree/radixtree/</link><pubDate>Fri, 16 Jun 2023 21:45:26 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/radixtree/</guid><description>基数树(Radix Tree) 简介 Radix tree(也被称为 radix trie，或者 compact prefix tree)是一种空间优化的前缀树(prefix tree)数据结构。 针对这对这</description></item><item><title>浮点数</title><link>https://justice.bj.cn/post/12.data_struct/%E6%B5%AE%E7%82%B9%E6%95%B0/</link><pubDate>Sat, 20 May 2023 10:47:12 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/%E6%B5%AE%E7%82%B9%E6%95%B0/</guid><description>浮点数 简介 浮点数是计算机内部使用科学记数法表示高范围实数的一种表示方法。相对于整形数表示法，浮点数可以表示数更大的范围，但是拥有更低的精度。</description></item><item><title>位/字节(Bit/Byte)</title><link>https://justice.bj.cn/post/12.data_struct/01.%E6%AF%94%E7%89%B9/</link><pubDate>Wed, 31 Aug 2022 10:46:44 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/01.%E6%AF%94%E7%89%B9/</guid><description>位/字节(Bit/Byte) 简介 比特(bit) bit是内存中最小的数据单位，为一个数据位； 8个bit组成一个byte。 字节 字符串匹配 字符串转</description></item><item><title>B-Link-Tree</title><link>https://justice.bj.cn/post/12.data_struct/tree/b-link-tree/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/b-link-tree/</guid><description>B-Link-Tree 简介 B-Link-Tree是B+ Tree的一个变种；优化了B+ Tree结构调整时的锁粒度，提升并发度，保持高并发下的性能稳定 在中间节点增加</description></item><item><title>Cap'n Proto</title><link>https://justice.bj.cn/post/12.data_struct/capn-proto/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/capn-proto/</guid><description>Cap&amp;rsquo;n Proto 简介 Cap’n Proto 是非常快速的数据交换格式和基于容量的 RPC 系统， Cap&amp;rsquo;n Proto没有任何encoding/decoding步骤，Cap&amp;rsqu</description></item><item><title>MassTree</title><link>https://justice.bj.cn/post/12.data_struct/tree/masstree/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/masstree/</guid><description>MassTree 简介 masstree 来源于 2012 年发表的论文(Cache craftiness for fast multicore key-value storage)，可以理解为 B+ Tree 和 Radix Tree 的混合体，即将键切分成多个部分，每个部分为一个节点；</description></item><item><title>Merkle Tree</title><link>https://justice.bj.cn/post/12.data_struct/tree/merkle-tree/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/merkle-tree/</guid><description>Merkle Tree 简介 Merkle Tree 是一种 Hash Tree，由 Ralph Merkle 在 1979 年发明。 Merkle Tree 的每个非叶节点通过其子节点的标记或者值（子节点为叶节点）的哈希值来进行标注，为大型的数据</description></item><item><title>ProtoBuf</title><link>https://justice.bj.cn/post/12.data_struct/protobuf/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/protobuf/</guid><description>ProtoBuf 简介 protocol buffers 是一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于（数据）通信协议、数据存储等。 特点 语言无关、平台无关。即 ProtoBuf 支持 Ja</description></item><item><title>TAILQ-双向有尾队列</title><link>https://justice.bj.cn/post/12.data_struct/tailq/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tailq/</guid><description>TAILQ-双向有尾队列 简介 TAILQ(双向有尾队列)是 FreeBSD/linux 内核对双向队列操作的一种抽象，在/usr/include/sys/queue.h 文</description></item><item><title>分布式哈希表(DHT)</title><link>https://justice.bj.cn/post/12.data_struct/40.%E5%88%86%E5%B8%83%E5%BC%8F%E5%93%88%E5%B8%8C%E8%A1%A8dht/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/40.%E5%88%86%E5%B8%83%E5%BC%8F%E5%93%88%E5%B8%8C%E8%A1%A8dht/</guid><description>分布式哈希表(DHT) 简介 分布式哈希表(DHT, Distributed Hash Table)是分布式系统中，用来将一个键（key）的集合分散到所有节点。这里的节点类似哈</description></item><item><title>日志结构合并树(LSM-Tree)</title><link>https://justice.bj.cn/post/12.data_struct/tree/lsm-tree/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/lsm-tree/</guid><description>日志结构合并树(LSM-Tree) 简介 LSM-Tree全称 Log Structured Merge Tree，是 Google 在 2006 年开源其 BigTable 中引入的一种数据结构。 一种分层，有序，面向磁盘的</description></item><item><title>树状数组(BIT)</title><link>https://justice.bj.cn/post/12.data_struct/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</guid><description>树状数组(BIT) 简介 树状数组或二元索引树（英语：Binary Indexed Tree），又以其发明者命名为 FenwickFenwick 树。最早由 PeterM.FenwickPeterM.Fenwick 于 1994 年以 《A New Data Structure for Cumulative Frequency Tabl</description></item><item><title>红黑树(RB-Tree)</title><link>https://justice.bj.cn/post/12.data_struct/tree/rb-tree/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/rb-tree/</guid><description>红黑树(RB-Tree) 定义 红黑树是一种二叉平衡树。 性质 每个节点要么是黑色，要么是红色； Root 节点是黑色； 每个叶子节点（NIL）是黑色； 每个红色</description></item></channel></rss>