<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>data_struct on Justice的小站</title><link>https://justice.bj.cn/tags/data_struct.html</link><description>Recent content in data_struct on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 21 Mar 2022 09:44:56 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/tags/data_struct/index.xml" rel="self" type="application/rss+xml"/><item><title>B-Link-Tree</title><link>https://justice.bj.cn/post/12.data_struct/tree/b-link-tree.html</link><pubDate>Mon, 21 Mar 2022 09:44:56 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/b-link-tree.html</guid><description>B-Link-Tree 简介 B-Link-Tree是B+ Tree的一个变种；优化了B+ Tree结构调整时的锁粒度，提升并发度，保持高并发下的性能稳定 在中间节点增加</description></item><item><title>B-Tree,_B+Tree,_B*Tree</title><link>https://justice.bj.cn/post/12.data_struct/tree/b-tree.html</link><pubDate>Mon, 21 Mar 2022 09:44:56 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/b-tree.html</guid><description>B-Tree, B+Tree, B*Tree B-Tree B-Tree(B树)又叫平衡多路查找树(Balance Multiple Search Tree); 是一种平衡多叉树； m阶B-Tree的每个节点最多有m个子节点； 特性 一棵 m</description></item><item><title>红黑树(RB-Tree)</title><link>https://justice.bj.cn/post/12.data_struct/tree/rb-tree.html</link><pubDate>Mon, 21 Mar 2022 09:44:56 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/rb-tree.html</guid><description>红黑树(RB-Tree) 定义 红黑树是一种二叉平衡树。 性质 每个节点要么是黑色，要么是红色； Root 节点是黑色； 每个叶子节点（NIL）是黑色； 每个红色</description></item><item><title>MassTree</title><link>https://justice.bj.cn/post/12.data_struct/tree/masstree.html</link><pubDate>Tue, 11 Jan 2022 20:36:42 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/masstree.html</guid><description>MassTree 简介 masstree 来源于 2012 年发表的论文(Cache craftiness for fast multicore key-value storage)，可以理解为 B+ Tree 和 Radix Tree 的混合体，即将键切分成多个部分，每个部分为一个节点；</description></item><item><title>Cap'n_Proto</title><link>https://justice.bj.cn/post/12.data_struct/capn-proto.html</link><pubDate>Sun, 10 Oct 2021 15:57:04 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/capn-proto.html</guid><description>Cap&amp;rsquo;n Proto 简介 Cap’n Proto 是非常快速的数据交换格式和基于容量的 RPC 系统， Cap&amp;rsquo;n Proto没有任何encoding/decoding步骤，Cap&amp;rsqu</description></item><item><title>protobuf+RPC</title><link>https://justice.bj.cn/post/12.data_struct/protobuf+rpc.html</link><pubDate>Sun, 10 Oct 2021 15:57:04 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/protobuf+rpc.html</guid><description>protobuf+RPC 简介 protobuf是是一种google定义的结构化数据格式，与json，XML功能相似的一种结构化数据格式， 用于在网络通讯间的数据序列化</description></item><item><title>Disruptor-_一种高效无锁内存队列</title><link>https://justice.bj.cn/post/12.data_struct/%E9%AB%98%E6%95%88%E6%97%A0%E9%94%81%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97disruptor.html</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/%E9%AB%98%E6%95%88%E6%97%A0%E9%94%81%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97disruptor.html</guid><description>Disruptor: 一种高效无锁内存队列 简介 Disruptor 是 LMAX 公司开源的一个高效的内存无锁队列。</description></item><item><title>Kafka_时间轮算法</title><link>https://justice.bj.cn/post/12.data_struct/%E6%97%B6%E9%97%B4%E8%BD%AE.html</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/%E6%97%B6%E9%97%B4%E8%BD%AE.html</guid><description>Kafka 时间轮算法 Kafka 中存在一些定时任务(DelayedOperation)，如 DelayedFetch、DelayedProduce、Delaye</description></item><item><title>ProtoBuf</title><link>https://justice.bj.cn/post/12.data_struct/protobuf.html</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/protobuf.html</guid><description>ProtoBuf 简介 protocol buffers 是一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于（数据）通信协议、数据存储等。 特点 语言无关、平台无关。即 ProtoBuf 支持 Ja</description></item><item><title>RoaringBitmap-高效压缩位图的原理与应用</title><link>https://justice.bj.cn/post/12.data_struct/31.roaringbitmap.html</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/31.roaringbitmap.html</guid><description>RoaringBitmap:高效压缩位图的原理与应用 简介 RoaringBitmap（简称为 RBM）是 2016 年由 S. Chambi、D. Lemire、</description></item><item><title>TAILQ-双向有尾队列</title><link>https://justice.bj.cn/post/12.data_struct/tailq.html</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tailq.html</guid><description>TAILQ-双向有尾队列 简介 TAILQ(双向有尾队列)是 FreeBSD/linux 内核对双向队列操作的一种抽象，在/usr/include/sys/queue.h 文</description></item><item><title>分布式哈希表(DHT)</title><link>https://justice.bj.cn/post/12.data_struct/40.%E5%88%86%E5%B8%83%E5%BC%8F%E5%93%88%E5%B8%8C%E8%A1%A8dht.html</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/40.%E5%88%86%E5%B8%83%E5%BC%8F%E5%93%88%E5%B8%8C%E8%A1%A8dht.html</guid><description>分布式哈希表(DHT) 简介 分布式哈希表(DHT, Distributed Hash Table)是分布式系统中，用来将一个键（key）的集合分散到所有节点。这里的节点类似哈</description></item><item><title>基础数据结构</title><link>https://justice.bj.cn/post/12.data_struct/00.%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/00.%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</guid><description>基础数据结构 简介 数据结构是用来描述数据在计算机内存中组织方式的形式。 Bit/Byte bit 是内存中最小的数据单位，为一个数据位； 8 个 bit 组成一个 byte。 字符串</description></item><item><title>数组</title><link>https://justice.bj.cn/post/12.data_struct/02.%E6%95%B0%E7%BB%84.html</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/02.%E6%95%B0%E7%BB%84.html</guid><description>数组 简介 数组是同类元素的在内存中的连续存储结构。 数组中的每一个元素类型相同，所占存储空间为一个定长，因此数组中的每一个元素地址=数组头地址+</description></item><item><title>树(Tree)</title><link>https://justice.bj.cn/post/12.data_struct/05.%E6%A0%91.html</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/05.%E6%A0%91.html</guid><description>树(Tree) 简介 二叉树 二叉树直径 平衡二叉树(AVL Tree) 红黑树(RB Tree) B 树 B+树 线段树 字典树(Trie Tree)</description></item><item><title>树状数组(BIT)</title><link>https://justice.bj.cn/post/12.data_struct/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84.html</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84.html</guid><description>树状数组(BIT) 简介 树状数组或二元索引树（英语：Binary Indexed Tree），又以其发明者命名为 FenwickFenwick 树。最早由 PeterM.FenwickPeterM.Fenwick 于 1994 年以 《A New Data Structure for Cumulative Frequency Tabl</description></item><item><title>跳表(skiplist)</title><link>https://justice.bj.cn/post/12.data_struct/20.%E8%B7%B3%E8%A1%A8.html</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/20.%E8%B7%B3%E8%A1%A8.html</guid><description>跳表(skiplist) 简介 跳表(SkipList)由 William Pugh 于 1990 年发明。他在 Communications of the ACM June 1990, 33(6) 668-676 上发表了 Skip lists: a probabilistic alternative to balanced trees，在该论文中详细解</description></item><item><title>队列_Queue</title><link>https://justice.bj.cn/post/12.data_struct/04.%E9%98%9F%E5%88%97-%E6%A0%88.html</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/04.%E9%98%9F%E5%88%97-%E6%A0%88.html</guid><description>队列 Queue 简介 队列是一种 参考</description></item><item><title>Bit/Byte</title><link>https://justice.bj.cn/post/12.data_struct/01.%E6%AF%94%E7%89%B9.html</link><pubDate>Sun, 26 Sep 2021 20:31:22 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/01.%E6%AF%94%E7%89%B9.html</guid><description>Bit/Byte title: 比特/字节 description: toc: true authors: [] tags: [] categories: [] series: [] Bit/Byte bit bit是内存中最小的数据单位，为一个数据位； 8个bit组成一个byte。 字符串相关算法 字符串匹配 字符</description></item><item><title>TrieTree(字典树)</title><link>https://justice.bj.cn/post/12.data_struct/tree/trietree.html</link><pubDate>Sat, 04 Sep 2021 11:58:06 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/trietree.html</guid><description>TrieTree(字典树) 简介 Trie Tree前缀树或字典树，是一种有序树，用于保存关联数组。 其中的键通常是字符串。与二叉查找树不同，键不是直接保</description></item></channel></rss>