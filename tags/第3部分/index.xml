<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>第3部分 on Justice的小站</title><link>https://justice.bj.cn/tags/%E7%AC%AC3%E9%83%A8%E5%88%86/</link><description>Recent content in 第3部分 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 02 Jan 2024 18:45:57 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/tags/%E7%AC%AC3%E9%83%A8%E5%88%86/index.xml" rel="self" type="application/rss+xml"/><item><title>一个新进程的诞生（七）透过 fork 来看进程的内存规划</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/27.fork%E4%B8%AD%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E8%A7%84%E5%88%92%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 02 Jan 2024 18:45:57 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/27.fork%E4%B8%AD%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E8%A7%84%E5%88%92%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>一个新进程的诞生（七）透过 fork 来看进程的内存规划 书接上回，上回书咱们说到，fork 函数为新的进程（进程 1）申请了槽位，并把全部 task_struct 结构的值都从进</description></item><item><title>一个新进程的诞生（三）如果让你来设计进程调度</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/23.%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E6%9D%A5%E8%AE%BE%E8%AE%A1%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</link><pubDate>Tue, 02 Jan 2024 18:45:57 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/23.%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E6%9D%A5%E8%AE%BE%E8%AE%A1%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid><description>一个新进程的诞生（三）如果让你来设计进程调度 书接上回，上回书咱们说到，操作系统通过 move_to_user_mode 方法，通过伪造一个中断和中断返回，巧妙地从内核态切换到了</description></item><item><title>一个新进程的诞生 完结撒花</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E9%A1%BE/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E9%A1%BE/</guid><description>一个新进程的诞生 完结撒花 整个第三部分，我们用前四回的内容讲述了进程调度机制，又用后三回内容讲述了 fork 函数的全部细节。先看进程调度机制。 进程调度</description></item><item><title>一个新进程的诞生（四）从一次定时器滴答来看进程调度</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/24.%E4%BB%8E%E4%B8%80%E6%AC%A1%E5%AE%9A%E6%97%B6%E5%99%A8%E6%BB%B4%E7%AD%94%E6%9D%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/24.%E4%BB%8E%E4%B8%80%E6%AC%A1%E5%AE%9A%E6%97%B6%E5%99%A8%E6%BB%B4%E7%AD%94%E6%9D%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid><description>一个新进程的诞生（四）从一次定时器滴答来看进程调度 书接上回，上回书咱们说到，我们完全由自己从零到有设计出了进程调度的大体流程，以及它需要的数</description></item><item><title>一个新进程的诞生（一）先整体看一下</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/21.%E6%96%B0%E8%BF%9B%E7%A8%8B%E8%AF%9E%E7%94%9F%E5%85%A8%E5%B1%80%E6%A6%82%E8%BF%B0/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/21.%E6%96%B0%E8%BF%9B%E7%A8%8B%E8%AF%9E%E7%94%9F%E5%85%A8%E5%B1%80%E6%A6%82%E8%BF%B0/</guid><description>一个新进程的诞生（一）先整体看一下 一个新进程的诞生，从操作系统的源码角度来说，其实就两行代码。而关于创建进程的重点，其实就一行代码，就是大名</description></item><item><title>一个新进程的诞生（二）从内核态到用户态</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/22.%E4%BB%8E%E5%86%85%E6%A0%B8%E6%80%81%E5%88%87%E6%8D%A2%E5%88%B0%E7%94%A8%E6%88%B7%E6%80%81/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/22.%E4%BB%8E%E5%86%85%E6%A0%B8%E6%80%81%E5%88%87%E6%8D%A2%E5%88%B0%E7%94%A8%E6%88%B7%E6%80%81/</guid><description>一个新进程的诞生（二）从内核态到用户态 书接上回，上回书咱们从整体上鸟瞰了一下第三部分要讲的内容，代码上就是还差四句话就走到了 main 函数的尽头。 1</description></item><item><title>一个新进程的诞生（五）通过 fork 看一次系统调用</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/25.%E9%80%9A%E8%BF%87fork%E7%9C%8B%E4%B8%80%E6%AC%A1%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/25.%E9%80%9A%E8%BF%87fork%E7%9C%8B%E4%B8%80%E6%AC%A1%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B/</guid><description>一个新进程的诞生（五）通过 fork 看一次系统调用 书接上回，上回书咱们说到，我们通过自己设计了一遍进程调度，又看了一次 Linux 0.11 的进程调度的全过程。有了这</description></item><item><title>一个新进程的诞生（六）fork 中进程基本信息的复制</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/26.fork%E4%B8%AD%E8%BF%9B%E7%A8%8B%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E7%9A%84%E5%A4%8D%E5%88%B6/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/26.fork%E4%B8%AD%E8%BF%9B%E7%A8%8B%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E7%9A%84%E5%A4%8D%E5%88%B6/</guid><description>一个新进程的诞生（六）fork 中进程基本信息的复制 书接上回，上回书咱们说到，fork 触发系统调用中断，最终调用到了 sys_fork 函数，借这个过程介绍了一</description></item><item><title>写时复制就这么几行代码</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/30.%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6%E5%B0%B1%E8%BF%99%E4%B9%88%E5%87%A0%E8%A1%8C%E4%BB%A3%E7%A0%81/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/30.%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6%E5%B0%B1%E8%BF%99%E4%B9%88%E5%87%A0%E8%A1%8C%E4%BB%A3%E7%A0%81/</guid><description>写时复制就这么几行代码 这里讲的是 Linux 内核里的写时复制原理。 写时复制的原理网上讲述的文章很多，今天来一篇很直接的文章，通过看看 Linux 0.11 这个最简单的操</description></item><item><title>我居然会认为权威书籍写错了...</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/28.%E6%88%91%E5%B1%85%E7%84%B6%E4%BC%9A%E8%AE%A4%E4%B8%BA%E6%9D%83%E5%A8%81%E4%B9%A6%E7%B1%8D%E5%86%99%E9%94%99%E4%BA%86/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/28.%E6%88%91%E5%B1%85%E7%84%B6%E4%BC%9A%E8%AE%A4%E4%B8%BA%E6%9D%83%E5%A8%81%E4%B9%A6%E7%B1%8D%E5%86%99%E9%94%99%E4%BA%86/</guid><description>我居然会认为权威书籍写错了&amp;hellip; 在 Linux 0.11 的设计中，进程 0 创建进程 1 时，复制了 160 个页表项。进程 1 创建进程 2 时，复制了 1024 个页表项。 之后进</description></item></channel></rss>