<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>language c++ on Justice的小站</title><link>https://justice.bj.cn/tags/language-c++/</link><description>Recent content in language c++ on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 28 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/tags/language-c++/index.xml" rel="self" type="application/rss+xml"/><item><title>C++ 左值引用与右值引用</title><link>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid><description>C++ 左值引用与右值引用 左值、右值 左值： 可以放到等号左边; 可以取地址并且有名字 右值： 不可以放到等号左边的东西就叫右值。 不能取地址的没有名字的东西</description></item><item><title>C++11</title><link>https://justice.bj.cn/post/14.language/c++/c++11/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++11/</guid><description>C++11 左值与右值 可以取地址的，有名字的，非临时的就是左值； 不能取地址的，没有名字的，临时的就是右值； thread_local thread_local 变量是 C++ 11 新引入的一种存储类型,这些变量</description></item><item><title>c++基础</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</guid><description>c++基础 简介 构造析构 默认函数(Defaulted 函数) 1 2 3 4 5 6 Object() {} //默认构造函数 ~Object() {} //析构函数 Object(const Object&amp;amp;) {} //复制构造函数 Object(Object&amp;amp;&amp;amp;) {} //移动构</description></item><item><title>C++字符串</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>C++字符串 std::string C++ 字符串库支持三种通用字符串类型： std::basic_string ——为操作任何字符类型的字符串设计的模板类。 std::basic_string_view (C++17) ——对于字符串子序列的轻量无所有权的只读视</description></item><item><title>C++并发</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%B9%B6%E5%8F%91/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%B9%B6%E5%8F%91/</guid><description>C++并发 多线程 同步 互斥量(mutex) mutex: lock_guard: 严格基于作用域的互斥体所有权包装器, 通过 RAII 机制实现 mutex 的封装，创建 lock_guard 对象时，它试图接收给定互斥的所</description></item><item><title>c++时钟</title><link>https://justice.bj.cn/post/14.language/c++/c++%E6%97%B6%E9%92%9F/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E6%97%B6%E9%92%9F/</guid><description>c++时钟 简介 ratio 时间间隔(duration) 时间点(time_point) 时钟(clock) system_clock steady_clock High_resolution_clock 参考 https://blog.csdn.net/luotuo44/article/details/39374759#t0</description></item><item><title>动态内存管理</title><link>https://justice.bj.cn/post/14.language/c++/%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>动态内存管理 智能指针 智能指针使得自动、异常安全的对象生存期管理可行。 定义于头文件 &amp;lt;memory&amp;gt; 指针类别 unique_ptr 拥有独有对象所有权语义的智能指针 (类模板) shared_ptr (C++11) 拥</description></item></channel></rss>