<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Memory Management on Justice的小站</title><link>https://justice.bj.cn/tags/memory-management/</link><description>Recent content in Memory Management on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 22 Jan 2020 18:31:30 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/tags/memory-management/index.xml" rel="self" type="application/rss+xml"/><item><title>内存分配器设计</title><link>https://justice.bj.cn/post/09.pub/writing-an-os-in-rust/11-allocator-designs/</link><pubDate>Wed, 22 Jan 2020 18:31:30 +0000</pubDate><guid>https://justice.bj.cn/post/09.pub/writing-an-os-in-rust/11-allocator-designs/</guid><description>这篇文章介绍了如何从头开始实现堆分配器。它提出并讨论了不同的分配器设计，包括Bump分配，基于链表的分配和固定大小的块分配。 对于这三种设计中的每一种，我们将创建一个可用于我们的内核的基本实现。</description></item><item><title>分配堆内存</title><link>https://justice.bj.cn/post/09.pub/writing-an-os-in-rust/10-heap-allocation/</link><pubDate>Sun, 29 Sep 2019 09:45:40 +0000</pubDate><guid>https://justice.bj.cn/post/09.pub/writing-an-os-in-rust/10-heap-allocation/</guid><description>这篇文章为我们的内核增加了对堆分配的支持。 首先，它介绍了动态内存，并展示了借用检查器如何防止常见的分配错误。 然后，它实现Rust的基本分配接口，创建一个堆内存区域，并设置一个分配器crate。 在这篇文章的结尾，内置分配crate的所有分配和收集类型将对我们的内核可用。</description></item><item><title>实现分页</title><link>https://justice.bj.cn/post/09.pub/writing-an-os-in-rust/09-paging-implementation/</link><pubDate>Wed, 25 Sep 2019 07:43:38 +0000</pubDate><guid>https://justice.bj.cn/post/09.pub/writing-an-os-in-rust/09-paging-implementation/</guid><description>这篇文章展示了如何在我们的内核中实现分页支持。 首先探讨了使内核可以访问物理页表帧的各种技术，并讨论了它们各自的优缺点。 然后，它实现了地址转换功能和创建新地址映射的功能。</description></item><item><title>介绍分页</title><link>https://justice.bj.cn/post/09.pub/writing-an-os-in-rust/08-introduction-to-paging/</link><pubDate>Thu, 31 Jan 2019 18:20:38 +0000</pubDate><guid>https://justice.bj.cn/post/09.pub/writing-an-os-in-rust/08-introduction-to-paging/</guid><description>这篇文章介绍了分页，这是一种非常常见的内存管理方案，我们也将将其用于我们的操作系统。 它解释了为什么需要内存隔离，分段如何工作，虚拟内存是什么，以及分页如何解决内存碎片问题。 它还探讨了x86_64架构上多级页表的布局。</description></item></channel></rss>