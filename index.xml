<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Justice的小站</title><link>https://justice.bj.cn/</link><description>Recent content on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 28 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>Justice's Blog</title><link>https://justice.bj.cn/homepage/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/about/</guid><description>&lt;h2 id="self-introduction">Self Introduction&lt;/h2>
&lt;p>Cras ex dui, tristique a libero eget, consectetur semper ligula. Nunc augue arcu, malesuada a nisi et, molestie finibus metus. Sed lacus odio, ultricies a nisl vitae, sollicitudin tempor ipsum. Vivamus quis feugiat arcu. Sed mi nunc, efficitur quis tellus vitae, posuere mattis metus. Phasellus in mattis dui. Nullam blandit, augue non ullamcorper dapibus, lacus dui molestie massa, in iaculis purus lectus eu lectus. Duis hendrerit lacinia tellus, sit amet feugiat dolor placerat id. Aenean ac velit massa. Vivamus feugiat dui at magna viverra, ut dictum nunc rutrum. Duis eget sapien finibus, lobortis orci id, vestibulum tellus. Maecenas lobortis urna libero, quis fermentum lectus lobortis nec. Nullam laoreet volutpat libero, ac mattis magna ullamcorper quis. Duis eget ipsum eu nisi mattis cursus et vitae turpis.&lt;/p>
&lt;p>Aliquam pretium diam eget leo feugiat finibus. Donec malesuada commodo ipsum. Aenean a massa in lacus venenatis vestibulum. Duis vel sem quis elit iaculis consectetur et quis dolor. Morbi eu ipsum hendrerit, malesuada ante sed, dapibus est. Suspendisse feugiat nulla ut gravida convallis. Phasellus id massa posuere, rhoncus justo ut, porttitor dolor. Nulla ultrices malesuada egestas. Nunc fermentum tincidunt sem ac vulputate. Donec mollis sollicitudin justo eget varius. Donec ornare velit et felis blandit, id molestie sapien lobortis. Morbi eget tristique justo. Mauris posuere, nibh eu laoreet ultricies, ligula erat iaculis sapien, vel dapibus lacus libero ut diam. Etiam viverra ante felis, et scelerisque nunc pellentesque vitae. Praesent feugiat dictum molestie.&lt;/p>
&lt;h2 id="details">Details&lt;/h2>
&lt;p>Nunc pellentesque vitae:&lt;/p>
&lt;ul>
&lt;li>Morbi accumsan nibh efficitur diam molestie, non dignissim diam facilisis.&lt;/li>
&lt;li>Donec dignissim leo in mollis faucibus.&lt;/li>
&lt;li>Donec blandit lacus a pellentesque fermentum.&lt;/li>
&lt;/ul>
&lt;p>Donec mollis sollicitudin:&lt;/p>
&lt;ul>
&lt;li>Nunc dictum purus ornare purus consectetur, eu pellentesque massa ullamcorper.&lt;/li>
&lt;li>Aliquam eu leo vitae justo aliquam tincidunt.&lt;/li>
&lt;li>Fusce non massa id augue interdum feugiat sed et nulla.&lt;/li>
&lt;li>Vivamus molestie augue in tristique laoreet.&lt;/li>
&lt;/ul></description></item><item><title>Pages</title><link>https://justice.bj.cn/homepage/pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/pages/</guid><description/></item><item><title>Experiences</title><link>https://justice.bj.cn/homepage/experiences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/experiences/</guid><description/></item><item><title>Vintage</title><link>https://justice.bj.cn/homepage/vintage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/vintage/</guid><description/></item><item><title>Blank</title><link>https://justice.bj.cn/homepage/blank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/blank/</guid><description>
&lt;div style="text-align:center">
&lt;p>Write anything you like here!&lt;/p>
&lt;/div></description></item><item><title/><link>https://justice.bj.cn/post/12.data_struct/readme/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/readme/</guid><description>&lt;h2 id="数据结构">数据结构&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="./00.%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.md">基础数据结构&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="./01.%E6%AF%94%E7%89%B9.md">比特/字节&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="./%E6%95%B0%E7%BB%84.md">数组&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="./05.%E6%A0%91.md">树&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="./Tree/B-Tree.md">B 树&lt;/a>&lt;/li>
&lt;li>&lt;a href="./Tree/RB-Tree.md">红黑树&lt;/a>&lt;/li>
&lt;li>&lt;a href="./Tree/TrieTree.md">字典树&lt;/a>&lt;/li>
&lt;li>&lt;a href="./Tree/Segment-Tree.md">线段树&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title/><link>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</guid><description>&lt;h2 id="图解golang的gc算法">图解Golang的GC算法&lt;/h2>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>虽然Golang的GC自打一开始，就被人所诟病，但是经过这么多年的发展，Golang的GC已经改善了非常多，变得非常优秀了。&lt;/p>
&lt;p>以下是Golang GC算法的里程碑：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>v1.1 STW&lt;/p>
&lt;/li>
&lt;li>
&lt;p>v1.3 Mark STW, Sweep 并行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>v1.5 三色标记法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>v1.8 hybrid write barrier&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>经典的GC算法有三种： &lt;code>引用计数(reference counting)&lt;/code>、 &lt;code>标记-清扫(mark&amp;amp;sweep)&lt;/code>、 &lt;code>复制收集(CopyandCollection)&lt;/code>。&lt;/p>
&lt;p>Golang的GC算法主要是基于 &lt;code>标记-清扫(markandsweep)&lt;/code>算法，并在此基础上做了改进。&lt;/p>
&lt;h2 id="标记-清扫mark-and-sweep算法">标记-清扫(Mark And Sweep)算法&lt;/h2>
&lt;p>此算法主要有两个主要的步骤：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>标记(Mark phase)：找出不可达的对象，然后做上标记。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>清除(Sweep phase)：回收标记好的对象。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>操作非常简单，但是有一点需要额外注意：mark and sweep算法在执行的时候，需要程序暂停！即 &lt;code>stop the world&lt;/code>。
也就是说，这段时间程序会卡在哪儿。故中文翻译成 &lt;code>卡顿&lt;/code>。&lt;/p>
&lt;p>开始标记，程序暂停。程序和对象的此时关系是这样的：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-46-55-go-gc01.png" alt="">&lt;/p>
&lt;p>然后开始标记，process找出它所有可达的对象，并做上标记。如下图所示：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje63ibrVyulmXcjp1oXDOPO4dVZvVts5K9zJIHha5apibSWdd1nnV8m54Dw/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>标记完了之后，然后开始清除未标记的对象：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6XMjDBzQIniaYNIAwf1yvh8SJBYibdmLzTJ1gKao6zicl7hZbo3JTSXRibQ/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>然后垃圾清除了，变成了下图这样。&lt;/p>
&lt;p>&lt;img src="../../img/go-gc-02.png" alt="">&lt;/p>
&lt;p>最后，停止暂停，让程序继续跑。然后循环重复这个过程，直到process生命周期结束。&lt;/p>
&lt;h3 id="标记-清扫mark-and-sweep算法存在什么问题">标记-清扫(Mark And Sweep)算法存在什么问题？&lt;/h3>
&lt;p>标记-清扫(Mark And Sweep)算法这种算法虽然非常的简单，但是还存在一些问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>STW，stop the world；让程序暂停，程序出现卡顿。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标记需要扫描整个heap&lt;/p>
&lt;/li>
&lt;li>
&lt;p>清除数据会产生heap碎片&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这里面最重要的问题就是：mark-and-sweep 算法会暂停整个程序。&lt;/p>
&lt;p>Go是如何面对并这个问题的呢？&lt;/p>
&lt;h2 id="三色并发标记法">三色并发标记法&lt;/h2>
&lt;p>Golang的三色标记法的大体流程：&lt;/p>
&lt;p>首先：程序创建的对象都标记为白色。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6aQjX1iaPgmDiaNohGeekUxH2a0HXAJ4PhaduibBibh6CbOJtea4eR4js1Q/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>gc开始：扫描所有可到达的对象，标记为灰色&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6ELwZkSkibBYotZhyAGB9rIpMzibt48gSO9ltq9D5iaTL133GtUlLbnKSQ/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>从灰色对象中找到其引用对象标记为灰色，把灰色对象本身标记为黑色&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje62yaMUvD35Oibk6icTD5Kl4pib7553lpgz1VFLJSPOLicb8YAqPPyfQjBFQ/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>监视对象中的内存修改，并持续上一步的操作，直到灰色标记的对象不存在&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje61oYDvicEpYp9uicHHbuoQxb2ewbDNicTMvqzQIkQ2T2EwOYogCrJefZVw/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>此时，gc回收白色对象。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6xRZbJ1fpRVB9x3Nj7rAfVZrQdNHB77wEu6WtnpNicibria7bzu8MAlnRA/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>最后，将所有黑色对象变为白色，并重复以上所有过程。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6lqEagViaWUTxzw0hL7AfA51QykcBpg0Dbz6zLw8K19IXBhe3L6O0Ljg/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>好了，大体的流程就是这样的，让我们回到刚才的问题：Go是如何解决标记-清除(mark and sweep)算法中的卡顿(stw，stop the world)问题的呢？&lt;/p>
&lt;h2 id="gc和用户逻辑如何并行操作">gc和用户逻辑如何并行操作？&lt;/h2>
&lt;p>标记-清除(mark and sweep)算法的STW(stop the world)操作，就是runtime把所有的线程全部冻结掉，所有的线程全部冻结意味着用户逻辑是暂停的。这样所有的对象都不会被修改了，这时候去扫描是绝对安全的。&lt;/p>
&lt;p>Go如何减短这个过程呢？标记-清除(mark and sweep)算法包含两部分逻辑：标记和清除。
我们知道Golang三色标记法中最后只剩下的黑白两种对象，黑色对象是程序恢复后接着使用的对象，如果不碰触黑色对象，只清除白色的对象，肯定不会影响程序逻辑。所以： &lt;code>清除操作和用户逻辑可以并发。&lt;/code>&lt;/p>
&lt;p>标记操作和用户逻辑也是并发的，用户逻辑会时常生成对象或者改变对象的引用，那么标记和用户逻辑如何并发呢？&lt;/p>
&lt;h3 id="process新生成对象的时候gc该如何操作呢不会乱吗">process新生成对象的时候，GC该如何操作呢？不会乱吗？&lt;/h3>
&lt;p>我们看如下图，在此状态下：process程序又新生成了一个对象，我们设想会变成这样：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6GsPbtM8PqZVZUibpZQYiaPUAoqFZrJBVQvOvLuiaGInvYDibs9icmr6TA5Q/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>但是这样显然是不对的，因为按照三色标记法的步骤，这样新生成的对象A最后会被清除掉，这样会影响程序逻辑。&lt;/p>
&lt;p>Golang为了解决这个问题，引入了 &lt;code>写屏障&lt;/code>这个机制。
写屏障：该屏障之前的写操作和之后的写操作相比，先被系统其它组件感知。
通俗的讲：就是在gc跑的过程中，可以监控对象的内存修改，并对对象进行重新标记。(实际上也是超短暂的stw，然后对对象进行标记)&lt;/p>
&lt;p>在上述情况中， &lt;code>新生成的对象，一律都标位灰色！&lt;/code>即下图：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6qKxHooLKicibBCia4pZibcGicxSyz0NYQMRmFEQNWSVXE5kff6VMa3U4ia6w/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;h3 id="那么灰色或者黑色对象的引用改为白色对象的时候golang是该如何操作的">那么，灰色或者黑色对象的引用改为白色对象的时候，Golang是该如何操作的？&lt;/h3>
&lt;p>看如下图，一个黑色对象引用了曾经标记的白色对象。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6RpJAciaTibYnOuiaFaLnh7t03sraj0wKjqmmhKdPdrD7G7jgPWiabSdGhw/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>这时候，写屏障机制被触发，向GC发送信号，GC重新扫描对象并标位灰色。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6EibfZpRonwcHOqibibBEicVyPnzu3t1fmGTbvugQ1jxJicrnrxVdXwNRxDQ/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>因此，gc一旦开始，无论是创建对象还是对象的引用改变，都会先变为灰色。&lt;/p>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;ul>
&lt;li>Golang’s Real-time GC in Theory and PracticeGolang&amp;rsquo;s realtime garbage collector&lt;a href="https://mp.weixin.qq.com/s?__biz=MzU4ODczMDg5Ng==&amp;amp;mid=2247483688&amp;amp;idx=1&amp;amp;sn=46742e533886fe8b2fb91d79cf5144eb&amp;amp;scene=21#wechat_redirect">Golang 垃圾回收剖析&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>ASM-汇编基础</title><link>https://justice.bj.cn/post/14.language/asm/asm/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/asm/asm/</guid><description>&lt;h1 id="asm-汇编基础">ASM-汇编基础&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="intel-和-att-汇编语言区别">Intel 和 AT&amp;amp;T 汇编语言区别&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">OP-code&lt;/span> &lt;span class="no">dst&lt;/span> &lt;span class="no">src&lt;/span> &lt;span class="err">//&lt;/span>&lt;span class="no">Intel语法&lt;/span>
&lt;span class="nf">Op-code&lt;/span> &lt;span class="no">src&lt;/span> &lt;span class="no">dst&lt;/span> &lt;span class="err">//&lt;/span>&lt;span class="no">AT&lt;/span>&lt;span class="err">&amp;amp;&lt;/span>&lt;span class="no">T语法&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Intel Code&lt;/th>
&lt;th>AT&amp;amp;T Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>mov eax,1&lt;/td>
&lt;td>movl $1,%eax&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov ebx,0ffh&lt;/td>
&lt;td>movl $0xff,%ebx&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int 80h&lt;/td>
&lt;td>int $0x80&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov ebx, eax&lt;/td>
&lt;td>movl %eax, %ebx&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov eax,[ecx]&lt;/td>
&lt;td>movl (%ecx),%eax&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov eax,[ebx+3]&lt;/td>
&lt;td>movl 3(%ebx),%eax&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov eax,[ebx+20h]&lt;/td>
&lt;td>movl 0x20(%ebx),%eax&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>add eax,[ebx+ecx*2h]&lt;/td>
&lt;td>addl (%ebx,%ecx,0x2),%eax&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lea eax,[ebx+ecx]&lt;/td>
&lt;td>leal (%ebx,%ecx),%eax&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sub eax,[ebx+ecx*4h-20h]&lt;/td>
&lt;td>subl -0x20(%ebx,%ecx,0x4),%eax&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.jianshu.com/p/1782e14a0766">GCC内联汇编基础 - 简书&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>awk</title><link>https://justice.bj.cn/post/14.language/shell/awk/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/awk/</guid><description>&lt;h1 id="awk">awk&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="常用操作">常用操作&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">## 打印奇数行&lt;/span>
$ awk &lt;span class="s1">&amp;#39;NR%2&amp;#39;&lt;/span> file
&lt;span class="c1">## 打印偶数行&lt;/span>
$ awk &lt;span class="s1">&amp;#39;!(NR%2)&amp;#39;&lt;/span> file
$ awk &lt;span class="s1">&amp;#39;NR==M, NR==N&amp;#39;&lt;/span> filename &lt;span class="c1">#输出从M行N行之间的内容$&lt;/span>
$ awk &lt;span class="s2">&amp;#34;/PARTERN1/,/PARTERN2/&amp;#34;&lt;/span> filename &lt;span class="c1">#输出从PARTERN1到PATERN2之间行的内容&lt;/span>
&lt;span class="c1">## 累加&lt;/span>
awk &lt;span class="s1">&amp;#39;{sum+=$1} END {print sum}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Bash基础</title><link>https://justice.bj.cn/post/14.language/shell/bash%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/bash%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="bash基础">Bash基础&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="特殊变量">特殊变量&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nv">$#&lt;/span> &lt;span class="c1"># 参数个数&lt;/span>
&lt;span class="nv">$@&lt;/span> &lt;span class="c1"># 所有参数, 每个参数分别用&amp;#34;&amp;#34;包含&lt;/span>
&lt;span class="nv">$*&lt;/span> &lt;span class="c1"># 所有参数，所有参数使用一个外层&amp;#34; &amp;#34;包含&lt;/span>
&lt;span class="nv">$0&lt;/span> &lt;span class="c1"># 文件名&lt;/span>
&lt;span class="nv">$1&lt;/span> &lt;span class="c1"># 第1个参数&lt;/span>
&lt;span class="nv">$?&lt;/span> &lt;span class="c1"># 上一个命令的退出状态&lt;/span>
&lt;span class="nv">$!&lt;/span> &lt;span class="c1"># 进程ID&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参数替换">参数替换&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="si">${&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="nv">value&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 若var已设置，则不进行赋值， 否则，var=value&lt;/span>
&lt;span class="si">${&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="p">:=value&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 总取value&lt;/span>
&lt;span class="si">${&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="p">:?mesg&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 若var未设置，则显示mesg&lt;/span>
&lt;span class="si">${&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="p">:+value&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 若var未设置，则var为空， 否则，var=value&lt;/span>
&lt;span class="si">${&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="p">%pattern&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 从var右边去掉最短的pattern%%&lt;/span>
&lt;span class="si">${&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="p">%%pattern&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 从var右边去掉最长的pattern&lt;/span>
&lt;span class="si">${&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="p">#pattern&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 从var左边去掉最短的pattern&lt;/span>
&lt;span class="si">${&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="p">##pattern&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 从var左边去掉最长的pattern&lt;/span>
&lt;span class="si">${&lt;/span>&lt;span class="nv">word&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">pos&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">size&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># chars at pos(&amp;gt;0,from left; &amp;lt;0, from right ) len of size&lt;/span>
&lt;span class="si">${&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="p">/ABC/DEFG&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># replace ABC with DEFG&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="字符串">字符串&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;abcdef&amp;#34;&lt;/span>
expr length &lt;span class="nv">$str&lt;/span> &lt;span class="c1"># 4&lt;/span>
&lt;span class="c1">## 获取字符串长度&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${#&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 4&lt;/span>
&lt;span class="c1">## 获取子串index&lt;/span>
expr index &lt;span class="nv">$str&lt;/span> &lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span> &lt;span class="c1"># 2&lt;/span>
&lt;span class="c1">## 子串&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">3&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#从第二个位置开始提取3个字符, bcd&lt;/span>
&lt;span class="c1">## 一个井号(#) 表示从左边截取掉最短的匹配 &lt;/span>
&lt;span class="c1">## 两个井号(##) 表示从左边截取掉最长的匹配&lt;/span>
&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;abbc,def,ghi,abcjkl&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#a*c&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出,def,ghi,abcjkl (这里把abbc字串去掉）&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">##a*c&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出jkl，(这里把abbc,def,ghi,abc字串去掉)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="s2">&amp;#34;a*c&amp;#34;&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出abbc,def,ghi,abcjkl 因为str中没有&amp;#34;a*c&amp;#34;子串&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">##&lt;/span>&lt;span class="s2">&amp;#34;a*c&amp;#34;&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出abbc,def,ghi,abcjkl 同理&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#*a*c*&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 空&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">##*a*c*&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 空&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#d*f&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出abbc,def,ghi,abcjkl, &lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#*d*f&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出,ghi,abcjkl &lt;/span>
&lt;span class="c1">## 一个百分号(%)表示从右边截取最短的匹配&lt;/span>
&lt;span class="c1">## 两个百分号表示(%%)表示从右边截取最长的匹配&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">%a*l&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># abbc,def,ghi &lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">%%b*l&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># a &lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">%a*c&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># abbc,def,ghi,abcjkl&lt;/span>
&lt;span class="c1">## 子串替换&lt;/span>
&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;apple, tree, apple tree&amp;#34;&lt;/span>
&lt;span class="c1">## /替换第一次出现的apple&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">/apple/APPLE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># APPLE, tree, apple tree&lt;/span>
&lt;span class="c1">## //替换所有apple&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">//apple/APPLE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># APPLE, tree, APPLE tree &lt;/span>
&lt;span class="c1">## /#开头匹配替换&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">/#apple/APPLE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># APPLE, tree, apple tree&lt;/span>
&lt;span class="c1">## %末尾匹配替换&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">/%apple/APPLE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 如果字符串str以apple结尾，则用APPLE替换它&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="数组array">数组(array)&lt;/h2>
&lt;ul>
&lt;li>bash中的数组index可以不连续；&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">## 定义数组&lt;/span>
&lt;span class="nb">declare&lt;/span> -a array1 &lt;span class="nv">array2&lt;/span>&lt;span class="o">=(&lt;/span> a b c d &lt;span class="o">)&lt;/span>
&lt;span class="c1">## 数组赋值&lt;/span>
array1&lt;span class="o">[&lt;/span>2&lt;span class="o">]=&lt;/span>a1
&lt;span class="c1">## 数组所有value &lt;/span>
&lt;span class="si">${&lt;/span>&lt;span class="nv">array1&lt;/span>&lt;span class="p">[*]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="si">${&lt;/span>&lt;span class="nv">array1&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="c1">## 数组元素个数&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${#&lt;/span>&lt;span class="nv">array1&lt;/span>&lt;span class="p">[*]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="c1">## 数组元素: &lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">array1&lt;/span>&lt;span class="p">[2]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="c1">## 数组元素增加前缀&lt;/span>
&lt;span class="nv">array&lt;/span>&lt;span class="o">=(&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">array&lt;/span>&lt;span class="p">[@]/#/prefix_&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="o">)&lt;/span> &lt;span class="c1"># prefix_a prefix_b prefix_c&lt;/span>
&lt;span class="nv">array&lt;/span>&lt;span class="o">=(&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">array&lt;/span>&lt;span class="p">[@]/%/_suffix&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">)&lt;/span> &lt;span class="c1"># a_suffiix b_suffix c_suffix&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="字典dict">字典(dict)&lt;/h3>
&lt;p>bash 4.1.2 版本以上内置dict支持&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">## bash version &amp;gt; 4.1.2&lt;/span>
&lt;span class="c1">## 字典声明&lt;/span>
&lt;span class="nb">declare&lt;/span> -A hashmap
&lt;span class="nv">hashmap&lt;/span>&lt;span class="o">=(&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="o">)&lt;/span>
&lt;span class="c1">## 字典赋值&lt;/span>
hashmap&lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;key&amp;#34;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;value&amp;#34;&lt;/span>
hashmap&lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;key2&amp;#34;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;value2&amp;#34;&lt;/span>
&lt;span class="c1">## 获取value&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">hashmap&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;key&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="c1">## 所有key&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="p">!hashmap[@]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="c1">## 所有value&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">hashmap&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="c1">## &lt;/span>
&lt;span class="nv">hashmap&lt;/span>&lt;span class="o">+=(&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;key4&amp;#34;&lt;/span>&lt;span class="o">]=&lt;/span>val4 &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;key5&amp;#34;&lt;/span>&lt;span class="o">]=&lt;/span>val5 &lt;span class="o">)&lt;/span>
&lt;span class="c1">## 删除key&lt;/span>
&lt;span class="nb">unset&lt;/span> host_panes&lt;span class="o">[&lt;/span>&lt;span class="nv">$delhost&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="c1">## 遍历key&lt;/span>
&lt;span class="k">for&lt;/span> key in &lt;span class="si">${&lt;/span>&lt;span class="p">!hashmap[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$key&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">hashmap&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">$key&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">done&lt;/span>
&lt;span class="c1">## 遍历value&lt;/span>
&lt;span class="k">for&lt;/span> value in &lt;span class="si">${&lt;/span>&lt;span class="nv">hashmap&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$value&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">done&lt;/span>
&lt;span class="c1">## 关联数组作为函数参数传递&lt;/span>
&lt;span class="k">function&lt;/span> print_array &lt;span class="o">{&lt;/span>
&lt;span class="c1"># eval string into a new associative array&lt;/span>
&lt;span class="nb">eval&lt;/span> &lt;span class="s2">&amp;#34;declare -A func_assoc_array=&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">1&lt;/span>&lt;span class="p">#*=&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="c1"># proof that array was successfully created&lt;/span>
&lt;span class="nb">declare&lt;/span> -p func_assoc_array
&lt;span class="o">}&lt;/span>
&lt;span class="c1"># declare an associative array&lt;/span>
&lt;span class="nb">declare&lt;/span> -A &lt;span class="nv">assoc_array&lt;/span>&lt;span class="o">=([&lt;/span>&lt;span class="s2">&amp;#34;key1&amp;#34;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;value1&amp;#34;&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;key2&amp;#34;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;value2&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1"># show associative array definition&lt;/span>
&lt;span class="nb">declare&lt;/span> -p assoc_array
&lt;span class="c1"># pass associative array in string form to function&lt;/span>
print_array &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">declare&lt;/span> -p assoc_array&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="引用">引用&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="4-case-语句">4. case 语句&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="k">case&lt;/span> &lt;span class="nv">$arg&lt;/span> in
-a&lt;span class="p">|&lt;/span>--aaa&lt;span class="o">)&lt;/span> do_a &lt;span class="p">;;&lt;/span>
-b&lt;span class="p">|&lt;/span>--bbb&lt;span class="o">)&lt;/span> do_b &lt;span class="p">;;&lt;/span>
c*&lt;span class="o">)&lt;/span> do_c &lt;span class="p">;;&lt;/span>
*&lt;span class="o">)&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;span class="k">esac&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="5-read">5. read&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> line &amp;lt; filename &lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;a &lt;/span>&lt;span class="nv">$line&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="6-逻辑操作符">6. 逻辑操作符&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[[&lt;/span> exp1 -a exp2 &lt;span class="o">]]&lt;/span> &lt;span class="c1">#逻辑与&lt;/span>
&lt;span class="o">[[&lt;/span> exp1 -o exp2 &lt;span class="o">]]&lt;/span> &lt;span class="c1">#逻辑或&lt;/span>
&lt;span class="o">[[&lt;/span> ! exp &lt;span class="o">]]&lt;/span> &lt;span class="c1">#逻辑非&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="7--和-">7. || 和 &amp;amp;&amp;amp;&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">cmd1 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> cmd2 &lt;span class="c1"># if cmd1 == true ; then cmd2 ;&lt;/span>
cmd1 &lt;span class="o">||&lt;/span> cmd2 &lt;span class="c1"># if cmd1 == false; then cmd2 ;&lt;/span>
cmd1 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> cmd2 &lt;span class="o">||&lt;/span> cmd3 &lt;span class="c1"># cmd1 ? cmd2 : cmd3&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="8-字符串操作符">8. 字符串操作符&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[&lt;/span> &lt;span class="nv">$str1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$str2&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; str1 == str2 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="nv">$str1&lt;/span> !&lt;span class="o">=&lt;/span> &lt;span class="nv">$str2&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; str1 != str2 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="nv">$str&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; str 非空 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> -n &lt;span class="nv">$str&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; str 不为空&amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> -z &lt;span class="nv">$str&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; str1 空 &amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="9-整数操作符">9. 整数操作符&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[&lt;/span> &lt;span class="nv">$n1&lt;/span> -eq &lt;span class="nv">$n2&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; n1 == n2 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="nv">$n1&lt;/span> -ne &lt;span class="nv">$n2&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; n1 != n2 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="nv">$n1&lt;/span> -gt &lt;span class="nv">$n2&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; n1 &amp;gt; n2 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="nv">$n1&lt;/span> -ge &lt;span class="nv">$n2&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; n1 &amp;gt;= n2 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="nv">$n1&lt;/span> -lt &lt;span class="nv">$n2&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; n1 &amp;lt; n2 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="nv">$n1&lt;/span> -le &lt;span class="nv">$n2&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; n1 &amp;lt;= n2 &amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="10-文件操作符">10. 文件操作符&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[&lt;/span> -e &lt;span class="nv">$file&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; &lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2"> 存在 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> -s &lt;span class="nv">$file&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; &lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2"> 长度不为0 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> -f &lt;span class="nv">$file&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; &lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2"> 普通文件 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> -d &lt;span class="nv">$file&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; &lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2"> 目录 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> -L &lt;span class="nv">$file&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; &lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2"> 链接文件 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> -r &lt;span class="nv">$file&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; &lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2"> 可读 &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> -w &lt;span class="nv">$file&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; &lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2"> write &amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span> -x &lt;span class="nv">$file&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; &lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2"> excute &amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="11-for">11. for&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">### 遍历列表&lt;/span>
&lt;span class="k">for&lt;/span> var in var1 var2 ... varn &lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$var&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="c1">### 遍历数组&lt;/span>
&lt;span class="nv">array&lt;/span>&lt;span class="o">=(&lt;/span> var1 var2 ... varn &lt;span class="o">)&lt;/span>
&lt;span class="k">for&lt;/span> var in &lt;span class="si">${&lt;/span>&lt;span class="nv">array&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$var&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="12-算术运算">12. 算术运算&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nv">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">512&lt;/span>
&lt;span class="nv">cnt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">8&lt;/span>
&lt;span class="nv">total&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$((&lt;/span>&lt;span class="nv">$size&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nv">$cnt&lt;/span>&lt;span class="k">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="13-seq">13. seq&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ seq LastNum
$ seq FirstNum LastNum
$ seq FirstNum Step LastNum
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="16-echo">16 echo&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">### 输出颜色字符&lt;/span>
$ &lt;span class="nb">echo&lt;/span> -ne &lt;span class="s2">&amp;#34;\E[BACK_GROUND_NUM;FOREGROUND_NAME m&amp;#34;&lt;/span> TEXT
$ &lt;span class="nb">echo&lt;/span> -ne &lt;span class="s2">&amp;#34;\E[0m&amp;#34;&lt;/span>
&lt;span class="c1">### 输出到（x,y）坐标处&lt;/span>
$ &lt;span class="nb">echo&lt;/span> -ne &lt;span class="s2">&amp;#34;\E[x;yH&amp;#34;&amp;#34;TEXT&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="判断">判断&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[[&lt;/span> -L &lt;span class="s2">&amp;#34;/path/to/link&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;false&amp;#34;&lt;/span>
&lt;span class="o">[[&lt;/span> -F &lt;span class="s2">&amp;#34;/path/to/file&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;false&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="数组">数组&lt;/h2>
&lt;h2 id="常用操作">常用操作&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>批量创建目录&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">mkdir -p /data&lt;span class="o">{&lt;/span>0..10&lt;span class="o">}&lt;/span>/hdfs/&lt;span class="o">{&lt;/span>name,data&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>合并行&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sed -n &lt;span class="s1">&amp;#39;/Throught*/,/Test*/p&amp;#39;&lt;/span> /tmp/hdfs_io_test.txt &lt;span class="p">|&lt;/span> awk -F&lt;span class="s2">&amp;#34;: &amp;#34;&lt;/span> &lt;span class="s1">&amp;#39;{print $2}&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> sed -n &lt;span class="s1">&amp;#39;N;N;N;s/\n/\t/gp&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>输出奇数/偶数行&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">sed -n &lt;span class="s1">&amp;#39;n;p&amp;#39;&lt;/span> /filename &lt;span class="c1">#输出偶数行&lt;/span>
sed -n &lt;span class="s1">&amp;#39;p;n&amp;#39;&lt;/span> /filename &lt;span class="c1">#输出奇数行&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="变量替换">变量替换&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">## 从变量 var 的**开头**删除最短或最长匹配 Pattern 的子串&lt;/span>
&lt;span class="c1">## ${var#Pattern}, ${var##Pattern}&lt;/span>
&lt;span class="nv">var&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;abc:123:456&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="p">#*:&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#123:456&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="p">##*:&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#456&lt;/span>
&lt;span class="c1">## 从变量 $var 的结尾删除最短或最长匹配 $Pattern 的子串&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="p">%:*&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#abc:123&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">var&lt;/span>&lt;span class="p">%%:*&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1">#abc&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">set&lt;/span> -euo pipefail &lt;span class="c1">#pipe fail if any reture not 0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="模板文件变量替换">模板文件变量替换&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/sh
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1"># render a template configuration file&lt;/span>
&lt;span class="c1"># expand variables + preserve formatting&lt;/span>
render_template&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nb">eval&lt;/span> &lt;span class="s2">&amp;#34;echo \&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>cat &lt;span class="nv">$1&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">\&amp;#34;&amp;#34;&lt;/span> 2&amp;gt;/dev/null
&lt;span class="o">}&lt;/span>
&lt;span class="nv">user&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Gregory&amp;#34;&lt;/span>
render_template /path/to/template.txt &amp;gt; path/to/configuration_file
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Bash字符串操作</title><link>https://justice.bj.cn/post/14.language/shell/bash%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/bash%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</guid><description>&lt;h1 id="bash字符串操作">Bash字符串操作&lt;/h1>
&lt;h2 id="取长度">取长度&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;abcd&amp;#34;&lt;/span>
expr length &lt;span class="nv">$str&lt;/span> &lt;span class="c1"># 4&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${#&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 4&lt;/span>
expr &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$str&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span> &lt;span class="c1"># 4&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>好像一般使用第二种&lt;/p>
&lt;h2 id="查找子串的位置">查找子串的位置&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span>
expr index &lt;span class="nv">$str&lt;/span> &lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span> &lt;span class="c1"># 1&lt;/span>
expr index &lt;span class="nv">$str&lt;/span> &lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span> &lt;span class="c1"># 2&lt;/span>
expr index &lt;span class="nv">$str&lt;/span> &lt;span class="s2">&amp;#34;x&amp;#34;&lt;/span> &lt;span class="c1"># 0&lt;/span>
expr index &lt;span class="nv">$str&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="c1"># 0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="选取子串">选取子串&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;abcdef&amp;#34;&lt;/span>
expr substr &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$str&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="c1"># 从第一个位置开始取3个字符， abc&lt;/span>
expr substr &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$str&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="c1"># 从第二个位置开始取5个字符， bcdef &lt;/span>
expr substr &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$str&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="c1"># 从第四个位置开始取5个字符， def&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">2&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 从第二个位置开始提取字符串， bcdef&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">3&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 从第二个位置开始提取3个字符, bcd&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">:(-6):&lt;/span>&lt;span class="nv">5&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 从倒数第二个位置向左提取字符串, abcde&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">:(-4):&lt;/span>&lt;span class="nv">3&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 从倒数第二个位置向左提取6个字符, cde&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="截取子串">截取子串&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;abbc,def,ghi,abcjkl&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#a*c&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出,def,ghi,abcjkl 一个井号(#) 表示从左边截取掉最短的匹配 (这里把abbc字串去掉）&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">##a*c&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出jkl， 两个井号(##) 表示从左边截取掉最长的匹配 (这里把abbc,def,ghi,abc字串去掉)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="s2">&amp;#34;a*c&amp;#34;&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出abbc,def,ghi,abcjkl 因为str中没有&amp;#34;a*c&amp;#34;子串&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">##&lt;/span>&lt;span class="s2">&amp;#34;a*c&amp;#34;&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出abbc,def,ghi,abcjkl 同理&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#*a*c*&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 空&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">##*a*c*&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 空&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#d*f) # 输出abbc,def,ghi,abcjkl,
&lt;/span>&lt;span class="p">echo &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#*d*f&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p"> # 输出,ghi,abcjkl
&lt;/span>&lt;span class="p">
&lt;/span>&lt;span class="p">echo &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">%a*l&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p"> # abbc,def,ghi 一个百分号(%)表示从右边截取最短的匹配
&lt;/span>&lt;span class="p">echo &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">%%b*l&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p"> # a 两个百分号表示(%%)表示从右边截取最长的匹配
&lt;/span>&lt;span class="p">echo &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">%a*c&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p"> # abbc,def,ghi,abcjkl
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以这样记忆, 井号（#）通常用于表示一个数字，它是放在前面的；百分号（%）卸载数字的后面; 或者这样记忆，在键盘布局中，井号(#)总是位于百分号（%）的左边(即前面) :-)&lt;/p>
&lt;h2 id="字符串替换">字符串替换&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;apple, tree, apple tree&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">/apple/APPLE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 替换第一次出现的apple&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">//apple/APPLE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 替换所有apple&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">/#apple/APPLE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 如果字符串str以apple开头，则用APPLE替换它&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">/%apple/APPLE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 如果字符串str以apple结尾，则用APPLE替换它&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="比较">比较&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;a.txt&amp;#34;&lt;/span> &lt;span class="o">==&lt;/span> a* &lt;span class="o">]]&lt;/span> &lt;span class="c1"># 逻辑真 (pattern matching)&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;a.txt&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ .*&lt;span class="se">\.&lt;/span>txt &lt;span class="o">]]&lt;/span> &lt;span class="c1"># 逻辑真 (regex matching)&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="c1"># 逻辑真 (string comparision) &lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;11&amp;#34;&lt;/span> &amp;lt; &lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="c1"># 逻辑真 (string comparision), 按ascii值比较&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="连接">连接&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">s1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span>
&lt;span class="nv">s2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;world&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">s1&lt;/span>&lt;span class="si">}${&lt;/span>&lt;span class="nv">s2&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 当然这样写 $s1$s2 也行，但最好加上大括号&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="8">
&lt;li>翻转&lt;/li>
&lt;/ol></description></item><item><title>Bash最佳实践</title><link>https://justice.bj.cn/post/14.language/shell/bash%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/bash%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>&lt;h1 id="bash最佳实践">Bash最佳实践&lt;/h1>
&lt;h2 id="基本规则">基本规则&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="cp">#!/usr/env/bin bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="c1">## 增加TRACE调试&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$TRACE&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">set&lt;/span> -x
&lt;span class="c1">## 快速失败并检查退出状态&lt;/span>
&lt;span class="nb">set&lt;/span> -eo pipefail
&lt;span class="c1">## 判断&lt;/span>
&lt;span class="o">[[&lt;/span> x &amp;gt; 2&lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> x
&lt;span class="c1">## 获取脚本绝对路径&lt;/span>
&lt;span class="nv">ROOT_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">cd&lt;/span> &lt;span class="k">$(&lt;/span>dirname &lt;span class="nv">$BASH_SOURCE&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>
&lt;span class="c1">## 函数定义&lt;/span>
myfunc&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nb">declare&lt;/span> &lt;span class="nv">desc&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;description&amp;#34;&lt;/span> &lt;span class="c1">##函数描述&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">## 使用反射提取函数描述&lt;/span>
&lt;span class="nb">eval&lt;/span> &lt;span class="k">$(&lt;/span>&lt;span class="nb">type&lt;/span> FUNCTION_NAME &lt;span class="p">|&lt;/span> grep &lt;span class="s1">&amp;#39;declare desc=&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$desc&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="c1">## 定参函数&lt;/span>
regular_func&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">## 判断参数个数&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="nv">$#&lt;/span> !&lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Parameter incorrect.&amp;#34;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="nb">declare&lt;/span> &lt;span class="nv">arg1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="nv">arg2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="nv">arg3&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$3&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">## 变参函数&lt;/span>
variadic_func&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nb">local&lt;/span> &lt;span class="nv">arg1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">shift&lt;/span>
&lt;span class="nb">local&lt;/span> &lt;span class="nv">arg2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">shift&lt;/span>
&lt;span class="nb">local&lt;/span> &lt;span class="nv">rest&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">## 测试退出代码（-q静音输出）&lt;/span>
&lt;span class="k">if&lt;/span> grep -q &lt;span class="s1">&amp;#39;foo&amp;#39;&lt;/span> somefile&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
...
&lt;span class="k">fi&lt;/span>
&lt;span class="c1">## 测试输出（ -m1 限制一个结果）&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>grep -m1 &lt;span class="s1">&amp;#39;foo&amp;#39;&lt;/span> somefile&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
...
&lt;span class="k">fi&lt;/span>
func&lt;span class="o">(){&lt;/span>
&lt;span class="c1">#do sth&lt;/span>
｝
&lt;span class="c1">## 并行化执行func&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="o">((&lt;/span>&lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>0&lt;span class="p">;&lt;/span> i&amp;lt;10&lt;span class="p">;&lt;/span> i++&lt;span class="o">))&lt;/span>&lt;span class="k">do&lt;/span>
func &lt;span class="p">&amp;amp;&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;span class="nb">wait&lt;/span>
&lt;span class="c1">## 函数调用及返回&lt;/span>
func&lt;span class="o">(){&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;2333&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nv">res&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>func&lt;span class="k">)&lt;/span> &lt;span class="c1">#获取函数返回&lt;/span>
&lt;span class="c1">## 间接引用&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="p">!VAR1&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="c1">## 错误&lt;/span>
err&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;[&lt;/span>&lt;span class="k">$(&lt;/span>date +&lt;span class="s1">&amp;#39;%Y-%m-%dT%H:%M:%S%z&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">]: &lt;/span>&lt;span class="nv">$*&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1"># DO use &amp;#39;here document&amp;#39;s&lt;/span>
cat &amp;gt;a_file &lt;span class="s">&amp;lt;&amp;lt;END
&lt;/span>&lt;span class="s">I am an exceptionally long
&lt;/span>&lt;span class="s">string.
&lt;/span>&lt;span class="s">END&lt;/span>
&lt;span class="c1"># Long commands&lt;/span>
command1 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> command2 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> command3 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="p">|&lt;/span> command4
&lt;span class="c1">## 使用main&lt;/span>
func1&lt;span class="o">(){&lt;/span>
&lt;span class="c1">#do sth&lt;/span>
&lt;span class="o">}&lt;/span>
func2&lt;span class="o">(){&lt;/span>
&lt;span class="c1">#do sth&lt;/span>
&lt;span class="o">}&lt;/span>
main&lt;span class="o">(){&lt;/span>
func1
func2
&lt;span class="o">}&lt;/span>
main &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000018110219">Bash 最佳实践和技巧&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.mythsman.com/post/5d2ab67ff678ba2eb3bd346f/">编写Shell脚本的最佳实践&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://google.github.io/styleguide/shellguide.html">styleguide | Style guides for Google-originated open-source projects&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Bazel</title><link>https://justice.bj.cn/post/70.tool/bazel/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/bazel/</guid><description>&lt;h1 id="bazel">Bazel&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Bazel是Google开源的自动化构建工具，&lt;/p>
&lt;h2 id="特点">特点&lt;/h2>
&lt;ul>
&lt;li>构建快。支持增量编译。对依赖关系进行了优化，从而支持并发执行。&lt;/li>
&lt;li>可构建多种语言。bazel可用来构建Java C++ Android ios等很多语言和框架，并支持mac windows linux等不同平台&lt;/li>
&lt;li>可伸缩。可处理任意大小的代码库，可处理多个库，也可以处理单个库&lt;/li>
&lt;li>可扩展。使用bazel扩展语言可支持新语言和新平台。&lt;/li>
&lt;/ul>
&lt;h2 id="项目结构">项目结构&lt;/h2>
&lt;p>bazel顶层，也就是根目录下为工作区workspace，workspace下包含多个package，每个package又包含多个编译目标target。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>workspace&lt;/p>
&lt;p>要进行构建的文件系统，根目录下必须包含一个文件名为WORKSPACE的文件，即使它内容为空。它指明了构建的根目录。文件系统中包括源文件，头文件，输出目录的符号链接等。WORKSPACE采用类似Python的语法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>package&lt;/p>
&lt;p>一个WORKSPACE工作区下可以包括多个包package，每个package可以实现一个子模块，从而让各个模块进行解耦。每个package下必须包含一个BUILD文件，它指定了package的编译构建规则。&lt;/p>
&lt;p>BUILD文件也是采用的类似Python的语法，它定义了编译规则，lib依赖等各项规则。其中有些命令专属于BUILD文件，有些则是bazel语法通用的，如WORKSPACE文件中也可以使用。主要方法调用如下&lt;/p>
&lt;ul>
&lt;li>tf_cc_binary：目标文件编译规则，为一个二进制可执行文件。name必须唯一，srcs指定了源文件，linkopts指定了链接规则，deps指定了依赖文件&lt;/li>
&lt;li>cc_library：库文件编译规则，name指定了编译为库文件后的文件名，srcs和hdrs指定源文件和头文件，deps指定需要依赖的其他文件&lt;/li>
&lt;li>tf_cc_test：测试文件规则&lt;/li>
&lt;li>package：通用方法，定义的值会作用到下面的每个子rule中。default_visibility指定了这个包的默认可见规则。可见的情况下才能被其他package调用。&lt;/li>
&lt;li>licenses：通用方法，默认的license&lt;/li>
&lt;li>load：通用方法，加载.bzl文件&lt;/li>
&lt;li>filegroup：通用方法，为多个编译目标target指定一个名字，glob是一个帮助函数，指定了目录中哪些文件会include，哪些会exclude。visibility指定了target的可见性，也就是可以被哪些package调用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>label&lt;/p>
&lt;p>包的名称叫做标签，用来标识一个包package。标签由两部分组成，一部分为包名my/app/main， 一部分为包构建的目标名app_binary。每个标签用来唯一标示包构建的目标，从而在被其他包使用时可以标识出来。同一个包下，标签可以省略包名部分，如:app_binary表示同一个包下的目标。不同包之间，则千万不能省略包名。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>target&lt;/p>
&lt;p>包package是一个容器，组成它的元素称为目标，分为文件和规则。文件分为两种，一种为程序员写的源代码，一种为构建工具生成的文件。规则定义了如何利用输入来构建得到输出，如上面的BUILD。输入一般是源文件，库文件等，输出则一般是生成的构建目标文件。&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="命令">命令&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ bazel build //...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>brew</title><link>https://justice.bj.cn/post/70.tool/brew/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/brew/</guid><description>&lt;h1 id="brew">brew&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="操作">操作&lt;/h2>
&lt;ul>
&lt;li>安装指定版本&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ git clone http://github.com/homebrew/homebrew-core
$ vi homebrew-core/Formula/xxxx.rb
$ brew install homebrew-core/Formula/xxxx.rb
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="更换homebrew源">更换Homebrew源&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 替换brew.git:&lt;/span>
&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git
&lt;span class="c1"># 替换homebrew-core.git:&lt;/span>
&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">/Library/Taps/homebrew/homebrew-core&amp;#34;&lt;/span>
git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git
&lt;span class="c1"># 替换homebrew-bottles:&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;span class="c1"># 替换homebrew-cask.git:&lt;/span>
&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>/Library/Taps/homebrew/homebrew-cask
git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>C++ 左值引用与右值引用</title><link>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid><description>&lt;h1 id="c-左值引用与右值引用">C++ 左值引用与右值引用&lt;/h1>
&lt;h3 id="左值右值">左值、右值&lt;/h3>
&lt;p>左值：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>可以放到等号左边;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以取地址并且有名字&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>右值：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>不可以放到等号左边的东西就叫右值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不能取地址的没有名字的东西就是右值。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>左值一般有：&lt;/p>
&lt;ul>
&lt;li>函数名和变量名&lt;/li>
&lt;li>返回左值引用的函数调用&lt;/li>
&lt;li>前置自增自减表达式++i、&amp;ndash;i&lt;/li>
&lt;li>由赋值表达式或赋值运算符连接的表达式(a=b, a += b等)&lt;/li>
&lt;li>解引用表达式*p&lt;/li>
&lt;li>字符串字面值&amp;quot;abcd&amp;quot;&lt;/li>
&lt;/ul>
&lt;h3 id="纯右值将亡值">纯右值、将亡值&lt;/h3>
&lt;p>纯右值和将亡值都属于右值。&lt;/p>
&lt;h4 id="纯右值">纯右值&lt;/h4>
&lt;p>运算表达式产生的临时变量、不和对象关联的原始字面量、非引用返回的临时变量、lambda表达式等都是纯右值。&lt;/p>
&lt;p>举例：&lt;/p>
&lt;ul>
&lt;li>除字符串字面值外的字面值&lt;/li>
&lt;li>返回非引用类型的函数调用&lt;/li>
&lt;li>后置自增自减表达式i++、i&amp;ndash;&lt;/li>
&lt;li>算术表达式(a+b, a*b, a&amp;amp;&amp;amp;b, a==b等)&lt;/li>
&lt;/ul>
&lt;h4 id="将亡值">将亡值&lt;/h4>
&lt;p>将亡值是指C++11新增的和右值引用相关的表达式，通常指将要被移动的对象、T&amp;amp;&amp;amp;函数的返回值、std::move函数的返回值、转换为T&amp;amp;&amp;amp;类型转换函数的返回值，将亡值可以理解为即将要销毁的值，通过“盗取”其它变量内存空间方式获取的值，在确保其它变量不再被使用或者即将被销毁时，可以避免内存空间的释放和分配，延长变量值的生命周期，常用来完成移动构造或者移动赋值的特殊任务。&lt;/p>
&lt;p>举例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">xxx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="n">A&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// c是将亡值
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// d是将亡值
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="左值引用">左值引用&lt;/h2>
&lt;p>先看一下传统的左值引用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 定义一个左值引用变量
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 通过左值引用修改引用内存的值
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>左值引用在汇编层面其实和普通的指针是一样的；定义引用变量必须初始化，因为引用其实就是一个别名，需要告诉编译器定义的是谁的引用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上述代码是无法编译通过的，因为10无法进行取地址操作，无法对一个立即数取地址，因为立即数并没有在内存中存储，而是存储在寄存器中，可以通过下述方法解决：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用常引用来引用常量数字10，因为此刻内存上产生了临时变量保存了10，这个临时变量是可以进行取地址操作的，因此var引用的其实是这个临时变量，相当于下面的操作：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据上述分析，得出如下结论：&lt;/p>
&lt;ul>
&lt;li>左值引用要求右边的值必须能够取地址，如果无法取地址，可以用常引用；&lt;br>
但使用常引用后，我们只能通过引用来读取数据，无法去修改数据，因为其被const修饰成常量引用了。&lt;/li>
&lt;/ul>
&lt;p>那么C++11 引入了右值引用的概念，使用右值引用能够很好的解决这个问题。&lt;/p>
&lt;p>&lt;strong>右值引用&lt;/strong>&lt;/p>
&lt;p>C++对于左值和右值没有标准定义，但是有一个被广泛认同的说法：&lt;/p>
&lt;ul>
&lt;li>可以取地址的，有名字的，非临时的就是左值；&lt;/li>
&lt;li>不能取地址的，没有名字的，临时的就是右值；&lt;/li>
&lt;/ul>
&lt;p>可见立即数，函数返回的值等都是右值；&lt;/p>
&lt;p>而非匿名对象(包括变量)，函数返回的引用，const对象等都是左值。&lt;/p>
&lt;p>从本质上理解，创建和销毁由编译器幕后控制，程序员只能确保在本行代码有效的，就是右值(包括立即数)；&lt;/p>
&lt;p>而用户创建的，通过作用域规则可知其生存期的，就是左值(包括函数返回的局部变量的引用以及const对象)。&lt;/p>
&lt;p>定义右值引用的格式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TYPE_NAME&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ref_name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">右值表达式&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>右值引用是C++ 11新增的特性，所以C++ 98的引用为左值引用。&lt;/p>
&lt;p>右值引用用来绑定到右值，绑定到右值以后本来会被销毁的右值的生存期会延长至与绑定到它的右值引用的生存期。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在汇编层面右值引用做的事情和常引用是相同的，即产生临时量来存储常量。&lt;/p>
&lt;p>但是，唯一 一点的区别是，右值引用可以进行读写操作，而常引用只能进行读操作。&lt;/p>
&lt;p>右值引用的存在并不是为了取代左值引用，而是充分利用右值(特别是临时对象)的构造来减少对象构造和析构操作以达到提高效率的目的。&lt;/p>
&lt;p>用C++实现一个简单的顺序栈：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">class&lt;/span> &lt;span class="nc">Stack&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="c1">// 构造
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
    &lt;span class="o">:&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mtop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
    &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Stack(int)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 析构
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
    &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;~Stack()&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 拷贝构造
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Stack&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span>
    &lt;span class="o">:&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mtop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mtop&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
    &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Stack(const Stack&amp;amp;)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">];&lt;/span>
    &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">mtop&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
    &lt;span class="n">mpstack&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
    &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 赋值重载
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Stack&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
    &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;operator=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="n">msize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="n">mtop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mtop&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">];&lt;/span>
    &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">mtop&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
    &lt;span class="n">mpstack&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
    &lt;span class="p">}&lt;/span>
    &lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">getSize&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
    &lt;span class="k">return&lt;/span> &lt;span class="n">msize&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">mtop&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">msize&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="n">Stack&lt;/span> &lt;span class="nf">GetStack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Stack&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">Stack&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getSize&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">Stack&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetStack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">Stack(int) // 构造s
Stack(int) // 构造tmp
Stack(const Stack&amp;amp;) // tmp拷贝构造main函数栈帧上的临时对象
~Stack() // tmp析构
operator= // 临时对象赋值给s
~Stack() // 临时对象析构
~Stack() // s析构
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了解决浅拷贝问题，为类提供了自定义的拷贝构造函数和赋值运算符重载函数，并且这两个函数内部实现都是非常的耗费时间和资源(首先开辟较大的空间，然后将数据逐个复制)，我们通过上述运行结果发现了两处使用了拷贝构造和赋值重载，分别是tmp拷贝构造main函数栈帧上的临时对象、临时对象赋值给s，其中tmp和临时对象都在各自的操作结束后便销毁了，使得程序效率非常低下。&lt;/p>
&lt;p>那么我们为了提高效率，是否可以把tmp持有的内存资源直接给临时对象？是否可以把临时对象的资源直接给s？&lt;/p>
&lt;p>在C++11中，我们可以解决上述问题，方式是提供带右值引用参数的拷贝构造函数和赋值运算符重载函数.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// 带右值引用参数的拷贝构造函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Stack&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">:&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mtop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mtop&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Stack(Stack&amp;amp;&amp;amp;)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="cm">/*此处没有重新开辟内存拷贝数据，把src的资源直接给当前对象，再把src置空*/&lt;/span>
&lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 带右值引用参数的赋值运算符重载函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Stack&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;operator=(Stack&amp;amp;&amp;amp;)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">msize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">mtop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mtop&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="cm">/*此处没有重新开辟内存拷贝数据，把src的资源直接给当前对象，再把src置空*/&lt;/span>
&lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 构造s
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 构造tmp
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 调用带右值引用的拷贝构造函数，直接将tmp的资源给临时对象
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// tmp析构
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 调用带右值引用的赋值运算符重载函数，直接将临时对象资源给s
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 临时对象析构
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// s析构
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>程序自动调用了带右值引用的拷贝构造函数和赋值运算符重载函数，使得程序的效率得到了很大的提升，因为并没有重新开辟内存拷贝数据。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以直接赋值的原因是临时对象即将销毁，不会出现浅拷贝的问题，我们直接把临时对象持有的资源赋给新对象就可以了。&lt;/p>
&lt;p>所以，临时量都会自动匹配右值引用版本的成员方法，旨在提高内存资源使用效率。&lt;/p>
&lt;p>带右值引用参数的拷贝构造和赋值重载函数，又叫移动构造函数和移动赋值函数，这里的移动指的是把临时量的资源移动给了当前对象，临时对象就不持有资源，为nullptr了，实际上没有进行任何的数据移动，没发生任何的内存开辟和数据拷贝。&lt;/p>
&lt;h3 id="完美转发">完美转发&lt;/h3>
&lt;p>完美转发指可以写一个接受任意实参的函数模板，并转发到其它函数，目标函数会收到与转发函数完全相同的实参，转发函数实参是左值那目标函数实参也是左值，转发函数实参是右值那目标函数实参也是右值。那如何实现完美转发呢，答案是使用std::forward()。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">void&lt;/span> &lt;span class="nf">PrintV&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;lvalue&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">PrintV&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;rvalue&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">PrintV&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">PrintV&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">PrintV&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// lvalue rvalue rvalue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// lvalue lvalue rvalue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// lvalue rvalue rvalue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// lvalue lvalue rvalue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// lvalue rvalue rvalue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>Test(1)：1是右值，模板中T &amp;amp;&amp;amp;t这种为万能引用，右值1传到Test函数中变成了右值引用，但是调用PrintV()时候，t变成了左值，因为它变成了一个拥有名字的变量，所以打印lvalue，而PrintV(std::forward(t))时候，会进行完美转发，按照原来的类型转发，所以打印rvalue，PrintV(std::move(t))毫无疑问会打印rvalue。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Test(a)：a是左值，模板中T &amp;amp;&amp;amp;这种为万能引用，左值a传到Test函数中变成了左值引用，所以有代码中打印。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Test(std::forward(a))：转发为左值还是右值，依赖于T，T是左值那就转发为左值，T是右值那就转发为右值。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="返回值优化">返回值优化&lt;/h3>
&lt;p>返回值优化(RVO)是一种C++编译优化技术，当函数需要返回一个对象实例时候，就会创建一个临时对象并通过复制构造函数将目标对象复制到临时对象，这里有复制构造函数和析构函数会被多余的调用到，有代价，而通过返回值优化，C++标准允许省略调用这些复制构造函数。&lt;/p>
&lt;p>那什么时候编译器会进行返回值优化呢?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>return的值类型与函数的返回值类型相同&lt;/p>
&lt;/li>
&lt;li>
&lt;p>return的是一个局部对象&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>看几个例子:&lt;/p>
&lt;p>示例1：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">rval_ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不会触发RVO，拷贝构造了一个临时的对象，临时对象的生命周期和rval_ref绑定，等价于下面这段代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">rval_ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>示例2：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">rval_ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码会造成运行时错误，因为rval_ref引用了被析构的tmp。讲道理来说这段代码是错的，但我自己运行过程中却成功了，我没有那么幸运，这里不纠结，继续向下看什么时候会触发RVO。&lt;/p>
&lt;p>示例3：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">rval_ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>和示例1类似，std::move一个临时对象是没有必要的，也会忽略掉返回值优化。&lt;/p>
&lt;p>最好的代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rval_ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码会触发RVO，不拷贝也不移动，不生成临时对象。&lt;/p></description></item><item><title>C++11</title><link>https://justice.bj.cn/post/14.language/c++/c++11/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++11/</guid><description>&lt;h1 id="c11">C++11&lt;/h1>
&lt;h2 id="左值与右值">左值与右值&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>可以取地址的，有名字的，非临时的就是&lt;strong>左值&lt;/strong>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不能取地址的，没有名字的，临时的就是&lt;strong>右值&lt;/strong>；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="thread_local">thread_local&lt;/h2>
&lt;p>thread_local 变量是 C++ 11 新引入的一种存储类型,这些变量(或者说对象）在线程开始的时候被生成(allocated)，在线程结束的时候被销毁(deallocated)。并且每 一个线程都拥有一个独立的变量实例。&lt;code>thread_local&lt;/code> 可以和&lt;code>static&lt;/code> 与 &lt;code>extern&lt;/code>关键字联合使用，这将影响变量的链接属性(to adjust linkage)。&lt;/p>
&lt;p>Thread_local 变量使用范围：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">thread_local&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//命名空间下的全局变
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">X&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="k">thread_local&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//A thread-local static class data member
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="k">thread_local&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">X&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//The definition of X::s is required
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">thread_local&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//A thread-local local variable
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://www.cnblogs.com/pop-lar/p/5123014.html">https://www.cnblogs.com/pop-lar/p/5123014.html&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>c++基础</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="c基础">c++基础&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="构造析构">构造析构&lt;/h2>
&lt;ul>
&lt;li>默认函数(Defaulted 函数)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">Object&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//默认构造函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//析构函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//复制构造函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//移动构造函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//赋值函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//移动赋值函数
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>构造函数执行顺序&lt;/li>
&lt;li>析构函数执行顺序&lt;/li>
&lt;/ul>
&lt;h2 id="全局默认操作符函数">全局默认操作符函数&lt;/h2>
&lt;ul>
&lt;li>&lt;code>operator ,&lt;/code>&lt;/li>
&lt;li>&lt;code>operator &amp;amp;&lt;/code>&lt;/li>
&lt;li>&lt;code>operator &amp;amp;&amp;amp;&lt;/code>&lt;/li>
&lt;li>&lt;code>operator .&lt;/code>&lt;/li>
&lt;li>&lt;code>operator -&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>operator *&lt;/code>&lt;/li>
&lt;li>&lt;code>operator new&lt;/code>&lt;/li>
&lt;li>&lt;code>operator delete&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="虚函数">虚函数&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">func1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//普通虚函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">func2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//纯虚函数，子类必须实现基类的纯虚函数。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>虚函数表&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>纯虚函数&lt;/strong>：
&lt;ul>
&lt;li>纯虚函数是在基类中声明的虚函数，它在基类中没有定义&lt;/li>
&lt;li>任何派生类都要定义自己的实现方法。&lt;/li>
&lt;li>在基类中实现纯虚函数的方法是在函数原型后加“=0”&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>抽象类&lt;/strong>：
&lt;ul>
&lt;li>含有纯虚函数的类称为抽象类，&lt;/li>
&lt;li>抽象类不能实例化；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="继承">继承&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">class&lt;/span> &lt;span class="nc">base&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">son&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">base&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>重载，隐藏，覆盖&lt;/li>
&lt;li>多重继承&lt;/li>
&lt;/ol>
&lt;h2 id="左值右值">左值右值&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>左值&lt;/strong>(l-value): 表达式结束后仍存在的值，可以使用&amp;amp;取地址&lt;/li>
&lt;li>&lt;strong>右值&lt;/strong>(r-value)：表达式结束后不存在的值，不可用&amp;amp;取地址&lt;/li>
&lt;/ul>
&lt;h2 id="移动语义">移动语义&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">move&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//操作符
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="decltype-类型推导">decltype 类型推导&lt;/h2>
&lt;h2 id="关键字">关键字&lt;/h2>
&lt;ul>
&lt;li>explicit：用于防止由构造函数定义的隐式转换，只能用在类内部的构造函数声明上，而不能用在类外部的函数定义上。&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="存储周期">存储周期&lt;/h2>
&lt;ul>
&lt;li>automatic&lt;/li>
&lt;li>static&lt;/li>
&lt;li>dynamic&lt;/li>
&lt;li>thread&lt;/li>
&lt;/ul>
&lt;h2 id="aba">ABA&lt;/h2></description></item><item><title>C++字符串</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>&lt;h1 id="c字符串">C++字符串&lt;/h1>
&lt;h2 id="stdstring">&lt;code>std::string&lt;/code>&lt;/h2>
&lt;p>C++ 字符串库支持三种通用字符串类型：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string" title="cpp/string/basic string">std::basic_string&lt;/a> ——为操作任何字符类型的字符串设计的模板类。&lt;/li>
&lt;li>&lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string_view" title="cpp/string/basic string view">std::basic_string_view&lt;/a> (C++17) ——对于字符串子序列的轻量无所有权的只读视图。&lt;/li>
&lt;li>空终止字符串 - 以特殊的&lt;em>空&lt;/em>字符终止的字符数组。&lt;/li>
&lt;/ul>
&lt;h3 id="stdbasic_stringhttpszhcppreferencecomwcppstringbasic_string-cppstringbasic-string">&lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string" title="cpp/string/basic string">std::basic_string&lt;/a>&lt;/h3>
&lt;p>模板类 &lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string" title="cpp/string/basic string">std::basic_string&lt;/a> 通用化字符序列如何操作及存储。字符串创建、操作及析构全部为便利的类方法集合与相关函数所处理。&lt;/p>
&lt;p>标准提供 &lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string" title="cpp/string/basic string">std::basic_string&lt;/a> 对常用类型的数种特化：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>定义于头文件 &lt;code>&amp;lt;string&amp;gt;&lt;/code>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>类型&lt;/td>
&lt;td>定义&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string" title="cpp/string/basic string">std::string&lt;/a>&lt;/td>
&lt;td>&lt;a href="http://zh.cppreference.com/w/cpp/string/basic_string">std::basic_string&lt;/a>&lt;char>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string" title="cpp/string/basic string">std::wstring&lt;/a>&lt;/td>
&lt;td>&lt;a href="http://zh.cppreference.com/w/cpp/string/basic_string">std::basic_string&lt;/a>&amp;lt;wchar_t&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>std::u8string (C++20 起)&lt;/td>
&lt;td>&lt;a href="http://zh.cppreference.com/w/cpp/string/basic_string">std::basic_string&lt;/a>&amp;lt;char8_t&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string" title="cpp/string/basic string">std::u16string&lt;/a> (C++11 起)&lt;/td>
&lt;td>&lt;a href="http://zh.cppreference.com/w/cpp/string/basic_string">std::basic_string&lt;/a>&amp;lt;char16_t&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string" title="cpp/string/basic string">std::u32string&lt;/a> (C++11 起)&lt;/td>
&lt;td>&lt;a href="http://zh.cppreference.com/w/cpp/string/basic_string">std::basic_string&lt;/a>&amp;lt;char32_t&amp;gt;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="stdbasic_string_viewhttpszhcppreferencecomwcppstringbasic_string_view-cppstringbasic-string-view">&lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string_view" title="cpp/string/basic string view">std::basic_string_view&lt;/a>&lt;/h3>
&lt;p>模板类 &lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string_view" title="cpp/string/basic string view">std::basic_string_view&lt;/a> 提供一个轻量对象，它使用类似 &lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string" title="cpp/string/basic string">std::basic_string&lt;/a> 接口的接口，提供对字符串一部分的只读访问。标准提供 &lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string_view" title="cpp/string/basic string view">std::basic_string_view&lt;/a> 对常用类型的数种特化：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>定义于头文件 &lt;code>&amp;lt;string_view&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>类型&lt;/td>
&lt;td>定义&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string_view" title="cpp/string/basic string view">std::string_view&lt;/a> (C++17 起)&lt;/td>
&lt;td>&lt;a href="http://zh.cppreference.com/w/cpp/string/basic_string_view">std::basic_string_view&lt;/a>&lt;char>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string_view" title="cpp/string/basic string view">std::wstring_view&lt;/a> (C++17 起)&lt;/td>
&lt;td>&lt;a href="http://zh.cppreference.com/w/cpp/string/basic_string_view">std::basic_string_view&lt;/a>&amp;lt;wchar_t&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>std::u8string_view (C++20 起)&lt;/td>
&lt;td>&lt;a href="http://zh.cppreference.com/w/cpp/string/basic_string_view">std::basic_string_view&lt;/a>&amp;lt;char8_t&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string_view" title="cpp/string/basic string view">std::u16string_view&lt;/a> (C++17 起)&lt;/td>
&lt;td>&lt;a href="http://zh.cppreference.com/w/cpp/string/basic_string_view">std::basic_string_view&lt;/a>&amp;lt;char16_t&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string_view" title="cpp/string/basic string view">std::u32string_view&lt;/a> (C++17 起)&lt;/td>
&lt;td>&lt;a href="http://zh.cppreference.com/w/cpp/string/basic_string_view">std::basic_string_view&lt;/a>&amp;lt;char32_t&amp;gt;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>(C++17 起)&lt;/p>
&lt;h3 id="空终止字符串">空终止字符串&lt;/h3>
&lt;p>空终止字符串是以特殊的&lt;em>空&lt;/em>字符终止的字符数组。C++提供创建、检查及修改空终止字符串的函数。&lt;/p>
&lt;p>空终止字符串有三种类型：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zh.cppreference.com/w/cpp/string/byte" title="cpp/string/byte">空终止字节字符串&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zh.cppreference.com/w/cpp/string/multibyte" title="cpp/string/multibyte">空终止多字节字符串&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zh.cppreference.com/w/cpp/string/wide" title="cpp/string/wide">空终止宽字符串&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="附加支持">附加支持&lt;/h3>
&lt;h4 id="stdchar_traitshttpszhcppreferencecomwcppstringchar_traits-cppstringchar-traits">&lt;a href="https://zh.cppreference.com/w/cpp/string/char_traits" title="cpp/string/char traits">std::char_traits&lt;/a>&lt;/h4>
&lt;p>字符串库亦提供类模板 &lt;a href="https://zh.cppreference.com/w/cpp/string/char_traits" title="cpp/string/char traits">std::char_traits&lt;/a> ，它为 &lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string" title="cpp/string/basic string">std::basic_string&lt;/a> 和 &lt;a href="https://zh.cppreference.com/w/cpp/string/basic_string_view" title="cpp/string/basic string view">std::basic_string_view&lt;/a> (C++17 起)定义类型和函数。标准定义下列特化：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>定义于头文件&lt;a href="https://zh.cppreference.com/w/cpp/header/string" title="cpp/header/string">&lt;string>&lt;/a>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>template&amp;lt;&amp;gt; class char_traits&lt;char>;&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>template&amp;lt;&amp;gt; class char_traits&amp;lt;wchar_t&amp;gt;;&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>template&amp;lt;&amp;gt; class char_traits&amp;lt;char8_t&amp;gt;;&lt;/td>
&lt;td>&lt;/td>
&lt;td>(C++20 起)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>template&amp;lt;&amp;gt; class char_traits&amp;lt;char16_t&amp;gt;;&lt;/td>
&lt;td>&lt;/td>
&lt;td>(C++11 起)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>template&amp;lt;&amp;gt; class char_traits&amp;lt;char32_t&amp;gt;;&lt;/td>
&lt;td>&lt;/td>
&lt;td>(C++11 起)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="转换与分类">转换与分类&lt;/h4>
&lt;p>&lt;a href="https://zh.cppreference.com/w/cpp/locale" title="cpp/locale">本地化库&lt;/a>提供对字符串转换的支持（例如 &lt;a href="http://zh.cppreference.com/w/cpp/locale/wstring_convert">std::wstring_convert&lt;/a> 或 std::toupper ），还有分类字符的函数（例如 std::isspace 或 std::isdigit ）。&lt;/p>
&lt;h2 id="stringpiece">&lt;strong>StringPiece&lt;/strong>&lt;/h2>
&lt;p> Google就是string的只读视图，为了便于解释，直接来看代码吧：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">void&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>const &amp;amp;&lt;/code> 限定了 函数 &lt;code>func&lt;/code> 没法修改入参 &lt;code>str&lt;/code>，但是如果给 &lt;code>func&lt;/code> 传递的参数是 &lt;code>char *&lt;/code> 或者 &lt;code>const char *&lt;/code>，那么将&lt;strong>构造一个临时的 std::string，并且产生了字符串的拷贝&lt;/strong>，但是显然这次拷贝并没有必要。StringPiece 就是在这种情况去替换 std::string，可以避免字符串拷贝，因为 StringPiece 只是简单接管一下指针，看一下 StringPiece 的简单实现就知道了，这里以 leveldb 中的 Slice 为例子，看一下其构造函数就明白了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">class&lt;/span> &lt;span class="nc">LEVELDB_EXPORT&lt;/span> &lt;span class="n">Slice&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="p">......&lt;/span>
&lt;span class="n">Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">data_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">size_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">......&lt;/span>
&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">size_t&lt;/span> &lt;span class="n">size_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="fbstring">FBString&lt;/h2>
&lt;p>FBString 是 facebook 开源 C++ lib folly 的一个 std::string 替换着，如果你&lt;strong>想更好的性能&lt;/strong>，又不想重写，那么 FBString 是一个不错的选择，Facebook 对其做了大量的性能优化，其核心特点如下：&lt;/p>
&lt;ol>
&lt;li>100% 兼容 std::string&lt;/li>
&lt;li>高性能的内存管理，对不同大小的字符串， 分 3 种情况分配和管理内存：（1）string length &amp;lt;= 23，使用栈上内存；（2）23&amp;lt; string length &amp;lt;=255，使用 malloc 分配堆上内存；（3）string lenght &amp;gt; 255，堆上内存，且使用引用计数 + COW 计数，实现在真正需要的时候才拷贝修改，避免大字符串不必要的拷贝&lt;/li>
&lt;li>find 操作使用了 Boyer Moore [3] 算法，相比 O(n) 的 KMP 实际性能好很多，Facebook 官方宣称性能：&lt;code>Casual tests indicate a 30x speed improvement over&lt;/code>string::find()&lt;code>for successful searches and a 1.5x speed improvement for failed searches&lt;/code>&lt;/li>
&lt;/ol></description></item><item><title>C++并发</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%B9%B6%E5%8F%91/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%B9%B6%E5%8F%91/</guid><description>&lt;h1 id="c并发">C++并发&lt;/h1>
&lt;h2 id="多线程">多线程&lt;/h2>
&lt;h2 id="同步">同步&lt;/h2>
&lt;h3 id="互斥量mutex">互斥量(mutex)&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>mutex&lt;/strong>:&lt;/li>
&lt;li>&lt;strong>lock_guard&lt;/strong>: 严格基于作用域的互斥体所有权包装器, 通过 RAII 机制实现 mutex 的封装，创建 &lt;code>lock_guard&lt;/code> 对象时，它试图接收给定互斥的所有权。控制离开创建 &lt;code>lock_guard&lt;/code> 对象的作用域时，销毁 &lt;code>lock_guard&lt;/code> 并释放互斥。自能基于作用域释放，无法自主控制 unlock；&lt;/li>
&lt;li>&lt;strong>scoped_lock&lt;/strong>（c++17）:&lt;/li>
&lt;li>&lt;strong>unique_lock&lt;/strong>：通用互斥包装器，允许延迟锁定、锁定的有时限尝试、递归锁定、所有权转移和与条件变量一同使用。可移动，但不可复制。&lt;/li>
&lt;li>&lt;strong>shared_lock&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h3 id="条件变量condition_varaiable">条件变量(condition_varaiable)&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">void&lt;/span> &lt;span class="nf">th1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">locker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mu&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_front&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">locker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">cond&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">notify_one&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// Notify one waiting thread, if there is one.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">this_thread&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">sleep_for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">chrono&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">th2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_lock&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">locker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mu&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">cond&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">locker&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// Unlock mu and wait to be notified
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">back&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop_back&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">locker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;t2 got a value from t1: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="原子量atomic">原子量(atomic)&lt;/h3></description></item><item><title>C++日志</title><link>https://justice.bj.cn/post/14.language/c++/ulities/c++log/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/c++log/</guid><description>&lt;h1 id="c日志">C++日志&lt;/h1>
&lt;h2 id="muduo-asynclog">muduo-AsyncLog&lt;/h2>
&lt;p>双缓冲异步日志&lt;/p>
&lt;ul>
&lt;li>双缓冲buffer&lt;/li>
&lt;li>优化时间&lt;/li>
&lt;/ul>
&lt;h2 id="zlog">zlog&lt;/h2>
&lt;p>z-log是一个高性能、线程安全、灵活、概念清晰的纯C日志函数库。&lt;/p>
&lt;h2 id="g3log">g3log&lt;/h2>
&lt;p>G3log 是一个开源、支持跨平台的异步 C++ 日志框架，支持自定义日志格式。基于 g2log 构建，提升了性能，支持自定义格式。&lt;/p>
&lt;ul>
&lt;li>日志和契约式设计框架&lt;/li>
&lt;li>异步调用&lt;/li>
&lt;li>线程安全&lt;/li>
&lt;li>队列式日志&lt;/li>
&lt;li>捕获和记录 SIGSEGV 以及其他严重的信号&lt;/li>
&lt;li>在 Linux/OSX 上严重的信号会生成堆栈记录&lt;/li>
&lt;li>G3log 跨平台，支持 Windows, Linux 和 OSX&lt;/li>
&lt;/ul>
&lt;h2 id="handy-log">handy-log&lt;/h2>
&lt;h2 id="spdlog">spdlog&lt;/h2>
&lt;h2 id="ringlog">RingLog&lt;/h2>
&lt;ul>
&lt;li>双向循环链表组成的环形缓冲区；&lt;/li>
&lt;li>优化UTC日志时间生成策略；&lt;/li>
&lt;/ul>
&lt;h2 id="easylogger">&lt;strong>EasyLogger&lt;/strong>&lt;/h2>
&lt;h2 id="nanolog">NanoLog&lt;/h2>
&lt;ul>
&lt;li>
&lt;h2 id="参考">参考&lt;/h2>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/21477468">https://zhuanlan.zhihu.com/p/21477468&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item></channel></rss>