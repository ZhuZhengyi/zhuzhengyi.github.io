<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Justice的小站</title><link>https://justice.bj.cn/</link><description>Recent content on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 13 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>Justice's Blog</title><link>https://justice.bj.cn/homepage/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/about/</guid><description>&lt;h2 id="self-introduction">Self Introduction&lt;/h2>
&lt;p>Cras ex dui, tristique a libero eget, consectetur semper ligula. Nunc augue arcu, malesuada a nisi et, molestie finibus metus. Sed lacus odio, ultricies a nisl vitae, sollicitudin tempor ipsum. Vivamus quis feugiat arcu. Sed mi nunc, efficitur quis tellus vitae, posuere mattis metus. Phasellus in mattis dui. Nullam blandit, augue non ullamcorper dapibus, lacus dui molestie massa, in iaculis purus lectus eu lectus. Duis hendrerit lacinia tellus, sit amet feugiat dolor placerat id. Aenean ac velit massa. Vivamus feugiat dui at magna viverra, ut dictum nunc rutrum. Duis eget sapien finibus, lobortis orci id, vestibulum tellus. Maecenas lobortis urna libero, quis fermentum lectus lobortis nec. Nullam laoreet volutpat libero, ac mattis magna ullamcorper quis. Duis eget ipsum eu nisi mattis cursus et vitae turpis.&lt;/p>
&lt;p>Aliquam pretium diam eget leo feugiat finibus. Donec malesuada commodo ipsum. Aenean a massa in lacus venenatis vestibulum. Duis vel sem quis elit iaculis consectetur et quis dolor. Morbi eu ipsum hendrerit, malesuada ante sed, dapibus est. Suspendisse feugiat nulla ut gravida convallis. Phasellus id massa posuere, rhoncus justo ut, porttitor dolor. Nulla ultrices malesuada egestas. Nunc fermentum tincidunt sem ac vulputate. Donec mollis sollicitudin justo eget varius. Donec ornare velit et felis blandit, id molestie sapien lobortis. Morbi eget tristique justo. Mauris posuere, nibh eu laoreet ultricies, ligula erat iaculis sapien, vel dapibus lacus libero ut diam. Etiam viverra ante felis, et scelerisque nunc pellentesque vitae. Praesent feugiat dictum molestie.&lt;/p>
&lt;h2 id="details">Details&lt;/h2>
&lt;p>Nunc pellentesque vitae:&lt;/p>
&lt;ul>
&lt;li>Morbi accumsan nibh efficitur diam molestie, non dignissim diam facilisis.&lt;/li>
&lt;li>Donec dignissim leo in mollis faucibus.&lt;/li>
&lt;li>Donec blandit lacus a pellentesque fermentum.&lt;/li>
&lt;/ul>
&lt;p>Donec mollis sollicitudin:&lt;/p>
&lt;ul>
&lt;li>Nunc dictum purus ornare purus consectetur, eu pellentesque massa ullamcorper.&lt;/li>
&lt;li>Aliquam eu leo vitae justo aliquam tincidunt.&lt;/li>
&lt;li>Fusce non massa id augue interdum feugiat sed et nulla.&lt;/li>
&lt;li>Vivamus molestie augue in tristique laoreet.&lt;/li>
&lt;/ul></description></item><item><title>Pages</title><link>https://justice.bj.cn/homepage/pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/pages/</guid><description/></item><item><title>Experiences</title><link>https://justice.bj.cn/homepage/experiences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/experiences/</guid><description/></item><item><title>Vintage</title><link>https://justice.bj.cn/homepage/vintage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/vintage/</guid><description/></item><item><title>Blank</title><link>https://justice.bj.cn/homepage/blank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/blank/</guid><description>
&lt;div style="text-align:center">
&lt;p>Write anything you like here!&lt;/p>
&lt;/div></description></item><item><title>C++11左值与右值</title><link>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid><description>&lt;h1 id="c11左值与右值">C++11左值与右值&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>在C++11之前，表达式的值按出现在&lt;code>=&lt;/code>的位置不同可简单分为&lt;code>左值&lt;/code>和&lt;code>右值&lt;/code>2种；&lt;/p>
&lt;p>在C++11中，为了实现函数参数传递的零拷贝开销，对值类型进行了更详细的划分：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>glvalue&lt;/strong>（泛左值）：拥有身份的表达式，“泛化的”左值，包括左值或将亡值；&lt;/li>
&lt;li>&lt;strong>lvalue&lt;/strong>（左值）：拥有身份且不可被移动值，用于标识一个函数或对象，是在表达式（不一定是赋值表达式）后依然存在的持久对象。左值可以出现在&lt;code>=&lt;/code>的左边）；&lt;/li>
&lt;li>&lt;strong>xvalue&lt;/strong>（将亡值）：一个接近声明周期末尾的对象。将亡值是某些涉及右值引用的表达式的结果，拥有身份且可被移动的表达式；&lt;/li>
&lt;li>&lt;strong>prvalue&lt;/strong>（纯右值）：是不拥有身份且可被移动的表达式，非将亡值的右值；&lt;/li>
&lt;li>&lt;strong>rvalue&lt;/strong>（右值）：是可移动的表达式值，在表达式结束后就不再存在的临时对象；包括将亡值、临时对象或其子对象、不关联对象的值，右值是等号右边的值；&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>拥有ID&lt;/th>
&lt;th>可移动&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>glvalue&lt;/td>
&lt;td>是&lt;/td>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lvalue&lt;/td>
&lt;td>是&lt;/td>
&lt;td>否&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>xvalue&lt;/td>
&lt;td>是&lt;/td>
&lt;td>是&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>prvalue&lt;/td>
&lt;td>否&lt;/td>
&lt;td>是&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rvalue&lt;/td>
&lt;td>-&lt;/td>
&lt;td>是&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://justice.bj.cn/Users/justice/tmp/notebook-img/2021-12-11-09-39-48-image.png" alt="">&lt;/p>
&lt;h3 id="左值右值">左值、右值&lt;/h3>
&lt;h4 id="左值lvalue">左值(lvalue)&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>拥有身份（identity）且不可被移动的值；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以放到等号左边；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以获取内存地址(拥有id)并安全(不可被移动)的使用它；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>常见的左值：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>已命名的变量或常量；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数名；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回左值引用的函数调用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>前置自增自减表达式++i、&amp;ndash;i；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>赋值表达式或赋值运算符连接的表达式(a=b, a += b等)；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解引用表达式&lt;code>*p&lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>字符串字面值&amp;quot;abcd&amp;quot;;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="右值rvalue">右值(rvalue)&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>可被移动的值；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不能取地址,没有名字;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>右值包含：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>纯右值：可移动且拥有ID；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将亡值：可移动且不拥有ID；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="纯右值prvalue">纯右值(prvalue)&lt;/h4>
&lt;ul>
&lt;li>不拥有ID且可被移动的值；&lt;/li>
&lt;li>纯右值包括：
&lt;ul>
&lt;li>运算表达式产生的临时变量；&lt;/li>
&lt;li>不和对象关联的原始字面量；&lt;/li>
&lt;li>非引用返回的临时变量；&lt;/li>
&lt;li>lambda表达式等；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>举例：&lt;/p>
&lt;ul>
&lt;li>除字符串字面值外的字面值；&lt;/li>
&lt;li>返回非引用类型的函数调用；&lt;/li>
&lt;li>后置自增自减表达式i++、i&amp;ndash;；&lt;/li>
&lt;li>算术表达式(a+b, a*b, a&amp;amp;&amp;amp;b, a==b等)；&lt;/li>
&lt;li>this指针；&lt;/li>
&lt;li>所有内建数值运算表达式：&lt;code>a + b, a % b, a &amp;amp; b, a &amp;lt;&amp;lt; b&lt;/code>&lt;/li>
&lt;li>取址表达式:&lt;code>&amp;amp;a&lt;/code>;&lt;/li>
&lt;/ul>
&lt;h4 id="将亡值xvalue">将亡值(xvalue)&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>拥有ID且可被移动的值；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将亡值是即将要销毁的值，通过“盗取”其它变量内存空间方式获取的值；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在确保其它变量不再被使用或者即将被销毁时，可以避免内存空间的释放和分配，延长变量值的生命周期；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>常用来完成移动构造或者移动赋值的特殊任务；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将亡值包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>将要被移动的对象；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>T&amp;amp;&amp;amp;函数的返回值；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>std::move函数的返回值；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>转换为T&amp;amp;&amp;amp;类型转换函数的返回值；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>举例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">xxx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="n">A&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// a是左值
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// c是将亡值
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// d是将亡值
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="左值引用">左值引用&lt;/h2>
&lt;p>先看一下传统的左值引用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 定义一个左值引用变量
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 通过左值引用修改引用内存的值
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>左值引用在汇编层面其实和普通的指针是一样的；定义引用变量必须初始化，因为引用其实就是一个别名，需要告诉编译器定义的是谁的引用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//错误， 10是立即数，无法取地址；
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//正确， 常引用参数临时变量保存10，可取地址，但只能读取，无法修改var值；
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据上述分析，得出如下结论：&lt;/p>
&lt;ul>
&lt;li>左值引用要求右边的值必须能够取地址，如果无法取地址，可以用常引用；&lt;br>
但使用常引用后，我们只能通过引用来读取数据，无法去修改数据，因为其被const修饰成常量引用了。&lt;/li>
&lt;/ul>
&lt;p>那么C++11 引入了右值引用的概念，使用右值引用能够很好的解决这个问题。&lt;/p>
&lt;h3 id="右值引用">右值引用&lt;/h3>
&lt;p>从本质上理解，创建和销毁由编译器幕后控制，程序员只能确保在本行代码有效的，就是右值(包括立即数)；&lt;/p>
&lt;p>而用户创建的，通过作用域规则可知其生存期的，就是左值(包括函数返回的局部变量的引用以及const对象)。&lt;/p>
&lt;p>定义右值引用的格式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TYPE_NAME&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ref_name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">右值表达式&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>右值引用是C++ 11新增的特性，所以C++ 98的引用为左值引用。&lt;/p>
&lt;p>右值引用用来绑定到右值，绑定到右值以后本来会被销毁的右值的生存期会延长至与绑定到它的右值引用的生存期。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//常量引用只能读取，无法修改var值；
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">var&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//右值引用可以进行读写操作；
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>右值引用充分利用右值(特别是临时对象)的构造来减少对象构造和析构操作以达到提高效率的目的。&lt;/p>
&lt;h3 id="stdmove">std::move&lt;/h3>
&lt;p>&lt;code>std::move&lt;/code>将左值强转为可以被移动的右值（将亡值）引用，指示了该对象可移动，从而使得我们可以通过右值引用的方式继续使用该对象，以用于移动语义。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// simple impl
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="k">typename&lt;/span> &lt;span class="n">remove_reference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">remove_reference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>参数&lt;code>T &amp;amp;&amp;amp;t&lt;/code>并不是代表右值引用，而是转发引用（也叫万能引用）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>转发引用既能是右值引用，也可以是左值引用，这与类型推导和引用折叠有关。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果用右值初始化转发引用，那么得到的是右值引用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果用左值初始化转发引用，那么得到的是左值引用。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>用C++实现一个简单的顺序栈：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">class&lt;/span> &lt;span class="nc">Stack&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="c1">// 构造
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
    &lt;span class="o">:&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mtop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
    &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Stack(int)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 析构
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
    &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;~Stack()&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 拷贝构造
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Stack&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span>
    &lt;span class="o">:&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mtop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mtop&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
    &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Stack(const Stack&amp;amp;)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">];&lt;/span>
    &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">mtop&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
    &lt;span class="n">mpstack&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
    &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 赋值重载
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Stack&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
    &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;operator=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="n">msize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="n">mtop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mtop&lt;/span>&lt;span class="p">;&lt;/span>
    &lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">];&lt;/span>
    &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">mtop&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
    &lt;span class="n">mpstack&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
    &lt;span class="p">}&lt;/span>
    &lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">getSize&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
    &lt;span class="k">return&lt;/span> &lt;span class="n">msize&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">mtop&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">msize&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="n">Stack&lt;/span> &lt;span class="nf">GetStack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Stack&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">Stack&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getSize&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">Stack&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetStack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 构造s
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 构造tmp
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// tmp拷贝构造main函数栈帧上的临时对象
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// tmp析构
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="c1">// 临时对象赋值给s
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 临时对象析构
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// s析构
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了解决浅拷贝问题，为类提供了自定义的拷贝构造函数和赋值运算符重载函数，并且这两个函数内部实现都是非常的耗费时间和资源(首先开辟较大的空间，然后将数据逐个复制)，我们通过上述运行结果发现了两处使用了拷贝构造和赋值重载，分别是tmp拷贝构造main函数栈帧上的临时对象、临时对象赋值给s，其中tmp和临时对象都在各自的操作结束后便销毁了，使得程序效率非常低下。&lt;/p>
&lt;p>那么我们为了提高效率，是否可以把tmp持有的内存资源直接给临时对象？是否可以把临时对象的资源直接给s？&lt;/p>
&lt;p>在C++11中，我们可以解决上述问题，方式是提供带右值引用参数的拷贝构造函数和赋值运算符重载函数.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// 带右值引用参数的拷贝构造函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Stack&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">:&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">mtop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mtop&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Stack(Stack&amp;amp;&amp;amp;)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="cm">/*此处没有重新开辟内存拷贝数据，把src的资源直接给当前对象，再把src置空*/&lt;/span>
&lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 带右值引用参数的赋值运算符重载函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Stack&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;operator=(Stack&amp;amp;&amp;amp;)&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">delete&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">msize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msize&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">mtop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mtop&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="cm">/*此处没有重新开辟内存拷贝数据，把src的资源直接给当前对象，再把src置空*/&lt;/span>
&lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 构造s
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 构造tmp
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 调用带右值引用的拷贝构造函数，直接将tmp的资源给临时对象
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// tmp析构
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 调用带右值引用的赋值运算符重载函数，直接将临时对象资源给s
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 临时对象析构
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// s析构
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>程序自动调用了带右值引用的拷贝构造函数和赋值运算符重载函数，使得程序的效率得到了很大的提升，因为并没有重新开辟内存拷贝数据。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">mpstack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mpstack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以直接赋值的原因是临时对象即将销毁，不会出现浅拷贝的问题，我们直接把临时对象持有的资源赋给新对象就可以了。&lt;/p>
&lt;p>所以，临时量都会自动匹配右值引用版本的成员方法，旨在提高内存资源使用效率。&lt;/p>
&lt;p>带右值引用参数的拷贝构造和赋值重载函数，又叫移动构造函数和移动赋值函数，这里的移动指的是把临时量的资源移动给了当前对象，临时对象就不持有资源，为nullptr了，实际上没有进行任何的数据移动，没发生任何的内存开辟和数据拷贝。&lt;/p>
&lt;h3 id="完美转发">完美转发&lt;/h3>
&lt;p>完美转发指可以写一个接受任意实参的函数模板，并转发到其它函数，目标函数会收到与转发函数完全相同的实参，转发函数实参是左值那目标函数实参也是左值，转发函数实参是右值那目标函数实参也是右值。那如何实现完美转发呢，答案是使用std::forward()。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">void&lt;/span> &lt;span class="nf">PrintV&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;lvalue&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">PrintV&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;rvalue&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">PrintV&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">PrintV&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">PrintV&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// lvalue rvalue rvalue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// lvalue lvalue rvalue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// lvalue rvalue rvalue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// lvalue lvalue rvalue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// lvalue rvalue rvalue
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>Test(1)：1是右值，模板中T &amp;amp;&amp;amp;t这种为万能引用，右值1传到Test函数中变成了右值引用，但是调用PrintV()时候，t变成了左值，因为它变成了一个拥有名字的变量，所以打印lvalue，而PrintV(std::forward(t))时候，会进行完美转发，按照原来的类型转发，所以打印rvalue，PrintV(std::move(t))毫无疑问会打印rvalue。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Test(a)：a是左值，模板中T &amp;amp;&amp;amp;这种为万能引用，左值a传到Test函数中变成了左值引用，所以有代码中打印。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Test(std::forward(a))：转发为左值还是右值，依赖于T，T是左值那就转发为左值，T是右值那就转发为右值。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="返回值优化">返回值优化&lt;/h3>
&lt;p>返回值优化(RVO)是一种C++编译优化技术，当函数需要返回一个对象实例时候，就会创建一个临时对象并通过复制构造函数将目标对象复制到临时对象，这里有复制构造函数和析构函数会被多余的调用到，有代价，而通过返回值优化，C++标准允许省略调用这些复制构造函数。&lt;/p>
&lt;p>那什么时候编译器会进行返回值优化呢?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>return的值类型与函数的返回值类型相同&lt;/p>
&lt;/li>
&lt;li>
&lt;p>return的是一个局部对象&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>看几个例子:&lt;/p>
&lt;p>示例1：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">rval_ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不会触发RVO，拷贝构造了一个临时的对象，临时对象的生命周期和rval_ref绑定，等价于下面这段代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">rval_ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>示例2：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">rval_ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码会造成运行时错误，因为rval_ref引用了被析构的tmp。讲道理来说这段代码是错的，但我自己运行过程中却成功了，我没有那么幸运，这里不纠结，继续向下看什么时候会触发RVO。&lt;/p>
&lt;p>示例3：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tmp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">rval_ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>和示例1类似，std::move一个临时对象是没有必要的，也会忽略掉返回值优化。&lt;/p>
&lt;p>最好的代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">tmp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rval_ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">return_vector&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码会触发RVO，不拷贝也不移动，不生成临时对象。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/ishen/p/13771991.html">C++: 左值引用(&amp;amp;), 右值引用(&amp;amp;&amp;amp;),万能引用(template &amp;amp;&amp;amp;)详解 与 完美转发(forward) 实现剖析 - woder - 博客园&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.zhihu.com/question/454291992">https://www.zhihu.com/question/454291992&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.zhihu.com/question/363686723">https://www.zhihu.com/question/363686723&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>C++基础</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="c基础">C++基础&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="构造析构">构造析构&lt;/h2>
&lt;ul>
&lt;li>默认函数(Defaulted 函数)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">Object&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//默认构造函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//析构函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//复制构造函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//移动构造函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//赋值函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//移动赋值函数
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>构造函数执行顺序&lt;/li>
&lt;li>析构函数执行顺序&lt;/li>
&lt;/ul>
&lt;h2 id="全局默认操作符函数">全局默认操作符函数&lt;/h2>
&lt;ul>
&lt;li>&lt;code>operator ,&lt;/code>&lt;/li>
&lt;li>&lt;code>operator &amp;amp;&lt;/code>&lt;/li>
&lt;li>&lt;code>operator &amp;amp;&amp;amp;&lt;/code>&lt;/li>
&lt;li>&lt;code>operator .&lt;/code>&lt;/li>
&lt;li>&lt;code>operator -&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>operator *&lt;/code>&lt;/li>
&lt;li>&lt;code>operator new&lt;/code>&lt;/li>
&lt;li>&lt;code>operator delete&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="虚函数">虚函数&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">func1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">//普通虚函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">func2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//纯虚函数，子类必须实现基类的纯虚函数。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>虚函数表&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>纯虚函数&lt;/strong>：
&lt;ul>
&lt;li>纯虚函数是在基类中声明的虚函数，它在基类中没有定义&lt;/li>
&lt;li>任何派生类都要定义自己的实现方法。&lt;/li>
&lt;li>在基类中实现纯虚函数的方法是在函数原型后加“=0”&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>抽象类&lt;/strong>：
&lt;ul>
&lt;li>含有纯虚函数的类称为抽象类，&lt;/li>
&lt;li>抽象类不能实例化；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="继承">继承&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">class&lt;/span> &lt;span class="nc">base&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">son&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">base&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>重载，隐藏，覆盖&lt;/li>
&lt;li>多重继承&lt;/li>
&lt;/ol>
&lt;h2 id="左值右值">左值右值&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>左值&lt;/strong>(l-value): 表达式结束后仍存在的值，可以使用&amp;amp;取地址&lt;/li>
&lt;li>&lt;strong>右值&lt;/strong>(r-value)：表达式结束后不存在的值，不可用&amp;amp;取地址&lt;/li>
&lt;/ul>
&lt;h2 id="移动语义">移动语义&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">move&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//操作符
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="decltype-类型推导">decltype 类型推导&lt;/h2>
&lt;h2 id="关键字">关键字&lt;/h2>
&lt;ul>
&lt;li>explicit：用于防止由构造函数定义的隐式转换，只能用在类内部的构造函数声明上，而不能用在类外部的函数定义上。&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="存储周期">存储周期&lt;/h2>
&lt;ul>
&lt;li>automatic&lt;/li>
&lt;li>static&lt;/li>
&lt;li>dynamic&lt;/li>
&lt;li>thread&lt;/li>
&lt;/ul>
&lt;h2 id="aba">ABA&lt;/h2></description></item><item><title>Golang 调试</title><link>https://justice.bj.cn/post/14.language/golang/golang%E8%B0%83%E8%AF%95/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E8%B0%83%E8%AF%95/</guid><description>&lt;h1 id="golang-调试">Golang 调试&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Golang程序的调试工具包括gdb调试、go pprof性能调试工具及go gc分析工具。熟练掌握这些工具的基本用法对golang的程序开发及调试分析拥有很大的帮助。&lt;/p>
&lt;h2 id="gdb单步调试工具">GDB：单步调试工具&lt;/h2>
&lt;p>gdb可以用来作为golang的调试工具。&lt;/p>
&lt;h3 id="gdb用法">Gdb用法&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#编译时，打开相关编译变量， -gcflags是给go编译器的参数，gc是go compile的意思。-N是不要优化代码，-l 是禁止内联代码。&lt;/span>
$ go build -gcflags &lt;span class="s2">&amp;#34;-N -l&amp;#34;&lt;/span> test.go
&lt;span class="c1"># 运行gdb&lt;/span>
$ gdb &lt;span class="nb">test&lt;/span>
&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> info files &lt;span class="c1">#查看文件&lt;/span>
&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> l main.main &lt;span class="c1"># list&lt;/span>
&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> b &lt;span class="m">10&lt;/span> &lt;span class="c1"># breakpoint 10，第10行设置断点&lt;/span>
&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> r &lt;span class="c1"># run&lt;/span>
&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> s &lt;span class="c1"># step, 单&lt;/span>
&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> p *b &lt;span class="c1"># print *b&lt;/span>
&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> n &lt;span class="c1"># next&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>gdb对golang的调试功能支持不完善，delve&lt;/p>
&lt;h2 id="pprof">PProf&lt;/h2>
&lt;p>pprof是go tool自带的性能调试工具，看用于对pprof采样数据进行分析。&lt;/p>
&lt;h3 id="获取采样数据">获取采样数据&lt;/h3>
&lt;p>要使用pprof，需要先生成采样数据，有两种使用方式可以产生pprof数据：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过引入&lt;code>runtime/pprof&lt;/code>包，并手动调用&lt;code>rutime.StartCPUProfile, runtimeStopCPUProfile&lt;/code>等API来获取采样数据；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过引入&lt;code>import _ &amp;quot;net/http/prprof&amp;quot;&lt;/code>方式在线使用;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="c1">// 引入net/http/pprof包，该包自动注册 handler到 http server
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="s">&amp;#34;net/http/pprof&amp;#34;&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GOMAXPROCS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 限制 CPU 使用数，避免过载
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetMutexProfileFraction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 开启对锁调用的跟踪
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetBlockProfileRate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 开启对阻塞操作的跟踪
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 启动一个 http server，以提供pprof http服务端口，服务默认在/debug/pprof下
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ListenAndServe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;:6060&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="pprof用法">pprof用法&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 浏览器&lt;/span>
$ curl &lt;span class="s1">&amp;#39;http://127.0.0.1:6060/debug/pprof/goroutine&amp;#39;&lt;/span> &amp;gt; /tmp/goroutine.dbg
$ go tool pprof -http&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;:8081&amp;#34;&lt;/span> /tmp/goroutine.dbg
&lt;span class="c1"># 函数调用cpu耗时&lt;/span>
$ go tool pprof http://localhost:6060/debug/pprof/profile
&lt;span class="c1"># 内存&lt;/span>
$ go tool pprof -sample_index&lt;span class="o">=&lt;/span>alloc_space &lt;span class="s2">&amp;#34;http://localhost:6060/debug/pprof/heap?gc=1&amp;amp;seconds=60&amp;#34;&lt;/span>
&lt;span class="c1"># 已分配的堆内存&lt;/span>
$ go tool pprof http://localhost:6060/debug/pprof/allocs
&lt;span class="c1"># goroutine&lt;/span>
$ go tool pprof http://localhost:6060/debug/pprof/goroutine
$ curl &lt;span class="s1">&amp;#39;http://localhost:6060/debug/goroutine?debug=1&amp;#39;&lt;/span> &amp;gt; ~/tmp/gopprof.txt
&lt;span class="c1"># 阻塞&lt;/span>
$ go tool pprof http://localhost:6060/debug/pprof/block
&lt;span class="c1"># 锁 &lt;/span>
$ go tool pprof http://localhost:6060/debug/pprof/mutex
&lt;span class="o">(&lt;/span>pprof&lt;span class="o">)&lt;/span> top &lt;span class="c1"># 查看top 前的指标&lt;/span>
&lt;span class="o">(&lt;/span>pprof&lt;span class="o">)&lt;/span> list &amp;lt;&amp;gt; &lt;span class="c1"># 查看指标对象所在源码，需设置源码目录为编译时目录&lt;/span>
&lt;span class="o">(&lt;/span>pprof&lt;span class="o">)&lt;/span> web --nodefraction&lt;span class="o">=&lt;/span>0.1 &lt;span class="o">[&lt;/span>metanode.NewInode&lt;span class="o">]&lt;/span> &lt;span class="c1"># 生成svg，在浏览其中图形化展示指标&lt;/span>
&lt;span class="o">(&lt;/span>pprof&lt;span class="o">)&lt;/span> traces &lt;span class="c1">#&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="go-tool-trace">go tool trace&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="godebuggc调试">GODEBUG：GC调试&lt;/h2>
&lt;p>GODEBUG 开启 debug 模式后，可做内存 trace 和调度器的 trace&lt;/p>
&lt;p>GODEBUG 还支持设置以下变量:&lt;/p>
&lt;ul>
&lt;li>GOGC： 改变堆增长方式 —— 设置初始的 GC 目标百分比。当新分配内存，与上一次采集后剩余的实时数据的比例达到这个百分比时，才会触发一次 GC。默认值是 GOGC=100。设置 &lt;code>GOGC=off&lt;/code> 则完全禁用垃圾收集器。&lt;/li>
&lt;li>schedtrace：设置 &lt;code>schedtrace=X&lt;/code> ,每 X 毫秒打印一次调度器状态 —— 包括调度器、处理器、线程和 goroutine&lt;/li>
&lt;/ul>
&lt;h3 id="用法">用法&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 输出gc&lt;/span>
$ &lt;span class="nv">GODEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">gctrace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> go run example.go
$ &lt;span class="nv">GODEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">gctrace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> ./go-pprof-practice &lt;span class="p">|&lt;/span> grep gc
&lt;span class="c1"># 手动触发gc&lt;/span>
$ curl -X GET &lt;span class="s2">&amp;#34;http://localhost:6060/debug/pprof/heap?gc=1&amp;#34;&lt;/span>
&lt;span class="c1"># 查看调度&lt;/span>
$ &lt;span class="nv">GODEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">schedtrace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1000&lt;/span> ./awesomeProject
&lt;span class="c1"># 查看调度详情&lt;/span>
$ &lt;span class="nv">GODEBUG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">scheddetail&lt;/span>&lt;span class="o">=&lt;/span>1,schedtrace&lt;span class="o">=&lt;/span>&lt;span class="m">1000&lt;/span> ./awesomeProject
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>gctrace格式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">gc # @#s #%: #+#+# ms clock, #+#/#/#+# ms cpu, #-&amp;gt;#-&amp;gt;# MB, # MB goal, # P
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>gc#&lt;/code>：GC 执行次数的编号，每次叠加。&lt;/li>
&lt;li>&lt;code>@#s&lt;/code>：自程序启动后到当前的具体秒数。&lt;/li>
&lt;li>&lt;code>#%&lt;/code>：自程序启动以来在GC中花费的时间百分比。&lt;/li>
&lt;li>&lt;code>#+...+#&lt;/code>：GC 的标记工作共使用的 CPU 时间占总 CPU 时间的百分比。&lt;/li>
&lt;li>&lt;code>#-&amp;gt;#-&amp;gt;# MB&lt;/code>：分别表示 GC 启动时, GC 结束时, GC 活动时的堆大小.&lt;/li>
&lt;li>&lt;code>#MB goal&lt;/code>：下一次触发 GC 的内存占用阈值。&lt;/li>
&lt;li>&lt;code>#P&lt;/code>：当前使用的处理器 P 的数量。&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>golang调度器追踪&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ GOMAXPROCS=2 GODEBUG=schedtrace=1000 ./example
SCHED 0ms: gomaxprocs=2 idleprocs=1 threads=2 spinningthreads=0 idlethreads=0 runqueue=0 [0 0]
SCHED 1002ms: gomaxprocs=2 idleprocs=0 threads=4 spinningthreads=1 idlethreads=1 runqueue=0 [0 4]
SCHED 2002ms: gomaxprocs=2 idleprocs=0 threads=4 spinningthreads=0 idlethreads=1 runqueue=0 [4 4]
$ GOMAXPROCS=2 GODEBUG=schedtrace=1000,scheddetail=1 ./example
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第2秒：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">2002ms : This is the trace for the 2 second mark.
gomaxprocs=2 : 2 processors are configured for this program.
threads=4 : 4 threads exist. 2 for processors and 2 for the runtime.
idlethreads=1 : 1 idle thread (3 threads running).
idleprocs=0 : 0 processors are idle (2 processors busy).
runqueue=0 : All runnable goroutines have been moved to a local run queue.
[4 4] : 4 goroutines are waiting inside each local run queue.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>输出项&lt;/th>
&lt;th>意义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1009ms&lt;/td>
&lt;td>自从程序开始的毫秒数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>gomaxprocs=1&lt;/td>
&lt;td>配置的处理器数(逻辑的processor，也就是Go模型中的P,会通过操作系统的线程绑定到一个物理处理器上)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>threads=3&lt;/td>
&lt;td>运行期管理的线程数，目前三个线程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>idlethreads=1&lt;/td>
&lt;td>空闲的线程数,当前一个线程空闲，两个忙&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>idleprocs=0&lt;/td>
&lt;td>空闲的处理器数,当前0个空闲&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>runqueue=0&lt;/td>
&lt;td>在全局的run队列中的goroutine数，目前所有的goroutine都被移动到本地run队列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>[9]&lt;/td>
&lt;td>本地run队列中的goroutine数，目前9个goroutine在本地run队列中等待&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="堆栈track">堆栈track&lt;/h2>
&lt;p>golang程序panic后，会打印出panic时的内存堆栈信息以便于问题 分析，输出如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">1    panic: runtime error: invalid memory address or nil pointer dereference
2    [signal SIGSEGV: segmentation violation code=0x1 addr=0x30 pc=0x751ba4]
3    goroutine 58 [running]:
4    github.com/joeshaw/example.UpdateResponse(0xad3c60, 0xc420257300, 0xc4201f4200, 0x16, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, ...)
5 /go/src/github.com/joeshaw/example/resp.go:108 +0x144
6    github.com/joeshaw/example.PrefetchLoop(0xacfd60, 0xc420395480, 0x13a52453c000, 0xad3c60, 0xc420257300)
7 /go/src/github.com/joeshaw/example/resp.go:82 +0xc00
8     created by main.runServer
9 /go/src/github.com/joeshaw/example/cmd/server/server.go:100 +0x7e0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>第1行 ：panic错误提示消息，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第2行：引发panic的UNIX信号 ，&lt;/p>
&lt;ul>
&lt;li>
&lt;p>code: UNIX &lt;code>siginfo.si_code&lt;/code>, &lt;code>0x1&lt;/code>为&lt;code>SEGV_MAPERR&lt;/code>(“address not mapped to object”) in Linux’s &lt;code>siginfo.h&lt;/code> file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>addr: &lt;code>siginfo.si_addr&lt;/code>，030: invalid memory address, 无效内存地址;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>pc: 程序计数器, 代表panic时，程序当前运行的地址；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>第3行：panic时，goroutine 58 的状态&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第4-9行: gorutine panic时的stack frame&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第4行： UpdateResponse函数调用参数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第5行：所在文件行数；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>stack track函数参数遵守如下规则：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>每个参数 按函数原型参数列表从左到右按内存布局按word逐一展开，不是和原型参数个数一一对应；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果是method，receiver为最左边开始 展开；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回值在参数展开后展开，多返回值也按左到右顺序逐一展开；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内建类型(int, rune,byte)按word逐个输出，不足一个word的 ，将合并成一个word；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指针类型：输出指针地址；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>string类型：输出两个：指针地址，string长度；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>slice：输出三个 ：地址, 长度，容量；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>struct：按stuct字段顺序逐个展开；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>interface: 2个： 类型，数据指针；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>参数都未被使用或者只是在 &lt;code>fmt.Print()&lt;/code> 中未作修改使用，用&lt;code>func(...)&lt;/code>代替，内联的函数也只显示&amp;hellip; ；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>golang stack track 中函数调用各种类型参数的对应的数量：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型名称&lt;/th>
&lt;th>参数域数量&lt;/th>
&lt;th>参数域说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>string&lt;/td>
&lt;td>2&lt;/td>
&lt;td>&lt;code>指针&lt;/code> &lt;code>长度&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>slice&lt;/td>
&lt;td>3&lt;/td>
&lt;td>&lt;code>指针&lt;/code> &lt;code>长度&lt;/code> &lt;code>容量&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>map&lt;/td>
&lt;td>1&lt;/td>
&lt;td>&lt;code>指针&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>chan&lt;/td>
&lt;td>1&lt;/td>
&lt;td>&lt;code>指针&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>interface&lt;/td>
&lt;td>2&lt;/td>
&lt;td>&lt;code>类型指针&lt;/code> &lt;code>值指针&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pointer&lt;/td>
&lt;td>1&lt;/td>
&lt;td>&lt;code>指针&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>func&lt;/td>
&lt;td>1&lt;/td>
&lt;td>&lt;code>指针&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nil&lt;/td>
&lt;td>1&lt;/td>
&lt;td>&lt;code>0x0&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://guidao.github.io/go_debug.html">https://guidao.github.io/go_debug.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cizixs.com/2017/09/11/profiling-golang-program/">https://cizixs.com/2017/09/11/profiling-golang-program/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.wolfogre.com/posts/go-ppof-practice/">golang pprof 实战 | Wolfogre's Blog&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000020255157">https://segmentfault.com/a/1190000020255157&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/Brby6D7d1szUIBjcD_8kfg">https://mp.weixin.qq.com/s/Brby6D7d1szUIBjcD_8kfg&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/go-delve/delve">GitHub - go-delve/delve: Delve is a debugger for the Go programming language.&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://golang.org/doc/gdb">Debugging Go Code with GDB - The Go Programming Language&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://tonybai.com/2020/12/10/a-kind-of-thinking-about-how-to-trace-function-call-chain/">Go函数调用链跟踪的一种实现思路 | Tony Bai&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://tonybai.com/2019/04/04/notes-about-fixing-a-go-panic-problem/">记一次go panic问题的解决过程 | Tony Bai&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.orztu.com/post/golang-trace/">https://www.orztu.com/post/golang-trace/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://studygolang.com/articles/18792">Go 语言的 Stack Trace - Go语言中文网 - Golang中文社区&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000040612732">https://segmentfault.com/a/1190000040612732&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://colobu.com/2016/04/19/Scheduler-Tracing-In-Go/">Go 调度器跟踪&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000019736288">https://segmentfault.com/a/1190000019736288&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/google/pprof/blob/master/doc/README.md#interpreting-the-callgraph">pprof/README.md at master · google/pprof · GitHub&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Rust Trait</title><link>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</guid><description>&lt;h1 id="rust-trait">Rust Trait&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>trait&lt;/code>(特性) 是一组方法的集合，实现trait的类型可以访问该 trait 中定义的其他方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任何类型都可以实现 trait；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="要点">要点&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Trait&lt;/code>必须声明可见后才能使用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Trait本身并没有固定的大小，不能直接声明和使用Trait类型的变量，只能某个实现该Trait类型的实例的有效引用称为&lt;code>Trait Object&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Trait Object&lt;/code>实际是一个胖指针&lt;code>fat pointer&lt;/code>, 占用两个机器字字节, 一个指向实际的实例对象, 一个指向虚基表&lt;code>vtable&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所有trait都有一个隐藏的类型&lt;code>Self&lt;/code>，代表当前实现此Trait的具体类型；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数&lt;u>第一个参数&lt;/u>是&lt;code>self&lt;/code>且为&lt;code>Self&lt;/code>相关类型(&lt;code>Self, &amp;amp;Self, &amp;amp;mut Self, Box&amp;lt;Self&amp;gt;&lt;/code>)，则函数为&lt;strong>方法&lt;/strong>(method)，&lt;code>self&lt;/code>称为&lt;code>receiver&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>没有receiver参数的函数为&lt;strong>静态方法&lt;/strong>，可通过&lt;code>Type::Function()&lt;/code>方式调用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>匿名Trait无须名字，可直接在impl中实现；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以在trait的声明中定义默认方法；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>扩展trait(extension trait), 可以为其它trait类型扩展出自定义trait的接口，impl块必须与trait或struct声明在同一个crate中（孤儿规则）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>继承：凡是实现了Subtrait(&lt;code>Creature&lt;/code>)的类型, 也必须实现父Trait(&lt;code>Visible&lt;/code>)的&lt;strong>所有方法&lt;/strong>；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="孤儿规则orphan-rule">孤儿规则(orphan rule)&lt;/h2>
&lt;ul>
&lt;li>如果要实现外部定义的 &lt;code>trait&lt;/code> 需要先将其导入作用域；&lt;/li>
&lt;li>不允许对外部类型实现外部 &lt;code>trait&lt;/code>；&lt;/li>
&lt;li>可以对外部类型实现自定义的 &lt;code>trait&lt;/code>；&lt;/li>
&lt;li>可以对自定义类型上实现外部 &lt;code>trait&lt;/code>；&lt;/li>
&lt;/ul>
&lt;h2 id="示例">示例&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// trait声明
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">area1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//method1(self: Self);
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">area&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//area(self: &amp;amp;Self);
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">larger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">f64&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Circle&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>: &lt;span class="kt">f64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// trait 实现
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Circle&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">area&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">f64&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="kt">f64&lt;/span>::&lt;span class="n">consts&lt;/span>::&lt;span class="n">PI&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// 匿名trait
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Circle&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">get_radius&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">f64&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="trait-泛型">Trait 泛型&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// where 从句
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="nc">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="nc">K&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>: &lt;span class="nb">Clone&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">K&lt;/span>: &lt;span class="nb">Clone&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Debug&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{:?}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="trait对象trait-object">Trait对象(trait object)&lt;/h2>
&lt;ul>
&lt;li>
&lt;h2 id="supertrait">Supertrait&lt;/h2>
&lt;/li>
&lt;/ul>
&lt;h2 id="关联类型">关联类型&lt;/h2>
&lt;p>关联类型是一个将类型占位符与 trait 相关联的方式，这样 trait 的方法签名中就可以使用这些占位符类型。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>关联类型类似泛型，不同之处关联类型，无需标注类型，无须多次实现trait；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Iterator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span> &lt;span class="nc">Item&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//关联类型
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Self&lt;/span>::&lt;span class="n">Item&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="常用trait">常用Trait&lt;/h2>
&lt;h3 id="default">Default&lt;/h3>
&lt;p>Default trait是针对无参构造函数的抽象&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">//std::default::Default
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Default&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">default&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// Vec default
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Default&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">default&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Vec&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="derive">Derive&lt;/h3>
&lt;p>Rust提供了一个特殊属性，以自动impl某些trait，编译阶段会自动展开为相应的impl块：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="cp">#[derive(Copy, Clone, Default)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Foo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">data&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Rust支持自动derive的trait有：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Debug&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Clone/Copy&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hash&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PartialEq/Eq/PartialOrd/Ord&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Send/Sync&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Default&lt;/p>
&lt;/li>
&lt;li>
&lt;p>FromPrimitive&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RustcEncodable/RustcDecodable&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="displaydebug">Display/Debug&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>实现&lt;code>Display&lt;/code>特性的类型，可用&lt;code>{}&lt;/code>格式控制打印；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实现&lt;code>Debug&lt;/code>特性的类型，可用&lt;code>{:?},{:#?}&lt;/code>格式控制打印；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Display&lt;/code>一般给最终用户显示的，通常用utf-8格式字符输出；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Debug&lt;/code>特性主要用于调试，一般为byte字符，编译器提供自动derive功能；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实现&lt;code>Dispaly&lt;/code>特性的类型都自动实现了&lt;code>ToString&lt;/code>特性，可直接通过&lt;code>to_string()&lt;/code>格式化字符串；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">//std::fmt::Display
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Display&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">fmt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Formatter&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Error&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//std::fmt::Debug
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Debug&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">fmt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Formatter&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Error&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ordpartialordeqpartialeq">Ord/PartialOrd/Eq/PartialEq&lt;/h3>
&lt;h2 id="标签trait">标签Trait&lt;/h2>
&lt;h3 id="sized">Sized&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Rust不能在变量里保存&lt;em>unsized&lt;/em>的值, 也不能把&lt;em>unsize&lt;/em>的值作为参数.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所有固定大小的类型都实现里&lt;code>std::marker::Sized&lt;/code>trait, 这个trait没有任何方法和联合类型(&lt;em>associated type&lt;/em>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不能实现自定义的Sized trait.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Sized trait只能用于绑定到类型参数, 也就是用于参数的类型声明(及检查), 例如 &lt;code>T: Sized&lt;/code>不能用于其它用途, 这种trait 叫 &lt;em>marker trait&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>?Sized&lt;/code>叫 &lt;em>questionably sized&lt;/em>, 允许固定大小, 也允许非固定大小类型.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>struct的最后一个字段允许是&lt;code>?Sized&lt;/code>类型, 但如果这样, struct本身就变为了unsized.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>但如果写成泛型, 并传入一个Sized类型, 那么这个类型的struct仍然是Sized. 大小取决于泛型的参数类型:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="copyclone">Copy/Clone&lt;/h3>
&lt;p>Copy:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果一个类型 impl 了 Copy trait，意味着任何时候，我们可以通过简单的内存拷贝实现该类型的复制，而不会产生任何问题；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一旦一个类型实现了 Copy trait，那么它在变量绑定、函数参数传递、函数返回值传递等场景下，它都是 copy 语义，而不再是默认的 move 语义；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>只有所有的成员都实现了 Copy trait，这个类型才有资格实现 Copy trait；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>Clone:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Clone&lt;/code>trait是Sized的sub-trait, 所以Self类型必须是Sized；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>clone&lt;/code>方法必须返回和&lt;code>self&lt;/code>独立无关的一份拷贝；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果所有的字段都实现了Clone, 那么&lt;code>struct&lt;/code>可以加上属性: &lt;code>#[derive(Clone)]&lt;/code>自动实现Clone trait&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>通常情况下clone的成本比较高, 但是对于&lt;code>Rc&amp;lt;T&amp;gt;&lt;/code>和&lt;code>Arc&amp;lt;T&amp;gt;&lt;/code>这类的类型, Rust的对它们的clone只是简单的增加计数.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通常尽可能使用&lt;code>clone_from&lt;/code>来减少clone开销, 这会允许一些优化. 例如, String的clone, 被赋值的String如果capacity够大, 可以不需要释放内存, 直接把源的内容拷贝过来.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果所有的字段都实现了Clone, 那么&lt;code>struct&lt;/code>可以加上属性: &lt;code>#[derive(Clone)]&lt;/code>自动实现Clone trait&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>clone&lt;/code>方法不能失败(&lt;em>infallible&lt;/em>), 对于&lt;code>std::fs::File&lt;/code>这样的类型, 有&lt;code>try_clone&lt;/code>方法, 返回&lt;code>std::io::Result&amp;lt;File&amp;gt;&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Clone&lt;/span>: &lt;span class="nb">Sized&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">clone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">clone_from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">source&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="frominto">From/Into&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>From&lt;/code>: 对于类型为 &lt;code>U&lt;/code> 的对象 &lt;code>foo&lt;/code>，如果它实现了 &lt;code>From&amp;lt;T&amp;gt;&lt;/code>，那么，可以通过 &lt;code>let foo = U::from(bar)&lt;/code> 来生成自己&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Into&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>: &lt;span class="nb">Sized&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">into&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">T&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">From&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>: &lt;span class="nb">Sized&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 静态方法
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// as_ref和Borrow的区别 ?
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// as_ref 是转引用函数, 将具有所有权对象转换成引用对象,
&lt;/span>&lt;span class="c1">// 不改变被转换对象的基础上产生一个引用对象.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// as_ref 并不是所有类型都默认支持, 很多时候都需要自己去声明.
&lt;/span>&lt;span class="c1">// as_ref 是AsRef trait 的公共接口方法.
&lt;/span>&lt;span class="c1">// 只有那些实现了 as_ref 公共接口方法的类型才能使用as_ref.
&lt;/span>&lt;span class="c1">// 目前: Option, Box, Result 这三种类型默认提供支持as_ref.
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://wiki.jikexueyuan.com/project/rust-primer/">https://wiki.jikexueyuan.com/project/rust-primer/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://unpluggedcoder.me/2019/08/31/Rust%E5%85%A5%E9%97%A8%E5%A4%B1%E8%B4%A5%E4%B9%8BTraits&amp;amp;Generics/">https://unpluggedcoder.me/2019/08/31/Rust%E5%85%A5%E9%97%A8%E5%A4%B1%E8%B4%A5%E4%B9%8BTraits&amp;amp;Generics/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/21730929">https://zhuanlan.zhihu.com/p/21730929&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://unpluggedcoder.me/2019/09/01/Rust%E5%85%A5%E9%97%A8%E5%A4%B1%E8%B4%A5%E4%B9%8BUtility%20Traits/">https://unpluggedcoder.me/2019/09/01/Rust%E5%85%A5%E9%97%A8%E5%A4%B1%E8%B4%A5%E4%B9%8BUtility%20Traits/&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Rust 数据类型</title><link>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>&lt;h1 id="rust-数据类型">Rust 数据类型&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Rust的数据类型分为&lt;code>标量(scalar)&lt;/code>类型和&lt;code>复合(compound)&lt;/code>类型、&lt;code>集合类型&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>标量类型(scalar)：表示一个单独的值，包括&lt;code>bool&lt;/code>, &lt;code>numeirc&lt;/code>, &lt;code>char&lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>复合类型(compound)：多个值组合而成&lt;/p>
&lt;ul>
&lt;li>
&lt;p>元组(tuple)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数组(array)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结构体(struct)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>集合类型：&lt;/p>
&lt;ul>
&lt;li>向量&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>类型写法&lt;/strong>&lt;/th>
&lt;th>&lt;strong>描述&lt;/strong>&lt;/th>
&lt;th>&lt;strong>值举例&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>i8, i16, i32, i64,&lt;br>u8, u16, u32, u64&lt;/td>
&lt;td>i:带符号&lt;br>u:无符号&lt;br>数字代表存储位数&lt;/td>
&lt;td>42,&lt;br>-5i8, 0x400u16, 0o100i16,&lt;br>20_922_789_888_000u64,&lt;br>b'*' (u8 byte literal)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>isize, usize&lt;/td>
&lt;td>带符号/无符号 整型&lt;br>存储位数与系统位数相同&lt;br>(32或64 位整数)&lt;/td>
&lt;td>137,&lt;br>-0b0101_0010isize,&lt;br>0xffff_fc00usize&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>f32, f64&lt;/td>
&lt;td>IEEE标准的浮点数，单精度/双精度&lt;/td>
&lt;td>1.61803, 3.14f32,&lt;br>6.0221e23f64&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bool&lt;/td>
&lt;td>布尔型&lt;/td>
&lt;td>true, false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char&lt;/td>
&lt;td>Unicode字符&lt;br>存储空间固定为4字符&lt;/td>
&lt;td>&amp;lsquo;*&amp;rsquo;, &amp;lsquo;\n&amp;rsquo;, &amp;lsquo;字&amp;rsquo;, &amp;lsquo;\x7f&amp;rsquo;, &amp;lsquo;\u{CA0}&amp;rsquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(char, u8, i32)&lt;/td>
&lt;td>元组tuple：可以存储多种类型&lt;/td>
&lt;td>('%', 0x7f, -1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>()&lt;/td>
&lt;td>单元类型，实际上是空tuple&lt;/td>
&lt;td>()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>struct S { x: f32, y:&lt;br>f32 }&lt;/td>
&lt;td>命名元素结构体，数据成员有变量名的结构体&lt;/td>
&lt;td>struct S { x: 120.0, y: 209.0 }&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>struct T(i32, char)&lt;/td>
&lt;td>元组型结构体，数据成员无名称，形如元组，&lt;br>注意不可与元组混淆&lt;/td>
&lt;td>struct T(120, &amp;lsquo;X&amp;rsquo;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>struct E&lt;/td>
&lt;td>单元型结构体，没有数据成员&lt;/td>
&lt;td>E&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>enum Attend {&lt;br>OnTime, Late(u32)&lt;br>}&lt;/td>
&lt;td>枚举类型，枚举类型默认没有比较是否相等的运算，更没有比较大小&lt;/td>
&lt;td>Attend::Late(5),&lt;br>Attend::OnTime&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Box&lt;Attend>&lt;/td>
&lt;td>Box指针类型，指向堆内存中的一个泛型值&lt;/td>
&lt;td>Box::new(Late(15))&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;amp;i32, &amp;amp;mut i32&lt;/td>
&lt;td>只读引用和可变引用，物所有权，生命周期不能超过所指向的值。&lt;br>只读引用也叫共享引用，&lt;/td>
&lt;td>&amp;amp;s.y, &amp;amp;mut v&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>String&lt;/td>
&lt;td>字符串，UTF-8格式存储，长度可变&lt;/td>
&lt;td>&amp;ldquo;编程&amp;rdquo;.to_string()&lt;br>to_string函数返回一个字符串类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;amp;str&lt;/td>
&lt;td>str的引用，指向UTF-8文本的指针，无所有权&lt;/td>
&lt;td>&amp;ldquo;そば: soba&amp;rdquo;, &amp;amp;s[0..12]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>[f64; 4], [u8; 256]&lt;/td>
&lt;td>数组，固定长度，内部数据类型必须一致&lt;/td>
&lt;td>[1.0, 0.0, 0.0, 1.0],&lt;br>[b' &amp;lsquo;; 256]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Vec&lt;f64>&lt;/td>
&lt;td>Vector向量，可变长度，内部数据类型必须一致&lt;/td>
&lt;td>vec![0.367, 2.718, 7.389]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;amp;[u8..u8],&lt;br>&amp;amp;mut [u8..u8]&lt;/td>
&lt;td>切片引用，通过起始索引和长度指向数组或向量的一部分连续元素&lt;/td>
&lt;td>&amp;amp;v[10..20], &amp;amp;mut a[..]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;amp;Any, &amp;amp;mut Read&lt;/td>
&lt;td>traid对象：实现了某trait内方法的对象&lt;br>示例中Any、Read都是trait&lt;/td>
&lt;td>value as &amp;amp;Any,&lt;br>&amp;amp;mut file as &amp;amp;mut Read&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fn(&amp;amp;str, usize) -&amp;gt;&lt;br>isize&lt;/td>
&lt;td>函数类型，可以理解为函数指针&lt;/td>
&lt;td>i32::saturating_add&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>闭包&lt;/td>
&lt;td>闭包&lt;/td>
&lt;td>|a, b| a&lt;em>a + b&lt;/em>b&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>上表中没有byte类型，是因为Rust压根就没有byte类型，实际上等于u8，在一般计算中认为是u8，&lt;/p>
&lt;p>在文件或网络中读写数据时经常称为byte流。&lt;/p>
&lt;h2 id="标量类型scalar">标量类型(scalar)&lt;/h2>
&lt;ul>
&lt;li>标量类型表示一个单独的值，包括&lt;code>bool&lt;/code>, &lt;code>numeric&lt;/code>, &lt;code>char&lt;/code>;&lt;/li>
&lt;/ul>
&lt;h3 id="布尔类型bool">布尔类型(bool)&lt;/h3>
&lt;ul>
&lt;li>bool类型会占一个字节, 从而允许指针指向这个字节的地址;&lt;/li>
&lt;li>bool型取值: &lt;code>true, false&lt;/code>;&lt;/li>
&lt;li>&lt;code>as&lt;/code>运算符可以将bool值转换为整数类型，false转换为0，true转换为1；&lt;/li>
&lt;li>&lt;code>as&lt;/code>不会从数值类型转换为bool&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b1&lt;/span>&lt;span class="w"> &lt;/span>: &lt;span class="kt">bool&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">b1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{} {} {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//true, false, true
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="数值类型numeric">数值类型(numeric)&lt;/h3>
&lt;ul>
&lt;li>不允许隐式转换；&lt;/li>
&lt;li>如果需要调用类型的方法, 在有二意的情况下必须显式转换, 例如加后缀: &lt;code>(2.0_f64).sqrt()&lt;/code>；&lt;/li>
&lt;li>&lt;code>bool&lt;/code>, &lt;code>char&lt;/code>, &lt;code>enum&lt;/code> 可以转换为任意整型&lt;code>integer&lt;/code>, 但反向转换不行, 唯一例外是&lt;code>u8&lt;/code>转&lt;code>char&lt;/code>；&lt;/li>
&lt;li>有符号整形： &lt;code>i8, i16, i32, i64&lt;/code>;&lt;/li>
&lt;li>无符号整形： &lt;code>u8, u16, u32, u64&lt;/code>;&lt;/li>
&lt;li>带符号/无符号整型, 存储位数与系统位数相同： &lt;code>isize, usize&lt;/code>;&lt;/li>
&lt;li>单/双精度浮点型： &lt;code>f32, f64&lt;/code>；&lt;/li>
&lt;li>带符号整型，使用最高一位（bit）表示为符号，0为正数，1为负数，其他位是数值，用补码表示；&lt;/li>
&lt;li>Rust要求数组的索引必须是usize类型，在一些数据结构中，数组和向量的元素数也是usize型；&lt;/li>
&lt;li>数值类型可以通过&lt;code>as&lt;/code>运算符进行转换；&lt;/li>
&lt;li>&lt;code>as&lt;/code>运算符在转换时，对存储的数字并不改动，只是把数读出来的时候进行截取、扩展、或决定是否采用补码翻译；&lt;/li>
&lt;li>f32和f64类型都定义了一些特殊值常量： INFINITY（无穷大）、 NEG_INFINITY (负无穷)、NAN (非数字)、MIN（最小值）、MAX (最大值)。std::f32::consts和std::f64::consts模块定义了一些常量：E（自然对数）、PI（圆周率）、SQRT_2（2的平方根）等等。&lt;/li>
&lt;/ul>
&lt;p>各整数类型的取值范围：&lt;/p>
&lt;ul>
&lt;li>u8：    [0, 2^8 –1] (0 ~ 255)&lt;/li>
&lt;li>u16： [0, 2^16-1] (0 ~ 65,535)&lt;/li>
&lt;li>u32： [0, 2^32-1] (0 ~ 4,294,967,295)&lt;/li>
&lt;li>u64： [0, 2^64-1] (0 ~ 18,446,744,073,709,551,615，约1.8千亿亿)&lt;/li>
&lt;li>i8：　 [−2^7, 2^7 −1] (−128 ~ 127)&lt;/li>
&lt;li>i16：　[−2^15, 2^15 −1] (−32,768 ~ 32,767)&lt;/li>
&lt;li>i32：　[−2^31, 2^31 −1] (−2,147,483,648 ~ 2,147,483,647)&lt;/li>
&lt;li>i64：　[−2^63 , 2^63 −1] (−9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807)&lt;/li>
&lt;li>usize：[0,2^32 −1] (32位系统) 或 [0, 2^64 −1] (64位系统)&lt;/li>
&lt;li>isize：　−2^31 至 2^31 −1, or −2^63 至 2^63 −1&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// int
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">big_val&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="kt">i32&lt;/span>::&lt;span class="n">MAX&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//MAX 是std::i32中定义的常量，表示i32型的最大值，即231-1
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">big_val&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 发生异常 panic: arithmetic operation overflowed
&lt;/span>&lt;span class="c1">// 整形进制
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">u07&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mh">0xFF_&lt;/span>&lt;span class="k">u32&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//0x 16进制
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">u08&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mo">0o7777_&lt;/span>&lt;span class="k">u32&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//0o 8进制
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">u09&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mb">0b01_10_00_&lt;/span>&lt;span class="k">u8&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//0b 2进制
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{} {} {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">u07&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">u08&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">u09&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//255 4095 24
&lt;/span>&lt;span class="c1">// as
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10_&lt;/span>&lt;span class="k">i8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">u16&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10_&lt;/span>&lt;span class="k">u16&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 正数值由少位数转入多位数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2525_&lt;/span>&lt;span class="k">u16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i16&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2525_&lt;/span>&lt;span class="k">i16&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 正数值同位数转换
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1_&lt;/span>&lt;span class="k">i16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1_&lt;/span>&lt;span class="k">i32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 负数少位转多位执行符号位扩展
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">65535_&lt;/span>&lt;span class="k">u16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">65535_&lt;/span>&lt;span class="k">i32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 正数少位转多位执行0位扩展（也可以理解为符号位扩展）
&lt;/span>&lt;span class="c1">//由多位数转少位数，会截掉多位数的高位，相当于多位数除以2^N的取模，其中N是少位数的位数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000_&lt;/span>&lt;span class="k">i16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">232_&lt;/span>&lt;span class="k">u8&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//1000的二进制是0000 0011 1110 1000，截掉左侧8位，留下右侧8位，是232
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">65535_&lt;/span>&lt;span class="k">u32&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i16&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1_&lt;/span>&lt;span class="k">i16&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//65535的二进制,16个0和16个1，截掉高位的16个0，剩下的全是1，全1的有符号补码是-1
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//同位数的带符号和无符号相互转化，存储的数字并不动，只是解释的方法不一样
&lt;/span>&lt;span class="c1">//无符号数，就是这个值；而有符号数，需要用补码来翻译
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1_&lt;/span>&lt;span class="k">i8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">255_&lt;/span>&lt;span class="k">u8&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//有符号转无符号
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255_&lt;/span>&lt;span class="k">u8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1_&lt;/span>&lt;span class="k">i8&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//无符号转有符号
&lt;/span>&lt;span class="c1">// float
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="k">f32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="k">f32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">5.&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 平方根，此外还有sin()、ln()等诸多数学计算方法
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">3.7&lt;/span>&lt;span class="k">f64&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">floor&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">4.0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//向下取整，还有ceil()方法是向上取整，round()方法是四舍五入）
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.2&lt;/span>&lt;span class="k">f32&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">2.2&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//比较返回最大值，min()方法是取最小值
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">3.7&lt;/span>&lt;span class="k">f64&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">trunc&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">3.0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//删除小数部分，注意和floor、ceil的区别
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="kt">f32&lt;/span>::&lt;span class="n">INFINITY&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">is_sign_negative&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//是否为负值，注意-0.0也算负值
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="byte字面量">byte字面量&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Rust没有byte类型，而是u8类型;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>byte字面量，表示ASCII字符；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>书写方式是b&amp;rsquo;x&amp;rsquo;，b表示是byte，内容用单引号引起来；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>ASCII字符 &lt;br>&lt;/strong>&lt;/th>
&lt;th>&lt;strong>byte字面量的书写&lt;/strong>&lt;/th>
&lt;th>&lt;strong>相当于的数值&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>单引号  '&lt;/td>
&lt;td>b'''&lt;/td>
&lt;td>39u8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>反斜杠 \&lt;/td>
&lt;td>b'\'&lt;/td>
&lt;td>92u8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>换行&lt;/td>
&lt;td>b'\n'&lt;/td>
&lt;td>10u8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>回车&lt;/td>
&lt;td>b'\r'&lt;/td>
&lt;td>13u8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>制表符Tab&lt;/td>
&lt;td>b'\t'&lt;/td>
&lt;td>9u8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="char类型">char类型&lt;/h3>
&lt;ul>
&lt;li>Rust固定的用4字节来存储char类型，表示一个Unicode字符。&lt;/li>
&lt;li>大小32bit;&lt;/li>
&lt;li>UNICODE编码;&lt;/li>
&lt;li>不允许任何形式的隐式转换;&lt;/li>
&lt;li>char不能和任何其他类型之间隐式转换。&lt;/li>
&lt;li>可以使用as运算符将字符转换为整数类型；&lt;/li>
&lt;li>对于小于32位的类型，字符值的高位将被截断：&lt;/li>
&lt;li>只有u8能用as转换为char。&lt;/li>
&lt;li>如果想用u32位转换为char，可以用std库里的std::char::from_32()函数，返回值是Option&lt;char>类型&lt;/li>
&lt;li>char类型的书写是用单引号引起来，字符串是用双引号引起来：&lt;/li>
&lt;li>char类型的值包含范围为0x0000到0xD7FF或0xE000到0x10FFFF的Unicode码位。&lt;/li>
&lt;li>对于其他数值，Rust会认为是无效的char类型，出现编译异常。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">//string的len()方法返回字符串占据的字节数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//等于1
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;我&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//等于3
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a我&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//等于4
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;ಠ&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">u16&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mh">0xca0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;ಠ&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mh">0x60&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// U+0CA0 被截断为8位带符号整型
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//std::char模块中有很多有用的char方法/函数：
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_alphabetic&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//检查是否是字母
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;β&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_alphabetic&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;8&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_digit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//检查是否数字
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;ಠ&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len_utf8&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//用utf-8格式表示的话，占据几个字节
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">char&lt;/span>::&lt;span class="n">from_digit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//数字转换为char，第二个参数是进制
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>char类型与byte字面量，字符串类型区别：&lt;/p>
&lt;ul>
&lt;li>；`；——byte型（u8型）;&lt;/li>
&lt;li>&lt;code>‘C’&lt;/code>: char类型，在栈内存上开辟4字节空间，把字母C的Unicode码 0x 00 00 00 43存入；&lt;/li>
&lt;li>&lt;code>b'C'&lt;/code>：byte型，在栈内存上开辟1字节空间，把字母C的ASCII码 0x43 存入；&lt;/li>
&lt;li>&lt;code>“C”&lt;/code>：字符串类型,在堆内存上开辟N字节空间（N一般是字母C的字节数1），然后在栈内存上开辟12字节空间（此处以32位平台为例）:
&lt;ul>
&lt;li>4个字节存放堆内存放置数据的指针，&lt;/li>
&lt;li>4个字节存放字符串在内存中开辟的空间N；&lt;/li>
&lt;li>4个字节存放字符串当前使用的空间；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="复合类型">复合类型&lt;/h2>
&lt;p>复合(compound)类型由多个值组合而成。复合类型包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Tuple&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Struct&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Enum&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Union&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="tuple元组">Tuple(元组)&lt;/h3>
&lt;p>元组是一个将多个其他类型的值组合进一个复合类型的主要方式。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>包含在&lt;code>()&lt;/code>中的&lt;code>,&lt;/code>分隔的值列表&lt;code>(T1, T2, ...)&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Rust元组长度固定，一旦声明，其长度不会增大或缩小；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Rust元组分配在栈空间；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// 元组定义
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tup1&lt;/span>: &lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">f64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">6.4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tup2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">6.4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// 元组解构
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tup1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// 索引访问
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">five_hundred&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tup2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">six_point_four&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tup2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">one&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tup3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="struct结构体">Struct(结构体)&lt;/h3>
&lt;p>Rust中的结构体&lt;/p>
&lt;p>Rust提供了3种结构体：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>具名结构体&lt;/strong>：&lt;/li>
&lt;li>&lt;strong>元组结构体&lt;/strong>&lt;/li>
&lt;li>&lt;strong>单元结构体&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">f32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="kt">f32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 具名结构体
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 元组结构体
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Integer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">u32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 元组结构体只有一个字段时，称为NewType模式
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Nil&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 单元结构体，没有任何字段的结构体。单元结构体实例就是其本身。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// 结构体实例化
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">point&lt;/span>: &lt;span class="nc">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="mf">0.3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="mf">0.4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;point coordinates: ({},{})&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 访问 point 的字段
&lt;/span>&lt;span class="c1">// let解绑struct
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="nc">my_x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="nc">my_y&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// struct tuple
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">f32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//struct tuple
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;pair contains {:?} and {:?}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Pair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">decimal&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;pair contains {:?} and {:?}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">integer&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">decimal&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="枚举enum">枚举(Enum)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>枚举类型用于表示多种可能数值中的一种；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>枚举类型的多个值公用一个存储空间，为表示&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// 不带参数枚举
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="nc">Number&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Zero&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">One&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// 带参数枚举
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="nc">IpAddr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">V4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">V6&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="集合类型">集合类型&lt;/h2>
&lt;h3 id="array数组">Array(数组)&lt;/h3>
&lt;p>在一块连续空间内存中，存储了一系列的同样类型的数据&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Rust数组的类型为&lt;code>[T; N]&lt;/code>，&lt;code>T&lt;/code>表示元素类型，&lt;code>N&lt;/code>为元素个数，只有当两个数组的T, N都相同时，这两个数组的类型才相同；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Rust数组大小固定，一旦声明，其长度不会增大或缩小；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Rust数组位于&lt;code>栈&lt;/code>上；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数组索引访问错误会产生panic；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数组只能储存一种类型的数据，无法存储不同类型的数据；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// 数组定义
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>: &lt;span class="p">[&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// let a = [1,&amp;#34;string&amp;#34;]; //错误，数组元素类型应该相同
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Red&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Yellow&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Blue&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 数组元素索引访问
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 数组长度
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="slice切片">Slice(切片)&lt;/h3>
&lt;p>Slice(切片)是对数组一个片段的引用。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Slice继承了Array的length、item等很多的方法；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">arr1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">arr1&lt;/span>&lt;span class="p">[..];&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//获取数组arr1所有元素；
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">arr1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//获取数组切片 [2,3]
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="vector向量">Vector(向量)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>vector是rust中的可变数组；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Vec 在&lt;code>堆&lt;/code>上分配空间；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Vec&lt;T>中的泛型&lt;code>T&lt;/code> 必须是&lt;code>Sized&lt;/code>的；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// vector初始化
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">v1&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Vec&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//Vec::new()
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">v2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//[1,2,3]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">v21&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="err">【&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//[3,3, 3, 3]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">v3&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//[1,2,3,4]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// vector元素访问
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">third&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//[]运算符
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">third&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&amp;amp;&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//get()方法
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// 遍历
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 获得引用
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 获得可变引用
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 获得所有权，注意此时Vec的属主将会被转移！！
&lt;/span>&lt;span class="c1">// 迭代器
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">xs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;gt; {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// 内置方法
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">22&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//v长度(元素数量)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">is_empty&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//vec是否为空
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//get
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//iterator
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">33&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//在尾部插入元素33
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">111&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//在索引0处插入111
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//删除i元素并返回被删除的元素，索引越界将panic报错退出
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//删除并返回vec尾部的元素，vec为空则返回None
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//将另一个vec中的所有元素追加移入vec中，移动后另一个vec变为空vec
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">truncate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//将vec截断2，多余的元素被删除
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">retain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//保留满足条件的
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">drain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//删除指定范围的元素，同时返回该范围所有元素的迭代器
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">split_off&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//从index 2处分裂为两个vec
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clear&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//清空vec
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="范围range">范围(Range)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Range 是Rust 内置的用于表示一个范围的数据类型；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Range数据类型位于&lt;code>std::ops::RangeXXX&lt;/code>内；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个范围都是一个迭代器，可用for 循环打印范围内的元素；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Rust支持范围操作符，有以下几种表示范围的操作符：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>范围表达式&lt;/th>
&lt;th>类型&lt;/th>
&lt;th>表示的范围&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>start..end&lt;/td>
&lt;td>std::ops::Range&lt;/td>
&lt;td>start ≤ x &amp;lt; end&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>start..&lt;/td>
&lt;td>std::ops::RangeFrom&lt;/td>
&lt;td>start ≤ x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>..end&lt;/td>
&lt;td>std::ops::RangeTo&lt;/td>
&lt;td>x &amp;lt; end&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>..&lt;/td>
&lt;td>std::ops::RangeFull&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>start..=end&lt;/td>
&lt;td>std::ops::RangeInclusive&lt;/td>
&lt;td>start ≤ x ≤ end&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>..=end&lt;/td>
&lt;td>std::ops::RangeToInclusive&lt;/td>
&lt;td>x ≤ end&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">ops&lt;/span>::&lt;span class="p">{&lt;/span>&lt;span class="n">Range&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RangeInclusive&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Range&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">start&lt;/span>: &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">end&lt;/span>: &lt;span class="mi">5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// (1..=5)是结构体std::ops::RangeInclusive的一个实例
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RangeInclusive&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// 自带的 sum 方法用于求和
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// 每个范围都是一个迭代器，可用for 循环打印范围内的元素
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// 范围操作
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">22&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">33&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">44&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">55&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// [11,22,33]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// [22, 33, 44]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">[..];&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// [11, 22, 33, 44, 55]
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="字符串">字符串&lt;/h2>
&lt;p>Rust字符串包括两种：&lt;code>str&lt;/code>和&lt;code>String&lt;/code>。&lt;/p>
&lt;h3 id="str">str&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>str&lt;/code>由核心语言提供；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>常以引用的形式出现——&lt;code>&amp;amp;str&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>静态不可变；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持转义；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持切片操作；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">//定义
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nb">&amp;#39;static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//转义
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;foo
&lt;/span>&lt;span class="s">bar&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;foo\nbar&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">w&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="string">String&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>String&lt;/code> 由标准库提供的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内存位于堆上；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可增长的、可变的、有所有权；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>String&lt;/code> 和&lt;code>&amp;amp;str&lt;/code> 都是 UTF-8 编码的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>String&lt;/code> -&amp;gt; &lt;code>&amp;amp;str&lt;/code>非常轻松，几乎没有开销；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;amp;str&lt;/code> -&amp;gt; &lt;code>String&lt;/code>是需要在堆上请求内存的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>String不支持通过下标访问，可转换为&amp;amp;str进行；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>不是char数组, 而是UTF-8&lt;strong>变长&lt;/strong>序列；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ASCII字符占一个字节, 其余字符占多个不定长字节.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>len()&lt;/code>方法返回的是字节长度, 而非字符长度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>chars().count()&lt;/code>返回字符长度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个栈上的String变量在内存中表示如下:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">//new: 创建空字符串
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//&amp;amp;str -&amp;gt; String
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;string&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//to_string: 创建非空字符串
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;string2&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//from: 创建非空字符串
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// String -&amp;gt; &amp;amp;str
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s5&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_str&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;*&lt;/span>&lt;span class="n">s5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//String 实现impl Deref&amp;lt;Target=str&amp;gt; for String
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">//更新字符串
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">s4&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//push_str: 添加字符串
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">s4&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s5&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 这里是&amp;amp;s2 而不是s2
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">s4&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;l&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//push: 添加字符
&lt;/span>&lt;span class="c1">//连接字符串
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;world!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// let s3 = s1 + &amp;#34;wold&amp;#34;;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//s1 被移动了，不能继续使用
&lt;/span>&lt;span class="c1">//格式化字符串
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tic&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tac&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;toe&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}-{}-{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//format!宏不会获取参数的所有权
&lt;/span>&lt;span class="c1">// 字符串slice
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;tic&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//&amp;amp;str -&amp;gt; String
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;wold&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">[..&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 不要忘了 &amp;amp; 符号
&lt;/span>&lt;span class="c1">// 字符串遍历
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">nth&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;abcd&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// a,b,c,d
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;नमस्ते&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 224 164 168 224 ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//字符串切片
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello word&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hello&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="hashmap哈希表">HashMap(哈希表)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>所有实现了&lt;code>Eq&lt;/code>和&lt;code>Hash&lt;/code>的类型都可以作为HashMap的key；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过&lt;code>#[derive(PartialEq, Eq,hash)]&lt;/code>可以快速的实现&lt;code>Eq&lt;/code>和&lt;code>Hash&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">//引入hashmap包
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">collections&lt;/span>::&lt;span class="n">HashMap&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//new
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HashMap&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//new
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">solar_distance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HashMap&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//from
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Mercury&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">0.4&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Venus&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">0.7&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Earth&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Mars&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1.5&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">]);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">form&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Blue&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//insert
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Yellow&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">teams&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Blue&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Yellow&amp;#34;&lt;/span>&lt;span class="p">)];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">initial_scores&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">scores&lt;/span>: &lt;span class="nc">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">teams&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">zip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">initial_scores&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">form&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Blue&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//get
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//遍历
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}: {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// entry
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Yellow&amp;#34;&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="n">or_insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//如果存在就忽略，如果不存在就插入. or_insert 方法会返回这个键的值的一个可变引用（&amp;amp;mut V）
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="hashset">HashSet&lt;/h2>
&lt;ul>
&lt;li>Rust中的HashSet实现非常简单就是&lt;code>HashMap&amp;lt;T,()&amp;gt;&lt;/code>；&lt;/li>
&lt;/ul>
&lt;h3 id="btreemap">BTreeMap&lt;/h3>
&lt;ul>
&lt;li>
&lt;h2 id="参考">参考&lt;/h2>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.codemore.top/p/ce5ae822-e775-351d-830c-994110faf023/">https://www.codemore.top/p/ce5ae822-e775-351d-830c-994110faf023/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://unpluggedcoder.me/2019/08/15/Rust%E5%85%A5%E9%97%A8%E5%A4%B1%E8%B4%A5%E4%B9%8BOwnership/">https://unpluggedcoder.me/2019/08/15/Rust%E5%85%A5%E9%97%A8%E5%A4%B1%E8%B4%A5%E4%B9%8BOwnership/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/sumyuan/p/13787094.html">Rust之路（2）——数据类型 上篇 - sumyuan - 博客园&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>STL容器</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl%E5%AE%B9%E5%99%A8/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl%E5%AE%B9%E5%99%A8/</guid><description>&lt;h1 id="stl容器">STL容器&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>容器库是类模板与算法的汇集，允许程序员简单地访问常见数据结构，例如队列、链表和栈。有三类容器——顺序容器、关联容器和无序关联容器——每种都被设计为支持不同组的操作。&lt;/p>
&lt;p>容器管理为其元素分配的存储空间，并提供直接或间接地通过迭代器（拥有类似指针属性的对象）访问它们的函数。&lt;/p>
&lt;p>大多数容器拥有至少几个常见的成员函数，并共享功能。特定应用的最佳容器不仅依赖于提供的功能，还依赖于对于不同工作量的效率。&lt;/p>
&lt;h3 id="顺序容器">顺序容器&lt;/h3>
&lt;p>顺序容器是实现能按顺序访问的数据结构。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>容器类型&lt;/th>
&lt;th>版本&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/array" title="cpp/container/array">array&lt;/a>&lt;/td>
&lt;td>(C++11 起)&lt;/td>
&lt;td>静态的连续数组 (类模板)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/vector" title="cpp/container/vector">vector&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>动态的连续数组(类模板)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/deque" title="cpp/container/deque">deque&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>双端队列(类模板)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/forward_list" title="cpp/container/forward list">forward_list&lt;/a>&lt;/td>
&lt;td>(C++11 起)&lt;/td>
&lt;td>单链表(类模板)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/list" title="cpp/container/list">list&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>双链表(类模板)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="关联容器">关联容器&lt;/h3>
&lt;p>关联容器实现能快速查找（ O(log n) 复杂度）的数据结构。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>容器类型&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/set" title="cpp/container/set">set&lt;/a>&lt;/td>
&lt;td>唯一键的集合，按照键排序 (类模板)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/map" title="cpp/container/map">map&lt;/a>&lt;/td>
&lt;td>键值对的集合，按照键排序，键是唯一的(类模板)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/multiset" title="cpp/container/multiset">multiset&lt;/a>&lt;/td>
&lt;td>键的集合，按照键排序(类模板)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/multimap" title="cpp/container/multimap">multimap&lt;/a>&lt;/td>
&lt;td>键值对的集合，按照键排序(类模板)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="无序关联容器">无序关联容器&lt;/h3>
&lt;p>无序关联容器提供能快速查找（均摊 O(1) ，最坏情况 O(n) 的复杂度）的无序（哈希）数据结构。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>版本&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/unordered_set" title="cpp/container/unordered set">unordered_set&lt;/a>&lt;/td>
&lt;td>(C++11 起)&lt;/td>
&lt;td>唯一键的集合，按照键生成散列 (类模板)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/unordered_map" title="cpp/container/unordered map">unordered_map&lt;/a>&lt;/td>
&lt;td>(C++11 起)&lt;/td>
&lt;td>键值对的集合，按照键生成散列，键是唯一的(类模板)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/unordered_multiset" title="cpp/container/unordered multiset">unordered_multiset&lt;/a>&lt;/td>
&lt;td>(C++11 起)&lt;/td>
&lt;td>键的集合，按照键生成散列(类模板)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/unordered_multimap" title="cpp/container/unordered multimap">unordered_multimap&lt;/a>&lt;/td>
&lt;td>(C++11 起)&lt;/td>
&lt;td>键值对的集合，按照键生成散列&lt;br>(类模板)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="容器适配器">容器适配器&lt;/h3>
&lt;p>容器适配器提供顺序容器的不同接口。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;a href="https://zh.cppreference.com/w/cpp/container/stack" title="cpp/container/stack">stack&lt;/a>&lt;/th>
&lt;th>适配一个容器以提供栈（LIFO 数据结构） &lt;br>(类模板)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/queue" title="cpp/container/queue">queue&lt;/a>&lt;/td>
&lt;td>适配一个容器以提供队列（FIFO 数据结构）&lt;br>(类模板)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://zh.cppreference.com/w/cpp/container/priority_queue" title="cpp/container/priority queue">priority_queue&lt;/a>&lt;/td>
&lt;td>适配一个容器以提供优先级队列&lt;br>(类模板)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="span">span&lt;/h3>
&lt;p>&lt;code>span&lt;/code> 是相接的对象序列上的非占有视图，某个其他对象占有序列的存储。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;a href="https://zh.cppreference.com/w/cpp/container/span" title="cpp/container/span">span&lt;/a>&lt;br>&lt;br>(C++20)&lt;/th>
&lt;th>对象的连续序列上的无所有权视图 &lt;br>(类模板)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;h3 id="迭代器非法化">迭代器非法化&lt;/h3>
&lt;p>只读方法决不非法化迭代器或引用。修改容器内容的方法可能非法化迭代器和/或引用，总结于此表格。&lt;/p>
&lt;p>此处&lt;strong>插入&lt;/strong>指代任何添加一或多个元素到容器的方法，而&lt;strong>擦除&lt;/strong>指代任何从容器移除一或多个元素的方法。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>插入方法的例子是 &lt;a href="https://zh.cppreference.com/w/cpp/container/set/insert" title="cpp/container/set/insert">std::set::insert&lt;/a> 、 &lt;a href="https://zh.cppreference.com/w/cpp/container/map/emplace" title="cpp/container/map/emplace">std::map::emplace&lt;/a> 、 &lt;a href="https://zh.cppreference.com/w/cpp/container/vector/push_back" title="cpp/container/vector/push back">std::vector::push_back&lt;/a> 和 &lt;a href="https://zh.cppreference.com/w/cpp/container/deque/push_front" title="cpp/container/deque/push front">std::deque::push_front&lt;/a> 。&lt;/p>
&lt;ul>
&lt;li>注意 &lt;a href="https://zh.cppreference.com/w/cpp/container/unordered_map/operator_at" title="cpp/container/unordered map/operator at">std::unordered_map::operator[]&lt;/a> 也算，因为它可能插入元素到 map 中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>擦除方法的例子是 &lt;a href="https://zh.cppreference.com/w/cpp/container/set/erase" title="cpp/container/set/erase">std::set::erase&lt;/a> 、 &lt;a href="https://zh.cppreference.com/w/cpp/container/vector/pop_back" title="cpp/container/vector/pop back">std::vector::pop_back&lt;/a> 、 &lt;a href="https://zh.cppreference.com/w/cpp/container/deque/pop_front" title="cpp/container/deque/pop front">std::deque::pop_front&lt;/a> 和 &lt;a href="https://zh.cppreference.com/w/cpp/container/map/clear" title="cpp/container/map/clear">std::map::clear&lt;/a> 。&lt;/p>
&lt;ul>
&lt;li>&lt;code>clear&lt;/code> 非法化所有迭代器和引用。因为它擦除所有元素，这在技术上遵照上述规则。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>尾后迭代器需要特别留意。通常像指向未被擦除元素的正常迭代器一般非法化此迭代器。故 &lt;a href="https://zh.cppreference.com/w/cpp/container/set/end" title="cpp/container/set/end">std::set::end&lt;/a> 决不被非法化， &lt;a href="https://zh.cppreference.com/w/cpp/container/unordered_set/end" title="cpp/container/unordered set/end">std::unordered_set::end&lt;/a> 仅在重哈希时被非法化， &lt;a href="https://zh.cppreference.com/w/cpp/container/vector/end" title="cpp/container/vector/end">std::vector::end&lt;/a> 始终被非法化（因为它始终出现在被修改元素后），以此类推。&lt;/p>
&lt;ul>
&lt;li>例外：删除 &lt;a href="https://zh.cppreference.com/w/cpp/container/deque" title="cpp/container/deque">std::deque&lt;/a> 末元素的擦除操作&lt;em>会&lt;/em>非法化尾后迭代器，尽管它不是容器的被擦除元素（或者说根本不是元素）。与 &lt;a href="https://zh.cppreference.com/w/cpp/container/deque" title="cpp/container/deque">std::deque&lt;/a> 迭代器的通用规则结合后，最终结果是&lt;em>不&lt;/em>非法化 &lt;a href="https://zh.cppreference.com/w/cpp/container/deque/end" title="cpp/container/deque/end">std::deque::end&lt;/a> 的唯一修改操作是删除首元素，而非末元素的擦除。&lt;/li>
&lt;/ul>
&lt;h3 id="线程安全">线程安全&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>能同时在不同容器上由不同线程调用所有容器函数。更广泛而言， C++ 标准库函数不读取能通过其他线程访问的对象，除非这些对象能直接或间接地经由函数参数，包含 this 指针访问;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>能同时在同一容器上由不同线程调用 const 成员函数。而且，成员函数 &lt;code>begin()&lt;/code> 、 &lt;code>end()&lt;/code>, &lt;code>rbegin()&lt;/code> 、 &lt;code>rend()&lt;/code> 、 &lt;code>front()&lt;/code> 、 &lt;code>back()&lt;/code> 、 &lt;code>data()&lt;/code> 、 &lt;code>find()&lt;/code> 、 &lt;code>lower_bound()&lt;/code> 、 &lt;code>upper_bound()&lt;/code> 、 &lt;code>equal_range()&lt;/code> 、 &lt;code>at()&lt;/code> 和除了关联容器中的 &lt;code>operator[]&lt;/code> 对于线程安全的目标表现如同 const （即它们亦能同时在同一容器上由不同线程调用）。更广泛而言， C++ 标准库函数不修改对象，除非这些对象能直接或间接地经由函数参数，包含 this 指针访问。&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同一容器中不同元素能由不同线程同时修改，除了 std::vector&lt;bool> 的元素（例如， &lt;a href="https://zh.cppreference.com/w/cpp/thread/future" title="cpp/thread/future">std::future&lt;/a> 对象的 vector 能从多个线程接收值）;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>迭代器操作（例如自增迭代器）读但不修改底层容器，而且能与同一容器上的其他迭代器操作同时由 const 成员函数执行。非法化任何迭代器的容器操作修改容器，且不能与任何在既存迭代器上的操作同时执行，即使这些迭代器未被非法化;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同一容器上的元素可以同时由不指定为访问这些元素的函数修改。更广泛而言， C++ 标准库函数不间接读取能从其参数访问的对象（包含容器的其他对象），除非其规定要求如此；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任何情况下，容器操作（还有算法，或其他 C++ 标准库函数）可于内部并行化，只要不更改用户可见的结果（例如 &lt;a href="https://zh.cppreference.com/w/cpp/algorithm/transform" title="cpp/algorithm/transform">std::transform&lt;/a> 可并行化，但指定了按顺序观览序列的每个元素的 &lt;a href="https://zh.cppreference.com/w/cpp/algorithm/for_each" title="cpp/algorithm/for each">std::for_each&lt;/a> 不行） | (C++11 起)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="成员函数表格">成员函数表格&lt;/h3></description></item><item><title>智能指针</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid><description>&lt;h1 id="智能指针">智能指针&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>智能指针&lt;/strong>(smart pointer)是C++用来自动管理对象生命周期的模板类；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>头文件 &lt;code>#include &amp;lt;memory&amp;gt;&lt;/code>；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="unique_ptr">unique_ptr&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>独占指针，对象所有权只能被一个指针所拥有，无法被两个或两个以上同时拥有；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不能进行拷贝及赋值操作，只能直接初始化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以从函数中返回一个&lt;code>unique_ptr&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>unique_ptr&lt;/code>为数组提供了模板偏特化，因此&lt;code>unique_ptr&lt;/code>也可以指向数组；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>c++14 提供了&lt;code>make_unique&lt;/code>来直接创建；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>作为函数参数使用时，使用引用可避免所有权转移；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实现原理：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>指针成员私有；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>禁用&lt;code>复制构造函数&lt;/code>和&lt;code>赋值函数&lt;/code>；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="定义">定义&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">//定义
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typename&lt;/span> &lt;span class="n">D&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">default_delete&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">unique_ptr&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">explicit&lt;/span> &lt;span class="n">unique_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pointer&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">~&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">unique_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">unique_ptr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//禁用复制构造函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">unique_ptr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//禁用赋值函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">unique_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unique_ptr&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unique_ptr&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">pointer&lt;/span> &lt;span class="n">__ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//c++14
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typename&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">Ts&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">make_unique&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">Ts&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">params&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Ts&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">)...&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="用法">用法&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// 4种初始化方式
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">up1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// 使用原始指针初始化
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">up2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">up2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">up1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// 使用reset初始化
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">up3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">up2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 通过move转移所有权
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;senlin&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// c++14使用make_unique
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//容器中使用
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">//函数参数及返回
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">fun1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fun1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//必须使用move将所有权转移
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//使用引用，无需转移所有权
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">fun2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fun2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//函数返回值为右值，无需使用move转移所有权
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">func3&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//unique_ptr管理数组
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="shared_ptr">shared_ptr&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>共享指针，对象所有权可以被多个共享指针同时拥有；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内部使用引用计数自动记录引用次数的多少，当引用次数为0时，对象自动销毁；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;code>make_shared&lt;/code>创建;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以使用一个new表达式返回的指针进行初始化；但是不能将一个new表达式返回的指针赋值给shared_ptr；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一旦将一个指针交由shared_ptr管理之后，就不要再通过普通指针访问这块内存；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以通过reset方法重置指向另一个对象，此时原对象的引用计数减一；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以定制一个deleter函数，用于在shared_ptr释放对象时调用;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在有通过this指针构建shared_ptr的情况下要继承&lt;code>std::enable_shared_from_this&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>shared_ptr的计数操作具有原子性, 多线程操作不同的shared_ptr进行操作是线程安全的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>shared_ptr本身就没有保证线程安全，多线程同时访问同一个shared_ptr对象线程不安全；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;test shared_ptr and new:&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">//shared_ptr&amp;lt;int&amp;gt; p5 = new int(1024); // wrong, no implicit constructor
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;*&lt;/span>&lt;span class="n">p4&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;world&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;*&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;*&lt;/span>&lt;span class="n">p2&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="enable_shared_from_this">enable_shared_from_this&lt;/h2>
&lt;p>如果涉及到将this指针提升为shared_ptr的情况，直接提升会新建一个manager object。&lt;/p>
&lt;p>使用两个manager object管理同一个对象会造成不可预知的后果。为避免这种情况，需要在对象中维护一个weak_ptr。这是通过enable_shared_from_this自动完成的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">void&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thing&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Thing&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//f(shared_ptr&amp;lt;Thing&amp;gt;(this)); //new manager object A
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shared_from_this&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">//use manager object B
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thing&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Thing&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">//new manager object B
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">sp&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当需要在object内部使用this指针时，调用shared_from_this()就可以避免新建manager object。需要注意的是，在构造函数中，对象还未构造完毕，并没有交由shared_ptr管理，即manager object还未创建，所以不能使用shared_from_this。&lt;/p>
&lt;h2 id="weak_ptr">weak_ptr&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>weak_ptr一般和shared_ptr配合使用，用于消除shared_ptr循环引用问题；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指向shared_ptr所指向的对象，但是却不增加对象的引用计数；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>weak_ptr有一个lock函数，尝试取回一个指向对象的shared_ptr；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">auto&lt;/span> &lt;span class="n">p10&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">weak_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">wp1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;p10 use_count: &amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">p10&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">use_count&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//p10.reset(new int(1025)); // this will cause wp1.lock() return a false obj
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p11&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">wp1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;wp1: &amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;*&lt;/span>&lt;span class="n">p11&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34; use count: &amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">p11&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">use_count&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="auto_ptr">auto_ptr&lt;/h2>
&lt;ul>
&lt;li>c++98中使用，c++17中移除，不建议使用；&lt;/li>
&lt;/ul>
&lt;h2 id="最佳实践">最佳实践&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>必须保证所有managed object只有一个manager object；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>能用裸指针解决问题的情况下，就不要使用智能指针；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果决定了用智能指针，那就不要用裸指针管理同一个对象；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>能用&lt;code>unique_ptr&lt;/code>管理的对象，不要使用&lt;code>shared_ptr&lt;/code>/&lt;code>weak_ptr&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="http://senlinzhan.github.io/2015/04/20/%E8%B0%88%E8%B0%88C-%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/">深入 C++ 的 unique_ptr | Senlin&amp;rsquo;s Blog&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/30933682?utm_source=wechat_session&amp;amp;utm_medium=social&amp;amp;utm_oi=28398072102912">https://zhuanlan.zhihu.com/p/30933682?utm_source=wechat_session&amp;amp;utm_medium=social&amp;amp;utm_oi=28398072102912&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>汇编基础</title><link>https://justice.bj.cn/post/14.language/asm/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/asm/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="汇编基础">汇编基础&lt;/h1>
&lt;h2 id="一基础知识">一、基础知识&lt;/h2>
&lt;h2 id="引言">引言&lt;/h2>
&lt;ul>
&lt;li>基本了解硬件系统的结构；&lt;/li>
&lt;li>利用硬件系统的编程结构和指令集，有效灵活地控制系统进行工作。&lt;/li>
&lt;/ul>
&lt;h2 id="11-机器语言">1.1 机器语言&lt;/h2>
&lt;ul>
&lt;li>机器语言是机器指令的集合。电子计算机的机器指令是一系列二进制数字。计算机将之转换为一系列高低电平脉冲信号来驱动硬件工作的。&lt;/li>
&lt;/ul>
&lt;h2 id="12-汇编语言的产生">1.2 汇编语言的产生&lt;/h2>
&lt;ul>
&lt;li>由于机器语言指令都是由01组成,难以编写,记忆和维护程序.所以汇编语言为了解决这一问题产生。汇编语言的主体是汇编指令，汇编指令是机器指令的助记符。&lt;/li>
&lt;li>&lt;strong>寄存器：&lt;/strong> CPU中存储数据的器件，一个CPU中有多个寄存器。&lt;/li>
&lt;/ul>
&lt;h2 id="13-汇编语言的组成">1.3 汇编语言的组成&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>1、汇编指令&lt;/strong>(机器码的助记符，有对应的机器码)；&lt;/li>
&lt;li>&lt;strong>2、伪指令&lt;/strong>(由编译器执行)和&lt;strong>其他符号&lt;/strong>(由编译器识别)。&lt;/li>
&lt;/ul>
&lt;h2 id="14-存储器">1.4 存储器&lt;/h2>
&lt;ul>
&lt;li>CPU工作需要指令和数据，指令和数据存储在存储器中。&lt;/li>
&lt;/ul>
&lt;h2 id="15-指令和数据">1.5 指令和数据&lt;/h2>
&lt;ul>
&lt;li>在内存或者磁盘中存储的都是为二进制信息，&lt;strong>指令和数据由我们设定(走的总线)&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h2 id="16-存储单元">1.6 存储单元&lt;/h2>
&lt;ul>
&lt;li>存储器被划分为若干个存储单元，每个存储单元从0开始顺序编号。&lt;/li>
&lt;li>B、KB、MB、GB、TB等单位。&lt;/li>
&lt;/ul>
&lt;h2 id="17-cpu对存储器的读写">1.7 CPU对存储器的读写&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>CPU要对数据进行读写，必须和外部器件进行以下三类信息的交互：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1、存储单元的地址&lt;/strong>(地址信息)；&lt;/li>
&lt;li>&lt;strong>2、器件的选择、读或写命令&lt;/strong>(控制信息)；&lt;/li>
&lt;li>&lt;strong>3、读或写的数据&lt;/strong>(数据信息) 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>总线是连接CPU和其他芯片的导线，逻辑上分为&lt;strong>地址总线&lt;/strong>、&lt;strong>数据总线&lt;/strong>、&lt;strong>控制总线&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-53052317c79589f5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1069/format/webp" alt="">&lt;/p>
&lt;p>逻辑上总线的分类&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CPU从内存单元中读写数据的过程：&lt;/p>
&lt;ul>
&lt;li>1、CPU通过地址线将地址信息发出；&lt;/li>
&lt;li>2、CPU通过控制线发出内存读命令，选中存储器芯片，并通知它将要从中读或写数据；&lt;/li>
&lt;li>3、存储器将相应的地址单元中的数据通过数据线送入CPU或CPU通过数据线将数据送入相应的内存单元。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="18-地址总线">1.8 地址总线&lt;/h2>
&lt;ul>
&lt;li>CPU是通过地址总线指定存储单元，地址总线传送的能力决定了CPU对存储单元的寻址能力。(一般32位CPU，寻址能力为2^32=4G)&lt;/li>
&lt;/ul>
&lt;h2 id="19-数据总线">1.9 数据总线&lt;/h2>
&lt;ul>
&lt;li>CPU通过数据总线来与内存等器件进行数据传送，数据总线的宽度决定了CPU和外界的数据传送速度。&lt;/li>
&lt;/ul>
&lt;h2 id="110-控制总线">1.10 控制总线&lt;/h2>
&lt;ul>
&lt;li>控制总线是一些不同控制的集合，CPU通过控制总线对外部器件的控制。控制总线的宽度决定了CPU对外部器件的控制能力。&lt;/li>
&lt;/ul>
&lt;h2 id="小结">小结&lt;/h2>
&lt;ul>
&lt;li>1、汇编指令时机器指令的助记符，与机器指令一一对应。&lt;/li>
&lt;li>2、每一种CPU都有自己的汇编指令集。&lt;/li>
&lt;li>3、CPU可以直接使用的信息在存储器中存放。&lt;/li>
&lt;li>4、在存储器中指令和数据都是二进制信息。&lt;/li>
&lt;li>5、存储单元从0开始顺序编号。&lt;/li>
&lt;li>6、一个存储单元可以存储8个bit。&lt;/li>
&lt;li>7、B、KB、MB、GB等单位之间的转换。&lt;/li>
&lt;li>8、CPU管脚和总线相连。总线的宽度表示CPU不同方面的性能：
&lt;ul>
&lt;li>地址总线的宽度决定了CPU的寻址能力；&lt;/li>
&lt;li>数据总线的宽度决定了CPU与其他器件进行一次数据传送的量；&lt;/li>
&lt;li>控制总线宽度决定了CPU对系统中其他器件的控制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-11">检测点 1.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-49b9c21cffa7dddd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点1.1&lt;/p>
&lt;h2 id="111-内存地址空间概述">1.11 内存地址空间(概述)&lt;/h2>
&lt;ul>
&lt;li>CPU可寻的内存单元构成这个CPU的内存地址空间。例如一个CPU的地址总线宽度为10，那么可以寻址的1024个内存单元构成了这个CPU的内存空间。&lt;/li>
&lt;/ul>
&lt;h2 id="112-主板">1.12 主板&lt;/h2>
&lt;ul>
&lt;li>主板主板，主要的电路板 :laughing:&lt;/li>
&lt;/ul>
&lt;h2 id="113-接口卡">1.13 接口卡&lt;/h2>
&lt;ul>
&lt;li>CPU通过接口卡间接控制外部设备。&lt;/li>
&lt;/ul>
&lt;h2 id="114-各类存储器">1.14 各类存储器&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>随机存储器RAM(主板上的RAM、拓展插槽上的RAM和接口卡上的RAM)和只读存储器器ROM(装有BIOS的ROM)。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-e732472a2884d7ce?imageMogr2/auto-orient/strip%7CimageView2/2/w/1092/format/webp" alt="">&lt;/p>
&lt;p>PC集中各类存储器的逻辑连接&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="115-内存地址空间">1.15 内存地址空间&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>各类存储器在物理上是独立的，但是：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1、都和CPU的总线相连；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>2、 CPU对他们进行读或写的时候都通过控制线发出的内存读写命令。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-3bd8fe8536434790?imageMogr2/auto-orient/strip%7CimageView2/2/w/1086/format/webp" alt="">&lt;/p>
&lt;p>将各类存储器看作一个逻辑存储器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不同的计算机系统的内存地址空间分配情况是不同的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="二寄存器cpu的工作原理">二、寄存器(CPU的工作原理)&lt;/h1>
&lt;h2 id="引言-1">引言&lt;/h2>
&lt;ul>
&lt;li>CPU由运算器、控制器、寄存器 等器件组成，靠内部总线相连。&lt;/li>
&lt;li>内部总线实现CPU内部各器件之间的联系；外部总线实现CPU和主板上其他器件的联系。&lt;/li>
&lt;li>在CPU中：
&lt;ul>
&lt;li>运算器进行信息处理；&lt;/li>
&lt;li>寄存器进行信息存储；&lt;/li>
&lt;li>控制器控制各种器件进行工作；&lt;/li>
&lt;li>内部总线连接各种器件在它们之间进行数据的传送。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="21-通用寄存器">2.1 通用寄存器&lt;/h2>
&lt;ul>
&lt;li>8086有14个寄存器：
&lt;ul>
&lt;li>&lt;strong>AX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、CS、ES、PSW&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>AX、BX、CX、DX通常用来存放一般性数据，被称为通用寄存器。&lt;/li>
&lt;li>16位寄存器所能存储的数据最大值为216-1 。&lt;/li>
&lt;li>为保证兼容性，8086 CPU的通用寄存器可以分为两个独立的8位寄存器使用。&lt;strong>例：&lt;/strong> AX可分为AH和AL。&lt;/li>
&lt;/ul>
&lt;h2 id="22-字在寄存器中的存储">2.2 字在寄存器中的存储&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>8086 CPU所有的寄存器是16位，可以存放2个字节(一个字)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一字节由8 bit 组成，可以存在8位寄存器中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>字(word)是两字节，16位。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-ead3e9daffcbe850?imageMogr2/auto-orient/strip%7CimageView2/2/w/716/format/webp" alt="">&lt;/p>
&lt;p>一个字由两个字节组成&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="23-几条汇编指令">2.3 几条汇编指令&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>汇编指令对大小写不敏感&lt;/p>
&lt;p>汇编指令举例&lt;/p>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>汇编指令&lt;/th>
&lt;th>控制CPU完成的操作&lt;/th>
&lt;th>用高级语言的语法描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>mov ax，18&lt;/td>
&lt;td>将8送入AX&lt;/td>
&lt;td>AX=18&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov ah，78&lt;/td>
&lt;td>将78送入AH&lt;/td>
&lt;td>AH=78&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>add ax，8&lt;/td>
&lt;td>将寄存器AX中的数值加上8结果存入AX中&lt;/td>
&lt;td>AX=AX+8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov ax，bx&lt;/td>
&lt;td>将寄存器BX中的数据送入寄存器AX&lt;/td>
&lt;td>AX=BX&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>add ax，bx&lt;/td>
&lt;td>将AX，BX中的内容相加结果存入AX中&lt;/td>
&lt;td>AX=AX+BX&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="检测点-21">检测点 2.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-8eaa7bf0618705aa?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点2.1&lt;/p>
&lt;h2 id="24-物理地址">2.4 物理地址&lt;/h2>
&lt;ul>
&lt;li>所有的内存单元构成一个一维的线性存储空间。&lt;/li>
&lt;li>CPU访问内存单元时要给出内存单元的唯一地址就是物理地址。&lt;/li>
&lt;/ul>
&lt;h2 id="25-16位结构的cpu">2.5 16位结构的CPU&lt;/h2>
&lt;ul>
&lt;li>1、运算器一次最多可以处理16位数据。&lt;/li>
&lt;li>2、 寄存器的最大宽度为16位。&lt;/li>
&lt;li>3、寄存器和运算器之间的通路是16位。&lt;/li>
&lt;/ul>
&lt;h2 id="26-8086-cpu给出物理地址的方法">2.6 8086 CPU给出物理地址的方法&lt;/h2>
&lt;ul>
&lt;li>8086有20位的地址总线，可以传送20位地址，寻址能力为1M；但8086内部为16位结构，只能传送16位的地址。&lt;/li>
&lt;li>&lt;strong>8086CPU采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-9824e3b568988f7e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1132/format/webp" alt="">&lt;/p>
&lt;p>8086CPU相关部件的逻辑结构&lt;/p>
&lt;ul>
&lt;li>8086CPU读写内存的步骤：
&lt;ul>
&lt;li>1、CPU中的相关部件提供段子和偏移地址这两个16位的地址；&lt;/li>
&lt;li>2、段地址和偏移地址通过内部总线送入到一个称为地址加法器的部件；&lt;/li>
&lt;li>3、地址加法器将两个16位地址合并成一个20位的地址；&lt;/li>
&lt;li>4、地址加法器通过内部总线将20位物理地址送送入输入输出地址；&lt;/li>
&lt;li>5、输入输出控制电路将20位物理地址送上地址总线；&lt;/li>
&lt;li>6、20位物理地址被地址总线传送到存储器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>地址加法器工作原理：&lt;font color="red">物理地址=段地址*16+偏移地址&lt;/font>。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-4b4bb1b2b669a6eb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>地址加法器的过程&lt;/p>
&lt;ul>
&lt;li>段地址*16就是数据左移4位(二进制)&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>移位位数&lt;/th>
&lt;th>二进制&lt;/th>
&lt;th>十六进制&lt;/th>
&lt;th>十进制&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>10B&lt;/td>
&lt;td>2H&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>100B&lt;/td>
&lt;td>4H&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>1000B&lt;/td>
&lt;td>8H&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>10000B&lt;/td>
&lt;td>10H&lt;/td>
&lt;td>16&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>100000B&lt;/td>
&lt;td>20H&lt;/td>
&lt;td>32&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>一个数据的二进制形式左移N位，相当于该数据乘以2的N次方。一个数据X进制形式左移N位，相当乘以NX。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="27-段地址16偏移地址物理地址">2.7 段地址*16+偏移地址=物理地址&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>CPU可以通过不同的段地址和偏移地址形成一个相同的物理地址。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-560c96803af9fea7?imageMogr2/auto-orient/strip%7CimageView2/2/w/752/format/webp" alt="">&lt;/p>
&lt;p>CPU可以通过不同的段地址和偏移地址形成相同的物理地址&lt;/p>
&lt;blockquote>
&lt;p>段地址*16是移位&lt;/p>
&lt;/blockquote>
&lt;h2 id="28-段的概念">2.8 段的概念&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>人为定义的，将若干地址连续的内存单元看作一个段。用段地址*16定位段的起始地址(基址)，用偏移地址定位段中的内存单元。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-6597616350aa5f22?imageMogr2/auto-orient/strip%7CimageView2/2/w/1193/format/webp" alt="">&lt;/p>
&lt;p>段的概念&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>一个段的起始地址是16的倍数。偏移地址为16位，寻址能力为64K，所以段的最大长度也是64K。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-22">检测点 2.2&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-e8aacd40f8697825?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点2.2&lt;/p>
&lt;h2 id="29-段寄存器">2.9 段寄存器&lt;/h2>
&lt;ul>
&lt;li>8086 CPU有4个段寄存器:&lt;strong>CS(代码段)、DS(数据段)、SS(堆栈段)、ES(附加段)&lt;/strong>，这4个段提供给8086CPU内存单元的段地址。&lt;/li>
&lt;/ul>
&lt;h2 id="210-cs和ip">2.10 CS和IP&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>CS(代码段寄存器)&lt;/strong> 和&lt;strong>IP(指令指针寄存器)&lt;/strong> 是8086CPU中最关键的寄存器，它们指示了CPU当前要读取指令的地址。在任意时刻CPU将CS:IP指向的内容当作指令执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8086CPU工作过程的简要概述：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>1、从CS:IP指向内存单元读取指令，读取的指令进入指令缓冲器；&lt;/p>
&lt;blockquote>
&lt;p>8086PC机刚开始启动时，CPU从内存FFFF0h单元中读取指令执行，FFFF0h单元中的指令时8086PC机开机后执行的第一条指令。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>2、 IP=IP+所读取指令的长度，从而正确的指向下一条指令；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>3、执行指令。转到步骤1，周而复始。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="211-修改csip的指令">2.11 修改CS、IP的指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>mov指令(传送指令)&lt;/strong> 可以改变8086CPU大部分寄存器的值，但不能用于设置CS、IP的值。&lt;/li>
&lt;li>&lt;strong>jmp指令(转移指令)&lt;/strong> 可以用来同时修改CS和IP的值，格式为&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">jmp&lt;/span> &lt;span class="err">段地址&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">偏移地址&lt;/span>&lt;span class="c">;同时修改CS和IP
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">jmp&lt;/span> &lt;span class="err">某一合法寄存器&lt;/span>&lt;span class="c">;则是仅修改IP
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="212-代码段">2.12 代码段&lt;/h2>
&lt;ul>
&lt;li>对于8086PC机，在编程时可以将长度为N(N小于等于64KB)的一组代码存在一组地址连续、起始地址为16的倍数的内存单元中，这段内存是用来存放代码的，从而定义了一个代码段。&lt;/li>
&lt;li>利用CS:IP来指向内存单元从而让CPU执行其中的内容。&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-23">检测点 2.3&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-711ba804eb6c1227?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点2.3&lt;/p>
&lt;h2 id="使用debug">使用Debug&lt;/h2>
&lt;blockquote>
&lt;p>&lt;font color="red">windows xp系统自带debug，请使用xp以上系统的读者执行自行下载debug.exe和dosbox，使用方法笔者不再赘述，在dosbox中可以使用debug。&lt;/font >&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-18b59a388c90a05b?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>debug in dosbox&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>可以使用汇编金手指查阅指令。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>R&lt;/strong>命令查看、改变CPU寄存器的内容；&lt;/li>
&lt;li>&lt;strong>D&lt;/strong>命令查看内存中的内容；&lt;/li>
&lt;li>&lt;strong>E&lt;/strong>命令改写内存中的内容；&lt;/li>
&lt;li>&lt;strong>U&lt;/strong>命令将内存中的机器指令翻译成汇编指令；&lt;/li>
&lt;li>&lt;strong>T&lt;/strong>命令执行一条机器指令；&lt;/li>
&lt;li>&lt;strong>G&lt;/strong>命令跳转到偏移地址；&lt;/li>
&lt;li>&lt;strong>P&lt;/strong>命令结束循环或者是int 21H时是退出程序；&lt;/li>
&lt;li>&lt;strong>A&lt;/strong>命令是以汇编指令的格式在内存中写入一条机器指令。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="三寄存器内存访问">三、寄存器(内存访问)&lt;/h1>
&lt;h2 id="31-内存中字的存储">3.1 内存中字的存储&lt;/h2>
&lt;ul>
&lt;li>字是两个字节，要用两个地址连续的内存来存放，字的低位字节存在低地址中，高位字节存放在高地址单元中。&lt;/li>
&lt;/ul>
&lt;h2 id="32-ds和address">3.2 DS和[address]&lt;/h2>
&lt;ul>
&lt;li>DS通常存放要访问的数据的段地址。&lt;/li>
&lt;li>&lt;strong>8086 CPU由于硬件的设计不支持将数据直接送入段寄存器的操作。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>数据 -&amp;gt; 通用寄存器 -&amp;gt; 段寄存器&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 里边的数据代表偏移地址值&lt;/li>
&lt;li>&lt;strong>mov指令：&lt;/strong>
&lt;ul>
&lt;li>将数据直接送入寄存器；&lt;/li>
&lt;li>将一个寄存器或内存单元中的内容送入另一个寄存器；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>mov指令格式:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="err">寄存器名&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">内存单元&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="33-字型的传送">3.3 字型的传送&lt;/h2>
&lt;ul>
&lt;li>高地址单元和高8位寄存器，低地址单元和低8位寄存器相对应。&lt;/li>
&lt;/ul>
&lt;h2 id="34-movaddsub指令">3.4 mov、add、sub指令&lt;/h2>
&lt;ul>
&lt;li>有两个操作对象，jmp只有一个操作对象。&lt;/li>
&lt;li>&lt;strong>使用汇编金手指查阅指令&lt;/strong>&lt;/li>
&lt;li>&lt;strong>mov指令的几种形式&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="err">寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">数据&lt;/span>&lt;span class="c">;mov ax,8
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="err">寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">寄存器&lt;/span>&lt;span class="c">;mov ax,bx
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="err">寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">内存单元&lt;/span>&lt;span class="c">;mov ax,[0]
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="err">内存单元&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">寄存器&lt;/span>&lt;span class="c">;mov [0],ax
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="err">段寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">寄存器&lt;/span>&lt;span class="c">;mov ds,ax
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="err">寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">段寄存器&lt;/span>&lt;span class="c">;mov ax,ds
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="err">……&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>add指令的几种形式&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">add&lt;/span> &lt;span class="err">通用寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">数据&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="err">通用寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">通用寄存器&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="err">通用寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">内存单元&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="err">内存单元&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">寄存器&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>sub指令的几种形式&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">sub&lt;/span> &lt;span class="err">通用寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">数据&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="err">通用寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">通用寄存器&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="err">通用寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">内存单元&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="err">内存单元&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">通用寄存器&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="35-数据段">3.5 数据段&lt;/h2>
&lt;ul>
&lt;li>对于8086PC机，在编程时可以将长度为N(N小于等于64KB)的一组代码存在一组地址连续、起始地址为16的倍数的内存单元中，这段内存是用来存放数据的，从而定义了一个数据段。&lt;/li>
&lt;li>可以通过在DS中存放数据段的段地址，用相关的指令访问数据段中的具体单元来访问数据段中的数据。&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-31">检测点 3.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-e239cbea7e2391a7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点3.1&lt;/p>
&lt;h2 id="36-栈">3.6 栈&lt;/h2>
&lt;ul>
&lt;li>具有特殊的访问方式的存储空间，也是内存空间的一部分，数据&lt;strong>先进后出。&lt;/strong>&lt;/li>
&lt;li>有两个基本操作:
&lt;ul>
&lt;li>入栈：将一个新的元素放到栈顶；&lt;/li>
&lt;li>出栈：从栈顶取出一个元素。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>栈顶元素最后入栈最先出栈。&lt;/li>
&lt;/ul>
&lt;h2 id="37-8086-cpu提供的栈机制">3.7 8086 CPU提供的栈机制&lt;/h2>
&lt;ul>
&lt;li>现今的CPU都有栈的设计，基于8086CPU编程可以将一段内存当作栈来使用。&lt;/li>
&lt;li>8086CPU的&lt;strong>入栈(PUSH)&lt;strong>和&lt;/strong>POP(出栈)&lt;/strong>，以字为单位。
&lt;ul>
&lt;li>push ax 将寄存器ax中的数据送入栈&lt;/li>
&lt;li>pop ax 从栈顶取出数据送入ax&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>段寄存器SS存放栈顶的段地址，寄存器SP存放栈顶的偏移地址。任意时刻SS:SP指向栈顶元素。push时SP先自减法后写内存，pop先读内存sp后自加。&lt;/strong>&lt;/li>
&lt;li>pop之后数据还是存在内存中，push时覆盖。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;font color="red">CS和IP存放当前指令的段地址和偏移地址。&lt;/font>&lt;/p>
&lt;/blockquote>
&lt;h2 id="38-栈顶越界的问题">3.8 栈顶越界的问题&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>栈是空的，则SP指向栈底+1的内存。&lt;/strong>&lt;/li>
&lt;li>8086 CPU只纪录栈顶，栈空间由自己控制。栈顶越界问题导致溢出漏洞。&lt;/li>
&lt;li>8086CPU只考虑当前的情况：
&lt;ul>
&lt;li>当前栈顶在何处；&lt;/li>
&lt;li>当前要执行的指令时哪一条。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="39-pushpop指令">3.9 push、pop指令&lt;/h2>
&lt;ul>
&lt;li>可以直接对段寄存器使用。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;push和pop格式
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="err">寄存器&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="err">寄存器&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="err">段寄存器&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="err">段寄存器&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="err">内存单元&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="err">内存单元&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>通用寄存器命名是x结尾的，段寄存器是以s结尾。&lt;/strong>&lt;/li>
&lt;li>CPU在执行指令时，数据的段地址是从DS中获得，代码是在CS中获得，栈地址是从SS获得。&lt;/li>
&lt;/ul>
&lt;h2 id="310-栈段">3.10 栈段&lt;/h2>
&lt;ul>
&lt;li>对于8086PC机，在编程时可以将长度为N(N小于等于64KB)的一组代码存在一组地址连续、起始地址为16的倍数的内存单元中，这段内存是当作栈来用，从而定义了一个栈段。&lt;/li>
&lt;li>&lt;strong>寄存器清零可用sub ax,ax或者直接赋值0，&lt;/strong>&lt;font color="red">常见的也有使用xor&lt;/font>。&lt;/li>
&lt;li>当栈空间定义为最大时，栈为空时SP=0。&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-32">检测点 3.2&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-09698a94092b3921?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点3.2&lt;/p>
&lt;hr>
&lt;h1 id="四第一个程序">四、第一个程序&lt;/h1>
&lt;h2 id="引言-2">引言&lt;/h2>
&lt;p>编写完成的汇编语言程序，用编译器编译成可执行文件并在操作系统中运行。&lt;/p>
&lt;h2 id="41-一个源程序从写出到执行的过程">4.1 一个源程序从写出到执行的过程&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>编写&lt;/p>
&lt;ul>
&lt;li>用编辑器(Sublime Text、Nodepad++、UltraEdit)编写，文件后缀为.asm。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>编译链接&lt;/p>
&lt;ul>
&lt;li>使用MASM.EXE编译生产obj(目标文件)。masm也请读者自行搜索下载。&lt;/li>
&lt;li>LINKE.EXE对目标文件进行连接生产可在操作系统中直接运行的可执行文件。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>可执行文件包含程序(机器码)、数据(源程序中定义的数据)和相关的描述信息。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>执行&lt;/p>
&lt;ul>
&lt;li>操作系统中依照可执行文件中的描述信息将可执行文件中的机器码和数据加载入内存并进行相关的初始化，然后CPU执行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="42-源程序">4.2 源程序&lt;/h2>
&lt;ul>
&lt;li>汇编指令：有对应的机器码的指令，编译为机器码被CPU执行&lt;/li>
&lt;li>伪指令：没有对应的机器码，不被CPU所执行，由编译器执行来进行相关的编译工作。
&lt;ul>
&lt;li>segment和ends是用来定义一个段的，是成对使用的伪指令，再写可被编译器编译的汇编程序是必须要用的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span> &lt;span class="c">;假设代码段的名称为codesg
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">codesg&lt;/span> &lt;span class="no">segment&lt;/span> &lt;span class="c">;定义一个codesg段
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0456&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span> &lt;span class="c">;codesg段结束
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">end&lt;/span> &lt;span class="c">;是个伪指令，程序的结束标记
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>assume用来加上某一段寄存器和程序中的某一用segment……ends定义的段相关联。通过assume说明这种关联，在需要的情况下编译程序可以将段寄存器和某一个具体的段相联系。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>一个汇编程序是由多个段组成。一个有意义的汇编程序中至少要用一个段来存放代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>程序与源程序&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-8ab4e87dd9bbde24?imageMogr2/auto-orient/strip%7CimageView2/2/w/1064/format/webp" alt="">&lt;/p>
&lt;p>程序与源程序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标号:指代地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>程序的结构&lt;/p>
&lt;/li>
&lt;li>
&lt;p>小练习：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-as" data-lang="as">&lt;span class="o">;&lt;/span>&lt;span class="err">编程运算&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nx">assume&lt;/span> &lt;span class="nx">cs&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">abc&lt;/span> &lt;span class="o">;&lt;/span>&lt;span class="err">段与寄存器关联&lt;/span>
&lt;span class="nx">abc&lt;/span> &lt;span class="nx">segment&lt;/span> &lt;span class="o">;&lt;/span>&lt;span class="err">定义一个段，名称为&lt;/span>&lt;span class="nx">abc&lt;/span>
&lt;span class="nx">mov&lt;/span> &lt;span class="nx">ax&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="err">写入汇编指令&lt;/span>
&lt;span class="nx">add&lt;/span> &lt;span class="nx">ax&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="nx">ax&lt;/span>
&lt;span class="nx">add&lt;/span> &lt;span class="nx">ax&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="nx">ax&lt;/span>
&lt;span class="nx">abd&lt;/span> &lt;span class="nx">ends&lt;/span>
&lt;span class="nx">end&lt;/span> &lt;span class="o">;&lt;/span>&lt;span class="err">程序结束处&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>程序的返回:一个程序结束后将CPU的控制权交还给使它得以运行的程序的过程。应该在程序的末尾添加返回的程序段。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>codesg：放在segment前面，作为一个段的名称，这个段的名称最终将被编译、连接程序，称为一个段的段地址 。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span> &lt;span class="c">;第21号中断
&lt;/span>&lt;span class="c">;这两条指令说实现的功能就是程序返回。
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>语法错误和逻辑错误&lt;/li>
&lt;/ul>
&lt;h2 id="43-编辑源程序">4.3 编辑源程序&lt;/h2>
&lt;ul>
&lt;li>使用编辑器编辑，扩展名为.asm&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">ABC&lt;/span>
&lt;span class="nf">ABC&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">ABC&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="44-编译">4.4 编译&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>masn和 1.asm在同一目录中，dos下使用masm 1.asm命令即可生产1.obj文件。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-f8fcce1ff248f598?imageMogr2/auto-orient/strip%7CimageView2/2/w/734/format/webp" alt="">&lt;/p>
&lt;p>源程序文件和masm文件在同一目录下&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-b748f628ebd542f0?imageMogr2/auto-orient/strip%7CimageView2/2/w/638/format/webp" alt="">&lt;/p>
&lt;p>编译源程序&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="45-连接">4.5 连接&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>link 1.obj，生成exe文件，摁enter忽略编译程序提示输入的信息。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-14277059d9a747c8?imageMogr2/auto-orient/strip%7CimageView2/2/w/684/format/webp" alt="">&lt;/p>
&lt;p>连接程序&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-bed4f2755e48ef24?imageMogr2/auto-orient/strip%7CimageView2/2/w/398/format/webp" alt="">&lt;/p>
&lt;p>连接生成exe&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当源程序很大时，可以将它分成多个源程序文件编译，每个源程序编译成目标文件后再用连接程序将他们连接到一起，生成一个可执行文件。或者程序中调用了某个库文件中的子程序，需要将这个库文件和该目标文件连接到一起，生成一个可执行文件。或者一个源程序编译后得到存有机器码的目标文件，目标文件中的有些内容还不能直接生成可执行文件，连接程序将此内容处理为最终的可执行文件信息。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="46-简化编译和连接">4.6 简化编译和连接&lt;/h2>
&lt;ul>
&lt;li>使用ml命令，ml 1.asm&lt;/li>
&lt;/ul>
&lt;h2 id="47-exe的执行">4.7 exe的执行&lt;/h2>
&lt;ul>
&lt;li>为兼容16位的程序，使用dosbox运行。&lt;/li>
&lt;/ul>
&lt;h2 id="48-可执行文件中的程序转入内存并运行的原理">4.8 可执行文件中的程序转入内存并运行的原理&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>在dos中可执行文件中的程序p1若要运行吗必须有一个正在运行的程序p2将p1从可执行文件中加载如内存，将CPU的控制权交给它，p1才能得以运行；当p1运行完毕后，应该将CPU的控制权交还给使它de&amp;rsquo;yi 运行的程序p2。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>汇编程序从写出到执行的过程：编程 -&amp;gt; 编译 -&amp;gt; 连接 -&amp;gt; 加载 -&amp;gt; 内存中的程序 -&amp;gt; 运行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在dos系统中.exe文件中的加载过程&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-9c1fe0ce667bd8fa?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>exe文件中程序的加载过程&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-8791de91608948fb?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>psp的内容&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="49-程序执行过程的跟踪">4.9 程序执行过程的跟踪&lt;/h2>
&lt;ul>
&lt;li>使用debug(xp以上的系统在dosbox中使用)来跟踪一个程序的运行过程。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-5c58ee6940b92d46?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>使用debug来跟踪程序运行&lt;/p>
&lt;hr>
&lt;h1 id="五bx和loop指令">五、[BX]和loop指令&lt;/h1>
&lt;h2 id="引言-3">引言&lt;/h2>
&lt;ul>
&lt;li>约定符号()来表示一个寄存器或者一个内存单元中的内容。&lt;strong>例如&lt;/strong>(ax)=0010H表示ax中的内容为0010H；(21000H)=0010H，表示2000:1000处的内容为0010H。&lt;/li>
&lt;li>约定符号idata表示常量。&lt;/li>
&lt;/ul>
&lt;h2 id="51-bx">5.1 [BX]&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>inc指令是自增1的意思&lt;/strong>&lt;/li>
&lt;li>和[0]有些类似，[0]表示内存单元，它的偏移地址是0。[bx]也是表示一个内存单元，它的内存偏移地址在bx中。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>用以下两种信息描述一个内存单元：
&lt;ul>
&lt;li>1、内存单元的地址；&lt;/li>
&lt;li>2、内训单元的长度(类型)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>我们用[0]表示一个内训单元时，0表示单元的偏移地址，段地址默认在DS中，单元的长度(类型)可以由具体指令中的其他的操作对象(比如说寄存器)指出。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;0对应的字单元，主要单位要看操作对象(寄存器)
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;字节
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="52-loop指令">5.2 loop指令&lt;/h2>
&lt;ul>
&lt;li>指令的格式是loop 标号。CUP执行loop指令时要进两步操作：
&lt;ul>
&lt;li>&lt;strong>CX中存放循环的次数，执行时CX中的内容自减1。相当于C的do while&lt;/strong>&lt;/li>
&lt;li>&lt;strong>判断CX中的值，不为0则转至标号处执行程序，为0则向下执行。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>通常loop指令来实现循坏功能CX中存放循环的次数。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;计算2^3
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">add&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;计算2^12
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>
&lt;span class="nl">p:&lt;/span>&lt;span class="nf">add&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="no">loop&lt;/span> &lt;span class="no">p&lt;/span>&lt;span class="c">;p是标号
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>&lt;span class="c">;masm默认数字是十进制
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;编程计算123*236，结果放在ax中
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">236&lt;/span>
&lt;span class="nl">an:&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">123&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">an&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">123&lt;/span>
&lt;span class="nl">pa:&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">236&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">pa&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="53-在debug中跟踪用loop指令实现的循环程序">5.3 在Debug中跟踪用loop指令实现的循环程序&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>注意：在汇编源程序中数据不能以字母开头，有字母的在前面加0处理。&lt;/strong>&lt;/li>
&lt;li>t命令单步执行、G命令和P命令。&lt;/li>
&lt;li>&lt;strong>使用汇编金手指查阅指令。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="54-debug和汇编编译器masm对指令的不同处理">5.4 Debug和汇编编译器Masm对指令的不同处理&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Degug中mov ax,[0]，表示将ds:0处的数据存入al中。ah=0，因为一个内存单元是8位的，ax是16位的，同位存储。而编译器[0]会被当作0处理&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将内存2000:0、2000:1、2000:2、2000:3单元中的数据(字节)送入阿al、bl、cl、dl中。&lt;/p>
&lt;ul>
&lt;li>debug中：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-8230644591c4ec15?imageMogr2/auto-orient/strip%7CimageView2/2/w/643/format/webp" alt="">&lt;/p>
&lt;p>debug 1&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-ee9dc6b8a6d84aa7?imageMogr2/auto-orient/strip%7CimageView2/2/w/643/format/webp" alt="">&lt;/p>
&lt;p>debug 3&lt;/p>
&lt;ul>
&lt;li>在MASM中：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-c7ec6af22c58c409?imageMogr2/auto-orient/strip%7CimageView2/2/w/644/format/webp" alt="">&lt;/p>
&lt;p>1masmtest&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-409db2af5cec6107?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>masmtest2&lt;/p>
&lt;ul>
&lt;li>&lt;strong>要在编译器中实现用偏移地址[]中的内容传送先bx来代替，mov 偏移地址,bx 再 mov al,[bx]。如要直接使用&lt;input disabled="" type="checkbox"> 则要加上段地址ds:[偏移地址]&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>在MASM中：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;将al赋值0
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;将al赋值段地址为ds，偏移地址为0的内存单元中的内容
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;默认段地址为ds，将al赋值偏移地址为bx
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;将al赋值段地址为ds，偏移地址为bx
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="55-loop和bx的联合应用">5.5 loop和[BX]的联合应用&lt;/h2>
&lt;ul>
&lt;li>可以用循环来解决处理地址连续的内存单元中的数据的问题，用变量来给出内存单元的地址。&lt;/li>
&lt;/ul>
&lt;h2 id="56-段前缀">5.6 段前缀&lt;/h2>
&lt;ul>
&lt;li>出现在访问内存单元的指令中用显式地指明内存单元的段地址的ds、cs、ss、es称为段前缀。&lt;strong>没有显式地给出内存单元的段地址则默认在ds中。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="57-一段安全的空间">5.7 一段安全的空间&lt;/h2>
&lt;blockquote>
&lt;p>在8086模式中，随意向一段内存空间写入数据是危险的，因为这段空间中可能存放着重要的系统数据或代码。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">26&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>但笔者在练习的时候出现dosbox下debug卡死&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-48c43e1beb6c28e3?imageMogr2/auto-orient/strip%7CimageView2/2/w/643/format/webp" alt="">&lt;/p>
&lt;p>dangeroustest&lt;/p>
&lt;/li>
&lt;li>
&lt;p>dos下0:200H0:2FFH的256个字节的空间是安全的，dos和其他合法程序一般都不会使用这段空间。内存0000:00000000:03FF大小为1kb的空间是系统存放中断处理程序入口地址的中断向量表。一般情况下0:200H~0:2FFH的256个字节的空间所对应的中断向量表都是空的，操作系统和其他应用程序都不占用。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-01c01c58fe55a1f4?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>dos安全空间&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="58-段前缀的使用">5.8 段前缀的使用&lt;/h2>
&lt;ul>
&lt;li>将内存ffff:0~ffff:b段单元中的数据拷贝到0:200 ~ 0:20b单元中&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="c">;(bx)=0，偏移地址从0开始
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">12&lt;/span> &lt;span class="c">;(cx)=12，循环12次
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offffh&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span> &lt;span class="c">;(ds)=0ffffh
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;(ds)=((ds)*16+(bx))，将ffff:bx中的数据送入dl
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0020&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span> &lt;span class="c">;(ds)=0020h
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">dl&lt;/span> &lt;span class="c">;((ds)*16+(bx))=dl，将数据送入0020:bx
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">bx&lt;/span> &lt;span class="c">;(bx)=(bx)+1
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>两个内存单元相差64KB则不再同一个段里，需要设置ds的值两次，效率不高。&lt;/li>
&lt;li>使用 es(附加段)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;优化后的代码，优化了两次设置ds
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offffh&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span> &lt;span class="c">;(ds)=0ffffh
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0020&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span> &lt;span class="c">;(es)=0020H
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="c">;(bx)=0，此时ds:bx指向ffff:0，es:bx指向0020:0
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">12&lt;/span> &lt;span class="c">;(cx)=12，循环12次
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;(ds)=((ds)*16+(bx))，将ffff:bx中的数据送入dl
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">dl&lt;/span> &lt;span class="c">;((es)*16+(bx))=dl，将数据送入0020:bx
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">bx&lt;/span> &lt;span class="c">;(bx)=(bx)+1
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h1 id="六包含多个段的程序">六、包含多个段的程序&lt;/h1>
&lt;h2 id="61在代码段中使用数据">6.1在代码段中使用数据&lt;/h2>
&lt;ul>
&lt;li>编程计算0123H、0456H，0abxH、0defH、0fesH、0cbaH、0987H这8个数据的和，结果存放在ax中：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0564&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0789&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">abcH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">defH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">fedH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">cbaH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0987&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="c">;dw，define word，定义字型数据，db定义字节型数据
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;由于数据在代码段中，所以段地址是CS
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;dw定义的数据在最开始的地方，所以偏移地址是0开始
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="c">;第一条指令
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span> &lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span> &lt;span class="c">;入口找end
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-06aeb88b9f7d8104?imageMogr2/auto-orient/strip%7CimageView2/2/w/879/format/webp" alt="">&lt;/p>
&lt;p>定义字型数据&lt;/p>
&lt;ul>
&lt;li>&lt;strong>end的作用除了通知编译器结束之外还有告诉编译器程序的入口在什么地方。&lt;/strong>&lt;/li>
&lt;li>可执行文件中的程序执行过程&lt;/li>
&lt;/ul>
&lt;h2 id="62-在代码段中使用栈">6.2 在代码段中使用栈&lt;/h2>
&lt;ul>
&lt;li>利用栈编程将定义的数据逆序(联想栈的特性)存放：dw 0123H,0564H,0789H,0abcH,0defH,0fedH,0cbaH,0987H&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0564&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0789&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">abcH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">defH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">fedH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">cbaH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0987&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="c">;地址0~15
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;定义8个字型空数据，后面当作栈来使用，地址是16~31
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="c">;设置栈底ss:sp指向cs:32，十进制的32
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">; 以上代码段0~15个单元中的8个字型数据一次入栈
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">pop&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s0&lt;/span>&lt;span class="c">;依次出栈8个执行数据到代码段0~15单元中
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>&lt;span class="c">;指明程序入口在start处
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果对此程序的栈有疑惑，跳转到 3.6 栈和3.10 栈段&lt;/li>
&lt;/ul>
&lt;h2 id="63-将数据代码栈放入不同的段">6.3 将数据、代码、栈放入不同的段&lt;/h2>
&lt;ul>
&lt;li>在8086CPU中数据、栈和代码存储空间不能大于64KB。&lt;strong>可以用像定义代码段一样的方法来定义多个段并在其中定义需要的数据，或者通过定义数据来取得栈空间。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ss&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">stack&lt;/span>&lt;span class="c">;在源程序中为三个段进行有意义的名称
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0564&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0789&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">abcH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">defH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">fedH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">cbaH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0987&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;定义8个字型空数据，后面当作栈来使用
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;设置栈底ss:sp指向stack:16，
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;ds指向data段
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;ds:bx指向data段中的第一个单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">push&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">; 以上代码段0~16个单元中的8个字型数据一次入栈
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">pop&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s0&lt;/span>&lt;span class="c">;依次出栈8个执行数据到代码段0~16单元中
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>&lt;span class="c">;指明程序入口在start处
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>程序中指令决定了断中的内容是作为数据处理还是作为指令执行还是作为栈空间使用。&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-61">检测点 6.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-d3131de04dfab5c0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点6.1&lt;/p>
&lt;h2 id="实验五">实验五&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ss&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0564&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0789&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">abcH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">defH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">fedH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">cbaH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0987&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h1 id="七更灵活的定位内存地址的方法">七、更灵活的定位内存地址的方法&lt;/h1>
&lt;h2 id="71-and和or指令">7.1 and和or指令&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>and指令：逻辑与指令，按位进行与运算。&lt;/p>
&lt;blockquote>
&lt;p>and两个同时为真的结果才为真。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01100011&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00111011&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="c">;执行后 al=00100011B
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>可用and指令将操作对象的相应位设为0，其他位不变&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10111111&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;将al第六位设为0
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01111111&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;将al第七位设为0
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11111110&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;将al第0位设为0
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>or指令：逻辑或指令，按位进行或运算。&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>or两个同时为假的结果才为假&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01100011&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00111011&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="c">;执行后 al=01111011B
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>可用or指令将操作对象的相应位设为1，其他位不变&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01000000&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;将al第六位设为1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10000000&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;将al第七位设为1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00000001&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;将al第0位设为1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="72-关于ascii码">7.2 关于ASCII码&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-138632216e5c2fc0?imageMogr2/auto-orient/strip%7CimageView2/2/w/660/format/webp" alt="">&lt;/p>
&lt;p>ASCII码表&lt;/p>
&lt;ul>
&lt;li>将字符的ascii码写入显存屏幕就显示出相关的字符。&lt;/li>
&lt;/ul>
&lt;h2 id="73-以字符形式给出数据">7.3 以字符形式给出数据&lt;/h2>
&lt;ul>
&lt;li>用‘’的方式指明数据是以字符的形式给出的。&lt;strong>例如&amp;rsquo;A'&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">unIx&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">foRK&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">b&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-f7a7a0d141472ce7?imageMogr2/auto-orient/strip%7CimageView2/2/w/846/format/webp" alt="">&lt;/p>
&lt;p>73 ascii&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-d93063afda2a95fe?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>以字符形式给出数据&lt;/p>
&lt;h2 id="74-大小写转换的问题">7.4 大小写转换的问题&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>大写字母比小写字母ASCII大32(20H)。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>大写&lt;/th>
&lt;th>二进制&lt;/th>
&lt;th>小写&lt;/th>
&lt;th>二进制&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>01000001&lt;/td>
&lt;td>a&lt;/td>
&lt;td>01100001&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>01000010&lt;/td>
&lt;td>b&lt;/td>
&lt;td>01100010&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C&lt;/td>
&lt;td>01000011&lt;/td>
&lt;td>c&lt;/td>
&lt;td>01100011&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>D&lt;/td>
&lt;td>01000100&lt;/td>
&lt;td>d&lt;/td>
&lt;td>01100100&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>从第0位开始计算，大写字母ASCII码第五位为0，小写字母ASCII码第五位为1。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;大小写转换
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">BaSiC&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">iNfOfMaTiOn&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;设置ds执行datasg段
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;设置(bx)=0，ds:bx指向&amp;#39;BaSiC&amp;#39;的第一个字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="c">;设置循环次数，因为BaSiC有5个字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;将ASCII码从ds:bx所指向的单元中取出
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;口岸al中ASCII码的第5个位置变为0，变为大写字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;转变后将ASCII码写回单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="c">;(bx)加1，ds:bx指向下一个字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">x&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="c">;设置(bx)=5，ds:bx指向&amp;#39;iNfOfMaTiOn&amp;#39;的第一个字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">or&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00100000&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="75-bxidata">7.5 [bx+idata]&lt;/h2>
&lt;ul>
&lt;li>[bx+idata]表示的是一个内存单元，它的偏移地址为bx+idata&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;[bx+idata]可以写成以下格式
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="mi">200&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;使用debug查看内存
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="76-用bxidata的方式进行数组的处理">7.6 用[bx+idata]的方式进行数组的处理&lt;/h2>
&lt;ul>
&lt;li>用[bx+idata]的方式进行数组处理&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;改进大小写转换程序
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">BaSiC&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">iNfOfMaTiOn&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;设置ds执行datasg段
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;设置(bx)=0，ds:bx指向&amp;#39;BaSiC&amp;#39;的第一个字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="c">;设置循环次数，因为BaSiC有5个字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;将ASCII码从ds:bx所指向的单元中取出
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;口岸al中ASCII码的第5个位置变为0，变为大写字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;转变后将ASCII码写回单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;定位第二个字符串的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">or&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00100000&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>C语言的形式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">include&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">stdio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;BaSiC&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;iNfOfMaTiOn&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">do&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="mh">0xDF&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="mh">0x20&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="77-si和di">7.7 SI和DI&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>SI和DI在8086CPU中和bx功能相近，充当BX的扩充，但是不能分成两个8位寄存器来使用。[SI]段地址默认也是在DS中。&lt;/strong>&lt;/li>
&lt;li>下面的指令实现了相同的功能&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;-------------
&lt;/span>&lt;span class="c">;下面的三组指令也实现了另一个组相同的功能
&lt;/span>&lt;span class="c">;-------------
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">123&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">123&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">123&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>一般ds:si指向要复制的原始空间，ds:di指向复制的目的空间。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;用DI和SI实现复制到它后面的数据区中
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">welcome&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">asm&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">................&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">start&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="c">;------
&lt;/span>&lt;span class="c">;用数组的思维[bx(si或di)+idata]的方式优化程序
&lt;/span>&lt;span class="c">;------
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">welcome&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">asm&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">................&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">start&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;第一个字符串的的第一个元素
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;目标字符串的第二个元素
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="78-bxsi和bxdi">7.8 [bx+si]和[bx+di]&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="79-bxsiidata和bxdiidata">7.9 [bx+si+idata]和[bx+di+idata]&lt;/h2>
&lt;ul>
&lt;li>常数后要加.&lt;strong>例如&lt;/strong>[bx+si].idata或者[bx].idata[si]&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="710-不同的寻址方式的灵活应用">7.10 不同的寻址方式的灵活应用&lt;/h2>
&lt;ul>
&lt;li>编程将数据段中每一个单词的头一个字母改为大写字母。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-a4b13c9597741ed0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1010/format/webp" alt="">&lt;/p>
&lt;p>数据段中的数据存储结构_2&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">file&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="c">;长度刚好都是16个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">edit&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">search&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">view&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">options&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">help&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程将数据段中每个单词改为大写字母&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-c318e4955e46fc3c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1077/format/webp" alt="">&lt;/p>
&lt;p>数据段中的数据存储结构2&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;有bug，问题在于cx的使用，进行二重循环，只用一个循环计数器，造成在进行内层的时候覆盖了外层循环的循环计数值。
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">ibm&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dec&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dos&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">vax&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用bx来定位行
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用si来定位列
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>程序没有返回到cmd&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-7f0b7862c49bc46a?imageMogr2/auto-orient/strip%7CimageView2/2/w/884/format/webp" alt="">&lt;/p>
&lt;p>712bug&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-ee6b91b4b76cdcd3?imageMogr2/auto-orient/strip%7CimageView2/2/w/994/format/webp" alt="">&lt;/p>
&lt;p>712bug1&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-482870fe7368d7e7?imageMogr2/auto-orient/strip%7CimageView2/2/w/643/format/webp" alt="">&lt;/p>
&lt;p>712bug2&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;三次循环后cx等于0了
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s0&lt;/span>&lt;span class="c">;先是cx=cx-1再判断时候等于0，此时cx=FFFF不为0再循环，变成死循环了
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>因为loop是和cx一起使用的，不能多用个寄存器来解决loop循环次数的问题。解决的方法是在每次开始内层循环时用dx将外层循环cx的值保存起来，在执行外层循环的loop指令前再回复外层循环的cx的数值。&lt;/li>
&lt;li>改进后程序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">ibm&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dec&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dos&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">vax&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用bx来定会行
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s0:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cx&lt;/span>&lt;span class="c">;用dx寄存器来临时存放外层cx的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用si来定位列
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">dx&lt;/span>&lt;span class="c">;在进行外层循环的时候回复cx的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">s0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>在上面的程序中，8086 CPU si、cx、ax、bx这些寄存器经常要使用到；cs、ip、ds也不能用，因为cs:ip时刻指向当前指令，ds指向datasg段；那么可用的寄存器就只用dx、di、es、ss、sp、bp等寄存器了。&lt;strong>内存可以解决经常性的数据暂存问题。为了使程序结构清晰便于阅读，应该使用栈&lt;/strong>&lt;/li>
&lt;li>再次被改进的程序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">ibm&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dec&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dos&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">vax&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="c">;定义一个字用来保存cx的值
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用bx来定位行
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">cx&lt;/span>&lt;span class="c">;datasg:40h单元存放外层cx的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用si来定位列
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;在进行外层循环的时候回复cx的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">s0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>再次使用栈改进程序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ss&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">stacksg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">ibm&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dec&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dos&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">vax&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">stacksg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;定义一个段，用作栈段，容量为16个字节
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">stacksg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stacksg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用bx来定位行
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="c">;datasg:40h单元存放外层cx的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用si来定位列
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="c">;在进行外层循环的时候回复cx的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">s0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程将数据段中的每个单词的前四个字母改为大写字母&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-9c38139d376d6905?imageMogr2/auto-orient/strip%7CimageView2/2/w/1115/format/webp" alt="">&lt;/p>
&lt;p>数据段中的数据存储结构3&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ss&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">stacksg&lt;/span>
&lt;span class="nf">stacksg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">stacksg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">display&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">brows&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">replace&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">modify&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stacksg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h1 id="八数据处理的两个基本问题">八、数据处理的两个基本问题&lt;/h1>
&lt;h2 id="引言-4">引言&lt;/h2>
&lt;ul>
&lt;li>本章是总结性的内容，数据处理的两个基本问题是
&lt;ul>
&lt;li>处理的数据在哪？&lt;/li>
&lt;li>要处理的数据有多长？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>自定义得描述符：
&lt;ul>
&lt;li>reg寄存器
&lt;ul>
&lt;li>ax、bx、cx、dx、ah、al、bh、bl、ch、cl、dh、dl、sp、bp、si、di；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>sreg段寄存器
&lt;ul>
&lt;li>ds、ss、cs、es。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="81-bxsidibp">8.1 bx、si、di、bp&lt;/h2>
&lt;ul>
&lt;li>在8086 CPU中只有bx、si、di、bp这四个寄存器用在&lt;input disabled="" type="checkbox"> 中进行内存单元寻址。&lt;strong>在[]中，组合只能以这四种形式：bx和si、bx和di、bp和si、bp和di&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;以下指令是错误的
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">cx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">dx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">bp&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>正确的指令&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bp&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>[bp]的段地址默认在ss中。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="82-机器指令处理的数据所在的位置">8.2 机器指令处理的数据所在的位置&lt;/h2>
&lt;ul>
&lt;li>绝大部分机器指令时进行数据处理的，大致可以分为3类：读、写、运算。指令在处理前可以在三个地方：CPU内部、内存、端口。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>机器码&lt;/th>
&lt;th>汇编指令&lt;/th>
&lt;th>指令执行前数据的位置&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>89C3&lt;/td>
&lt;td>mov bx,[0]&lt;/td>
&lt;td>内存，ds:0单元&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>89C3&lt;/td>
&lt;td>mov bx,ax&lt;/td>
&lt;td>CPU内部，ax寄存器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BB0100&lt;/td>
&lt;td>mov bx,1&lt;/td>
&lt;td>CPU内部，指令缓冲器&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="83-汇编语言中数据位置的表达">8.3 汇编语言中数据位置的表达&lt;/h2>
&lt;ul>
&lt;li>汇编语言中用三个概念来表达数据的位置。
&lt;ul>
&lt;li>1、立即数(idata)&lt;/li>
&lt;li>2、寄存器&lt;/li>
&lt;li>3、段地址(SA)和偏移地址(EA)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="84-寻址方式总小结">8.4 寻址方式总小结&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-9e48c0050ca927fb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>寻址方式总结_1&lt;/p>
&lt;h2 id="85-指令要处理的数据有多长">8.5 指令要处理的数据有多长&lt;/h2>
&lt;ul>
&lt;li>8086 CPU可以处理byte和word两种数据尺寸。&lt;/li>
&lt;li>&lt;strong>通过寄存器指明要处理的数据尺寸；push指令只进行字操作，若没有寄存器名存在的情况下，用操作符word ptr或者byte ptr指明内存单元的长度。&lt;/strong> 例如&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;假设内存2000:1000 FF FF FF FF FF FF ……
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;如果用以下指令
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="c">;那么内存中的内容变为
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;2000:1000 01 FF FF FF FF FF ……
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="err">如果是用以下指令&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="c">;那么内存中的内容变为
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;2000:1000 01 00 FF FF FF ……
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="86-寻址方式的综合应用">8.6 寻址方式的综合应用&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-af564d5dc3eeca77?imageMogr2/auto-orient/strip%7CimageView2/2/w/513/format/webp" alt="">&lt;/p>
&lt;p>86题目_1&lt;/p>
&lt;ul>
&lt;li>初步汇编代码&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">seg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;确定记录物理地址：ds:bx
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">38&lt;/span>&lt;span class="c">;寄存器相对寻址 排名字段改为38
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">eh&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">70&lt;/span>&lt;span class="c">;收入字段增加70
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用si来定位产品字符串中的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">V&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="c">;相对基址变址寻址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">A&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">X&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>c语言描述&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">struct&lt;/span> &lt;span class="n">company&lt;/span> &lt;span class="cm">/*定义一个公司记录的结构体*/&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">cn&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="cm">/*公司名称*/&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">hn&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="cm">/*总裁姓名*/&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pm&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/*排名*/&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">sr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/*收入*/&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">cp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="cm">/*著名产品*/&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">compant&lt;/span> &lt;span class="n">dec&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;DEC&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;Ken Olsen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">137&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;PDF&amp;#34;&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="cm">/*定义一个公司记录的变量，内存中将存有一条公司的记录*/&lt;/span>
&lt;span class="n">mian&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pm&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">38&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sr&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">70&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sc">&amp;#39;V&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sc">&amp;#39;X&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>按照c语言的风格用汇编写&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">seg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;记录首地址送入bx
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="no">och&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">38&lt;/span>&lt;span class="c">;排名字段改为38
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">eh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">70&lt;/span>&lt;span class="c">;收入字段增加70
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="c">;产品名字段改为字符串&amp;#39;VAX&amp;#39;
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">V&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">A&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">X&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>多种寻址方式为结构化数据的处理提供了方便。&lt;/li>
&lt;li>&lt;strong>一般用[bx+idata+si]的方式来访问结构体，用idata定位结构体中的某一数据项，用si定位数组项中的每个元素。&lt;/strong> 例如：[bx].idata、[bx].idata[si]。&lt;/li>
&lt;/ul>
&lt;h2 id="87-div指令">8.7 div指令&lt;/h2>
&lt;ul>
&lt;li>div(divide)是除法指令，可用乘法模拟，格式为：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">div&lt;/span> &lt;span class="no">reg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">寄存器&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="err">内存单元。&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>除数：8位或16位，在寄存器或内存单元中；被除数：默认放在AX或DX和AX中。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">div&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;al放商，ah放余数
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;ax放商，dx放余数
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>除数&lt;/th>
&lt;th>被除数&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>8位&lt;/td>
&lt;td>16为(AX)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16位&lt;/td>
&lt;td>32位(DX高16位+AX低16位)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>8位或16位看的是除数。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算&lt;/th>
&lt;th>8位&lt;/th>
&lt;th>16位&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>商&lt;/td>
&lt;td>AL&lt;/td>
&lt;td>AX&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>余数&lt;/td>
&lt;td>AH&lt;/td>
&lt;td>DX&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>利用除法指令计算10001/100编程&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;被除数1001可用ax寄存器存放，除数100可用8位寄存器存放，要进行8位除法。
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1001&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">bl&lt;/span>
&lt;span class="c">;执行后al的值等于0AH(10)，ah的值等于1(余数为1)。
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>利用除法指令计算100001/100编程&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;被除数100001大于2^16=65535(FFFF)，不能用ax来存放，要用dx和ax两个寄存器联合存放。除数小于255，可用一个8位寄存器存放，但是被除数是32位的，除数应为16位，所以要用一个16位寄存器来存放除数。
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;100001的十六进制为186A1H，100001的高16位(1)存放在dx，低16位(86AH)存放在ax中。
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">86&lt;/span>&lt;span class="no">A1H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="c">;执行后ax内容等于03E8H(即1000)，dx的值等于1(余数)。
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="88-伪指令dd">8.8 伪指令dd&lt;/h2>
&lt;ul>
&lt;li>db定义字节型数据，dw定于字型数据，&lt;strong>dd 定于 dword(double word双字型数据)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="c">;第一个数据为01h，在data:0处，占1个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="c">;第二个数据为0001h，在data:1处，占1个字
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="c">;第三个数据为00000001h，在data:3处，占2个字
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>利用除法指令计算 dd 100001H 除以 dw 100，商放在 dw 0中&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dd&lt;/span> &lt;span class="mi">100001&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="c">;低16位存储在ax中，高16位存储在dx中
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;低16位存储在ax中
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;高16位存储在dx中
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">div&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="89-伪指令dup">8.9 伪指令dup&lt;/h2>
&lt;ul>
&lt;li>和db、dw、dd等数据定义伪指令配合使用，用来进行数据的重复。格式 db或者dw或者dd 重复的次数 dup (重复的数据)&lt;/li>
&lt;li>例如：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">db&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c">;定义了3个字节，它们的值都是0，等同于db 0,0,0。
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">db&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c">;定义了9个直接，它们是0、1、2、0、1、2、0、1、2，相当于db 0、1、2、0、1、2、0、1、2
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">db&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">abc&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">ABC&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c">;定义了18个直接，它们是&amp;#39;abcABCabcABCabcABC&amp;#39;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="实验七-寻址方式在结构化数据访问中的应用">实验七 寻址方式在结构化数据访问中的应用&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-141307bb9108dacb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>实验7&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-34fb4b5b6b1f9590?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>实验7数据&lt;/p>
&lt;ul>
&lt;li>ds已经和data段联系了，数据段不够用时用扩展段ES&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;初始化阶段
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">table&lt;/span>&lt;span class="c">;data已经被占用
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">21&lt;/span>
&lt;span class="c">;存放年份,每一个bx就是一个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="c">;存放公司的总收入
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">54&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;第一个年收入是dd数据类型，段地址为54H
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">54&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">dx&lt;/span>
&lt;span class="c">;存放公司的人数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A8H&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;第一个人数的数据段地址为0A8H
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A8H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="c">;计算人均收入并存放
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">54&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;这两句诗初始化被除数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">div&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A8H&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;除以人数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">dH&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;将商放入指定位置
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="c">;为下一次循环时存放数据做准备
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="c">;bx确定年份和收入
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;si确定人数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;di确定的是每行的列数
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>完整的程序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">es&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">table&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">1975&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">1976&lt;/span>&lt;span class="err">&amp;#39;&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">1977&lt;/span>&lt;span class="err">&amp;#39;&lt;/span> &lt;span class="err">……&lt;/span>
&lt;span class="nf">dd&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="mi">22&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="mi">382&lt;/span> &lt;span class="err">……&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span> &lt;span class="err">……&lt;/span>
&lt;span class="c">;数据在题目中
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">table&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">21&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">year&lt;/span> &lt;span class="no">summ&lt;/span> &lt;span class="no">ne&lt;/span> &lt;span class="err">??&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">table&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">table&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">21&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">54&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">dx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A8H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">AH&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">54&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A8H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">dH&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h1 id="九转移指令的原理">九、转移指令的原理&lt;/h1>
&lt;h2 id="引言-5">引言&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>可以修改IP，或者同时修改CS和IP的指令统称为转移指令。&lt;/strong> 简单的来说可以控制CPU执行内存中某处代码的指令就是转移指令。&lt;/li>
&lt;li>8086&lt;/li>
&lt;li>CPU的转移行为有&lt;strong>只修改的段内转移&lt;/strong>(如jmp ax) 和&lt;strong>同时修改该CS和IP的段间转移&lt;/strong>(如jmp 1000:0)。其中段内转移分为&lt;strong>短转移&lt;/strong>(IP的修改范围为-128~127)和&lt;strong>近转移&lt;/strong> (IP的修改范围为-32768~32767)。&lt;/li>
&lt;li>8086 CPU的转移指令分为以下几类：
&lt;ul>
&lt;li>无条件转移指令(如：jmp)&lt;/li>
&lt;li>条件转移指令&lt;/li>
&lt;li>循环指令(如：loop)&lt;/li>
&lt;li>过程&lt;/li>
&lt;li>中断&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="91-操作符offset">9.1 操作符offset&lt;/h2>
&lt;ul>
&lt;li>offset是伪指令，由编译器处理，它的功能是取得标号的偏移地址。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">start&lt;/span>&lt;span class="c">;相当于 mov ax,偏移地址0，段地址是从0开始
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;相当于 mov ax,3，标记的是代码段中的第二条指令，第一条指令长度为3个字节，则s的偏移地址为3
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="92-jmp指令">9.2 jmp指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>jmp为无条件转移，可以只修改IP，也可以同时修改CS和IP。&lt;/strong>&lt;/li>
&lt;li>jmp需要两种信息
&lt;ul>
&lt;li>1、转移的目的地址；&lt;/li>
&lt;li>2、转移的距离(段间转移、段内转移、段内近转移)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="93-依据位移进行转移的jmp指令">9.3 依据位移进行转移的jmp指令&lt;/h2>
&lt;ul>
&lt;li>段内短转移，&lt;strong>jmp short 标号&lt;/strong> ，对IP的修改范围是-128~127，一个字节的空间，即向前转移最多128字节，向后最多127字节。short 表明指令进行的是短转移，标号指明了指令要转移的目的地，转移指令结束后&lt;strong>CS:IP指向标号处的指令&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>一般汇编指令中的立即数(idata)会出现在对应的机器指令中。而jmp指令的机器指令并不包含目的地址，包含的是相对于当前IP的转移位移，CPU并不需要目的地址就可以实现对IP的修改。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-6eb8927cab108247?imageMogr2/auto-orient/strip%7CimageView2/2/w/767/format/webp" alt="">&lt;/p>
&lt;p>92debug_1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CPU执行指令的过程 在 2.10 CS和IP&lt;/p>
&lt;/li>
&lt;li>
&lt;p>jmp short s 指令的读取和执行过程：&lt;/p>
&lt;ul>
&lt;li>1、CS:IP指向jmp short s 的机器码；&lt;/li>
&lt;li>2、读取指令码进入指令缓冲器&lt;/li>
&lt;li>3、 改变IP，(IP)=(IP)+所读取指令的长度，IP指向下一个指令；&lt;/li>
&lt;li>4、CPU执行指令缓冲器中的指令；&lt;/li>
&lt;li>5、执行后CS:IP继续指向下一个指令&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>jmp short 标号的功能为(IP)=(IP)+8位位移。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>1、8位为=标号处的地址-jmp指令后的第一个字节的地址；&lt;/li>
&lt;li>2、short 指明此处的位移为8位；&lt;/li>
&lt;li>3、8位位移的范围为-128~127，用补码表示。&lt;/li>
&lt;li>4、8位位移由编译程序在编译时算出的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>jmp near ptr 标号 指令实现段内近转移，功能为(IP)=(IP)+16位位移。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>1、16位为=标号处的地址-jmp指令后的第一个字节的地址；&lt;/li>
&lt;li>2、nearptr 指明此处的位移为16位；&lt;/li>
&lt;li>3、16位位移的范围为-32769~32767，用补码表示。&lt;/li>
&lt;li>4、16位位移由编译程序在编译时算出的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-e6d760bd296c0a36?imageMogr2/auto-orient/strip%7CimageView2/2/w/1093/format/webp" alt="">&lt;/p>
&lt;p>转移位移的计算方法&lt;/p>
&lt;h2 id="94-转移的目的地址在指令中的jmp指令">9.4 转移的目的地址在指令中的jmp指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>jmp far ptr 段间转移，又称为远转移&lt;/strong>&lt;/li>
&lt;li>jmp far ptr 标号的功能：
&lt;ul>
&lt;li>(CS)=标号所在段的段地址；&lt;/li>
&lt;li>(IP)=标号所在段总的偏移地址；&lt;/li>
&lt;li>far ptr 指明了指令用标号的段地址和偏移地址修改CS和IP。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">far&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">256&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>机器码中包含了转移的目的地址。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-11dc198f29be97d8?imageMogr2/auto-orient/strip%7CimageView2/2/w/770/format/webp" alt="">&lt;/p>
&lt;p>94debug&lt;/p>
&lt;h2 id="附注3-汇编编译器masmexe对jmp的相关处理">附注3 汇编编译器(masm.exe)对jmp的相关处理&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-6ea437f414f45563?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>这里写图片描述&lt;/p>
&lt;h2 id="95-转移地址在寄存器中的jmp指令">9.5 转移地址在寄存器中的jmp指令&lt;/h2>
&lt;ul>
&lt;li>jmp 16位寄存器，功能是16位寄存器赋值给IP，实现段内的近(短)转移。&lt;/li>
&lt;li>参考 2.11 修改CS、IP的指令&lt;/li>
&lt;/ul>
&lt;h2 id="96-转移地址在内存中的jmp指令">9.6 转移地址在内存中的jmp指令&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>转移地址在内存中的jmp指令有两种格式：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1、jmp word ptr内存单元地址(16位只能实现段内转移)。&lt;/strong> 功能是从内存单元地址处开始存放一个字(转移的目的偏移地址)，内存单元地址可用寻址方式的格式给出。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;相当于 jmp ax，执行后(IP)=0123h
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;执行后(IP)=0123h
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>2、jmp dword ptr 内存单元地址(段间转移)。&lt;/strong> 功能：从内存单元地址处开始存放两个字型数据，高地址是转移的目的段地址，低地址处是转移的目的偏移地址。(CS)=(内存单元地址+2),(IP)=(内存单元地址)，内存单元地址可用寻址方式的任一格式给出。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">dx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;执行后 (CS)=0,(IP)=0123H CS:IP指向0000:0123
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-91">检测点 9.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-ca902f4043f8894c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点 9.1&lt;/p>
&lt;h2 id="97-jcxz指令">9.7 jcxz指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>指令格式为jcxz 标号，如果cx的值为0，则转移到标号处执行，不为0则向下执行。&lt;/strong>
&lt;ul>
&lt;li>当cx的值为0时，(IP)=(IP)+8位位移，8位位移=标号处的地址-jcxz指令后的第一个字节的地址。&lt;/li>
&lt;li>8位位移的范围是-128~127，用补码表。&lt;/li>
&lt;li>8位位移由编译器在编译时算出。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>jcxz指令是有条件转移指令，所有的条件转移指令都是短指令，在对应的机器码中包含转移的位移而不包含目的地址，对IP的修改范围都为-128-127。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-92">检测点 9.2&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-956e0d3482f3fbb2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1042/format/webp" alt="">&lt;/p>
&lt;p>检测点9.2_1&lt;/p>
&lt;h2 id="98-loop指令">9.8 loop指令&lt;/h2>
&lt;ul>
&lt;li>**loop指令为循环指令，所有的循环指令都是短转移，在对应的机器码中包含转移的位移而不包含目的地址。**操作i：
&lt;ul>
&lt;li>&lt;strong>cx先自减1；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>当cx的值不为0时，(IP)=(IP)+8位位移，8位位移=标号处的地址-loop指令后的第一个字节的地址。&lt;/strong>&lt;/li>
&lt;li>8位位移的范围是-128~127，用补码表。&lt;/li>
&lt;li>8位位移由编译器在编译时算出。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-93">检测点 9.3&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-bfe3635e8b3f60f3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点 9.3&lt;/p>
&lt;h2 id="99-根据位移进行转移的意义">9.9 根据位移进行转移的意义&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="err">标号&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">near&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="err">标号&lt;/span>
&lt;span class="nf">jcxz&lt;/span> &lt;span class="err">标号&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="err">标号&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>它们对IP的修改时根据转移目的地址和转移起始地址自检的位移来进行的。在它们对应的机器码中不包含转移的目的地址，而包含的是目的地址的位移距离。方便了程序段在内存中的浮动分配，没有固定目的地址的限制，更灵活。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="910-编译器对转移位移超界的检测">9.10 编译器对转移位移超界的检测&lt;/h2>
&lt;ul>
&lt;li>根据位移进行转移的指令，它们的转移范围受到了转移位移的限制，如果在源程序中出现了转移范围超界的问题，在编译时编译器会报错。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span> &lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">128&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">FFFFH&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-df672c24ab0ef975?imageMogr2/auto-orient/strip%7CimageView2/2/w/729/format/webp" alt="">&lt;/p>
&lt;p>910err&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-fd423526c0df25ba?imageMogr2/auto-orient/strip%7CimageView2/2/w/737/format/webp" alt="">&lt;/p>
&lt;p>910err2&lt;/p>
&lt;h1 id="实验8">实验8&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>实验八可以正常退出&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-5aa8478221dda3aa?imageMogr2/auto-orient/strip%7CimageView2/2/w/842/format/webp" alt="">&lt;/p>
&lt;p>test8&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">nop&lt;/span>
&lt;span class="nf">nop&lt;/span>&lt;span class="c">;nop占用两个字节，不执行任何操作
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">s2&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;jmp short s1的机器码给了ax
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;覆盖到指令 s:nop nop那
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;s那已经被jmp short s1机器码覆盖
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s2:&lt;/span>&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s1&lt;/span>&lt;span class="c">;jmp -8h，向上跳到s1，s1又向上跳-10字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">nop&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-cda0538dc883dda1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>test8debug&lt;/p>
&lt;h1 id="实验9">实验9&lt;/h1>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-c2282a11b29e1ebc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>实验9&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ss&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">welcome&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">masm&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="c">;定义要显示的字符串(共16字节)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="mi">02&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">71&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="c">;定义字符的属性
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="c">;bx清零，用来索引颜色
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b872H&lt;/span>&lt;span class="c">;算出屏幕第12行中间的显存的段起始位置放入ax中
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="c">;s3循环控制行数，要显示三个字符串外循环为3次
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="c">;三个进栈操作为外循环s3保存相关寄存器的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="c">;以防止它们的值在内循环中被破坏
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;此时es为屏幕第12行中间的显存的段起始位置
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;si用来索引代码列的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;di用来定位目标列
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="c">;s1循环控制存放的字符，一个字符串中含有10H个字节内循环为10H次
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nl">s1:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s1&lt;/span>&lt;span class="c">;吃循环实现偶地址中存放字符
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="c">;设置di的值为1，为在显存奇数地址中存放字符的颜色属性做准备
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al.ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;取消颜色属性
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="c">;第二个内循环也为10H
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">di&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s2&lt;/span>&lt;span class="c">;此循环实现奇数地址存放字符的颜色属性
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="c">;以下4句为下一趟外循环做准备
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">AH&lt;/span>&lt;span class="c">;将显存的段地址起始地址设置为当前行的下一行
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;[在段地址中甲0aH，相当于在偏移地址中加了0a0h(=160d)]
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s3&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">C00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>welcome to masm&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-9328763b459045db?imageMogr2/auto-orient/strip%7CimageView2/2/w/644/format/webp" alt="">&lt;/p>
&lt;p>welcome to masm&lt;/p>
&lt;h1 id="十call和ret指令">十、CALL和RET指令&lt;/h1>
&lt;h2 id="引言-6">引言&lt;/h2>
&lt;ul>
&lt;li>回想程序之间的加载返回过程。&lt;/li>
&lt;li>call和ret指令都是转移指令，它们都修改IP或者同时修改CS和IP，经常被共用来实现程序的设计。&lt;/li>
&lt;li>这一章讲解call和ret指令的原理。&lt;/li>
&lt;/ul>
&lt;h2 id="101-ret和retf指令">10.1 ret和retf指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>ret指令用栈中的数据来修改IP的内容，从而实现近转移。&lt;/strong>&lt;/li>
&lt;li>CPU执行ret指令时：
&lt;ul>
&lt;li>1、(IP)=((SS)*16+(SP))，指向栈顶&lt;/li>
&lt;li>2、(SP)=(SP)+2&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>retf指令用栈中的数据，修改CS和IP的内容，从而实现远转移。&lt;/strong>&lt;/li>
&lt;li>CPU执行retf指令时，进行下面两步操作：
&lt;ul>
&lt;li>1、(IP)=((SS)*16+(SP))&lt;/li>
&lt;li>2、(SP)=(SP)+2&lt;/li>
&lt;li>3、(CS)=((SS)*16+(SP))&lt;/li>
&lt;li>4、(SP)=(SP)+2&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用汇编的语法来解释ret和retf指令：
&lt;ul>
&lt;li>CPU执行ret指令相当于进行 POP IP&lt;/li>
&lt;li>CPU执行retf指令相当于进行 POP IP和POP CS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-0be8eabb3a8f4aca?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>1012debug_1&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cs&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">retf&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-101">检测点 10.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-1cc00b307b779d19?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点10.1&lt;/p>
&lt;h2 id="102-call指令">10.2 call指令&lt;/h2>
&lt;ul>
&lt;li>call指令经常跟ret指令配合使用，CPU执行call指令时：
&lt;ul>
&lt;li>&lt;strong>1、将当前的IP或者CS和IP压入栈；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>2、转移(jmp)。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>call指令除了不能实现短转移之外，call指令实现转移的方法和jmp指令的原理相同。call指令实现段间的转移(远转移)或近转移。&lt;/li>
&lt;/ul>
&lt;h2 id="103-依据位移进行转移的call指令">10.3 依据位移进行转移的call指令&lt;/h2>
&lt;ul>
&lt;li>call标号(将当前的IP压入栈后转到目标处执行指令)，执行时进行以下操作：
&lt;ul>
&lt;li>1、(SP)=(SP)-2&lt;br>
((SS)*16+(SP))=(IP)&lt;/li>
&lt;li>2、(IP)=(IP)+16位位移；&lt;/li>
&lt;li>3、16位位移=标号处的地址减去call指令后的第一个字节的地址。16位位移的范围是-32768~32767，用补码表示。16位位移由编译器编译时算出。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用汇编语法解释call指令：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">push&lt;/span> &lt;span class="no">IP&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">near&lt;/span> &lt;span class="err">标号&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-102">检测点 10.2&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-19fb464bd0f63b53?imageMogr2/auto-orient/strip%7CimageView2/2/w/1198/format/webp" alt="">&lt;/p>
&lt;p>检测点10.2&lt;/p>
&lt;h2 id="104-转移的目的地址在指令中的call指令">10.4 转移的目的地址在指令中的call指令&lt;/h2>
&lt;ul>
&lt;li>call far ptr 标号 实现的是段间转移，执行时：
&lt;ul>
&lt;li>1、CS先自减2；&lt;/li>
&lt;li>2、CS的值等于SS的值乘以16加上SP的值，SP自减2，IP的值等于SS的值*16加上SP的值；&lt;/li>
&lt;li>3、CS的值等于标号所在的段地址，IP的值等于标号所在的偏移地址.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用汇编语法解释call指令：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">push&lt;/span> &lt;span class="no">CS&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">IP&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">far&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="err">标号&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-103">检测点 10.3&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-c393ece2c79a0562?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点 10.3&lt;/p>
&lt;h2 id="105-转移地址在寄存器中的call指令">10.5 转移地址在寄存器中的call指令&lt;/h2>
&lt;ul>
&lt;li>指令格式是：call 16位寄存器，功能是：
&lt;ul>
&lt;li>1、SP的值先自减2；&lt;/li>
&lt;li>2、IP的值SS的值乘以16再加上SP的值；&lt;/li>
&lt;li>3、 IP的值等于16位寄存器的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用汇编语法解释此种call指令，CPU执行call 16位reg时，相当于：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">push&lt;/span> &lt;span class="no">IP&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="err">位寄存器&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-104">检测点 10.4&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-063fe7056be0dae2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点 10.4&lt;/p>
&lt;h2 id="106-转移地址在内存中的call指令">10.6 转移地址在内存中的call指令&lt;/h2>
&lt;ul>
&lt;li>转移地址在内存中的call指令有两种格式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">call&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="err">内存单元地址&lt;/span>&lt;span class="c">;段内跳转
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="err">内存单元地址&lt;/span>&lt;span class="c">;段间跳转
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>用汇编语法解释call word ptr 内存单元地址&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">push&lt;/span> &lt;span class="no">IP&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="err">内存单元地址&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>例子：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;执行后IP的值等于0123H，SP的值等于0EH
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>用汇编语法解释call dword ptr 内存单元地址&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">push&lt;/span> &lt;span class="no">CS&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">IP&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="err">内存单元地址&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>例子：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;执行后IP的值等于0123H，SP的值等于0CH，CS的值等于0
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-105">检测点 10.5&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-f832aec987833d5b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点10.5&lt;/p>
&lt;h2 id="107-call和ret的配合使用">10.7 call和ret的配合使用&lt;/h2>
&lt;ul>
&lt;li>下面的程序返回前，bx中的值是多少？&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>具有一定功能的程序段称为子程序，&lt;strong>用call转去执行，在子程序后面使用ret实现返回。&lt;/strong>&lt;/li>
&lt;li>具有子程序的源程序的框架如下&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-00d707a08b70a26d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1067/format/webp" alt="">&lt;/p>
&lt;p>107call&lt;/p>
&lt;h2 id="108-mull指令">10.8 mull指令&lt;/h2>
&lt;ul>
&lt;li>mull指令时乘法指令，&lt;strong>相乘的两个数要么都是8位的，要么都是16位的&lt;/strong>
&lt;ul>
&lt;li>8位：在AL中和8位寄存器中或内存字节单元中；&lt;/li>
&lt;li>16位：在AX中和16位寄存器或内存字单元中。&lt;/li>
&lt;li>结果
&lt;ul>
&lt;li>8位的存放在AX中；&lt;/li>
&lt;li>16位：DX(高位)和AX(低位)中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mull&lt;/span> &lt;span class="no">reg&lt;/span>
&lt;span class="nf">mull&lt;/span> &lt;span class="err">内存单元&lt;/span>
&lt;span class="nf">mull&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mull&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;(ax)=(ax)*((ds)*16+(bx)+(si)+idata)
&lt;/span>&lt;span class="c">;(dx)=(ax)*((ds)*16+(bx)+(si)+idata)
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;计算100*10，两个数都小于255，可以做8位乘法
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>
&lt;span class="nf">mull&lt;/span> &lt;span class="no">bl&lt;/span>
&lt;span class="c">;结果(ax)=1000(03E8H)
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="c">;计算100*1000，1000都大于255，要做16位乘法
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="c">;高位自动补零
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10000&lt;/span>
&lt;span class="nf">mull&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="c">;结果(ax)=4240H，(dx)=000FH，F4240H=1000000
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="109-模块化程序设计">10.9 模块化程序设计&lt;/h2>
&lt;ul>
&lt;li>cal和ret指令共同支持汇编语言编程中的模块化设计。&lt;/li>
&lt;/ul>
&lt;h2 id="1010-参数和结果传递的问题">10.10 参数和结果传递的问题&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>用寄存器来存储参数和结果是最常用的方法。对于存放参数的寄存器和存放结果的寄存器，调用者和子程序的读写操作恰恰相反：&lt;/p>
&lt;ul>
&lt;li>调用者将参数送入参数寄存器，从结果寄存器中取到返回值；&lt;/li>
&lt;li>子程序 从参数寄存器中取到参数，将返回值送入结果寄存器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>编程：根据提供的N来计算N^3&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">cube:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">mul&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">mul&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程：计算data段中第一组数据的3次方，结果保存在后面一组dword单元中&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nf">dd&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="no">dup&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;ds:si指向第一组word单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;ds:di指向第二组dword单元
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">cube&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">dx&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;ds:di指向下一个word单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="c">;ds:di指向下一个dword单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">cube:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">mul&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">mul&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="1011-批量数据的传递">10.11 批量数据的传递&lt;/h2>
&lt;ul>
&lt;li>将批量数据放在内存中，然后将他们呢所在内存空间的首地址放在寄存器中，传递给需要的子程序，批量数据的返回结果也是采用同样的方法。除此之外还可以用栈来传递参数。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">conversation&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;ds:si指向字符串(批量数据)所在空间的首地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="c">;cx存放字符串的长度
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">capital:&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="1012-寄存器冲突的问题">10.12 寄存器冲突的问题&lt;/h2>
&lt;ul>
&lt;li>编程：将一个全是字母，以0结尾的字符串转化为大写&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nl">capital:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;低8位
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ch&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;高8位设置为0
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jcxz&lt;/span> &lt;span class="no">ok&lt;/span>&lt;span class="c">;如果(cx)=0则结束，如果不是0则处理
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nl">ok:&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程将data段中的字符串全部转化为大写&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">word&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">unix&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">wind&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">good&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;此程序有bug，cx有问题
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">word&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">unix&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">wind&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">good&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">capital:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ch&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jcxz&lt;/span> &lt;span class="no">ok&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nl">ok:&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="实验十">实验十&lt;/h1>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-96127f8d658020be?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>test10_1_1&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-5db082ab094e3ebd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>test10_1_2&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-d3292727d44a40f9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>test10_1_3&lt;/p>
&lt;ul>
&lt;li>实验10.1 显示字符串&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">welcome&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">masm&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="c">;行号
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="c">;列号
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;颜色属性
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">show_str&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">show_str:&lt;/span>&lt;span class="c">;子程序
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A0h&lt;/span>&lt;span class="c">;每行有80*2=160个字节=0a0h
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dec&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="c">;行号在显存中下标从0开始，所以减1
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mul&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="c">;相当于从第(n-1)*0a0h个byte单元开始
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;定位好的位置偏移地址存放在bx里(行)
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;每个字符占2个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mul&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="c">;定位列，结果ax存放的是定位好的列的位置
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;列号在显存中下标从0开始，又因为是偶字节存放字符，所以减2
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;此时bx中存放的是行与列的偏移地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">B800h&lt;/span>&lt;span class="c">;显存开始的地方
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;es中存放的是显存的第0页的起始地段地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;di指向显存的偏移地址，确定指向下一个要处理的字符的位置
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cl&lt;/span>&lt;span class="c">;cl存放颜色参数，下边cl要用来临时存放要处理的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ch&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;下边cx存放的是每次准备处理的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;指向&amp;#39;welcome to masm &amp;#39;,0
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">jcxz&lt;/span> &lt;span class="no">ok&lt;/span>&lt;span class="c">;cl为0时跳转
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">cl&lt;/span>&lt;span class="c">;偶地址存放字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;奇地址存放字符的颜色属性
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;指向了下个字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s&lt;/span> &lt;span class="c">;无条件跳转，jcxz是离开的关键跳
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">ok:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">ret&lt;/span>&lt;span class="c">;定义结束
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-508df3eb18966546?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>test101&lt;/p>
&lt;ul>
&lt;li>实验10.2&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ss&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4240&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">fh&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">xx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">ah&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">divdw&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">divdw:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="c">;低16位先保存
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">dx&lt;/span>&lt;span class="c">;ax这时是高16位了
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;为了不影响余数位和高位数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">div&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">dx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">dx&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>实验10.3&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">12666&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>&lt;span class="c">;指向字符串的首地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">dtoc&lt;/span>&lt;span class="c">;实现将word型整数转化为字符串并存储
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="c">;打印初始化
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">cah&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">show_str&lt;/span>&lt;span class="c">;开始打印字符串
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">dtoc:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;bx在子程序中用来存放位数，用栈来临时存放修改后的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">d&lt;/span>&lt;span class="c">;d表示十进制，cx准备被除，用取余法来取出数字
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="c">;除以十
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;得到的商复制给cx，要利用jcxz
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jcxz&lt;/span> &lt;span class="no">s2&lt;/span>&lt;span class="c">;当商为0则跳到s2
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;余数加上30h得到相应的ascii码
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s1&lt;/span>
&lt;span class="nf">s2&lt;/span>&lt;span class="err">：&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;当商为0的时候，余数为个位
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="c">;再进行一次栈操作(补充当商为零而余数不为零时的情况)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="c">;总共有bx位进栈，所以循环次数为bx
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s3:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="c">;s3实现将栈中的数据依次出栈放到指定的内存中
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s3&lt;/span>
&lt;span class="nl">okay:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nl">show_str:&lt;/span>&lt;span class="c">;子程序
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">push&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A0h&lt;/span>&lt;span class="c">;每行有80*2=160个字节=0a0h
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dec&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="c">;行号在显存中下标从0开始，所以减1
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mul&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="c">;相当于从第(n-1)*0a0h个byte单元开始
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;定位好的位置偏移地址存放在bx里(行)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;每个字符占2个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mul&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="c">;定位列，结果ax存放的是定位好的列的位置
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;列号在显存中下标从0开始，又因为是偶字节存放字符，所以减2
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;此时bx中存放的是行与列的偏移地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">B800h&lt;/span>&lt;span class="c">;显存开始的地方
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;es中存放的是显存的第0页的起始地段地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;di指向显存的偏移地址，确定指向下一个要处理的字符的位置
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cl&lt;/span>&lt;span class="c">;cl存放颜色参数，下边cl要用来临时存放要处理的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ch&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;下边cx存放的是每次准备处理的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">S&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">jcxz&lt;/span> &lt;span class="no">ok&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">cl&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">i&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nl">ok:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="十一标志寄存器">十一、标志寄存器&lt;/h1>
&lt;h2 id="引言-7">引言&lt;/h2>
&lt;ul>
&lt;li>CPU内部的寄存器中有一种特殊的寄存器：
&lt;ul>
&lt;li>1、用来存储相关指令的某些执行结果；&lt;/li>
&lt;li>2、用来为CPU执行相关指令提供行为依据；&lt;/li>
&lt;li>3、用来控制CPU的相关工作方式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>8086 CPU的标志寄存器只有16位，其中存储的信息通常被称为程序状态字(PSW)。&lt;/li>
&lt;li>本章中的标志寄存器(以下简称为flag)。某些指令将影响标志寄存器中的多个标志位，这些被影响的标记位比较全面地记录ill指令的执行结果，为相关的处理提供了所需的依据。&lt;/li>
&lt;li>flag寄存器是按位起作用的，每一位都有专门的含义，记录特定的信息，与其他寄存器不一样。&lt;/li>
&lt;li>8086 CPU的flag寄存器的结构：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-d712a884ae249075?imageMogr2/auto-orient/strip%7CimageView2/2/w/1158/format/webp" alt="">&lt;/p>
&lt;p>flag&lt;/p>
&lt;ul>
&lt;li>flag的1、3、5、12、13、14、15位在8086 CPU中没有使用，而0、2、4、6、7、8、9、10、11位都具有特殊的含义。&lt;/li>
&lt;/ul>
&lt;h2 id="111-zfzero-flag标志">11.1 ZF(zero flag)标志&lt;/h2>
&lt;ul>
&lt;li>flag的第6位是ZF，零标志位，它记录相关指令执行后，结果为0，ZF=1(记录下是0这样的肯定信息)，结果不为0，ZF=0(表示结果非0)。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="c">;指令执行后，结果为0，则ZF=1
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">or&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="c">;指令执行后，结果为1，则ZF=0
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>在8086CPU中,add、sub、mul、div、inc、or、and等它们大多都是运算(逻辑运算或是算术运算)指令，是影响标志寄存器的，而mov、push、pop等传送指令对标志寄存器一般没有影响，因为不会产生结果。&lt;/li>
&lt;/ul>
&lt;h2 id="112-pf标志">11.2 PF标志&lt;/h2>
&lt;ul>
&lt;li>flag的第2位是PF，奇偶标志位，记录指令执行后结果所有的二进制位中1的个数。为偶数，PF=1，为奇数PF=0&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>
&lt;span class="c">;执行结果为00001011B，有3个1，则PF=0
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">or&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>
&lt;span class="c">;执行后结果为00000011B，有2个1，则PF=1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="113-sfsign-flag标志">11.3 SF(sign flag)标志&lt;/h2>
&lt;ul>
&lt;li>flag的第7位是SF符号标志位，记录指令执行后结果为负则SF=1，结果为正，SF=0。&lt;strong>弱国我们将数据当作无符号数来运算，SF的值没有意义，虽然相关的指令影响了它的值。&lt;/strong>&lt;/li>
&lt;li>有符号数与补码
&lt;ul>
&lt;li>计算机默认把负数用补码记录。&lt;/li>
&lt;li>00000001B，可以看作无符号数1，也可以看作符号数+1；&lt;/li>
&lt;li>10000001B，可以看作无符号数129，也可以看作有符号数-127。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>补码&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10000001&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="c">;执行指令后al的值是10000010B，无符号数130，有符号数-126
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-111">检测点 11.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-0bcdc71ed3ba4c48?imageMogr2/auto-orient/strip%7CimageView2/2/w/1143/format/webp" alt="">&lt;/p>
&lt;p>检测点11.1&lt;/p>
&lt;h2 id="114-cfcarry-flag标志">11.4 CF(carry flag)标志&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>flag的第0位是CF，进位标志位。一般情况下，在进行无符号运算的时候，它记录了运算结果的最高有效位向更高位的进位值或从更高位的借位值。对于位数为N的无符号数，其对应的二进制信息的最高位为N-1位的最高有效位，假想存在第N位。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-73facd3f7d1f5598?imageMogr2/auto-orient/strip%7CimageView2/2/w/1101/format/webp" alt="">&lt;/p>
&lt;p>更高位&lt;/p>
&lt;/li>
&lt;li>
&lt;p>两个8位的数据运算可能产生进位或者借位，由于这个进位值在8位数中无法保存，8086CPU就用flag的CF位来记录这个进位值。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al.98h&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;执行后(al)=30h，cf=1，cf记录了从最高有效位向更高位的进位值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;执行后(al)=60h，cf=0，cf记录了从更高有效位向更高位的进位值
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">97&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">98&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;执行后(al)=ffh，cf=1，cf记录了向更高位的借位值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">sub&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;执行后(al)=0，cf=0，cf记录了向更高位的借位值
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="115-ofoverflow-flag标志">11.5 OF(overflow flag)标志&lt;/h2>
&lt;ul>
&lt;li>如果运算结果超出了机器所能表达的范围(对于8位有符号数，机器所能表达的范围是-128~127)将产生溢出，对有符号数而言。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01100010&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01100011&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-640b24ec3b1dc4fa?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>1150f_1&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10001000&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11110000&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-4298bfcb6b992695?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>115of2&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">98&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-81cedf4a7b9fd536?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>CFdebug&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">97&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">98&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-bb5c78c64ee153ce?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>114cf2&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CF是对无符号数运算有意义的标志位，而OF是对有符号数运算有意义的标志位；&lt;/strong> CPU用CF位来记录无符号数运算是否产生了进位，用OF位来记录有符号数是否产生了溢出。用SF位来记录结果的符号&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> mov al,98d
add al,99d
;对于无符号数运算，98+99没有进位，CF=0
;对于有符号数运算，98+99发生溢出，OF=1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-112">检测点 11.2&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-9acf5ebaa90d402c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1162/format/webp" alt="">&lt;/p>
&lt;p>检测点11.2&lt;/p>
&lt;h2 id="116-adc指令">11.6 adc指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>adc是带有进位加法指令，利用了CF位上记录的进位值。格式:adc操作对象1，操作对象2，功能：操作对象1=操作对象1+操作对象2+CF。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">adx&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="c">;执行后 (ax)=4，相当于计算(ax)+1+CF=2+1+1+4
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">adc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="c">;执行后(ax)=5，相当于执行(ax)+3+CF=2+3+0=5
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">98&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">adx&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="c">;执行后 (ax)=34H，相当于执行(ax)+3+CF=30H+3+1=34H
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>由adc指令前面的指令决定在执行adc指令的时候加上的CF的值的含义，关键在于所加上的CF的值是被什么指令设置的。如果CF的值是被sub指令设置的，那么它的含义就是借位值；如果是被add指令设置的，那么它的含义就是进位值。加法运算先是低位相加，再高位相加加上低位相加产生的进位值。&lt;/li>
&lt;li>编程：计算1EF000H+201000H,结果存放在AX(高16位)和BX(低16位)中。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">001&lt;/span>&lt;span class="no">EH&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">F000H&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">adc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0020&lt;/span>&lt;span class="no">H&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程：1EF0001000H+2010001EF0H,结果存放在AX(高16位)、BX(次16位)中和cx(低16位)。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">001&lt;/span>&lt;span class="no">EH&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">F000H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="no">EF0H&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">adc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0020&lt;/span>&lt;span class="no">H&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程：对两个128位数据进行相加&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">88&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">add128&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">C00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nl">add128:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">di&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;将CF设置为0
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">adc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="c">;不能用add si,2代替
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="c">;因为会影响cf位
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="c">;而loop和inc不会影响
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">di&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">di&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="117-sbb指令">11.7 sbb指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>sbb是带借位减法指令，利用了CF位上记录的借位值。格式：sbb 操作对象1,操作对象2，功能是：操作对象1=操作对象1-操作对象2-CF。&lt;/strong>&lt;/li>
&lt;li>利用sbb指令我们可以对任意大的数据进行减法运算。sbb和adc是基于同样的思想设计的两条指令，在应用思路上sbb和adc类似。&lt;/li>
&lt;li>编程：计算003E1000H-00202000H，结果放在ax、bx中&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">EH&lt;/span>
&lt;span class="nf">sbb&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">sbb&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0020&lt;/span>&lt;span class="no">H&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="118-cmp指令">11.8 cmp指令&lt;/h2>
&lt;ul>
&lt;li>cmp是比较指令，功能上相当于减法指令，只是不保存结果。格式：cmp 操作对象1,操作对象2.功能：计算操作对象1-操作对象2但不保存结果，仅仅是根据计算结果对标志寄存器进行设置。&lt;/li>
&lt;li>cmp指令运算执行后通过做减法将对标志寄存器产生影响，其他相关指令通过识别这些被影响的标志寄存器位来得知比较结果。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">cmp&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="c">;执行后结果为0，ZF=1,PF=1,SF=0,CF=0,OF=0
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="c">;执行后ax、bx的值不变，ZF=0,PF=1,SF=0,CF=0,OF=0
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">cmp&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-a5705fc6d26d1c15?imageMogr2/auto-orient/strip%7CimageView2/2/w/1191/format/webp" alt="">&lt;/p>
&lt;p>118cmp_1&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-5be4231bf1034b6c?imageMogr2/auto-orient/strip%7CimageView2/2/w/592/format/webp" alt="">&lt;/p>
&lt;p>118cmp2&lt;/p>
&lt;ul>
&lt;li>CPU在执行cmp指令时也包含了对无符号数运算和进行有符号数运算，所以利用cmp指令可以对无符号数进行比较也可以对有符号数进行比较。&lt;/li>
&lt;li>&lt;strong>单纯地考察SF的值不可能知道结果的正负。因为SF记录的只是可以在计算机中存放的相应位数的结果的正负&lt;/strong>(例如：add ah， al执行后，SF记录的是ah中的8位二进制信息所表示的数据的正负)。&lt;strong>如果没有溢出发生的话，实际结果的正负和逻辑上真正结果的正负就一致了。&lt;/strong>。例如：22H(34)-0A0H(-96)=130=82H(是-126的补码)，SF=1。
&lt;ul>
&lt;li>&lt;strong>1、如果SF=1或SF=0，OF=0，逻辑上真正结果的正负=实际结果的正负。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>2、如果SF=1或SF=0，OF=1，逻辑上真正结果的负正=实际结果的正负。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="119-检测比较结果的条件转移指令">11.9 检测比较结果的条件转移指令&lt;/h2>
&lt;ul>
&lt;li>与cmp相配使用，根据cmp指令的比较结果(cmp指令执行后相关标志位的值)进行工作的指令。&lt;/li>
&lt;li>cmp指令可以同时进行两种比较，无符号数比较和有符号数比较，所以根据cmp指令的比较结果进行转移的指令也分为两种：
&lt;ul>
&lt;li>根据无符号数的比较结果进行转移的条件转移指令，它们检测ZF、CF的值；&lt;/li>
&lt;li>根据有符号数的比较结果进行转移的条件转移指令，它们检测SF、OF、ZF的值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>它们所检测的标志位都是cmp指令进行无符号数比较时候记录比较结果的标志位。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>指令&lt;/th>
&lt;th>含义&lt;/th>
&lt;th>检测的相关标志位&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>je&lt;/td>
&lt;td>等于则转移&lt;/td>
&lt;td>ZF=1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jne&lt;/td>
&lt;td>不等于则转移&lt;/td>
&lt;td>ZF=0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jb&lt;/td>
&lt;td>低于则转移&lt;/td>
&lt;td>CF=1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jnb&lt;/td>
&lt;td>不低于则转移&lt;/td>
&lt;td>CF=0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ja&lt;/td>
&lt;td>高于则转移&lt;/td>
&lt;td>CF=0 and ZF=0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jna&lt;/td>
&lt;td>不高于则转移&lt;/td>
&lt;td>CF=1 or ZF=1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>j&lt;/th>
&lt;th>e&lt;/th>
&lt;th>ne&lt;/th>
&lt;th>b&lt;/th>
&lt;th>nb&lt;/th>
&lt;th>a&lt;/th>
&lt;th>na&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>jump&lt;/td>
&lt;td>equal&lt;/td>
&lt;td>not equal&lt;/td>
&lt;td>below&lt;/td>
&lt;td>not below&lt;/td>
&lt;td>above&lt;/td>
&lt;td>not above&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>编程：如果ah的值等于bh则ah的值等于ah的值加ah的值，否则ah的值等于ah的值加上bh的值。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">cmp&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bh&lt;/span>
&lt;span class="nf">je&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;ZF=1则跳转
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bh&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">ok&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bh&lt;/span>
&lt;span class="nl">ok:&lt;/span>&lt;span class="nf">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>je检测的是ZF的位置，不管je前面是什么指令，只要CPU执行je指令时，ZF=1那么就发生转移。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">je&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="c">;执行后ax的值等于1，add ax,0使得ZF=1，所以je指令将进行转移。
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="课堂练习">课堂练习&lt;/h2>
&lt;ul>
&lt;li>编程:统计data段中数值为8的字节的个数，用ax保存统计结果。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;方案一
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">63&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">38&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;ds:bx指向第一个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;初始化累加器
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="c">;和8进行比较
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jne&lt;/span> &lt;span class="no">next&lt;/span>&lt;span class="c">;如果不相等转到next，继续循环
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="c">;如果相等就计数值加1
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">next:&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;执行后：(ax)=3
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/br>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;方案二
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">63&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">38&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;ds:bx指向第一个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;初始化累加器
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="c">;和8进行比较
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">je&lt;/span> &lt;span class="no">ok&lt;/span>&lt;span class="c">;如果不相等转到ok，继续循环
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">next&lt;/span>&lt;span class="c">;如果不想等就转到next，继续循环
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">ok:&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="c">;如果相等就计数值加1
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">next:&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;执行后：(ax)=3
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程:统计data段中数值大于8的字节的个数，用ax保存统计结果。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">63&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">38&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;ds:bx指向第一个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;初始化累加器
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="c">;和8进行比较
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jna&lt;/span> &lt;span class="no">next&lt;/span>&lt;span class="c">;如果大于8转到next，继续循环
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="c">;如果大于就计数值加1
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">next:&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;执行后：(ax)=3
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-113">检测点 11.3&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-51f01d62a37f398a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点11.3&lt;/p>
&lt;h2 id="1110-dfdirection-flag标志和串传送指令">11.10 DF(direction flag)标志和串传送指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>flag的第10位是DF，方向标志位，在串处理指令中，控制每次操作后si(一般指向原始偏移地址)、di(一般指向目标偏移地址)的增减。&lt;/strong>
&lt;ul>
&lt;li>DF=0：每次操作后si、di递增；&lt;/li>
&lt;li>DF=1，每次操作后so、di递减。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>movsb(mov string byte)串传送指令，以字节为单位传送。将ds:si指向的内存单元中的字节送入es:di中，然后根据标志寄存器DF位的值将si和di递增1或递减1。movsw，以字为单位传送。将ds:si指向的内存单元中的字送入es:di中，然后根据标志寄存器DF位的值将si和di递增2或递减2。&lt;/strong>&lt;/li>
&lt;li>**movsb和movsw进行的是串传送操作中的一个步骤，一般和rep配合使用，格式：rep movsb，rep的作用是根据cx 的值，重复执行后面的串传送指令。**由于每次执行一次movsb指令si和di都会递增或递减指向后一个单元或前个单元，则rep movsb就可以循环实现(cx)个字符的传送。
&lt;ul>
&lt;li>1、传送的原始位置；&lt;/li>
&lt;li>2、传送的目的位置；&lt;/li>
&lt;li>3、传送的长度；&lt;/li>
&lt;li>4、传送的方向。&lt;/li>
&lt;li>movsb功能：((es)*16+(di))=((ds)*16+(si))，如果DF=0，则(si)=(si)+1,(di)=(di)+1;如果DF=1，则(si)=(si)-1，(di)=(di)-1。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>由于flag的DF位决定着串传送指令执行后，si和di改变的方向，8086CPU提供两条指令对DF位进行设置：
&lt;ul>
&lt;li>cld指令：将标志寄存器的DF位设置为0；&lt;/li>
&lt;li>std指令：将标志寄存器的DF位设置为1。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="1111-pushf和popf">11.11 pushf和popf&lt;/h2>
&lt;ul>
&lt;li>pushf的功能 是件标志寄存器的值压栈，popf是从栈中弹出数据m，送入标志寄存器中。pushf和popf为直接访问标志寄存器提供了一种方法。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;下面的程序执行后ax的值是多少？
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">popf&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">fff0h&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0010&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">pushf&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11000101&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">ah&lt;/span> &lt;span class="mi">00001000&lt;/span>&lt;span class="no">b&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程：用串传送指令将data段总的第一个字符串复制到它后面的空间中。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">welcome&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">masm&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;指向data:0
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;指向data:16
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;rep循环16次
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">cld&lt;/span>&lt;span class="c">;设置DF=0，正向传送
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">rep&lt;/span> &lt;span class="no">movsb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-244969b58f1410e4?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>1110&lt;/p>
&lt;ul>
&lt;li>用串传送指令将F00H段中的最后16个字符复制到data段中&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">f00h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">ffffh&lt;/span>&lt;span class="c">;指向f0000:ffff
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;指向data:15
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;rep循环16次
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">std&lt;/span>&lt;span class="c">;设置DF=1，逆向传送
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">rep&lt;/span> &lt;span class="no">movsb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-114">检测点 11.4&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-1585ebbd2027a1dc?imageMogr2/auto-orient/strip%7CimageView2/2/w/843/format/webp" alt="">&lt;/p>
&lt;p>检测点11.4&lt;/p>
&lt;h2 id="1112-标志寄存器在debug中的表示">11.12 标志寄存器在Debug中的表示&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-fc46994e4160a442?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>debugflag&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>标志&lt;/th>
&lt;th>值为1的标记&lt;/th>
&lt;th>值为0的标记&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>OF&lt;/td>
&lt;td>OV&lt;/td>
&lt;td>NV&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SF&lt;/td>
&lt;td>NG&lt;/td>
&lt;td>PL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ZF&lt;/td>
&lt;td>ZR&lt;/td>
&lt;td>NZ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PF&lt;/td>
&lt;td>PE&lt;/td>
&lt;td>PO&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CF&lt;/td>
&lt;td>CY&lt;/td>
&lt;td>NC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DF&lt;/td>
&lt;td>DN&lt;/td>
&lt;td>UP&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="十二内中断">十二、内中断&lt;/h1>
&lt;h2 id="引言-8">引言&lt;/h2>
&lt;ul>
&lt;li>中断时CPU处理外部突发事件的一个重要技术。它能使CPU在运行过程中对外部事件发出的中断请求几时进行处理，处理完成后又立即返回断电，基础进行CPU原来的工作。引起中断的原因或是说发出中断请求的来源叫做中断源。根据中断源的不同，可以把中断分为硬件中断和软件中断两大类，而硬件中断又可以分为外部中断和内部中断两类。&lt;/li>
&lt;li>外部中断一般是指由计算器外部设备发出的中断请求。如：键盘中断、打印机中断、定时器中断等。外部中断时可以屏蔽的中断，业绩是说利用中断控制器可以屏蔽这些外部设备的中断请求。&lt;/li>
&lt;li>内部中断是指因硬件出错(如突然掉电)或运算出错(如除数为0、单步中断)所引起的中断。内部中断是不可屏蔽的。&lt;/li>
&lt;li>软件中断其实并不是真正的中断，它们只是可被调用执行的一般程序以及DOS的系统功能调用(int 21)等都是软件中断。&lt;/li>
&lt;li>中断的优先权：
&lt;ul>
&lt;li>1、除法出错、溢出中断、软件中断；&lt;/li>
&lt;li>2、不可屏蔽中断；&lt;/li>
&lt;li>3、可屏蔽中断；&lt;/li>
&lt;li>4、单步中断。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>中断信息中包含有标识中断源的类型码。根据CPU的设计，中断源类型码的作用就是用来定位中断处理程序。&lt;/li>
&lt;/ul>
&lt;h2 id="121-内中断的产生">12.1 内中断的产生&lt;/h2>
&lt;ul>
&lt;li>8086CPU内部有以下情况发生时将产生相应的中断信息：
&lt;ul>
&lt;li>1、除法错误；&lt;/li>
&lt;li>2、单步执行；&lt;/li>
&lt;li>3、执行into指令；&lt;/li>
&lt;li>4、执行int指令。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>8086CPU中的中断类型码如下：
&lt;ul>
&lt;li>1、除法错误：0&lt;/li>
&lt;li>2、单步执行：1&lt;/li>
&lt;li>3、执行into指令：4&lt;/li>
&lt;li>4、执行int指令，该指令格式为int n，n为立即数是提供给CPU的中断类型码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="122-中断处理程序">12.2 中断处理程序&lt;/h2>
&lt;ul>
&lt;li>CPU在收到中断信息后立即去执行该中断信息的处理程序。&lt;/li>
&lt;/ul>
&lt;h2 id="123-中断向量表">12.3 中断向量表&lt;/h2>
&lt;ul>
&lt;li>中断向量列表就是中断向量(中断处理程序的入口地址)的列表，其在内存中保存，存放着256个中断源说对应的中断处理程序的入口。8086PC机中断向量表放在内存地址0处。从内存0000:0000到0000:03FF的1024(一个物理地址是由段地址和偏移地址构成，要用4个字节来存放)个单元中存放着中断向量表。&lt;/li>
&lt;li>CPU用8位的中断类型码通过中断向量表找到相应的中断处理程序的入口地址。中断向量表中存放的就是各个类型的处理程序的地址，8位的类型码是个索引。&lt;/li>
&lt;/ul>
&lt;h2 id="124-中断过程">12.4 中断过程&lt;/h2>
&lt;ul>
&lt;li>用中断码在中断向量表中找到中断处理程序的入口地址，用它来设置CS和IP，使CPU执行中断程序。用中断类型码找到中断向量并用它设置CS和IP，这个工作室由CPU的硬件自动完成的，这个工作的过程被称为中断过程。&lt;/li>
&lt;li>8086CPU的中断过程：
&lt;ul>
&lt;li>1、从中断信息中取得中断类型码；&lt;/li>
&lt;li>2、标志寄存器的值入栈，以保护标志位；&lt;/li>
&lt;li>3、设置标志寄存器的第8位TF和第9位IF的值为0；&lt;/li>
&lt;li>4、CS的内容入栈，IP的内容入栈；&lt;/li>
&lt;li>5、从内存地址为中断类型码* 4和中断类型码 *4+2的两个字单元中读取中断处理程序的入口地址设置IP和CS。&lt;/li>
&lt;li>在最后一步完成后，CPU开始执行由程序员编写的中断处理程序。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="125-中断处理程序和iret指令">12.5 中断处理程序和iret指令&lt;/h2>
&lt;ul>
&lt;li>常规的步骤
&lt;ul>
&lt;li>1、保存用到的寄存器；&lt;/li>
&lt;li>2、处理中断；&lt;/li>
&lt;li>3、 恢复用到的寄存器；&lt;/li>
&lt;li>4、 用iret指令返回。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>iret指令的功能为相应的按顺序恢复之前保存起来的IP、CS地址和标志位寄存器。用汇编语法描述为：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">pop&lt;/span> &lt;span class="no">IP&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">CS&lt;/span>
&lt;span class="nf">popf&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="126-除法错误中断的处理">12.6 除法错误中断的处理&lt;/h2>
&lt;ul>
&lt;li>当CPU执行dvi等处罚指令的时候，如果发生了除法溢出错误，将产生中断类型码为0的中断信息，CPU将检测到这个信息然后引发中断过程，转去执行0号中断所对应的中断处理程序。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="no">div&lt;/span> &lt;span class="no">bh&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-5c595ab454cfb14c?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>126&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-624615b341ec92a8?imageMogr2/auto-orient/strip%7CimageView2/2/w/635/format/webp" alt="">&lt;/p>
&lt;p>debug 126&lt;/p>
&lt;h2 id="127-编程处理0号中断">12.7 编程处理0号中断&lt;/h2>
&lt;ul>
&lt;li>改变0号中断处理程序的功能，在屏幕中间显示字然后再返回操作系统。
&lt;ul>
&lt;li>当发生除法溢出时产生0号中断信息，引发中断过程。
&lt;ul>
&lt;li>此时CPU将进行以下工作(中断过程)&lt;/li>
&lt;li>当中断0发生时，CPU将转去执行中断处理程序。&lt;/li>
&lt;li>先进行相关处理，然后向显示缓冲区送字符串，最后返回。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>改变后的中断处理程序应该放在内存中，因为除法溢出随时可能发生，CPU随时都可能将CS:IP指向改变后的中断处理程序的入口执行程序。&lt;/li>
&lt;li>把程序存入内存，修改向量表(即将内存地址登记在中断向量表的对应表项中)，中断时调用这个内存。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>除法溢出对应的中断类型码为0，它的中断处理程序的入口地址应该从0* 4+2地址单元开始存放，段地址存放在0* 4+2字单元中，偏移地址存放在0*4字单元中。也就是改变后的中断处理程序的段地址0存放在0000:0002字单元中，偏移地址200H存放在0000:0000字单元中。如果要显示的字符串在程序的data段中，那么程序执行完成后返回，它所占用的内存空间被系统释放，在其中存放的信息也可能被别的信息覆盖。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">do0&lt;/span>&lt;span class="c">;设置ds:di指向源地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;设置es:si指向目的地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">do0end&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">do0&lt;/span>&lt;span class="c">;设置cx为传输长度，编译器可以识别加减乘除运算符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cld&lt;/span>&lt;span class="c">;设置传输方向为正
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">rep&lt;/span> &lt;span class="no">movsb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;设置中断向量表
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">do0:&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">do0start&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="no">welcome&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">masm&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="c">;在代码段中存储数据
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">do0start&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">202&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;jmp short do0start这条指令栈两个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;显示字符串，设置es:di指向字符串
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>&lt;span class="c">;显存空间，直接显示在显示器上
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">36&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;这只es:di指向显存空间的中间位置
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;设置cx为字符串(welcome to masm！)长度
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">02&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">do0end:&lt;/span>
&lt;span class="nf">nop&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-0a7f4b12ca469744?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>do0&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-372a3cfef110daa7?imageMogr2/auto-orient/strip%7CimageView2/2/w/654/format/webp" alt="">&lt;/p>
&lt;p>do02&lt;/p>
&lt;h2 id="128-单步中断">12.8 单步中断&lt;/h2>
&lt;ul>
&lt;li>CPU执行完一条指令之后，如果检测到标志寄存器的TF位为1，则产生单步中断引发中断过程。单步中断的中断类型码为1，它所引发的中断过程如下：
&lt;ul>
&lt;li>1、取得中断类型码；&lt;/li>
&lt;li>2、标志寄存器入栈，TF、IF设置为0；&lt;/li>
&lt;li>3、CS、IP入栈；&lt;/li>
&lt;li>4、指向指定类型码的中断向量表。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="129-响应中断的特殊情况">12.9 响应中断的特殊情况&lt;/h2>
&lt;ul>
&lt;li>在有些情况下CPU在执行完当前指令后，即便是发生了中断也不会响应。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>在执行完向ss寄存器传送数据的指令后，即便检测到了中断信号CPU也不会响应。因为ss:sp指向栈顶，对他们的设置应该连续完成。如果在执行完设置ss指令后mCPU响应中断引发中断过程，要在栈中压入标志寄存器、CS和IP的值。而ss改变，sp并未改变则ss:sp指向不是正确的栈顶将引发错误。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>我们要将栈顶设置为1000:0，不应该隔开&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>应该&lt;/th>
&lt;th>不应该&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>mov ax,1000h&lt;/td>
&lt;td>mov ax,1000h&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov ss,ax&lt;/td>
&lt;td>mov ss,ax&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov sp,0&lt;/td>
&lt;td>mov ax,0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov ax,0&lt;/td>
&lt;td>mov sp,0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="十三int-指令">十三、int 指令&lt;/h1>
&lt;h2 id="引言-9">引言&lt;/h2>
&lt;ul>
&lt;li>在第12章中了解中断过程和除法错误中断和单步中断的处理，这章了解int指令。&lt;/li>
&lt;/ul>
&lt;h2 id="131-int-指令">13.1 int 指令&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>int格式：int n，n为中断类型码，它的功能是引发中断过程。CPU执行int n之力量能够，相当引发一个n号的中断过程，可以在程序中使用int指令调用任何一个中断的中断处理程序。执行过程如下：&lt;/p>
&lt;ul>
&lt;li>中断过程从，此处去执行n号中断的中断处理程序。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="c">;执行int 0指令，引发中断过程，执行0号中断处理程序
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-5f5e62dc453468ef?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>131dosbox&lt;/p>
&lt;p>​&lt;/p>
&lt;/li>
&lt;li>
&lt;p>int指令的最终功能和call类似，都是调用一段程序。一般情况下系统将一些具有一定功能的子程序以中断处理程序的方式提供给应用程序调用，也可以自己编写一些中断处理程序供别人使用。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="132-编写供应用程序调用的中断例程">13.2 编写供应用程序调用的中断例程&lt;/h2>
&lt;ul>
&lt;li>中断处理程序简称为中断例程。&lt;/li>
&lt;li>实例1：编写、安装中断7ch的中断例程实现求一word型数据的平方。
&lt;ul>
&lt;li>1、编程实现求平方功能的程序；&lt;/li>
&lt;li>2、安装程序在0:200处；&lt;/li>
&lt;li>3、设置中断向量表将程序的入口地址保存在7ch表项中，使其成为中断7ch的中断例程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;计算
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">ssume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3456&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">adc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">dx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;span class="c">;安装程序
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">sqr&lt;/span>&lt;span class="c">;设置ds:si指向源地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;设置es:di指向目的地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">sqrend-&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">sqr&lt;/span>&lt;span class="c">;设置cx为传输长度
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cld&lt;/span>&lt;span class="c">;设置传输方向为正
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">rep&lt;/span> &lt;span class="no">movsb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ws&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">sqr:&lt;/span>
&lt;span class="nf">mul&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">iret&lt;/span>
&lt;span class="nl">sqrend:&lt;/span>
&lt;span class="nf">nop&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>CPU执行int 7ch指令进入中断例程之前，标志寄存器、当前的CS和IP都被压入栈中，在执行完中断例程后，用iret指令恢复int 7ch执行前的标志寄存器和CS和IP的值，从而接着执行应用程序。&lt;/li>
&lt;li>&lt;strong>int指令和iret指令配合使用与call指令和ret指令配合使用具有相似的思路。&lt;/strong>&lt;/li>
&lt;li>实例2：编写、安装中断7ch的中断例程，实现将一个全是字母，以0为结尾的字符串转化为大写。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">conversation&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="no">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">capitalend&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nf">cld&lt;/span>
&lt;span class="na">rep&lt;/span> &lt;span class="nf">movsb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">capital:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nl">change:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ch&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jcxz&lt;/span> &lt;span class="no">ok&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">change&lt;/span>
&lt;span class="nl">ok:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">iret&lt;/span>
&lt;span class="nl">capitalend:&lt;/span>
&lt;span class="nf">nop&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>要注意用到的寄存器冲突。&lt;/li>
&lt;/ul>
&lt;h2 id="133-对intiret和栈的深入理解">13.3 对int、iret和栈的深入理解&lt;/h2>
&lt;ul>
&lt;li>中断处理程序和iret指令&lt;/li>
&lt;li>编程：用7ch中断例程完成loop指令的功能，在屏幕中间显示80个&amp;quot;!&amp;quot;.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>loop指令需要循环次数和到标号的位移。为了模拟loop指令7ch中断例程应具备下面dec cx和如果cx的值不等于0则转移到标号s处。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="p">-&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="m">7&lt;/span>&lt;span class="n">ch引发中断过程后&lt;/span>&lt;span class="err">，进入&lt;/span>&lt;span class="m">7&lt;/span>&lt;span class="n">ch中断例程在中断过程中当前的标志寄存器&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">CS和IP都要压栈&lt;/span>&lt;span class="err">。此时压入的&lt;/span>&lt;span class="n">CS和IP中的内容分别是调用程序的段地址&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">可以认为是标号&lt;/span>&lt;span class="n">s的段地址&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">和&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="m">7&lt;/span>&lt;span class="n">ch后一条指令的偏移地址&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">即标号&lt;/span>&lt;span class="n">se的偏移地址&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">。使用&lt;/span>&lt;span class="n">iret指令用栈中的内容设置CS&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">IP&lt;/span>&lt;span class="err">，从而实现转移到标号&lt;/span>&lt;span class="n">s处&lt;/span>&lt;span class="err">。&lt;/span>
&lt;span class="err">```&lt;/span>&lt;span class="n">asm&lt;/span>
&lt;span class="n">assume&lt;/span> &lt;span class="n">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">code&lt;/span>
&lt;span class="n">code&lt;/span> &lt;span class="n">segment&lt;/span>
&lt;span class="n">start&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="n">b800h&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">显存地址&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ax&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="m">12&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">offset&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">-&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="n">se&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">设置从标号&lt;/span>&lt;span class="n">s的转移位移&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">80&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="kt">byte&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="n">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="n">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="sc">&amp;#39;!&amp;#39;&lt;/span>
&lt;span class="k">add&lt;/span> &lt;span class="n">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="m">7&lt;/span>&lt;span class="n">ch&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">如果&lt;/span>&lt;span class="n">cx的值不等于0则转移到标号s处&lt;/span>
&lt;span class="n">se&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">nop&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="n">c00h&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="m">21&lt;/span>&lt;span class="n">h&lt;/span>
&lt;span class="n">code&lt;/span> &lt;span class="n">ends&lt;/span>
&lt;span class="n">end&lt;/span> &lt;span class="n">start&lt;/span>
&lt;span class="p">;&lt;/span>&lt;span class="m">7&lt;/span>&lt;span class="n">ch中断例程&lt;/span>
&lt;span class="n">lp&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">push&lt;/span> &lt;span class="n">bp&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">bp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">sp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">dec&lt;/span> &lt;span class="n">cx&lt;/span>
&lt;span class="n">jcxz&lt;/span> &lt;span class="n">lpret&lt;/span>
&lt;span class="k">add&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">bp&lt;/span>&lt;span class="p">+&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">bx&lt;/span>
&lt;span class="n">lpret&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">pop&lt;/span> &lt;span class="n">bp&lt;/span>
&lt;span class="n">iret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">## 13.4 BIOD和DOS所提供的中断例程
- bios中主要包含以下几部分内容：
- 1、硬件操作系统的检测和初始化程序；
- 2、外部中断和内部中断的中断例程；
- 3、用于对硬件设备进行I\O操作的中断例程；
- 4、其他和硬件系统相关的中断例程。
- bios和dos在所提供的中断例程中包含了许多子程序，可以用int指令直接调用。和硬件设备相关的dos中断例程中一般都调用了bios的中断例程
## 13.5 bios和dos中断例程的安装过程
- 1、开机后8086CPU一加电初始化CS和IP，自动执行FFFF:0处指令，转去执行bios中的硬件系统检测和初始化程序。
- 2、初始化程序将建立bios所支持的中断向量，即将biso提供的中断例程的入口地址登记在中断向量表中。
- 3、硬件系统检测和初始化完成后，调用int 19h进行操作系统的引导。从此将计算机交由操作系统控制。
- 4、dos启动后除完成其他工作外，还将它所提供的中断例程装入内存并建立相应的中断向量。
## 13.6 bios中断例程应用
- bios和dos提供的中断例程douyongah来传递内部子程序的编号。
- int 10h中断例程是bios提供的中断例程，其中包含了多个和屏幕输出相关的子程序。int 10h中断例程的设置光标位置功能：
```asm
mov ah,2;表示调用10h号中断例程的2号子程序，功能为设置光标位置
mov bh,0;页号
mov dh,5;行号
mov dl 12;列号
int 10h;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;功能为在光标位置显示字符功能
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="c">;置光标，调用9号子程序
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="c">;字符
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">bl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="c">;颜色属性，和在显存中的属性字节的格式相同
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;第0页
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="c">;字符重复个数
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">int&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="err">​```&lt;/span>
&lt;span class="err">-&lt;/span> &lt;span class="err">编程：在屏幕的第5行12列显示3个红底高亮闪烁绿色的&amp;#39;&lt;/span>&lt;span class="nf">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="err">​```&lt;/span>&lt;span class="nf">asm&lt;/span>
&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;设置光标
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;第0页
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="c">;dh中放行号
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="c">;dl中放列号
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">int&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="c">;设置光标
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="c">;字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11001010&lt;/span>&lt;span class="no">b&lt;/span>&lt;span class="c">;颜色属性
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;第0页
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="c">;字符重复个数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">int&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-51f0b4f968259aec?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>136&lt;/p>
&lt;h2 id="137-dos中断例程应用">13.7 dos中断例程应用&lt;/h2>
&lt;ul>
&lt;li>int 21h 中断例程&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="c">;程序返回
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;返回值0是正常返回
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;合起来写就是 mov ax,4c00h
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>int 2h中断例程还具有在光标位置显示字符串的功能、&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nl">ds:&lt;/span>&lt;span class="nf">dx&lt;/span>&lt;span class="c">;要显示的字符串需要用 $ 作为结束符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="c">;功能号9，表示在光标位置显示字符串
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h1 id="十四端口">十四、端口&lt;/h1>
&lt;h2 id="引言-10">引言&lt;/h2>
&lt;ul>
&lt;li>CPU可以直接读写3个地方的数据：
&lt;ul>
&lt;li>1、CPU内部的寄存器；&lt;/li>
&lt;li>2、内存单元；&lt;/li>
&lt;li>3、 端口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="141-端口的读写">14.1 端口的读写&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>mov、push、pop等死内存读写指令。in和out是端口读指令写指令时in是从端口读取数据，out是往端口写入数据。in和out指令只能用ax或al来存放从端口中读入的数据或要发送到端口中的数据，访问8位短空时用al，访问16位端口时用ax。&lt;/strong>
&lt;ul>
&lt;li>访问内存：
&lt;ul>
&lt;li>mov ax,ds:[8+0];假设(ds)=0&lt;/li>
&lt;li>执行时，与总线相关的操作：
&lt;ul>
&lt;li>1、CPU通过地址线信息8发出；&lt;/li>
&lt;li>2、CPU通过控制线发出内存读命令，选中存储器芯片并通知它将要从中读取数据；&lt;/li>
&lt;li>3、 存储器将8号单元中的数据通过数据线送入CPU。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>访问端口：
&lt;ul>
&lt;li>in al,60h;从60h号端口读入一个字节。&lt;/li>
&lt;li>执行时与总线相关的操作：
&lt;ul>
&lt;li>1、CPU通过地址线将地址信息60h发出；&lt;/li>
&lt;li>2、CPU通过控制线发出端口读命令，选中端口所在的芯片，并通知它，将要从中读取数据；&lt;/li>
&lt;li>3、端口所在的芯片将60h端口中的数据通过数据线送入CPU。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;对0~255以内的端口进行读写
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">in&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;从20h端口读入一个字节
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">out&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;往20h端口写入一个字节
&lt;/span>&lt;span class="c">;对256~65535的端口进行读写时，端口放在dx中
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="no">f8h&lt;/span>&lt;span class="c">;将端口号3f8h送入dx
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">in&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">dx&lt;/span>&lt;span class="c">;从3f8端口读入一个字节
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">out&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="no">f8h&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;往3f8h端口写入一个字节
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="142-cmos-ram芯片">14.2 CMOS RAM芯片&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>CMOA RAM特征：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>1、包含一个实时钟和一个有128个存储单元的RAM存储器。(早期的计算机位64个字节)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2、该芯片靠电池供电。因此关机后其内部的实时钟仍可正常工作，RAM中的信息不会丢失。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>3、128个字节的RAM，内部实时钟占用0~0dh单元来保存时间信息默契与大部分单元用于保存系统配置信息，供系统启动时bios程序读取。&lt;/p>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>bios也提供了相关的程序使用户在开机时配置CMOS RAM中的系统信息。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>4、该芯片内部有两个端口，端口地址为70h和71&lt;br>
h。CPU通过这两个端口读写CMOS RAM。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>5、70h为地址端口，存放要访问的CMOS RAM单元的地址;71h为数据端口，存放从选定的CMOS RAM单元中读取的数据，或要写入到其中的数据。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>CPU对CMOS RAM的读写分两步进行，以读2号单元为例：&lt;/p>
&lt;ul>
&lt;li>1、将2送入端口70h；&lt;/li>
&lt;li>2、从71h读出2号单元的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="143-shl和shr指令">14.3 shl和shr指令&lt;/h2>
&lt;ul>
&lt;li>shl为逻辑左移指令功能为：
&lt;ul>
&lt;li>1、将一个寄存器或内存单元中的数据向左移位；&lt;/li>
&lt;li>2、将&lt;strong>最后移出&lt;/strong>的一位写入CF中；&lt;/li>
&lt;li>3、最低位用0补充。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01001000&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">shl&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="c">;将al中的数据左移一位
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;执行后al的值是10010000b，CF=0
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果移动位数大于1时，必须将移动位数放在cl中。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01010001&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nf">shl&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cl&lt;/span>
&lt;span class="c">;执行后al的值为10001000b，cf=0
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>二进制逻辑左移一位，相当于执行x=x*2(2是进制位)&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>mov al,00000001b&lt;/th>
&lt;th>执行后al的值等于00000001b=1&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>shl al,1&lt;/td>
&lt;td>执行后al的值等于00000010b=2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shl al,1&lt;/td>
&lt;td>执行后al的值等于00000100b=4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shl al,1&lt;/td>
&lt;td>执行后al的值等于00001000b=8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov cl,3&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shl al,cl&lt;/td>
&lt;td>执行后al的值等于01000000b=64&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>shr为逻辑左移指令功能为：
&lt;ul>
&lt;li>1、将一个寄存器或内存单元中的数据向右移位；&lt;/li>
&lt;li>2、将&lt;strong>最后移出&lt;/strong>的一位写入CF中；&lt;/li>
&lt;li>3、最高位用0补充。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>二进制逻辑右移一位，相当于执行x=x/2(2是进制位)&lt;/li>
&lt;/ul>
&lt;h2 id="144-cmosram中存储的时间信息">14.4 CMOS　RAM中存储的时间信息&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>在CMOS RAM中以每个信息一字节存放着当前的时间信息：年09h，月08h，日07h，时04h，分02h，秒00h。这些数据以BCD码的方式存放，BCD码以4位为一位。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数值26BCD码表示为0010 0110，用两个BCD码表示两位十进制，高4位表示十位，低4位表示各位。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编程：在屏幕中间显示当前的月份。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="c">;向地址端口70h写入要访问的单元地址，读取CMOS RAM的信息
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nf">out&lt;/span> &lt;span class="mi">70&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">in&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">71&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;从数据端口中取得指定单元中的数据
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;al中为从CMOS RAM的8号端口读出数据
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nf">shr&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cl&lt;/span>&lt;span class="c">;ah中为月份的十位数码值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00001111&lt;/span>&lt;span class="no">b&lt;/span>&lt;span class="c">;ah中为月份的个位数值码
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;BCD码值+30h(字符&amp;#39;0&amp;#39;)=十进制对应的ASCII码
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="c">;用BCD码表示的月份以十进制的形式显示到屏幕上。
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>&lt;span class="c">;显存
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ah&lt;/span>&lt;span class="c">;显示月份的十位数码
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;显示月份的个位数码
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-0b7fb2ed2e7270a6?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>144_1&lt;/p>
&lt;h1 id="十五外中断">十五、外中断&lt;/h1>
&lt;h2 id="151接口芯片和端口">15.1接口芯片和端口&lt;/h2>
&lt;ul>
&lt;li>CPU通过端口和外设进行联系。在PC系统的接口卡和主板上，装有各种接口芯片。这些外设接口芯片的内部有若干寄存器，CCPU将这些寄存器当作端口来访问。外设的输入不直接送入内存和CPU，而是送入相关的接口芯片的端口中；CPU向外设的输出也不是直接送入到外设而是先送入端口再由相关的芯片送到外设。&lt;/li>
&lt;/ul>
&lt;h2 id="152外中断信息">15.2外中断信息&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>外中断源有两类：&lt;/p>
&lt;ul>
&lt;li>1、可屏蔽中断；
&lt;ul>
&lt;li>可屏蔽中断时CPU可以不响应的外中断。CPU是否响应可屏蔽中断要看标志寄存器的IF位的设置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2、不可屏蔽中断&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>当CPU检测到可屏蔽中断信息时：&lt;/p>
&lt;ul>
&lt;li>如果IF=1，则CPU在执行完当前指令后响应中断引发中断过程。&lt;/li>
&lt;li>如果IF=0，着不响应可屏蔽中断。&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/f7434bb2ce09#12420e4b8ade696ade8bf87e7a88b_139">内中断过程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>可屏蔽中断所引发的中断过程，除在第一步的实现上有所不同外，基本上和内中断的中断过程相同。因为可屏蔽中断信息来自于CPU外部，中断类型码是通过数据总线送入CPU的；而内中断的中断类型码是在CPU内部产生的。在中断过程中将IF置0的原因是在进入中断处理程序后禁止其他的可屏蔽中断。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>8086CPU提供的设置IF的指令如下：&lt;/p>
&lt;ul>
&lt;li>sti，设置IF=1；&lt;/li>
&lt;li>cli，设置if=0.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>不可屏蔽中断是CPU必须响应的外中断。当CPU检测到不可屏蔽中断信息时，则在执行完当前指令后立即响应引发中断过程。对于8086CPU不可屏蔽的中断类型码固定为2。所以中断过程中不需要取中断类型码。几乎所有外设引发的外中断都是可屏蔽中断。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不可屏蔽中断过程：&lt;/p>
&lt;ul>
&lt;li>1、标志寄存器入栈，IF=0，TF=0’&lt;/li>
&lt;li>2、CS和IP入栈；&lt;/li>
&lt;li>3、(IP)=(8)，(CS)=(0AH)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="153pc机及键盘的处理过程">15.3PC机及键盘的处理过程&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>键盘输入的处理过程：&lt;/p>
&lt;ul>
&lt;li>1、键盘输入产生扫描码；&lt;/li>
&lt;li>2、扫描码送入60h端口；&lt;/li>
&lt;li>3、引发9号中断；&lt;/li>
&lt;li>4、执行int 9中断例程。&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>前三步由硬件系统自动完成，第四步用户可以修改int 9中断程序。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>按下一个键产生的扫描码称为通码，松开一个键产生的扫描码称为断码。扫描码被送入主板上的相关接口芯片端口地址为60h的寄存器中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>扫描码长度为一个字节，通码的第7位为0，断码的第7位为1。即断码=通码+80h。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-16a6a9fab3b09a6e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>键盘上部分键的扫描码&lt;/p>
&lt;ul>
&lt;li>bios提供了int 9中断例程，用来进行基本键盘输入处理，主要的工作如下：
&lt;ul>
&lt;li>1、读出60h端口中的扫描码；&lt;/li>
&lt;li>2、如果是字符键的扫描码就将它和它所对应的字符码(ASCII码)送入内存中的bios键盘缓冲区；
&lt;ul>
&lt;li>键盘的输入到达60h端口时相关的芯片就会向CPU发出中断类型码为9的可屏蔽中断信息。&lt;/li>
&lt;li>CPU检测到该中断信息后，如果IF=1，则相应中断，引发中断过程，转去执行int 9中断例程。&lt;/li>
&lt;li>如果是控制键(如ctrl)和切换键(如capslock)的扫描码，则将其转变为状态字节(用为进制位记录控制键和切换键状态的字节)写入内存中存储状态字节的单元&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>3、键盘系统进行相关的控制。如向相关芯片发出应答信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>bios键盘缓冲区是系统启动后mbios用于存放int 9中断例程所接收的键盘输入的内存区。该内存可以存储15个键盘输入，在bios键盘缓冲区中一个键盘输入用一个字单元存放，高位字节存放扫描码，低位字节存放字符码。0040:17单元存储键盘状态字节该字节记录了控制键和切换键的状态
&lt;ul>
&lt;li>0:置1表表示按下右shift键&lt;/li>
&lt;li>1:置1表表示按下左shift键&lt;/li>
&lt;li>2:置1表表示按下ctrl&lt;/li>
&lt;li>3:置1表表示按下alt&lt;/li>
&lt;li>4:置1表表示按下scroll指示灯亮&lt;/li>
&lt;li>5:置1表表示按下numlock，小键盘输入的是数字&lt;/li>
&lt;li>6:置1表表示按下capslock，输入大写字母&lt;/li>
&lt;li>7:置1表表示按下insert。处于删除状态&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="154编写int-9中断">15.4编写int 9中断&lt;/h2>
&lt;ul>
&lt;li>键盘输入的处理过程&lt;/li>
&lt;li>编程：在屏幕中间依次显示让人看清的a~z，按下esc键后改变显示的颜色。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;显示字符
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ah&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">z&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">jna&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/br>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;延迟显示字符
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">128&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">128&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ah&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">delay&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ah&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">z&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">jna&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">delay:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;循环100次，延迟的时间和CPU的计算能力成反比
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s1:&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">sbb&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jne&lt;/span> &lt;span class="no">s1&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jne&lt;/span> &lt;span class="no">s1&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/br>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;实现IF=0，TF=0步骤
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">pushf&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11111100&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">popf&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>int指令在执行时CPU进行的工作&lt;/li>
&lt;li>完整程序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;span class="lnt">96
&lt;/span>&lt;span class="lnt">97
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">128&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">128&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;将原来的int9中断例程的入口地址保存
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">int9&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">cs&lt;/span>&lt;span class="c">;在中断向量表中设置新的int 9中断例程的入口地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ah&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">delay&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ah&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">z&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">jna&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;将中断向量表中int9中断例程的入口恢复为原来的地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">delay:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;循环100次，延迟的时间和CPU的计算能力成反比
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s1:&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">sbb&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jne&lt;/span> &lt;span class="no">s1&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jne&lt;/span> &lt;span class="no">s1&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="c">;新的int 9中断例程
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">int9:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>
&lt;span class="nf">in&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">pushf&lt;/span>
&lt;span class="nf">pushf&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11111100&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">popf&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;对int指令进行模拟，调用原来的int9中断例程
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="c">;esc键盘扫描码
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jne&lt;/span> &lt;span class="no">int9ret&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;改变颜色
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">int9ret:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">iret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="155安装新的int-9中断例程">15.5安装新的int 9中断例程&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>小甲鱼版(笔者未成功运行)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;span class="lnt">96
&lt;/span>&lt;span class="lnt">97
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">assume cs:code
stack segment
db 128 dup(0)
stack ends
data segment
dw 0,0
data ends
code segment
start:
mov ax,stack
mov ss,ax
mov sp,128
mov ax,data
mov ds,ax
mov ax,0
mov es,ax
push es:[9*4]
pop ds:[0]
push es:[9*4+2]
pop ds:[2];将原来的int9中断例程的入口地址保存
mov word ptr es:[9*4+2],offset int9
mov es:[9*4+2],cs;在中断向量表中设置新的int 9中断例程的入口地址
mov ax,0b800h
mov es,ax
mov ah,&amp;#39;a&amp;#39;
s:
mov es:[160*12+40*2],ah
call delay
inc ah
cmp ah,&amp;#39;z&amp;#39;
jna s
mov ax,0
mov es,ax
push ds:[0]
pop es:[9*4]
push ds:[2]
pop es:[9*4+2];将中断向量表中int9中断例程的入口恢复为原来的地址
mov ax,4c00h
int 21h
delay:
push ax
push dx
mov dx,10000h;循环100次，延迟的时间和CPU的计算能力成反比
mov ax,0
s1:
sub ax,1
sbb dx,0
cmp ax,0
jne s1
cmp dx,0
jne s1
pop dx
pop ax
ret
;新的int 9中断例程
int9:
push ax
push bx
push es
in al,60h
pushf
pushf
pop bx
and bh,11111100b
push bx
popf
call dword ptr ds:[0];对int指令进行模拟，调用原来的int9中断例程
cmp al,1;esc键盘扫描码
jne int9ret
mov ax,0b800h
mov es,ax
inc byte ptr es:[160*12+40*2+1];改变颜色
int9ret:
pop es
pop bx
pop ax
iret
code ends
end start
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>王爽原版(笔者未成功运行)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">128&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">128&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cs&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ds&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">int9&lt;/span>&lt;span class="c">;设置ds:si指向源地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">204&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;设置es:di指向目的地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">int9end&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">int9&lt;/span>&lt;span class="c">;设置cx为传输长度
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cld&lt;/span>&lt;span class="c">;设置传输方向
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">rep&lt;/span> &lt;span class="no">movsb&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">202&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">cli&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">204&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">sti&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">int9:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>
&lt;span class="nf">in&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">pushf&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;当此中断例程执行时(CS)=0
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="no">bh&lt;/span>&lt;span class="c">;f1的扫描码
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jne&lt;/span> &lt;span class="no">int9ret&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nl">int9ret:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">iret&lt;/span>
&lt;span class="nl">int9end:&lt;/span>
&lt;span class="nf">nop&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="第16章-直接定址表">第16章 直接定址表&lt;/h1>
&lt;h2 id="161-描述单元长度的标号">16.1 描述单元长度的标号&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">cod&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">a:&lt;/span>&lt;span class="nf">db&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">b:&lt;/span>&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">a&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">b&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;span class="c">;代码中的 s、start等都是标号，表示了内存的地址
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在code段中使用的标号a，b后面没有：，因此他们可以同时描述内存地址和单元长度的标号&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">cod&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">a&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span> &lt;span class="c">;描述了地址code：0，和从这个地址开始以后的内存单元都是直接单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">b&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c">;则b是code[8]
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;相当于mov al,cs:0[si]
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-161">检测点 16.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-d7443f3d02a0fd2a?imageMogr2/auto-orient/strip%7CimageView2/2/w/829/format/webp" alt="">&lt;/p>
&lt;p>检测点16.1&lt;/p>
&lt;h2 id="162-在其他段中使用数据标号">16.2 在其他段中使用数据标号&lt;/h2>
&lt;ul>
&lt;li>注意：在后面加有：的地址标号只能在代码段中使用，不能在其他段中使用。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">cod&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">a:&lt;/span>&lt;span class="nf">db&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">b:&lt;/span>&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果现在代码段中直接用数据标号访问数据，则需要用伪指令assume将标号所在的段和一个段寄存器联系起来。 我们可以将标号当作数据来定义，此时编译器将标号所表示的地址当作数据的值。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">a&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nf">b&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nf">c&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="no">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="c">;相当于 c dw offset a,offset b
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">a&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nf">b&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nf">c&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="no">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="c">;相当于 c dw offset a,seg a,offset b,seg b
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;seg操作符，功能是取得某一标号的段地址
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="163-直接定址表">16.3 直接定址表&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>利用表，在两个数据集合之间建立一种映射关系，使我们可以利用查表的方法根据给出的数据得到其在另一集合中对应数据&lt;/p>
&lt;ul>
&lt;li>目的：
&lt;ol>
&lt;li>为了算法的清晰和简洁&lt;/li>
&lt;li>为了加快运算速度&lt;/li>
&lt;li>为了使程序易于扩充&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>小练习，编写子程序，以十六进制的形式在屏幕中间显示给定的byte型数据。小技巧，利用映射关系，0-9数值+30h=对应字符的ascii值，10-15和A到F之间的银色关系是：数值+37h=对应字符的ascii的值&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nl">code:&lt;/span>&lt;span class="nf">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">eh&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">showbyte&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>
&lt;span class="c">;子程序，用al传送要显示的数据
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">showbyte:&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">show&lt;/span>
&lt;span class="nf">table&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">1023456789&lt;/span>&lt;span class="no">ABCDEF&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="c">;字符表
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">show:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">shr&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">shr&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">shr&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">shr&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="c">;右移4位，ah中得到高4位的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00001111&lt;/span>&lt;span class="no">b&lt;/span>&lt;span class="c">;al中为低4位
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ah&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;用高4位的值作为相对于table的便宜，取得对应的字符
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ah&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;用低4位的值作为相对于table的偏移，取得对应的字符
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="164-程序入口地址的直接定址表">16.4 程序入口地址的直接定址表&lt;/h2>
&lt;ul>
&lt;li>小练习&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>清屏：将显存中当前屏幕中的支付设为空格；&lt;/li>
&lt;li>设置前景色：设置显存中当前屏幕中处于奇地址的属性字节的第0、1、2位；&lt;/li>
&lt;li>设置背景色：设置显存中当前屏幕中处于奇地址的属性字节的第4、5、6位；&lt;/li>
&lt;li>向上滚动一行：依次将第n+行的内容复制到第n行处，最后一行为空。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">;================================入口函数1=====================================
;入口函数说明;
;用ah传递功能号，0是清屏，1是设置前景色，2是设置背景色，3是向上滚动一行
setscreen:
jmp short set
table dw sub1,sub2,sub3,sub4
set:
push bx
cmp ah,3;判断传递的功能号是否大于3
ja sret
mov bl,ah
mov bh,0
add bx,bx;根据ah中的功能号计算对应子程序的地址在table表中的偏移
call word ptr table[bx];调用对应的子程序
sret;
pop bx
iret
;================================入口函数2=====================================
;入口函数说明;
;用ah传递功能号，0是清屏，1是设置前景色，2是设置背景色，3是向上滚动一行
setscreen:
cmp ah,0
je do1
cmp ah,1
je do2
cmp ah,2
je do3
cmp ah,3
je do4
jmp short sret
do1:
call sub1
jmp short sret
do2:
call sub2
jmp short sret
do3:
call sub3
jmp short sret
do4:
call sub4
jmp short sret
;子功能==========================================================================
;清屏
sub1:
push bx
push cx
push es
mov bx,0b800h
mov es,bx
mov bx,0
mov cx,2000
sub1s:
mov byte ptr es:[bx],&amp;#39;&amp;#39;
add bx,2
loop sub1s
pop es
pop cx
pop bx
ret
;设置前景色
sub2:
push bx
push cx
push es
mov bx,0b800h
mov es,bx
mov bx,1
mov cx,2000
sub2s:
mov byte ptr es:[bx],11111000b
or es:[bx],al
add bx,2
loop sub2s
pop es
pop cx
pop bx
ret
;设置背景色
sub3:
push bx
push cx
push es
mov cl,4
shl al,cl
mov bx,0b800h
mov es,bx
mov bx,1
mov cx,2000
sub3s:
mov byte ptr es:[bx],10001111b
or es:[bx],al
add bx,2
loop sub3s
pop es
pop cx
pop bx
ret
;向上滚动一行
sub4:
push cx
push si
push di
push es
push ds
mov si,0b800h
mov es,si
mov ds,si
mov si,160;ds：si指向第n+行
mov di,0;es：di指向第n行
cld
mov cx,24;共复制24行
sub4s:
push cx
mov cx,160
rep movsb;复制
pop cx
loop sub4s
mov cx,80
mov si,0
sub4s1:
mov byte ptr es:[160*24+si],&amp;#39;&amp;#39;;最后一行清空
add si,2
loop sub4s1
pop ds
pop es
pop di
pop si
pop cx
ret;结束
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Bash字符串操作</title><link>https://justice.bj.cn/post/14.language/shell/bash%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/bash%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</guid><description>&lt;h1 id="bash字符串操作">Bash字符串操作&lt;/h1>
&lt;h2 id="取长度">取长度&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;abcd&amp;#34;&lt;/span>
expr length &lt;span class="nv">$str&lt;/span> &lt;span class="c1"># 4&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${#&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 4&lt;/span>
expr &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$str&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span> &lt;span class="c1"># 4&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>好像一般使用第二种&lt;/p>
&lt;h2 id="查找子串的位置">查找子串的位置&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span>
expr index &lt;span class="nv">$str&lt;/span> &lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span> &lt;span class="c1"># 1&lt;/span>
expr index &lt;span class="nv">$str&lt;/span> &lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span> &lt;span class="c1"># 2&lt;/span>
expr index &lt;span class="nv">$str&lt;/span> &lt;span class="s2">&amp;#34;x&amp;#34;&lt;/span> &lt;span class="c1"># 0&lt;/span>
expr index &lt;span class="nv">$str&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="c1"># 0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="选取子串">选取子串&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;abcdef&amp;#34;&lt;/span>
expr substr &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$str&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="c1"># 从第一个位置开始取3个字符， abc&lt;/span>
expr substr &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$str&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="c1"># 从第二个位置开始取5个字符， bcdef &lt;/span>
expr substr &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$str&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="c1"># 从第四个位置开始取5个字符， def&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">2&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 从第二个位置开始提取字符串， bcdef&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nv">3&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 从第二个位置开始提取3个字符, bcd&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">:(-6):&lt;/span>&lt;span class="nv">5&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 从倒数第二个位置向左提取字符串, abcde&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">:(-4):&lt;/span>&lt;span class="nv">3&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 从倒数第二个位置向左提取6个字符, cde&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="截取子串">截取子串&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;abbc,def,ghi,abcjkl&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#a*c&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出,def,ghi,abcjkl 一个井号(#) 表示从左边截取掉最短的匹配 (这里把abbc字串去掉）&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">##a*c&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出jkl， 两个井号(##) 表示从左边截取掉最长的匹配 (这里把abbc,def,ghi,abc字串去掉)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#&lt;/span>&lt;span class="s2">&amp;#34;a*c&amp;#34;&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出abbc,def,ghi,abcjkl 因为str中没有&amp;#34;a*c&amp;#34;子串&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">##&lt;/span>&lt;span class="s2">&amp;#34;a*c&amp;#34;&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 输出abbc,def,ghi,abcjkl 同理&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#*a*c*&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 空&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">##*a*c*&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 空&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#d*f) # 输出abbc,def,ghi,abcjkl,
&lt;/span>&lt;span class="p">echo &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">#*d*f&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p"> # 输出,ghi,abcjkl
&lt;/span>&lt;span class="p">
&lt;/span>&lt;span class="p">echo &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">%a*l&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p"> # abbc,def,ghi 一个百分号(%)表示从右边截取最短的匹配
&lt;/span>&lt;span class="p">echo &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">%%b*l&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p"> # a 两个百分号表示(%%)表示从右边截取最长的匹配
&lt;/span>&lt;span class="p">echo &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">%a*c&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p"> # abbc,def,ghi,abcjkl
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以这样记忆, 井号（#）通常用于表示一个数字，它是放在前面的；百分号（%）卸载数字的后面; 或者这样记忆，在键盘布局中，井号(#)总是位于百分号（%）的左边(即前面) :-)&lt;/p>
&lt;h2 id="字符串替换">字符串替换&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">str&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;apple, tree, apple tree&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">/apple/APPLE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 替换第一次出现的apple&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">//apple/APPLE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 替换所有apple&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">/#apple/APPLE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 如果字符串str以apple开头，则用APPLE替换它&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">/%apple/APPLE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 如果字符串str以apple结尾，则用APPLE替换它&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="比较">比较&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;a.txt&amp;#34;&lt;/span> &lt;span class="o">==&lt;/span> a* &lt;span class="o">]]&lt;/span> &lt;span class="c1"># 逻辑真 (pattern matching)&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;a.txt&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ .*&lt;span class="se">\.&lt;/span>txt &lt;span class="o">]]&lt;/span> &lt;span class="c1"># 逻辑真 (regex matching)&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="c1"># 逻辑真 (string comparision) &lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;11&amp;#34;&lt;/span> &amp;lt; &lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="c1"># 逻辑真 (string comparision), 按ascii值比较&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="连接">连接&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nv">s1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span>
&lt;span class="nv">s2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;world&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">s1&lt;/span>&lt;span class="si">}${&lt;/span>&lt;span class="nv">s2&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># 当然这样写 $s1$s2 也行，但最好加上大括号&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="8">
&lt;li>翻转&lt;/li>
&lt;/ol>
&lt;h2 id="正则">正则&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># !/bin/bash&lt;/span>
&lt;span class="c1"># Following regex is based on https://www.rfc-editor.org/rfc/rfc3986#appendix-B with&lt;/span>
&lt;span class="c1"># additional sub-expressions to split authority into userinfo, host and port&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="nb">readonly&lt;/span> &lt;span class="nv">URI_REGEX&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;^(([^:/?#]+):)?(//((([^:/?#]+)@)?([^:/?#]+)(:([0-9]+))?))?(/([^?#]*))(\?([^#]*))?(#(.*))?&amp;#39;&lt;/span>
&lt;span class="c1"># ↑↑ ↑ ↑↑↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑&lt;/span>
&lt;span class="c1"># |2 scheme | ||6 userinfo 7 host | 9 port | 11 rpath | 13 query | 15 fragment&lt;/span>
&lt;span class="c1"># 1 scheme: | |5 userinfo@ 8 :… 10 path 12 ?… 14 #…&lt;/span>
&lt;span class="c1"># | 4 authority&lt;/span>
&lt;span class="c1"># 3 //…&lt;/span>
parse_scheme &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ &lt;span class="nv">$URI_REGEX&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[2]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
parse_authority &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ &lt;span class="nv">$URI_REGEX&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[4]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
parse_user &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ &lt;span class="nv">$URI_REGEX&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[6]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
parse_host &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ &lt;span class="nv">$URI_REGEX&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[7]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
parse_port &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ &lt;span class="nv">$URI_REGEX&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[9]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
parse_path &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ &lt;span class="nv">$URI_REGEX&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[10]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
parse_rpath &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ &lt;span class="nv">$URI_REGEX&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[11]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
parse_query &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ &lt;span class="nv">$URI_REGEX&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[13]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
parse_fragment &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ &lt;span class="nv">$URI_REGEX&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[15]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nv">pattern&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;^(([[:alnum:]]+):\/\/)?(([[:alnum:]]+)@)?([^:^@\/]+)(:([[:digit:]]+))?(\/?[^:^@]?)$&amp;#39;&lt;/span>
&lt;span class="nv">url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://us@cos.com:3142/path&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$url&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span>~ &lt;span class="nv">$pattern&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nv">proto&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[2]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="nv">user&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[4]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="nv">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[5]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="nv">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[7]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="nv">path&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BASH_REMATCH&lt;/span>&lt;span class="p">[8]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;proto: &lt;/span>&lt;span class="nv">$proto&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;user: &lt;/span>&lt;span class="nv">$user&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;host: &lt;/span>&lt;span class="nv">$host&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;port: &lt;/span>&lt;span class="nv">$port&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;path= &lt;/span>&lt;span class="nv">$path&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;URL did not match pattern: &lt;/span>&lt;span class="nv">$url&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>ChubaoFS Master</title><link>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-master/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-master/</guid><description>&lt;h1 id="chubaofs-master">ChubaoFS Master&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="metanode管理">MetaNode管理&lt;/h2>
&lt;h3 id="metanode-是否可写">Metanode 是否可写&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>节点存活（isActive）: 心跳上报时间间隔&amp;lt;30s的节点isActive为false;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>metanode最大可用内存 &amp;gt; master配置中设置的metanode保留内存;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>metanode已用内存/metanode总内存 不高于限制比例 (默认: 0.75)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>metanode mp 数量 &amp;lt; 最大mp数量(默认：10000)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="主要数据结构">主要数据结构&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//master server
&lt;/span>&lt;span class="c1">//master 进程服务
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Server&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">cluster&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Cluster&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Cluster&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Name&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="nx">vols&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Vol&lt;/span>
&lt;span class="nx">dataNodes&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Map&lt;/span>
&lt;span class="nx">metaNodes&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Map&lt;/span>
&lt;span class="nx">fsm&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">MetadataFsm&lt;/span>
&lt;span class="nx">partition&lt;/span> &lt;span class="nx">raftstore&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Partition&lt;/span>
&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">topology&lt;/span>
&lt;span class="c1">//...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="启动">启动&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// cmd/cmd.go
&lt;/span>&lt;span class="c1">// 入口
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="nx">server&lt;/span> &lt;span class="o">:=-&lt;/span> &lt;span class="nx">master&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cfg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//
&lt;/span>&lt;span class="c1">// master/server.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">server&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">Start&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">newReverseProxy&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//启动反向代理服务
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">raftstore&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewRocksDBStore&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">createRaftServer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//创建raft服务
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">initCluster&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//初始化集群
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">initUser&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//初始化用户
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cluster&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">scheduleTask&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">startHTTPService&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">metricsService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Server&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">createRaftServer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">raftStore&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">raftstore&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewRaftStore&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">initFsm&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//--&amp;gt; loadMetadata()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Server&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">loadMetadata&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// master/cluster.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Cluster&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">scheduleTask&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">scheduleToCheckDataPartitions&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">scheduleToLoadDataPartitions&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">scheduleToCheckReleaseDataPartitions&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">scheduleToCheckHeartbeat&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">scheduleToCheckMetaPartitions&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">scheduleToUpdateStatInfo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">scheduleToCheckAutoDataPartitionCreation&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">scheduleToCheckVolStatus&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">scheduleToCheckDiskRecoveryProgress&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">scheduleToCheckMetaPartitionRecoveryProgress&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">scheduleToLoadMetaPartitions&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">scheduleToReduceReplicaNum&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="id分配">ID分配&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">IDAllocator&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">dataPartitionID&lt;/span> &lt;span class="kt">uint64&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="创建vol">创建Vol&lt;/h3>
&lt;p>chubaofs 创建vol由master的http提供接口，http uri为&lt;code>/admin/createVol&lt;/code>。流程如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>master接收到上述uri请求后，进入&lt;code>master/api_service.go&lt;/code>中的&lt;code>(m *Server)createVol()&lt;/code>；流程如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先解析参数；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后通过&lt;code>cluster.createVol()&lt;/code>创建vol；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>associateVolWithUser()&lt;/code>关联新建的卷和用户；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回结果给用户；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;code>cluster.createVol()&lt;/code>流程如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>checkVolInfo()&lt;/code>检查zone信息；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过&lt;code>(c *Cluster)doCreateVol()&lt;/code>在master内存中分配并初始化一个&lt;code>Vol&lt;/code>对象；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过&lt;code>vol.initMetaPartitions()&lt;/code>初始化vol的mp, 该命令会选择合适的metanode并在其上新建mp;&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="vol-zone信息">vol zone信息&lt;/h3>
&lt;h3 id="carry">Carry&lt;/h3>
&lt;p>master在创建dp，mp时，通过carry来选择有效的metanode，datanode进资源分配，保证资源均匀分布在各个节点上。&lt;/p>
&lt;h3 id="metapartition管理">metaPartition管理&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>master/meta_partition_manager.go&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>master开启一个后台goroutine, 默认每5秒检查一遍BadMetaPartitionIDs中个mp的状态；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>metapartition 各副本&lt;code>MaxInodeID&lt;/code>和第一个副本差距&amp;gt; 1000, 则将该分片IsRecover设为true，开启分片数据同步；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>ChubaoFS 基础</title><link>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="chubaofs-基础">ChubaoFS 基础&lt;/h1>
&lt;hr>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>ChubaoFS是一个开源的分布式文件存储系统，同时提供&lt;code>POSIX FS&lt;/code>和&lt;code>S3&lt;/code>两种访问接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2018年由JD TigLab开发，2020年加入CNCF基金会，现为CNCF沙箱项目；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ChubaoFS的设计之初是为大规模容器环境提供分布式的文件存储服务；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="特点">特点&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>高可扩展&lt;/strong>：ChubaoFS的所有组件都是支持分布式部署，数据资源通过分片实现横向扩展；&lt;/li>
&lt;li>&lt;strong>高可靠&lt;/strong>：各个资源节点通过multi-raft协议提供的多副本强一致性来保证数据的高可靠；&lt;/li>
&lt;li>&lt;strong>多协议支持&lt;/strong>：同时支持POSIX FS 和S3 协议；&lt;/li>
&lt;li>&lt;strong>大小文件优化&lt;/strong>：ChubaoFS对于大小文件在底层，使用不同的方式进行优化，同时兼顾了大小文件的性能和存储开销；&lt;/li>
&lt;li>&lt;strong>多写入模式支持&lt;/strong>：同时支持顺序写、随机写2种写入模式；&lt;/li>
&lt;li>&lt;strong>动态资源调度&lt;/strong>：ChubaoFS的资源管理基于负载的动态调度算法，能合理分配资源，调度资源，避免热点；&lt;/li>
&lt;li>&lt;strong>部署简便&lt;/strong>：各组件部署不依赖其他组件，部署方便；同时提供docker，k8s容器部署组件；&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/09/18-11-38-03-2021-09-18-11-37-54-image.png" alt="">&lt;/p>
&lt;hr>
&lt;h2 id="组件">组件&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>资源管理节点&lt;/strong>(&lt;code>Master&lt;/code>)：执行集群资源管理、分配、调度的节点，资源管理节点只参与资源管理和调度，不进行具体的数据读写；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>元数据节点&lt;/strong>(&lt;code>MetaNode&lt;/code>)：提供文件元数据(&lt;code>Meta&lt;/code>)管理、存储服务的节点，文件元数据包括inode、dentry、extend等，通过分片(&lt;code>MetaParitition&lt;/code>)分布到不同的元数据节点，通过multi-raft保证多副本一致性；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据节点&lt;/strong>(&lt;code>DataNode&lt;/code>)：提供文件数据(&lt;code>Data&lt;/code>)管理、存储服务的节点，文件数据通过数据分片(&lt;code>DataPartition&lt;/code>)分布到不同的数据节点，通过多副本保证数据高可用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象存储节点&lt;/strong>(&lt;code>ObjectNode&lt;/code>): 提供S3访问服务的节点，&lt;code>ObjectNode&lt;/code>节点主要提供S3协议解析及uri映射功能，为无状态节点，可以动态部署；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Fuse客户端&lt;/strong>(&lt;code>Client&lt;/code>): Fuse客户端为用户提供POSIX FS文件访问接口；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="基础概念">基础概念&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>集群&lt;/strong>(&lt;code>Cluster&lt;/code>)：一组建立副本关系的&lt;code>Master&lt;/code>和由其管理的&lt;code>MetaNode&lt;/code>, &lt;code>DataNode&lt;/code>, &lt;code>ObjectNode&lt;/code>节点构成一个集群；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>卷&lt;/strong>（&lt;code>Volume&lt;/code>）：卷是一个逻辑视图，每个卷由一组相关的&lt;code>MetaPartition&lt;/code>, 数据分组&lt;code>DataPartition&lt;/code>组合；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据分片&lt;/strong>（&lt;code>DataPartition&lt;/code>）: 数据分片是文件数据管理的单元，chubaofs在数据分片为单位来实现数据的分布，复制等管理，从而实现数据的扩展和高可用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>元数据分片&lt;/strong>（&lt;code>MetaPartition&lt;/code>）: 元数据分片是文件元数据管理单元；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>副本组&lt;/strong>（&lt;code>Replicas&lt;/code>）：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据集&lt;/strong>（&lt;code>Extent&lt;/code>）:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="资源管理">资源管理&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Master是chubaofs系统中进行资源管理、分配的组件;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Master主要管理chubaofs集群中的所有元数据节点(metanode)，数据节点(datanode)及这些节点上的mp,dp等资源；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Master通过raft来实现多节点部署时的数据同步，以提供master的高可用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Master只有一个Leader节点提供服务，非Leader节点只作为备份节点，只是作为Leader节点的数据副本；当发生Leader切换时，新当选的Leader提供继续提供服务；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Master只参与资源管理和分配，不参与具体的读写流程，轻量化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Master主要管理的资源包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>MetaNode节点管理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DataNode节点管理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Volume资源管理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用户管理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>状态监测；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="元数据管理">元数据管理&lt;/h2>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="数据管理">数据管理&lt;/h2>
&lt;ul>
&lt;li>
&lt;hr>
&lt;/li>
&lt;/ul>
&lt;h3 id="fuseclient">FuseClient&lt;/h3>
&lt;hr>
&lt;h3 id="s3">S3&lt;/h3>
&lt;hr>
&lt;h3 id="加载volume">加载Volume&lt;/h3>
&lt;hr>
&lt;h3 id="数据修复">数据修复&lt;/h3>
&lt;hr>
&lt;h2 id="未来">未来&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>metanode内存优化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>datanode nvme+spdk优化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>网络库优化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>raft 优化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>web console；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>EC node；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="http://chubao.io/">http://chubao.io/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://chubaofs.readthedocs.io/">https://chubaofs.readthedocs.io/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cncf.io/projects/chubaofs/">ChubaoFS | Cloud Native Computing Foundation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/chubaofs/chubaofs">GitHub - chubaofs/chubaofs: ChubaoFS (abbrev. CBFS) is a cloud native distributed file system and object store.&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>PromQL查询语言</title><link>https://justice.bj.cn/post/36.monitor/prometheus/prometheus%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/36.monitor/prometheus/prometheus%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</guid><description>&lt;h1 id="promql查询语言">PromQL查询语言&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>PromQL（Prometheus Query Language）是 Prometheus 自己开发的表达式语言，语言表现力很丰富，内置函数也很多。使用它可以对时序数据进行筛选和聚合。&lt;/p>
&lt;h3 id="1-promql-语法">1. PromQL 语法&lt;/h3>
&lt;h4 id="11-数据类型">1.1 数据类型&lt;/h4>
&lt;p>PromQL 表达式计算出来的值有以下几种类型：&lt;/p>
&lt;ul>
&lt;li>瞬时向量 (Instant vector): 一组时序，每个时序只有一个采样值&lt;/li>
&lt;li>区间向量 (Range vector): 一组时序，每个时序包含一段时间内的多个采样值&lt;/li>
&lt;li>标量数据 (Scalar): 一个浮点数&lt;/li>
&lt;li>字符串 (String): 一个字符串，暂时未用&lt;/li>
&lt;/ul>
&lt;h4 id="12-时序选择器">1.2 时序选择器&lt;/h4>
&lt;h5 id="121-瞬时向量选择器">1.2.1 瞬时向量选择器&lt;/h5>
&lt;p>瞬时向量选择器用来选择&lt;strong>一组时序在某个采样点的采样值&lt;/strong>。&lt;/p>
&lt;p>最简单的情况就是指定一个度量指标，选择出所有属于该度量指标的时序的当前采样值。比如下面的表达式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">http_requests_total
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以通过在后面添加用大括号包围起来的一组标签键值对来对时序进行过滤。比如下面的表达式筛选出了 &lt;code>job&lt;/code> 为 &lt;code>prometheus&lt;/code>，并且 &lt;code>group&lt;/code> 为 &lt;code>canary&lt;/code> 的时序：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="n">http_requests_total&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">job&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;prometheus&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">group&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;canary&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>匹配标签值时可以是&lt;strong>等于&lt;/strong>，也可以&lt;strong>使用正则表达式&lt;/strong>。总共有下面几种匹配操作符：&lt;/p>
&lt;ul>
&lt;li>&lt;code>=&lt;/code>：完全相等&lt;/li>
&lt;li>&lt;code>!=&lt;/code>： 不相等&lt;/li>
&lt;li>&lt;code>=~&lt;/code>： 正则表达式匹配&lt;/li>
&lt;li>&lt;code>!~&lt;/code>： 正则表达式不匹配&lt;/li>
&lt;/ul>
&lt;p>下面的表达式筛选出了 environment 为 staging 或 testing 或 development，并且 method 不是 GET 的时序：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">http_requests_total&lt;span class="o">{&lt;/span>&lt;span class="nv">environment&lt;/span>&lt;span class="o">=&lt;/span>~&lt;span class="s2">&amp;#34;staging|testing|development&amp;#34;&lt;/span>,method!&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;GET&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>度量指标名可以使用内部标签 &lt;code>__name__&lt;/code> 来匹配，表达式 &lt;code>http_requests_total&lt;/code> 也可以写成 &lt;code>{__name__=&amp;quot;http_requests_total&amp;quot;}&lt;/code>。表达式 &lt;code>{__name__=~&amp;quot;job:.*&amp;quot;}&lt;/code> 匹配所有度量指标名称以 &lt;code>job:&lt;/code> 打头的时序。&lt;/p>
&lt;h5 id="122-区间向量选择器">1.2.2 区间向量选择器&lt;/h5>
&lt;p>区间向量选择器类似于瞬时向量选择器，不同的是它选择的是&lt;strong>过去一段时间的采样值&lt;/strong>。可以通过在瞬时向量选择器后面添加包含在 &lt;code>[]&lt;/code> 里的时长来得到区间向量选择器。比如下面的表达式选出了所有度量指标为 &lt;code>http_requests_total&lt;/code> 且 &lt;code>job&lt;/code> 为 &lt;code>prometheus&lt;/code> 的时序在过去 5 分钟的采样值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">http_requests_total&lt;span class="o">{&lt;/span>&lt;span class="nv">job&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;prometheus&amp;#34;&lt;/span>&lt;span class="o">}[&lt;/span>5m&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>说明：时长的单位可以是下面几种之一：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>s：seconds&lt;/li>
&lt;li>m：minutes&lt;/li>
&lt;li>h：hours&lt;/li>
&lt;li>d：days&lt;/li>
&lt;li>w：weeks&lt;/li>
&lt;li>y：years&lt;/li>
&lt;/ul>
&lt;h5 id="123-偏移修饰器">1.2.3 偏移修饰器&lt;/h5>
&lt;p>前面介绍的选择器默认都是以当前时间为基准时间，偏移修饰器用来调整基准时间，使其往前偏移一段时间。偏移修饰器紧跟在选择器后面，使用 offset 来指定要偏移的量。比如下面的表达式选择度量名称为 &lt;code>http_requests_total&lt;/code> 的所有时序在 &lt;code>5&lt;/code> 分钟前的采样值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">http_requests_total offset 5m
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的表达式选择 &lt;code>http_requests_total&lt;/code> 度量指标在 &lt;code>1&lt;/code> 周前的这个时间点过去 5 分钟的采样值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="nt">http_requests_total&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="nt">5m&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="nt">offset&lt;/span> &lt;span class="nt">1w&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2-promql-操作符">2. PromQL 操作符&lt;/h3>
&lt;h4 id="21-二元操作符">2.1 二元操作符&lt;/h4>
&lt;p>PromQL 的二元操作符支持基本的逻辑和算术运算，包含&lt;strong>算术类&lt;/strong>、&lt;strong>比较类&lt;/strong>和&lt;strong>逻辑类&lt;/strong>三大类。&lt;/p>
&lt;h5 id="211-算术类二元操作符">2.1.1 算术类二元操作符&lt;/h5>
&lt;p>算术类二元操作符有以下几种：&lt;/p>
&lt;ul>
&lt;li>&lt;code>+&lt;/code>：加&lt;/li>
&lt;li>&lt;code>-&lt;/code>：减&lt;/li>
&lt;li>&lt;code>*&lt;/code>：乘&lt;/li>
&lt;li>&lt;code>/&lt;/code>：除&lt;/li>
&lt;li>&lt;code>%&lt;/code>：求余&lt;/li>
&lt;li>&lt;code>^&lt;/code>：乘方&lt;/li>
&lt;/ul>
&lt;p>算术类二元操作符可以使用在标量与标量、向量与标量，以及向量与向量之间。&lt;/p>
&lt;p>&lt;strong>二元操作符上下文里的向量特指瞬时向量，不包括区间向量。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>标量与标量之间，结果很明显，跟通常的算术运算一致。&lt;/li>
&lt;li>向量与标量之间，相当于把标量跟向量里的每一个标量进行运算，这些计算结果组成了一个新的向量。&lt;/li>
&lt;li>向量与向量之间，会稍微麻烦一些。运算的时候首先会为左边向量里的每一个元素在右边向量里去寻找一个匹配元素（匹配规则后面会讲），然后对这两个匹配元素执行计算，这样每对匹配元素的计算结果组成了一个新的向量。如果没有找到匹配元素，则该元素丢弃。&lt;/li>
&lt;/ul>
&lt;h5 id="212-比较类二元操作符">2.1.2 比较类二元操作符&lt;/h5>
&lt;p>比较类二元操作符有以下几种：&lt;/p>
&lt;ul>
&lt;li>&lt;code>==&lt;/code> (equal)&lt;/li>
&lt;li>&lt;code>!=&lt;/code> (not-equal)&lt;/li>
&lt;li>&lt;code>&amp;gt;&lt;/code> (greater-than)&lt;/li>
&lt;li>&lt;code>&amp;lt;&lt;/code> (less-than)&lt;/li>
&lt;li>&lt;code>&amp;gt;=&lt;/code> (greater-or-equal)&lt;/li>
&lt;li>&lt;code>&amp;lt;=&lt;/code> (less-or-equal)&lt;/li>
&lt;/ul>
&lt;p>比较类二元操作符同样可以使用在标量与标量、向量与标量，以及向量与向量之间。默认执行的是过滤，也就是保留值。&lt;/p>
&lt;p>也可以通过在运算符后面跟 bool 修饰符来使得返回值 0 和 1，而不是过滤。&lt;/p>
&lt;ul>
&lt;li>标量与标量之间，必须跟 bool 修饰符，因此结果只可能是 0（false） 或 1（true）。&lt;/li>
&lt;li>向量与标量之间，相当于把向量里的每一个标量跟标量进行比较，结果为真则保留，否则丢弃。如果后面跟了 bool 修饰符，则结果分别为 1 和 0。&lt;/li>
&lt;li>向量与向量之间，运算过程类似于算术类操作符，只不过如果比较结果为真则保留左边的值（包括度量指标和标签这些属性），否则丢弃，没找到匹配也是丢弃。如果后面跟了 bool 修饰符，则保留和丢弃时结果相应为 1 和 0。&lt;/li>
&lt;/ul>
&lt;h5 id="213-逻辑类二元操作符">2.1.3 逻辑类二元操作符&lt;/h5>
&lt;p>逻辑操作符仅用于向量与向量之间。&lt;/p>
&lt;ul>
&lt;li>&lt;code>and&lt;/code>：交集&lt;/li>
&lt;li>&lt;code>or&lt;/code>：合集&lt;/li>
&lt;li>&lt;code>unless&lt;/code>：补集&lt;/li>
&lt;/ul>
&lt;p>具体运算规则如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>vector1 and vector2&lt;/code> 的结果由在 vector2 里有匹配（标签键值对组合相同）元素的 vector1 里的元素组成。&lt;/li>
&lt;li>&lt;code>vector1 or vector2&lt;/code> 的结果由所有 vector1 里的元素加上在 vector1 里没有匹配（标签键值对组合相同）元素的 vector2 里的元素组成。&lt;/li>
&lt;li>&lt;code>vector1 unless vector2&lt;/code> 的结果由在 vector2 里没有匹配（标签键值对组合相同）元素的 vector1 里的元素组成。&lt;/li>
&lt;/ul>
&lt;h5 id="214-二元操作符优先级">2.1.4 二元操作符优先级&lt;/h5>
&lt;p>PromQL 的各类二元操作符运算优先级如下：&lt;/p>
&lt;ol>
&lt;li>&lt;code>^&lt;/code>&lt;/li>
&lt;li>&lt;code>*, /, %&lt;/code>&lt;/li>
&lt;li>&lt;code>+, -&lt;/code>&lt;/li>
&lt;li>&lt;code>==, !=, &amp;lt;=, &amp;lt;, &amp;gt;=, &amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>and, unless&lt;/code>&lt;/li>
&lt;li>&lt;code>or&lt;/code>&lt;/li>
&lt;/ol>
&lt;h4 id="22-向量匹配">2.2 向量匹配&lt;/h4>
&lt;p>前面算术类和比较类操作符都需要在向量之间进行匹配。共有两种匹配类型，&lt;code>one-to-one&lt;/code> 和 &lt;code>many-to-one&lt;/code> / &lt;code>one-to-many&lt;/code>。&lt;/p>
&lt;h5 id="221-one-to-one-向量匹配">2.2.1 One-to-one 向量匹配&lt;/h5>
&lt;p>这种匹配模式下，两边向量里的元素如果其标签键值对组合相同则为匹配，并且只会有一个匹配元素。可以使用 &lt;code>ignoring&lt;/code> 关键词来忽略不参与匹配的标签，或者使用 &lt;code>on&lt;/code> 关键词来指定要参与匹配的标签。语法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;vector&lt;/span> &lt;span class="err">expr&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span> &lt;span class="nt">&amp;lt;bin-op&amp;gt;&lt;/span> ignoring(&lt;span class="nt">&amp;lt;label&lt;/span> &lt;span class="err">list&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>) &lt;span class="nt">&amp;lt;vector&lt;/span> &lt;span class="err">expr&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;vector&lt;/span> &lt;span class="err">expr&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span> &lt;span class="nt">&amp;lt;bin-op&amp;gt;&lt;/span> on(&lt;span class="nt">&amp;lt;label&lt;/span> &lt;span class="err">list&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>) &lt;span class="nt">&amp;lt;vector&lt;/span> &lt;span class="err">expr&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>比如对于下面的输入：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">method_code:http_errors:rate5m&lt;span class="o">{&lt;/span>&lt;span class="nv">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>, &lt;span class="nv">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;500&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">24&lt;/span>
method_code:http_errors:rate5m&lt;span class="o">{&lt;/span>&lt;span class="nv">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>, &lt;span class="nv">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;404&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">30&lt;/span>
method_code:http_errors:rate5m&lt;span class="o">{&lt;/span>&lt;span class="nv">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;put&amp;#34;&lt;/span>, &lt;span class="nv">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;501&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">3&lt;/span>
method_code:http_errors:rate5m&lt;span class="o">{&lt;/span>&lt;span class="nv">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;post&amp;#34;&lt;/span>, &lt;span class="nv">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;500&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">6&lt;/span>
method_code:http_errors:rate5m&lt;span class="o">{&lt;/span>&lt;span class="nv">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;post&amp;#34;&lt;/span>, &lt;span class="nv">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;404&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">21&lt;/span>
method:http_requests:rate5m&lt;span class="o">{&lt;/span>&lt;span class="nv">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">600&lt;/span>
method:http_requests:rate5m&lt;span class="o">{&lt;/span>&lt;span class="nv">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;del&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">34&lt;/span>
method:http_requests:rate5m&lt;span class="o">{&lt;/span>&lt;span class="nv">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;post&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="m">120&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行下面的查询：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">method_code:http_errors:rate5m&lt;span class="o">{&lt;/span>&lt;span class="nv">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;500&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span> / ignoring&lt;span class="o">(&lt;/span>code&lt;span class="o">)&lt;/span> method:http_requests:rate5m
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>得到的结果为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="p">{&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mf">0.04&lt;/span> &lt;span class="c1">// 24 / 600
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;post&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mf">0.05&lt;/span> &lt;span class="c1">// 6 / 120
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也就是每一种 method 里 code 为 500 的请求数占总数的百分比。由于 method 为 put 和 del 的没有匹配元素所以没有出现在结果里。&lt;/p>
&lt;h5 id="222-many-to-one--one-to-many-向量匹配">2.2.2 Many-to-one / one-to-many 向量匹配&lt;/h5>
&lt;p>这种匹配模式下，某一边会有多个元素跟另一边的元素匹配。这时就需要使用 &lt;code>group_left&lt;/code> 或 &lt;code>group_right&lt;/code> 组修饰符来指明哪边匹配元素较多，左边多则用 &lt;code>group_left&lt;/code>，右边多则用 &lt;code>group_right&lt;/code>。其语法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;vector&lt;/span> &lt;span class="err">expr&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span> &lt;span class="nt">&amp;lt;bin-op&amp;gt;&lt;/span> ignoring(&lt;span class="nt">&amp;lt;label&lt;/span> &lt;span class="err">list&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>) group_left(&lt;span class="nt">&amp;lt;label&lt;/span> &lt;span class="err">list&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>) &lt;span class="nt">&amp;lt;vector&lt;/span> &lt;span class="err">expr&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;vector&lt;/span> &lt;span class="err">expr&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span> &lt;span class="nt">&amp;lt;bin-op&amp;gt;&lt;/span> ignoring(&lt;span class="nt">&amp;lt;label&lt;/span> &lt;span class="err">list&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>) group_right(&lt;span class="nt">&amp;lt;label&lt;/span> &lt;span class="err">list&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>) &lt;span class="nt">&amp;lt;vector&lt;/span> &lt;span class="err">expr&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;vector&lt;/span> &lt;span class="err">expr&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span> &lt;span class="nt">&amp;lt;bin-op&amp;gt;&lt;/span> on(&lt;span class="nt">&amp;lt;label&lt;/span> &lt;span class="err">list&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>) group_left(&lt;span class="nt">&amp;lt;label&lt;/span> &lt;span class="err">list&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>) &lt;span class="nt">&amp;lt;vector&lt;/span> &lt;span class="err">expr&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;vector&lt;/span> &lt;span class="err">expr&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span> &lt;span class="nt">&amp;lt;bin-op&amp;gt;&lt;/span> on(&lt;span class="nt">&amp;lt;label&lt;/span> &lt;span class="err">list&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>) group_right(&lt;span class="nt">&amp;lt;label&lt;/span> &lt;span class="err">list&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>) &lt;span class="nt">&amp;lt;vector&lt;/span> &lt;span class="err">expr&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>组修饰符只适用于算术类和比较类操作符。&lt;/strong>&lt;/p>
&lt;p>对于前面的输入，执行下面的查询：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">method_code:http_errors:rate5m / ignoring(code) group_left method:http_requests:rate5m
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将得到下面的结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="p">{&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;500&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mf">0.04&lt;/span> &lt;span class="c1">// 24 / 600
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;404&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mf">0.05&lt;/span> &lt;span class="c1">// 30 / 600
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;post&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;500&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mf">0.05&lt;/span> &lt;span class="c1">// 6 / 120
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;post&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;404&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mf">0.175&lt;/span> &lt;span class="c1">// 21 / 120
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也就是每种 method 的每种 code 错误次数占每种 method 请求数的比例。这里匹配的时候 ignoring 了 code，才使得两边可以形成 Many-to-one 形式的匹配。由于左边多，所以需要使用 group_left 来指明。&lt;/p>
&lt;p>Many-to-one / one-to-many 过于高级和复杂，要尽量避免使用。很多时候通过 ignoring 就可以解决问题。&lt;/p>
&lt;h4 id="23-聚合操作符">2.3 聚合操作符&lt;/h4>
&lt;p>PromQL 的聚合操作符用来将向量里的元素聚合得更少。总共有下面这些聚合操作符：&lt;/p>
&lt;ul>
&lt;li>sum：求和&lt;/li>
&lt;li>min：最小值&lt;/li>
&lt;li>max：最大值&lt;/li>
&lt;li>avg：平均值&lt;/li>
&lt;li>stddev：标准差&lt;/li>
&lt;li>stdvar：方差&lt;/li>
&lt;li>count：元素个数&lt;/li>
&lt;li>count_values：等于某值的元素个数&lt;/li>
&lt;li>bottomk：最小的 k 个元素&lt;/li>
&lt;li>topk：最大的 k 个元素&lt;/li>
&lt;li>quantile：分位数&lt;/li>
&lt;/ul>
&lt;p>聚合操作符语法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;aggr-op&amp;gt;&lt;/span>([parameter,] &lt;span class="nt">&amp;lt;vector&lt;/span> &lt;span class="err">expression&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>) [without|by (&lt;span class="nt">&amp;lt;label&lt;/span> &lt;span class="err">list&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>)]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 &lt;code>without&lt;/code> 用来指定不需要保留的标签（也就是这些标签的多个值会被聚合），而 &lt;code>by&lt;/code> 正好相反，用来指定需要保留的标签（也就是按这些标签来聚合）。&lt;/p>
&lt;p>下面来看几个示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">sum(http_requests_total) without (instance)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>http_requests_total 度量指标带有 application、instance 和 group 三个标签。上面的表达式会得到每个 application 的每个 group 在所有 instance 上的请求总数。效果等同于下面的表达式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="n">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">http_requests_total&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">application&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">group&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的表达式可以得到所有 application 的所有 group 的所有 instance 的请求总数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">sum(http_requests_total)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3-函数">3. 函数&lt;/h3>
&lt;p>Prometheus 内置了一些函数来辅助计算，下面介绍一些典型的。&lt;/p>
&lt;ul>
&lt;li>abs()：绝对值&lt;/li>
&lt;li>sqrt()：平方根&lt;/li>
&lt;li>exp()：指数计算&lt;/li>
&lt;li>ln()：自然对数&lt;/li>
&lt;li>ceil()：向上取整&lt;/li>
&lt;li>floor()：向下取整&lt;/li>
&lt;li>round()：四舍五入取整&lt;/li>
&lt;li>delta()：计算区间向量里每一个时序第一个和最后一个的差值&lt;/li>
&lt;li>sort()：排序&lt;/li>
&lt;/ul>
&lt;h3 id="删除指标">删除指标&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">## 删除consul指标&lt;/span>
&lt;span class="nv">CONSUL_URL&lt;/span>&lt;span class="o">=&lt;/span>http://10.201.70.57:8500
&lt;span class="k">for&lt;/span> key in &lt;span class="sb">`&lt;/span>curl -X GET &lt;span class="s1">&amp;#39;http://10.201.70.57:8500/v1/agent/services&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> jq -r &lt;span class="s1">&amp;#39;to_entries|.[] | select(.value.Address == &amp;#34;10.201.86.17&amp;#34; ) | .key&amp;#39;&lt;/span>&lt;span class="sb">`&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;key: &lt;/span>&lt;span class="nv">$key&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> curl -v -X PUT &lt;span class="s2">&amp;#34;http://10.201.70.57:8500/v1/agent/service/deregister/&lt;/span>&lt;span class="nv">$key&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="k">done&lt;/span>
&lt;span class="c1">## prometheus&lt;/span>
$ prometheus --web.enable-admin-api
$ curl -X POST -g &lt;span class="s1">&amp;#39;http://10.201.70.57:9090/api/v1/admin/tsdb/delete_series?match[]={cluster=&amp;#34;chubaofs-test-03&amp;#34;}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>vim</title><link>https://justice.bj.cn/post/70.tool/vim/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/vim/</guid><description>&lt;h1 id="vim">vim&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="基本操作">基本操作&lt;/h2>
&lt;h3 id="设置">设置&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">
## 查看设置
:set shiftwidth?
:echo &amp;amp;option
## 重置为默认值
:set option&amp;amp;
## 查看option设置 在哪里配置
:verbose set option?
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="增加markdown-tagbar">增加markdown tagbar&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>~/.ctags 中增加:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> --langdef=markdown
--langmap=markdown:.md
--regex-markdown=/^#{1}[ \t]*([^#]+.*)/. \1/h,headings/
--regex-markdown=/^#{2}[ \t]*([^#]+.*)/. \1/h,headings/
--regex-markdown=/^#{3}[ \t]*([^#]+.*)/. \1/h,headings/
--regex-markdown=/^#{4}[ \t]*([^#]+.*)/. \1/h,headings/
--regex-markdown=/^#{5}[ \t]*([^#]+.*)/. \1/h,headings/
--regex-markdown=/^#{6}[ \t]*([^#]+.*)/. \1/h,headings/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>vimrc tagbar中增加如下设置:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-vim" data-lang="vim"> &lt;span class="k">let&lt;/span> &lt;span class="nx">g&lt;/span>:&lt;span class="nx">tagbar_type_markdown&lt;/span> &lt;span class="p">=&lt;/span> {&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> \ &lt;span class="s1">&amp;#39;ctagstype&amp;#39;&lt;/span> : &lt;span class="s1">&amp;#39;markdown&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> \ &lt;span class="s1">&amp;#39;kinds&amp;#39;&lt;/span> : [&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> \ &lt;span class="s1">&amp;#39;h:headings&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> \ ]&lt;span class="p">,&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> \ &lt;span class="s1">&amp;#39;sort&amp;#39;&lt;/span> : &lt;span class="m">0&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> \ }&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="大小写转换">大小写转换&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">转换小写：u
转换大写：U
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="错误排查">错误排查&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ nvim -u NORC
:CheckHealth
$ vim --startuptime tmp.txt &lt;span class="c1">#查看启动时间&lt;/span>
$ strace -f -T -o vim.strace vim &lt;span class="c1">#&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="去掉json自动隐藏引号">去掉JSON自动隐藏引号&lt;/h3>
&lt;p>&lt;strong>: set cole&amp;amp;&lt;/strong>&lt;/p>
&lt;h3 id="去掉m">去掉&lt;code>^M&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-vim" data-lang="vim">&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="基本操作-1">基本操作&lt;/h2>
&lt;h3 id="光标命令">光标命令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ada" data-lang="ada">&lt;span class="n">h&lt;/span> &lt;span class="n">左移一个字符&lt;/span>
&lt;span class="n">l&lt;/span> &lt;span class="n">右移一个字符&lt;/span>
&lt;span class="n">j&lt;/span> &lt;span class="n">下移一行&lt;/span>
&lt;span class="n">k&lt;/span> &lt;span class="n">上移一行&lt;/span>
&lt;span class="n">w&lt;/span> &lt;span class="n">前移一个单词&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">光标停在下一个单词开头&lt;/span>
&lt;span class="n">W&lt;/span> &lt;span class="n">移动下一个单词开头&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">但忽略一些标点&lt;/span>
&lt;span class="n">e&lt;/span> &lt;span class="n">前移一个单词&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">光标停在下一个单词末尾&lt;/span>
&lt;span class="n">E&lt;/span> &lt;span class="n">移动到下一个单词末尾&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">如果词尾有标点&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">则移动到标点&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="n">后移一个单词&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">光标停在上一个单词开头&lt;/span>
&lt;span class="n">B&lt;/span> &lt;span class="n">移动到上一个单词开头&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">忽略一些标点&lt;/span>
&lt;span class="p">(&lt;/span> &lt;span class="n">前移1句&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="n">后移1句&lt;/span>
&lt;span class="err">{&lt;/span> &lt;span class="n">前移1段&lt;/span>
&lt;span class="err">}&lt;/span> &lt;span class="n">后移1段&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="滚屏命令">滚屏命令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ada" data-lang="ada">&lt;span class="n">ctrl&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">f&lt;/span> &lt;span class="n">下翻一屏&lt;/span>
&lt;span class="n">ctrl&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="n">上翻一屏&lt;/span>
&lt;span class="n">ctrl&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">d&lt;/span> &lt;span class="n">下翻半屏&lt;/span>
&lt;span class="n">ctrl&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">u&lt;/span> &lt;span class="n">上翻半屏&lt;/span>
&lt;span class="n">ctrl&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="n">向下滚动一行&lt;/span>
&lt;span class="n">ctrl&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="n">向上滚动一行&lt;/span>
&lt;span class="n">n&lt;/span>&lt;span class="err">%&lt;/span> &lt;span class="n">到文件n&lt;/span>&lt;span class="err">%&lt;/span>&lt;span class="n">的位置&lt;/span>
&lt;span class="n">zz&lt;/span> &lt;span class="n">将当前行移动到屏幕中央&lt;/span>
&lt;span class="n">zt&lt;/span> &lt;span class="n">将当前行移动到屏幕顶端&lt;/span>
&lt;span class="n">zb&lt;/span> &lt;span class="n">将当前行移动到屏幕底端&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="插入命令">插入命令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ada" data-lang="ada">&lt;span class="n">第一部分&lt;/span> &lt;span class="n">基本插入&lt;/span>
&lt;span class="n">I&lt;/span> &lt;span class="n">在当前行第一个非空字符前插入&lt;/span>
&lt;span class="n">gI&lt;/span> &lt;span class="n">在当前行第一列插入&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="n">在光标后插入&lt;/span>
&lt;span class="n">A&lt;/span> &lt;span class="n">在当前行最后插入&lt;/span>
&lt;span class="n">o&lt;/span> &lt;span class="n">在下面新建一行插入&lt;/span>
&lt;span class="n">O&lt;/span> &lt;span class="n">在上面新建一行插入&lt;/span>
&lt;span class="n">第二部分&lt;/span> &lt;span class="n">改写插入&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">w&lt;/span> &lt;span class="n">改写光标后1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">个词&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">l&lt;/span> &lt;span class="n">改写光标后n个字母&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">l&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">vim中光标右移一个字符命令&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">c&lt;/span>&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="n">改写光标前n个字母&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">vim中光标左移一个字符命令&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">cc&lt;/span> &lt;span class="n">修改当前&lt;/span>&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">行&lt;/span>
&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="n">以输入的文本替代光标之后1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">个字符&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">相当于c&lt;/span>&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">l&lt;/span>
&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">S&lt;/span> &lt;span class="n">删除指定数目的行&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">并以所输入文本代替之&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="复制命令">复制命令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ada" data-lang="ada">&lt;span class="n">y&lt;/span> &lt;span class="n">复制在可视模式下选中的文本&lt;/span>
&lt;span class="n">yy&lt;/span> &lt;span class="kr">or&lt;/span> &lt;span class="n">Y&lt;/span> &lt;span class="n">复制整行文本&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">w&lt;/span> &lt;span class="n">复制一&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">个词&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">l&lt;/span> &lt;span class="n">复制光标右边1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">个字符&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="n">复制光标左边1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">个字符&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="err">$&lt;/span> &lt;span class="n">从光标当前位置复制到行尾&lt;/span>
&lt;span class="n">y0&lt;/span> &lt;span class="n">从光标当前位置复制到行首&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="剪切和粘贴命令">剪切和粘贴命令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ada" data-lang="ada">&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="n">剪切光标右边n个字符&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">相当于d&lt;/span>&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">l&lt;/span>
&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">X&lt;/span> &lt;span class="n">剪切光标左边n个字符&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">相当于d&lt;/span>&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">h&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="n">在光标之后粘贴&lt;/span>
&lt;span class="n">P&lt;/span> &lt;span class="n">在光标之前粘贴&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="删除命令">删除命令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ada" data-lang="ada">&lt;span class="n">d&lt;/span> &lt;span class="n">删除&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="n">剪切&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="n">在可视模式下选中的文本&lt;/span>
&lt;span class="n">d&lt;/span>&lt;span class="err">$&lt;/span> &lt;span class="kr">or&lt;/span> &lt;span class="n">D&lt;/span> &lt;span class="n">删除&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="n">剪切&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="n">当前位置到行尾的内容&lt;/span>
&lt;span class="n">d&lt;/span>&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">w&lt;/span> &lt;span class="n">删除&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="n">剪切&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">个单词&lt;/span>
&lt;span class="n">d&lt;/span>&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">l&lt;/span> &lt;span class="n">删除&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="n">剪切&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="n">光标右边1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">个字符&lt;/span>
&lt;span class="n">d&lt;/span>&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="n">删除&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="n">剪切&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="n">光标左边1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">个字符&lt;/span>
&lt;span class="n">d0&lt;/span> &lt;span class="n">删除&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="n">剪切&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="n">当前位置到行首的内容&lt;/span>
&lt;span class="err">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="err">]&lt;/span> &lt;span class="n">dd&lt;/span> &lt;span class="n">删除&lt;/span>&lt;span class="err">（&lt;/span>&lt;span class="n">剪切&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">行&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="撤销命令">撤销命令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ada" data-lang="ada">&lt;span class="n">u&lt;/span> &lt;span class="n">撤销最后执行的命令&lt;/span>
&lt;span class="n">U&lt;/span> &lt;span class="n">撤销对整行的修改&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="查找命令">查找命令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ada" data-lang="ada">&lt;span class="o">/&lt;/span>&lt;span class="n">word&lt;/span> &lt;span class="n">在后面的文本中查找word&lt;/span>
&lt;span class="err">?&lt;/span>&lt;span class="n">word&lt;/span> &lt;span class="n">在前面的文本中查找word&lt;/span>
&lt;span class="o">/&lt;/span>&lt;span class="n">pattern&lt;/span>&lt;span class="o">/+&lt;/span>&lt;span class="n">number&lt;/span> &lt;span class="n">将光标停在包含pattern的行后面第number行上&lt;/span>
&lt;span class="o">/&lt;/span>&lt;span class="n">pattern&lt;/span>&lt;span class="o">/-&lt;/span>&lt;span class="n">number&lt;/span> &lt;span class="n">将光标停在包含pattern的行前面第number行上&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="n">向后查找下一个&lt;/span>
&lt;span class="n">N&lt;/span> &lt;span class="n">向前查找下一个&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="替换命令">替换命令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ada" data-lang="ada">&lt;span class="p">:&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">old&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="kr">new&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">g&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">可以替换&lt;/span> &lt;span class="n">old&lt;/span> &lt;span class="n">为&lt;/span> &lt;span class="kr">new&lt;/span>
&lt;span class="n">替换两行之间出现的每个匹配串&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">操作如下&lt;/span>
&lt;span class="p">:&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">old&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="kr">new&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">g&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">其中&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="n">代表的是替换操作的若干行中首尾两行的行号&lt;/span>&lt;span class="err">。&lt;/span>
&lt;span class="p">:&lt;/span>&lt;span class="err">%&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">old&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="kr">new&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">g&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">则是替换整个文件中的每个匹配串&lt;/span>&lt;span class="err">。&lt;/span>
&lt;span class="p">:&lt;/span>&lt;span class="err">%&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">old&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="kr">new&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">gc&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">会找到整个文件中的每个匹配串&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">并且对每个匹配串提示是否进行替换&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="排版命令">排版命令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ada" data-lang="ada">&lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">向左缩进一个shiftwidth&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">向右缩进一个shiftwidth&lt;/span>
&lt;span class="p">:&lt;/span>&lt;span class="n">ce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">本行文字居中&lt;/span>
&lt;span class="p">:&lt;/span>&lt;span class="n">le&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ft&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">本行文字靠左&lt;/span>
&lt;span class="p">:&lt;/span>&lt;span class="n">ri&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ght&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="n">本行文字靠右&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="heading">&lt;/h1>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/24484514">https://zhuanlan.zhihu.com/p/24484514&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>专题1：二叉树相关</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</guid><description>&lt;h1 id="专题1二叉树相关">专题1：二叉树相关&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>二叉树是一个递归的结构&lt;/p>
&lt;h2 id="相关题目">相关题目&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>前序遍历&lt;/p>
&lt;/li>
&lt;li>
&lt;p>94.二叉树的中序遍历&lt;/p>
&lt;/li>
&lt;li>
&lt;p>后序遍历&lt;/p>
&lt;/li>
&lt;li>
&lt;p>102.二叉树的层序遍历；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>路径和&lt;/p>
&lt;/li>
&lt;li>
&lt;p>543.二叉树的直径&lt;/p>
&lt;/li>
&lt;li>
&lt;p>617.合并二叉树&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>图解 Golang 的 GC 算法</title><link>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</guid><description>&lt;h1 id="图解-golang-的-gc-算法">图解 Golang 的 GC 算法&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>虽然 Golang 的 GC 自打一开始，就被人所诟病，但是经过这么多年的发展，Golang 的 GC 已经改善了非常多，变得非常优秀了。&lt;/p>
&lt;p>以下是 Golang GC 算法的里程碑：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>v1.1 STW&lt;/p>
&lt;/li>
&lt;li>
&lt;p>v1.3 Mark STW, Sweep 并行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>v1.5 三色标记法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>v1.8 hybrid write barrier&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>经典的 GC 算法有三种： &lt;code>引用计数(reference counting)&lt;/code>、 &lt;code>标记-清扫(mark&amp;amp;sweep)&lt;/code>、 &lt;code>复制收集(CopyandCollection)&lt;/code>。&lt;/p>
&lt;p>Golang 的 GC 算法主要是基于 &lt;code>标记-清扫(markandsweep)&lt;/code>算法，并在此基础上做了改进。&lt;/p>
&lt;h2 id="标记-清扫mark-and-sweep算法">标记-清扫(Mark And Sweep)算法&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/11/11-19-30-30-go-gc-gif.webp" alt="">&lt;/p>
&lt;p>法主要有两个主要的步骤：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>标记(Mark phase)：找出不可达的对象，然后做上标记。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>清除(Sweep phase)：回收标记好的对象。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>操作非常简单，但是有一点需要额外注意：mark and sweep 算法在执行的时候，需要程序暂停！即 &lt;code>stop the world&lt;/code>。
也就是说，这段时间程序会卡在哪儿。故中文翻译成 &lt;code>卡顿&lt;/code>。&lt;/p>
&lt;p>开始标记，程序暂停。程序和对象的此时关系是这样的：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-46-55-go-gc01.png" alt="">&lt;/p>
&lt;p>然后开始标记，process 找出它所有可达的对象，并做上标记。如下图所示：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje63ibrVyulmXcjp1oXDOPO4dVZvVts5K9zJIHha5apibSWdd1nnV8m54Dw/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>标记完了之后，然后开始清除未标记的对象：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6XMjDBzQIniaYNIAwf1yvh8SJBYibdmLzTJ1gKao6zicl7hZbo3JTSXRibQ/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>然后垃圾清除了，变成了下图这样。&lt;/p>
&lt;p>最后，停止暂停，让程序继续跑。然后循环重复这个过程，直到 process 生命周期结束。&lt;/p>
&lt;h3 id="标记-清扫mark-and-sweep算法存在什么问题">标记-清扫(Mark And Sweep)算法存在什么问题？&lt;/h3>
&lt;p>标记-清扫(Mark And Sweep)算法这种算法虽然非常的简单，但是还存在一些问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>STW，stop the world；让程序暂停，程序出现卡顿。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标记需要扫描整个 heap&lt;/p>
&lt;/li>
&lt;li>
&lt;p>清除数据会产生 heap 碎片&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这里面最重要的问题就是：mark-and-sweep 算法会暂停整个程序。&lt;/p>
&lt;p>Go 是如何面对并这个问题的呢？&lt;/p>
&lt;h2 id="三色并发标记法">三色并发标记法&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/11/11-19-35-58-go-gc-3-color.webp" alt="">&lt;/p>
&lt;p>Golang 的三色标记法的大体流程：&lt;/p>
&lt;p>首先：程序创建的对象都标记为白色。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6aQjX1iaPgmDiaNohGeekUxH2a0HXAJ4PhaduibBibh6CbOJtea4eR4js1Q/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>gc 开始：扫描所有可到达的对象，标记为灰色&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6ELwZkSkibBYotZhyAGB9rIpMzibt48gSO9ltq9D5iaTL133GtUlLbnKSQ/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>从灰色对象中找到其引用对象标记为灰色，把灰色对象本身标记为黑色&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje62yaMUvD35Oibk6icTD5Kl4pib7553lpgz1VFLJSPOLicb8YAqPPyfQjBFQ/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>监视对象中的内存修改，并持续上一步的操作，直到灰色标记的对象不存在&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje61oYDvicEpYp9uicHHbuoQxb2ewbDNicTMvqzQIkQ2T2EwOYogCrJefZVw/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>此时，gc 回收白色对象。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6xRZbJ1fpRVB9x3Nj7rAfVZrQdNHB77wEu6WtnpNicibria7bzu8MAlnRA/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>最后，将所有黑色对象变为白色，并重复以上所有过程。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6lqEagViaWUTxzw0hL7AfA51QykcBpg0Dbz6zLw8K19IXBhe3L6O0Ljg/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>好了，大体的流程就是这样的，让我们回到刚才的问题：Go 是如何解决标记-清除(mark and sweep)算法中的卡顿(stw，stop the world)问题的呢？&lt;/p>
&lt;h2 id="gc-和用户逻辑如何并行操作">gc 和用户逻辑如何并行操作？&lt;/h2>
&lt;p>标记-清除(mark and sweep)算法的 STW(stop the world)操作，就是 runtime 把所有的线程全部冻结掉，所有的线程全部冻结意味着用户逻辑是暂停的。这样所有的对象都不会被修改了，这时候去扫描是绝对安全的。&lt;/p>
&lt;p>Go 如何减短这个过程呢？标记-清除(mark and sweep)算法包含两部分逻辑：标记和清除。
我们知道 Golang 三色标记法中最后只剩下的黑白两种对象，黑色对象是程序恢复后接着使用的对象，如果不碰触黑色对象，只清除白色的对象，肯定不会影响程序逻辑。所以： &lt;code>清除操作和用户逻辑可以并发。&lt;/code>&lt;/p>
&lt;p>标记操作和用户逻辑也是并发的，用户逻辑会时常生成对象或者改变对象的引用，那么标记和用户逻辑如何并发呢？&lt;/p>
&lt;h3 id="process-新生成对象的时候gc-该如何操作呢不会乱吗">process 新生成对象的时候，GC 该如何操作呢？不会乱吗？&lt;/h3>
&lt;p>我们看如下图，在此状态下：process 程序又新生成了一个对象，我们设想会变成这样：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6GsPbtM8PqZVZUibpZQYiaPUAoqFZrJBVQvOvLuiaGInvYDibs9icmr6TA5Q/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>但是这样显然是不对的，因为按照三色标记法的步骤，这样新生成的对象 A 最后会被清除掉，这样会影响程序逻辑。&lt;/p>
&lt;p>Golang 为了解决这个问题，引入了 &lt;code>写屏障&lt;/code>这个机制。
写屏障：该屏障之前的写操作和之后的写操作相比，先被系统其它组件感知。
通俗的讲：就是在 gc 跑的过程中，可以监控对象的内存修改，并对对象进行重新标记。(实际上也是超短暂的 stw，然后对对象进行标记)&lt;/p>
&lt;p>在上述情况中， &lt;code>新生成的对象，一律都标位灰色！&lt;/code>即下图：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6qKxHooLKicibBCia4pZibcGicxSyz0NYQMRmFEQNWSVXE5kff6VMa3U4ia6w/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;h3 id="那么灰色或者黑色对象的引用改为白色对象的时候golang-是该如何操作的">那么，灰色或者黑色对象的引用改为白色对象的时候，Golang 是该如何操作的？&lt;/h3>
&lt;p>看如下图，一个黑色对象引用了曾经标记的白色对象。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6RpJAciaTibYnOuiaFaLnh7t03sraj0wKjqmmhKdPdrD7G7jgPWiabSdGhw/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>这时候，写屏障机制被触发，向 GC 发送信号，GC 重新扫描对象并标位灰色。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/W4ZicqIeQOOcoiaib0sp1y04XNwibewvHje6EibfZpRonwcHOqibibBEicVyPnzu3t1fmGTbvugQ1jxJicrnrxVdXwNRxDQ/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>因此，gc 一旦开始，无论是创建对象还是对象的引用改变，都会先变为灰色。&lt;/p>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;ul>
&lt;li>Golang’s Real-time GC in Theory and PracticeGolang&amp;rsquo;s realtime garbage collector&lt;a href="https://mp.weixin.qq.com/s?__biz=MzU4ODczMDg5Ng==&amp;amp;mid=2247483688&amp;amp;idx=1&amp;amp;sn=46742e533886fe8b2fb91d79cf5144eb&amp;amp;scene=21#wechat_redirect">Golang 垃圾回收剖析&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/bfc3c65c05d1">深入Golang Runtime之Golang GC的过去,当前与未来 - 简书&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ul></description></item></channel></rss>