<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Justice的小站</title><link>https://justice.bj.cn/</link><description>Recent content on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 16 Apr 2024 17:06:35 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>Justice's Blog</title><link>https://justice.bj.cn/homepage/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/about/</guid><description>&lt;h2 id="self-introduction">Self Introduction&lt;/h2>
&lt;p>Cras ex dui, tristique a libero eget, consectetur semper ligula. Nunc augue arcu, malesuada a nisi et, molestie finibus metus. Sed lacus odio, ultricies a nisl vitae, sollicitudin tempor ipsum. Vivamus quis feugiat arcu. Sed mi nunc, efficitur quis tellus vitae, posuere mattis metus. Phasellus in mattis dui. Nullam blandit, augue non ullamcorper dapibus, lacus dui molestie massa, in iaculis purus lectus eu lectus. Duis hendrerit lacinia tellus, sit amet feugiat dolor placerat id. Aenean ac velit massa. Vivamus feugiat dui at magna viverra, ut dictum nunc rutrum. Duis eget sapien finibus, lobortis orci id, vestibulum tellus. Maecenas lobortis urna libero, quis fermentum lectus lobortis nec. Nullam laoreet volutpat libero, ac mattis magna ullamcorper quis. Duis eget ipsum eu nisi mattis cursus et vitae turpis.&lt;/p>
&lt;p>Aliquam pretium diam eget leo feugiat finibus. Donec malesuada commodo ipsum. Aenean a massa in lacus venenatis vestibulum. Duis vel sem quis elit iaculis consectetur et quis dolor. Morbi eu ipsum hendrerit, malesuada ante sed, dapibus est. Suspendisse feugiat nulla ut gravida convallis. Phasellus id massa posuere, rhoncus justo ut, porttitor dolor. Nulla ultrices malesuada egestas. Nunc fermentum tincidunt sem ac vulputate. Donec mollis sollicitudin justo eget varius. Donec ornare velit et felis blandit, id molestie sapien lobortis. Morbi eget tristique justo. Mauris posuere, nibh eu laoreet ultricies, ligula erat iaculis sapien, vel dapibus lacus libero ut diam. Etiam viverra ante felis, et scelerisque nunc pellentesque vitae. Praesent feugiat dictum molestie.&lt;/p>
&lt;h2 id="details">Details&lt;/h2>
&lt;p>Nunc pellentesque vitae:&lt;/p>
&lt;ul>
&lt;li>Morbi accumsan nibh efficitur diam molestie, non dignissim diam facilisis.&lt;/li>
&lt;li>Donec dignissim leo in mollis faucibus.&lt;/li>
&lt;li>Donec blandit lacus a pellentesque fermentum.&lt;/li>
&lt;/ul>
&lt;p>Donec mollis sollicitudin:&lt;/p>
&lt;ul>
&lt;li>Nunc dictum purus ornare purus consectetur, eu pellentesque massa ullamcorper.&lt;/li>
&lt;li>Aliquam eu leo vitae justo aliquam tincidunt.&lt;/li>
&lt;li>Fusce non massa id augue interdum feugiat sed et nulla.&lt;/li>
&lt;li>Vivamus molestie augue in tristique laoreet.&lt;/li>
&lt;/ul></description></item><item><title>Pages</title><link>https://justice.bj.cn/homepage/pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/pages/</guid><description/></item><item><title>Experiences</title><link>https://justice.bj.cn/homepage/experiences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/experiences/</guid><description/></item><item><title>Vintage</title><link>https://justice.bj.cn/homepage/vintage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/vintage/</guid><description/></item><item><title>Blank</title><link>https://justice.bj.cn/homepage/blank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/blank/</guid><description>
&lt;div style="text-align:center">
&lt;p>Write anything you like here!&lt;/p>
&lt;/div></description></item><item><title>Tauri</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%BA%93%E4%B9%8Btauri/</link><pubDate>Tue, 16 Apr 2024 17:06:35 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%BA%93%E4%B9%8Btauri/</guid><description>&lt;h1 id="tauri">Tauri&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Tauri是一个类似electron的跨平台基于web的客户端框架。奥法队是非得失通过Tauri可以将web网站已本地客户端的方式在pc\mac上运行。所以一些web网站无法实现的功能比如读取存储本地文件，就可以通过Tauri上提供的api实现了。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2></description></item><item><title>Zeus- Uber的分布式Spark Shuffle Service</title><link>https://justice.bj.cn/post/30.architech/spark/zeus-uber-remote-spark-shuffle-service/</link><pubDate>Tue, 16 Apr 2024 17:06:35 +0800</pubDate><guid>https://justice.bj.cn/post/30.architech/spark/zeus-uber-remote-spark-shuffle-service/</guid><description>&lt;h1 id="zeus-uber的分布式spark-shuffle-service">Zeus: Uber的分布式Spark Shuffle Service&lt;/h1>
&lt;hr>
&lt;h2 id="特性">特性&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>垂直扩展&lt;/p>
&lt;ul>
&lt;li>
&lt;p>独立节点运行；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>去中心化存储，节点无状态；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>解决网络延迟&lt;/p>
&lt;ul>
&lt;li>
&lt;p>降低服务响应等待时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>流数据&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>性能优化&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://justice.bj.cn/Users/zhuzhengyi/Documents/gitnote/img/2020-07-02-17-06-40-image.png" alt="">&lt;/p>
&lt;hr>
&lt;h2 id="优化点">优化点&lt;/h2>
&lt;h3 id="横向扩展">横向扩展&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>shuffle 服务独立，可在不同应用间共享；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>shuffle 节点无状态；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>shuffle 节点可根据需求横向扩展；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="分布式shuffle服务">分布式shuffle服务&lt;/h3>
&lt;p>&lt;img src="https://justice.bj.cn/Users/zhuzhengyi/Documents/gitnote/img/2020-07-02-10-50-42-image.png" alt="">&lt;/p>
&lt;hr>
&lt;h3 id="磁盘文件直接读写">磁盘文件直接读写&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>直接写入文件，无应用层的缓存；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>零拷贝&lt;/p>
&lt;/li>
&lt;li>
&lt;p>顺序读写，无随机磁盘IO；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="实现方面优化">实现方面优化&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Netty：高性能异步服务框架&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2个线程组：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>group1接收网络连接；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>group2读取数据；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>彼此不阻塞；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>二进制网络协议&lt;/p>
&lt;ul>
&lt;li>编码和压缩更有效&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="客户端压缩">客户端压缩&lt;/h3>
&lt;ul>
&lt;li>shuffle client&lt;/li>
&lt;/ul></description></item><item><title>Zerotier</title><link>https://justice.bj.cn/post/70.tool/zerotier/</link><pubDate>Thu, 28 Mar 2024 20:55:30 +0800</pubDate><guid>https://justice.bj.cn/post/70.tool/zerotier/</guid><description>&lt;h1 id="zerotier">Zerotier&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>zerotier是一款智能可编程以太网交换软件，只需要经过简单的注册，安装和配置，即可建立VPN。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;h3 id="小米mini-wifi安装zerotier">小米mini wifi安装zerotier&lt;/h3>
&lt;h3 id="架构">架构&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>家中小米路由器(mini-wifi)上安装zerotier路由器版;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>手机安装zerotier android版；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将这些设备都加入到一个zerotier 虚拟局域网中，以达到随时可相互访问的目的;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="准备工作">准备工作&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>登陆&lt;a href="https://www.zerotier.com/">zerotier官网&lt;/a>，注册账号，申请网络ID；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按小米路由官方提示开启小米mini-wifi的ssh登陆功能；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="操作">操作&lt;/h4>
&lt;ol>
&lt;li>ssh 到mini wifi中，进行如下操作：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">## 使用ssh登陆到mini-wifi中&lt;/span>
&lt;span class="o">[&lt;/span>your-pc&lt;span class="o">]&lt;/span>$ ssh root@192.168.xx.x
&lt;span class="c1">## 进入小米路由外接磁盘目录&lt;/span>
&lt;span class="o">[&lt;/span>root&lt;span class="o">]&lt;/span>&lt;span class="c1"># cd /extdisks/sda1/xiaomi_router/&lt;/span>
&lt;span class="o">[&lt;/span>root&lt;span class="o">]&lt;/span>&lt;span class="c1"># mkdir -p opt/zerotier/pkg opt/bin opt/conf&lt;/span>
&lt;span class="o">[&lt;/span>root&lt;span class="o">]&lt;/span>&lt;span class="c1"># cd opt/zerotier/pkg&lt;/span>
&lt;span class="c1">## 下载zerotier-one 二进制程序&lt;/span>
&lt;span class="o">[&lt;/span>root&lt;span class="o">]&lt;/span>&lt;span class="c1"># wget http://pkg.entware.net/binaries/mipsel/zerotier_1.1.14-4_mipselsf.ipk&lt;/span>
&lt;span class="c1"># tar xf zerotier_1.1.14-4_mipselsf.ipk&lt;/span>
&lt;span class="c1">## 启动zerotier守护进程&lt;/span>
&lt;span class="o">[&lt;/span>root&lt;span class="o">]&lt;/span>&lt;span class="c1"># zerotier-one -D /extdisks/sda1/xiaomi_router/opt/zerotier/data&lt;/span>
&lt;span class="c1">## 加入zerotier网络&lt;/span>
&lt;span class="o">[&lt;/span>root&lt;span class="o">]&lt;/span>&lt;span class="c1"># zerotier-cli -D/extdisks/sda1/xiaomi_router/opt/zerotier/data join &amp;lt;NETWORK_ID&amp;gt;&lt;/span>
&lt;span class="c1">## 查看状态&lt;/span>
&lt;span class="o">[&lt;/span>root&lt;span class="o">]&lt;/span>&lt;span class="c1"># zerotier-cli -D/extdisks/sda1/xiaomi_router/opt/zerotier/data status&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>上my.zerotier.com上“setting”-&amp;gt;&amp;ldquo;Advance&amp;quot;中增加路由规则，&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Destination：内网网段，路由默认为: 192.168.31.0/24&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Via: zerotier分配给路由的ip&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>设置完成后，在手机上安装zerotier，加入网络后，可通过手机访问家中网络；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="nat模式访问内网设备">NAT模式访问内网设备&lt;/h4>
&lt;p>内网路由器安装zerotier并加入，外网设备(如手机)通过NAT模式访问内网其他设备&lt;/p>
&lt;p>路由器设置NAT路由转发规则如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">root@XiaoQiang:~# ZT_IF=zt0
root@XiaoQiang:~# iptables -I FORWARD -o $ZT_IF -j ACCEPT
root@XiaoQiang:~# iptables -I FORWARD -i $ZT_IF=zt0 -j ACCEPT
root@XiaoQiang:~# iptables -t nat -I POSTROUTING -o $ZT_IF -j MASQUERADE
root@XiaoQiang:~# iptables-save
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://www.zerotier.com/">https://www.zerotier.com/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/zerotier/ZeroTierOne">https://github.com/zerotier/ZeroTierOne&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.entware.net/binaries/mipsel/">https://pkg.entware.net/binaries/mipsel/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://post.smzdm.com/p/a5d09ln8/">小米路由3安装Zerotier_路由器_什么值得买&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>专题：动态规划</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link><pubDate>Thu, 28 Mar 2024 20:55:30 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid><description>&lt;h1 id="专题动态规划">专题：动态规划&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>动态规划问题的难点在于对问题进行合理划分，将大问题转变为小问题的组合，形成递推关系，通过归纳法将问题得到解决；&lt;/p>
&lt;p>动态规划最关键的地方在于对问题进行正确的抽象和建模，进而建立递推公式；&lt;/p>
&lt;h2 id="步骤">步骤&lt;/h2>
&lt;ul>
&lt;li>函数定义：定义问题目标函数，目标函数可通过子目标函数组合而成，子函数需要包含目标函数的所有情形且不能重叠；&lt;/li>
&lt;li>递推公式：定义最终函数 和 子目标函数之间的递推关系，通过将目标问题分解为规模更小的子问题组合来递推解决目标问题；&lt;/li>
&lt;li>初始条件：&lt;/li>
&lt;li>终止条件:&lt;/li>
&lt;/ul>
&lt;h2 id="相关题目">相关题目&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>关键思路&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="../../5.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2">5.最长回文子串&lt;/a>&lt;/td>
&lt;td>**&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../../10.%E6%AD%A3%E5%88%99%E5%BC%8F%E5%8C%B9%E9%85%8D">10.正则式匹配&lt;/a>&lt;/td>
&lt;td>***&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../../62.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84">62.不同路径&lt;/a>&lt;/td>
&lt;td>**&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../../63.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84-ii">63.不同路径 II&lt;/a>&lt;/td>
&lt;td>**&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../../403.%E9%9D%92%E8%9B%99%E8%BF%87%E6%B2%B3">403.青蛙过河&lt;/a>&lt;/td>
&lt;td>***&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../../97.%E4%BA%A4%E9%94%99%E5%AD%97%E7%AC%A6%E4%B8%B2">97.交错字符串&lt;/a>&lt;/td>
&lt;td>**&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="./115.%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97.md" title="https://leetcode.cn/problems/distinct-subsequences/description/">115.不同的子序列&lt;/a>&lt;/td>
&lt;td>***&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../../139.%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86">139.单词拆分&lt;/a>&lt;/td>
&lt;td>**&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../../887.%E9%B8%A1%E8%9B%8B%E6%8E%89%E8%90%BD">887.鸡蛋掉落&lt;/a>&lt;/td>
&lt;td>***&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>鸡蛋掉落</title><link>https://justice.bj.cn/post/leetcode/887.%E9%B8%A1%E8%9B%8B%E6%8E%89%E8%90%BD/</link><pubDate>Thu, 07 Mar 2024 14:02:17 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/887.%E9%B8%A1%E8%9B%8B%E6%8E%89%E8%90%BD/</guid><description>&lt;h1 id="鸡蛋掉落httpsleetcodecnproblemssuper-egg-dropdescription-httpsleetcodecnproblemssuper-egg-dropdescription">&lt;a href="https://leetcode.cn/problems/super-egg-drop/description/" title="https://leetcode.cn/problems/super-egg-drop/description/">鸡蛋掉落&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Category&lt;/th>
&lt;th>Difficulty&lt;/th>
&lt;th>Likes&lt;/th>
&lt;th>Dislikes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>algorithms&lt;/td>
&lt;td>Hard (30.83%)&lt;/td>
&lt;td>985&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Tags&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://leetcode.com/tag/heap" title="https://leetcode.com/tag/heap">&lt;code>heap&lt;/code>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Companies&lt;/strong>&lt;/p>
&lt;p>&lt;code>Unknown&lt;/code>&lt;/p>
&lt;p>给你 &lt;code>k&lt;/code> 枚相同的鸡蛋，并可以使用一栋从第 &lt;code>1&lt;/code> 层到第 &lt;code>n&lt;/code> 层共有 &lt;code>n&lt;/code> 层楼的建筑。&lt;/p>
&lt;p>已知存在楼层 &lt;code>f&lt;/code> ，满足 &lt;code>0 &amp;lt;= f &amp;lt;= n&lt;/code> ，任何从 &lt;strong>高于&lt;/strong> &lt;code>f&lt;/code> 的楼层落下的鸡蛋都会碎，从 &lt;code>f&lt;/code> 楼层或比它低的楼层落下的鸡蛋都不会破。&lt;/p>
&lt;p>每次操作，你可以取一枚没有碎的鸡蛋并把它从任一楼层 &lt;code>x&lt;/code> 扔下（满足 &lt;code>1 &amp;lt;= x &amp;lt;= n&lt;/code>）。如果鸡蛋碎了，你就不能再次使用它。如果某枚鸡蛋扔下后没有摔碎，则可以在之后的操作中 &lt;strong>重复使用&lt;/strong> 这枚鸡蛋。&lt;/p>
&lt;p>请你计算并返回要确定 &lt;code>f&lt;/code> &lt;strong>确切的值&lt;/strong> 的 &lt;strong>最小操作次数&lt;/strong> 是多少？&lt;/p>
&lt;p> &lt;/p>
&lt;p>&lt;strong>示例 1：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：k = 1, n = 2
输出：2
解释：
鸡蛋从 1 楼掉落。如果它碎了，肯定能得出 f = 0 。
否则，鸡蛋从 2 楼掉落。如果它碎了，肯定能得出 f = 1 。
如果它没碎，那么肯定能得出 f = 2 。
因此，在最坏的情况下我们需要移动 2 次以确定 f 是多少。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 2：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：k = 2, n = 6
输出：3
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 3：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：k = 3, n = 14
输出：4
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>提示：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>1 &amp;lt;= k &amp;lt;= 100&lt;/code>&lt;/li>
&lt;li>&lt;code>1 &amp;lt;= n &amp;lt;= 104&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://leetcode.cn/problems/super-egg-drop/comments/" title="https://leetcode.cn/problems/super-egg-drop/comments/">Discussion&lt;/a> | &lt;a href="https://leetcode.cn/problems/super-egg-drop/solution/" title="https://leetcode.cn/problems/super-egg-drop/solution/">Solution&lt;/a>&lt;/p>
&lt;h2 id="解法">解法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Solution&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// @lc code=start
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Solution&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// ## 鸡蛋掉落
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// - 动态规划1(超时)
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 1. 设 dp[i][j] 表示总共有i个鸡蛋, 总共j层楼时, 确定目标楼层f的最小操作次数;
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 2. 如果最开始选择在x楼(1&amp;lt;=x&amp;lt;=j)扔1个鸡蛋, 此时会有两种情况：
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// a. 鸡蛋未破, 则目标楼层一定不在`[1,x)`中, 此时可继续用i个鸡蛋在`(x,n]`楼层中尝试.
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 后续为确定目标楼层的最小操作次数为: dp[i][j-x]
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// b. 鸡蛋破裂, 则目标楼层一定不在`(x,j]`中, 此时可用剩下的i-1个鸡蛋在`[1,x)`楼层中继续尝试.
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 后续为确定目标楼层的最小操作次数为: dp[i-1][x-1]
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 综合以上情况, 如果扔1枚鸡蛋在x楼后, 为保证一定能确定目标楼层, 后续最小操作次数为:
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// max(dp[i][j-x], dp[i-1][x-1])
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 那么, 依次从`[1,j]`中选择开始楼层x扔鸡蛋, 选择总操作数最小的即为dp[i][j]:
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// min(max(dp[i][j-x], dp[i-1][x-1]) + 1) ( 1 &amp;lt;= x &amp;lt;= j )
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 3. 综上可得递推关系:
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// dp[i][j] = 1 + min(max(dp[i][j-k], dp[i-1][k-1])) ( 1 &amp;lt;= k &amp;lt;= j )
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 4. 初始条件: 当只有1个鸡蛋时, 需要从低到高逐层进行尝试, 最坏情况需要到最高一层n才能确定,
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 因此: dp[1][j] = j ( 1 &amp;lt;= j &amp;lt;= n )
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 5. 目标值: dp[k][n]
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">super_egg_drop1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">usize&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">usize&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">usize&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">usize&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 初始条件
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">})&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap_or&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// ## 鸡蛋掉落
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// - 动态规划2
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 1. 设 dp[i][j] 表示: 总共有i个鸡蛋, 扔鸡蛋j次, 最多可检测的楼层数;
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 2. 扔1次鸡蛋后(不论扔在那个楼层), 有两种情况:
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// a. 鸡蛋未破, 剩余i个鸡蛋, 剩余操作次数j-1, 最多检测楼层数为: dp[i][j-1]
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// b. 鸡蛋破了, 剩余i-1个鸡蛋, 剩余操作次数j-1, 最多可检测楼层数为: dp[i-1][j-1]
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 那么, 最多可检测楼层总数:
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// dp[i][j] = 1 + dp[i][j-1] + dp[i-1][j-1]
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 3. 初始条件:
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// a. 鸡蛋个数i: 1 &amp;lt;= i &amp;lt;= k
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// a. 总操作次数j最多为楼层数: 1 &amp;lt;= j &amp;lt;= n;
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// b. 1个鸡蛋1次最多可检测楼层数为1: dp[1][1] = 1;
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 4. 目标:
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// i, j 由小到大, 当: i == k &amp;amp;&amp;amp; dp[i][j] &amp;gt;= n时, j的值
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">super_egg_drop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">usize&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">usize&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// @lc code=end
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="cp">#[cfg(test)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">mod&lt;/span> &lt;span class="nn">tests&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">super&lt;/span>::&lt;span class="o">*&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">#[test]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Solution&lt;/span>::&lt;span class="n">super_egg_drop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Solution&lt;/span>::&lt;span class="n">super_egg_drop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Solution&lt;/span>::&lt;span class="n">super_egg_drop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Solution&lt;/span>::&lt;span class="n">super_egg_drop1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Solution&lt;/span>::&lt;span class="n">super_egg_drop1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">assert_eq&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Solution&lt;/span>::&lt;span class="n">super_egg_drop1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://algo.itcharge.cn/Solutions/0800-0899/super-egg-drop/">0887. 鸡蛋掉落 | 算法通关手册（LeetCode）&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>CPU异常</title><link>https://justice.bj.cn/post/09.pub/writing-an-os-in-rust/05-cpu-exceptions/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/writing-an-os-in-rust/05-cpu-exceptions/</guid><description>&lt;h1 id="cpu异常">CPU异常&lt;/h1>
&lt;blockquote>
&lt;p>原文：&lt;a href="https://os.phil-opp.com/cpu-exceptions/">https://os.phil-opp.com/cpu-exceptions/&lt;/a>&lt;/p>
&lt;p>原作者：@phil-opp&lt;/p>
&lt;p>译者：&lt;a href="https://github.com/niguangye">倪广野&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>触发CPU异常的情况多种多样，例如：访问非法内存地址或执行非法指令（除以零）等。为了应对CPU异常，我们需要建立中断描述符表（interrupt descriptor table)，它列举了不同异常所对应的处理函数(handler functions)。在博文的最后，我们的内核（kernel)可以捕获断点异常（&lt;a href="https://wiki.osdev.org/Exceptions#Breakpoint">breakpoint exceptions&lt;/a>）并且恢复CPU的正常运行。&lt;/p>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>异常的发生标志着当前正在执行的指令出现了问题。例如：指令试图除以0的时候，CPU会抛出一个异常。当异常发生，CPU会中断（interrupt）它当前的流程，并立即调用该类型异常对应的处理函数。&lt;/p>
&lt;p>在x86体系结构中，有大约20种不同的CPU 异常类型。常见的如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>缺页错误（Page Fault）&lt;/strong>：缺页错误发生在非法的内存访问操作中。例如：当前指令试图访问没有映射的内存页或试图写入只读的内存页。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>非法操作码（Invalid Opcode）&lt;/strong>：非法操作码发生在当前指令不正确的情况下。例如：试图在不支持 &lt;a href="https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions">SSE 指令集&lt;/a> 的老旧CPU上使用该指令集。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>通用保护错误（General Protection Fault）&lt;/strong>：这是一个触发原因相对宽泛的异常。试图在用户态程序中执行特权指令或试图写入配置寄存器的保留位等非法访问操作均会触发该异常。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>双重异常（Double Fault）&lt;/strong>：异常发生后，CPU会调用对应的异常处理函数。在调用过程中如果发生另一个异常，CPU会触发双重异常。双重异常也会在找不到对应的异常处理函数的情况下发生。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>三重异常（Triple Fault）&lt;/strong>：如果异常发生在CPU调用双重异常处理函数的过程中，这会导致严重的三重异常。我们不能捕获或者处理三重异常。大多数处理器会选择复位并重启操作系统。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>你可以在&lt;a href="https://wiki.osdev.org/Exceptions">这里&lt;/a>找到所有的CPU异常列表。&lt;/p>
&lt;h3 id="中断描述符表interrupt-descriptor-table">中断描述符表（interrupt descriptor table)&lt;/h3>
&lt;p>为了捕获并处理CPU异常，我们需要建立所谓的中断描述符表（interrupt descriptor table，IDT)。在IDT中，我们可以为每种异常指定一个处理函数。硬件会直接使用这张表，所以我们需要遵循提前约定好的格式。IDT的每一项（entry）必须是16字节的结构：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Name&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>u16&lt;/td>
&lt;td>函数指针 [0:15]&lt;/td>
&lt;td>处理函数（handler function)指针的低16位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u16&lt;/td>
&lt;td>GDT 选择子&lt;/td>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Global_Descriptor_Table">global descriptor table&lt;/a> 代码段的选择子&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u16&lt;/td>
&lt;td>选项参数&lt;/td>
&lt;td>参见下文&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u16&lt;/td>
&lt;td>函数指针 [16:31]&lt;/td>
&lt;td>处理函数（handler function)指针的中间16位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u32&lt;/td>
&lt;td>函数指针 [32:63]&lt;/td>
&lt;td>处理函数（handler function)指针剩下的32位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u32&lt;/td>
&lt;td>保留位&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>选项参数必须是下面的结构：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Bits&lt;/th>
&lt;th>Name&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0-2&lt;/td>
&lt;td>中断栈表索引&lt;/td>
&lt;td>0: 不切换栈, 1-7:当处理函数被调用时，切换到中断栈表（Interrupt Stack Table）的第n个栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3-7&lt;/td>
&lt;td>保留位&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>0: 中断门, 1: 陷阱门&lt;/td>
&lt;td>如果这个bit被设置为0，处理函数被调用的时候，中断会被禁用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9-11&lt;/td>
&lt;td>必须为1&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12&lt;/td>
&lt;td>必须为0&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>13‑14&lt;/td>
&lt;td>特权等级描述符 (DPL)&lt;/td>
&lt;td>允许调用该处理函数的最小特权等级。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>15&lt;/td>
&lt;td>Present&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>每个异常都拥有提前约定好的IDT索引。例如：非法操作码的表索引是6，而缺页错误的的表索引是14。因此，硬件可以找到每种异常对应的中断描述符表的条目（interrupt descriptor table entry, IDT entry)。&lt;a href="https://wiki.osdev.org/Exceptions">OSDev wiki&lt;/a>页面的Exception Table的“Vector nr.”列展示了所有异常的IDT索引。&lt;/p>
&lt;p>当异常发生时，CPU大致遵循下面的流程：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>将一些寄存器的内容压入栈中，包括当前指令的指针和&lt;a href="http://en.wikipedia.org/wiki/FLAGS_register">RFLAGS&lt;/a>寄存器的内容（我们会在文章的后续部分用到这些值）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读取中断描述符表（IDT）中对应的条目。例如：缺页错误发生时，CPU会读取IDT的第十四个条目。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>检查这个条目是否存在，如果没有则升级为双重错误（double fault)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果条目是一个中断门（第40个bit没有被设置为1），则禁用硬件中断。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>装载指定的GDT 选择子到CS段。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跳转到指定的处理函数。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>现在不要担心第四、五步，我们会在未来的文章中研究GDT和硬件中断。&lt;/p>
&lt;h2 id="一个idt类型an-idt-type">一个IDT类型（An IDT Type)&lt;/h2>
&lt;p>我们选择使用&lt;code>x86_64&lt;/code> crate中的 &lt;code>InterruptDescriptorTable&lt;/code> 结构体，而不是创建自己的 IDT 类型：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="cp">#[repr(C)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">InterruptDescriptorTable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">divide_by_zero&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFunc&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">debug&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFunc&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">non_maskable_interrupt&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFunc&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="n">point&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFunc&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">overflow&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFunc&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bound_range_exceeded&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFunc&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">invalid_opcode&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFunc&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">device_not_available&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFunc&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">double_fault&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFuncWithErrCode&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">invalid_tss&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFuncWithErrCode&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">segment_not_present&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFuncWithErrCode&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stack_segment_fault&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFuncWithErrCode&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">general_protection_fault&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFuncWithErrCode&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">page_fault&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PageFaultHandlerFunc&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x87_floating_point&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFunc&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">alignment_check&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFuncWithErrCode&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">machine_check&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFunc&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">simd_floating_point&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFunc&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">virtualization&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFunc&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">security_exception&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">HandlerFuncWithErrCode&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// some fields omitted
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>InterruptDescriptorTable&lt;/code>结构体的字段都是&lt;a href="https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/struct.Entry.html">&lt;code>idt::Entry&lt;/code>&lt;/a>类型，这种类型是一种代表&lt;code>IDT&lt;/code>条目字段的结构体（见上面的示例）。类型参数&lt;code>F&lt;/code>定义了预期的处理函数类型。我们可以发现上面的条目字段需要 &lt;a href="https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/type.HandlerFunc.html">&lt;code>HandlerFunc &lt;/code>&lt;/a> 或 &lt;a href="https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/type.HandlerFuncWithErrCode.html">&lt;code>HandlerFuncWithErrCode &lt;/code>&lt;/a> 参数。缺页错误甚至拥有它独有的处理函数类型：&lt;a href="https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/type.PageFaultHandlerFunc.html">&lt;code>PageFaultHandlerFunc &lt;/code>&lt;/a> 。&lt;/p>
&lt;p>首先，我们探讨一下 &lt;code>HandlerFunc&lt;/code> 类型：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">type&lt;/span> &lt;span class="nc">HandlerFunc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">extern&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;x86-interrupt&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InterruptStackFrame&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>HandlerFunc &lt;/code> 是 &lt;code>extern &amp;quot;x86-interrupt&amp;quot; fn&lt;/code> 的类型别名。&lt;code>extern&lt;/code> 关键字定义了一个外部调用约定（ &lt;a href="https://doc.rust-lang.org/nomicon/ffi.html#foreign-calling-conventions">foreign calling convention&lt;/a> ），它经常被用于链接C语言代码（&lt;code>extern &amp;quot;C&amp;quot; fn&lt;/code>）。那么，&lt;code>x86-interrupt&lt;/code>调用约定是什么呢?&lt;/p>
&lt;h2 id="中断调用约定-the-interrupt-calling-convention">中断调用约定（ The Interrupt Calling Convention）&lt;/h2>
&lt;p>CPU异常与函数调用非常相似：CPU跳转到调用函数的第一条指令并执行它。然后，CPU跳转到返回地址并继续执行函数的调用者函数（&lt;code>parent function&lt;/code>)。&lt;/p>
&lt;p>然而，异常和函数调用有一个重要的区别：函数调用是被编译器生成的 &lt;code>call&lt;/code> 指令主动发起，而&lt;/p>
&lt;p>异常可以发生在所有指令的执行过程中。为了理解这个区别的重要性，我们需要更进一步地研究函数调用。&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Calling_convention">调用约定 Calling conventions&lt;/a> 明确规定了函数调用的细节。例如，它规定了函数参数的位置（ 寄存器还是函数栈）和结果的返回方式。在x86_64 Linux体系中，C语言函数调用适用下面的规则（在&lt;a href="https://refspecs.linuxbase.org/elf/x86_64-abi-0.99.pdf">System V ABI&lt;/a>中规定）：&lt;/p>
&lt;ul>
&lt;li>前六个整数参数会被放在寄存器中传递：&lt;code>rdi&lt;/code>, &lt;code>rsi&lt;/code>, &lt;code>rdx&lt;/code>, &lt;code>rcx&lt;/code>, &lt;code>r8&lt;/code>, &lt;code>r9&lt;/code>&lt;/li>
&lt;li>剩下的参数被放在栈中传递&lt;/li>
&lt;li>结果被放在 &lt;code>rax&lt;/code> 和 &lt;code>rdx&lt;/code> 中返回&lt;/li>
&lt;/ul>
&lt;p>Rust 没有遵顼C ABI （事实上，Rust甚至没有规定的ABI），所以这些规则仅仅适用于声明了 &lt;code>extern &amp;quot;C&amp;quot; fn&lt;/code> 的函数。&lt;/p>
&lt;h3 id="preserved-and-scratch-寄存器">Preserved and Scratch 寄存器&lt;/h3>
&lt;p>调用约定（ &lt;code>calling convention&lt;/code>）将寄存器分为两个部分： &lt;em>preserved&lt;/em> 和 &lt;em>scratch&lt;/em> 寄存器。&lt;/p>
&lt;p>在函数调用的过程中，&lt;em>preserved&lt;/em>寄存器的值必须保持不变。所以，被调用的函数（&lt;code>callee&lt;/code>）必须保证会在返回以前会主动复原这些寄存器的原始值，才可以修改这些寄存器的值。因此，这些寄存器被称为被&lt;strong>调用者保存寄存器&lt;/strong>（&lt;em>callee-saved&lt;/em>，译者注：也就是AKA非易失性寄存器）。通行的模式是在函数的开始保存这些寄存器的值到函数栈中，并在函数马上返回的时候复原他们。&lt;/p>
&lt;p>相比之下，被调用的函数（&lt;code>callee&lt;/code>）可以无约束地修改 &lt;em>scratch&lt;/em>寄存器。如果调用者函数希望在函数调用的过程中保留 &lt;em>scratch&lt;/em>寄存器的值，它需要在调用函数之前备份和复原 &lt;em>scratch&lt;/em>寄存器的值（例如将这些值压入栈中）。所以，这些寄存器被称为&lt;strong>调用者寄存器&lt;/strong>（&lt;em>caller-saved&lt;/em>，译者注：也就是AKA易失性寄存器）。&lt;/p>
&lt;p>在x86_64架构中，C语言调用约定明确规定了下面的 preserved and scratch 寄存器：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>preserved 寄存器&lt;/th>
&lt;th>scratch 寄存器&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>rbp&lt;/code>, &lt;code>rbx&lt;/code>, &lt;code>rsp&lt;/code>, &lt;code>r12&lt;/code>, &lt;code>r13&lt;/code>, &lt;code>r14&lt;/code>, &lt;code>r15&lt;/code>&lt;/td>
&lt;td>&lt;code>rax&lt;/code>, &lt;code>rcx&lt;/code>, &lt;code>rdx&lt;/code>, &lt;code>rsi&lt;/code>, &lt;code>rdi&lt;/code>, &lt;code>r8&lt;/code>, &lt;code>r9&lt;/code>, &lt;code>r10&lt;/code>, &lt;code>r11&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;em>callee-saved&lt;/em>&lt;/td>
&lt;td>&lt;em>caller-saved&lt;/em>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>编译器遵顼这些规定生成二进制字节码。例如：绝大多数函数地字节码开始于&lt;code>push rbp&lt;/code>指令，这个指令会备份&lt;code>rbp&lt;/code>寄存器地值到函数栈中（因为这是一个&lt;code>callee-saved&lt;/code>寄存器）。&lt;/p>
&lt;h3 id="保存所有寄存器">保存所有寄存器&lt;/h3>
&lt;p>与函数调用形成鲜明对比的是，异常可以发生在所有指令的执行过程中。大多数情况下，我们甚至不能识别出编译器生成的代码是否会引起异常。例如，编译器不能预见到一个指令是否会引起栈溢出或缺页错误。&lt;/p>
&lt;p>既然不能预见到异常的发生时机，我们自然也无法做到提前备份任何寄存器的值。这意味着我们不能使用依赖于 &lt;code>caller-saved&lt;/code> 寄存器的调用约定去处理异常。然而，我们需要一个会保存所有寄存器值的调用约定。&lt;code>x86-interrupt&lt;/code>调用约定恰恰能够保证所有寄存器会在函数调用结束以前复原到原始值。&lt;/p>
&lt;p>这并不意味着所有寄存器的值会在函数开始时被保存到函数栈中。相反，编译器（生成的代码）只会备份被函数覆盖的寄存器的值。在这种方式下，较短的函数编译生成的二进制字节码会非常高效，也就是只使用尽可能少的寄存器。&lt;/p>
&lt;h3 id="中断栈帧-the-interrupt-stack-frame">中断栈帧（ The Interrupt Stack Frame）&lt;/h3>
&lt;p>在寻常的函数调用（&lt;code>call&lt;/code>指令执行）中，CPU跳转到相应的函数之前会将返回地址压入到函数栈中。在函数返回（&lt;code>ret&lt;/code>指令执行）的时候，CPU会弹出并跳转到这个返回地址。所以，寻常的函数调用栈帧会如下图所示：&lt;/p>
&lt;p>&lt;img src="https://markdown-ngy.oss-cn-beijing.aliyuncs.com/function-stack-frame.svg" alt="function-stack-frame">&lt;/p>
&lt;p>然而，异常和中断处理函数并不能将返回地址压入到函数栈中，因为中断处理函数往往运行在不同的上下文（栈指针，CPU flags等）中。相反，在异常发生的时候，CPU会执行以下步骤：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>对齐栈指针&lt;/strong>：中断可以发生在任何指令的执行过程中，栈指针自然也可能是任何值。然而，一些CPU指令集（e.g. 一些 SSE指令集）需要栈指针在16字节边界上对齐，因此CPU会在中断之后靠右对齐栈指针。&lt;/li>
&lt;li>&lt;strong>切换栈（在某种情况下）&lt;/strong>：CPU特权等级发生改变的时候，栈会被切换，例如CPU 异常发生在用户态程序的时候。用所谓的中断栈表（ &lt;em>Interrupt Stack Table&lt;/em> , 下篇文章解释 ）配置特定中断的栈切换也是可行的。&lt;/li>
&lt;li>&lt;strong>压入原来的栈指针&lt;/strong>：在中断发生的时候（对齐栈指针发生之前），CPU将栈指针（&lt;code>rsp&lt;/code>）和栈段（&lt;code>ss&lt;/code>)寄存器压入栈中。如此一来，中断处理函数返回时就可以复原栈指针的原始值。&lt;/li>
&lt;li>&lt;strong>压入并更新&lt;code>RFLAGS&lt;/code>寄存器&lt;/strong>：&lt;a href="https://en.wikipedia.org/wiki/FLAGS_register">&lt;code>RFLAGS&lt;/code>&lt;/a>寄存器保存了多种控制和状态位。进入中断函数时，CPU修改一些位并压入旧的值。&lt;/li>
&lt;li>&lt;strong>压入指令指针&lt;/strong>：跳转到中断处理函数之前，CPU压入指令指针（&lt;code>rip&lt;/code>）和代码段（&lt;code>cs&lt;/code>)。这类似于寻常的函数调用压入返回地址的过程。&lt;/li>
&lt;li>&lt;strong>压入错误码（对于部分异常）&lt;/strong>：对于缺页错误等特定的异常，CPU会压入解释异常原因的错误码。&lt;/li>
&lt;li>&lt;strong>调用中断处理函数&lt;/strong>：CPU从IDT对应的字段中读取中断处理函数的地址和段描述符。然后通过加载这些值到&lt;code>rip&lt;/code>和&lt;code>cs&lt;/code>寄存器中，调用中断处理函数。&lt;/li>
&lt;/ol>
&lt;p>所以，中断调用栈帧会如下图所示：&lt;/p>
&lt;p>&lt;img src="https://markdown-ngy.oss-cn-beijing.aliyuncs.com/exception-stack-frame.svg" alt="exception-stack-frame">&lt;/p>
&lt;p>在Rust的&lt;code>x86_64&lt;/code>库中，中断调用栈帧被抽象为&lt;a href="https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/struct.InterruptStackFrame.html">&lt;code>InterruptStackFrame&lt;/code>&lt;/a>结构体。它会被作为&lt;code>&amp;amp;mut&lt;/code>传递给中断处理函数，并被用来获取更多的关于异常原因的信息。由于只有小部分异常会压入错误码，所以&lt;a href="https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/struct.InterruptStackFrame.html">&lt;code>InterruptStackFrame&lt;/code>&lt;/a>并没有设置&lt;code>error_code&lt;/code>字段。这些异常会另外使用&lt;a href="https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/type.HandlerFuncWithErrCode.html">&lt;code>HandlerFuncWithErrCode&lt;/code>&lt;/a>函数来处理，这个函数有一个&lt;code>error_code&lt;/code>参数用来保存错误码。&lt;/p>
&lt;h3 id="幕后工作">幕后工作&lt;/h3>
&lt;p>&lt;code>x86-interrupt&lt;/code>调用约定作为一个优秀的抽象，它几乎隐藏了异常处理过程中所有繁杂的细节。然而，理解幕布后的工作在某些时候是有益的。下面简要概述了&lt;code>x86-interrupt&lt;/code>调用约定所处理的事情：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>抽取参数&lt;/strong>：大多数调用约定希望参数被放在寄存器中传递。这对于异常处理函数是不可能的，因为我们不能在保存寄存器的值之前覆盖这些寄存器。然而，&lt;code>x86-interrupt&lt;/code>调用约定明白这些参数早就被放在栈的某个位置上了。&lt;/li>
&lt;li>&lt;strong>使用&lt;code>iretq&lt;/code>返回&lt;/strong>：既然中断栈帧和寻常函数调用的栈帧是不同的，我们不能使用&lt;code>ret&lt;/code>指令从中断处理函数中返回。但是可以使用&lt;code>iretq&lt;/code>指令。&lt;/li>
&lt;li>&lt;strong>处理错误码&lt;/strong>：部分特定异常压入的错误码是事情变得更加复杂。它改变了栈对齐（见对齐栈部分）并且需要在返回之前从栈中弹出。&lt;code>x86-interrupt&lt;/code>调用约定处理了所有难题。但是，它无法获得每种异常对应的处理函数，所以，它需要从函数的参数中推断这些信息。这意味着，程序员有责任使用正确的函数类型处理每种异常。幸运的是，&lt;code>x86_64&lt;/code>库的&lt;code>InterruptDescriptorTable&lt;/code>可以确保这一过程不会出错。&lt;/li>
&lt;li>&lt;strong>对齐栈&lt;/strong>：一些指令集（尤其是SSE指令集）使用16字节的栈对齐。在异常发生的时候，CPU会确保栈对齐。但是在压入错误码后，栈对齐会再次被破坏。&lt;code>x86-interrupt&lt;/code>调用约定会通过再次对齐栈解决这个问题。&lt;/li>
&lt;/ul>
&lt;p>如果你对更多的细节感兴趣：我们也有一系列文章解释了如何使用 &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1201-naked-fns.md">naked functions&lt;/a>处理异常。&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>现在我们理解了这些理论，是时候在我们的内核中实现CPU异常处理了。我们首先在&lt;code>src/interrupts.rs&lt;/code>中创建一个新的interrupts 模块，其中&lt;code>init_idt&lt;/code>函数创建了一个新的&lt;code>InterruptDescriptorTable&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// in src/lib.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mod&lt;/span> &lt;span class="nn">interrupts&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// in src/interrupts.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x86_64&lt;/span>::&lt;span class="n">structures&lt;/span>::&lt;span class="n">idt&lt;/span>::&lt;span class="n">InterruptDescriptorTable&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">init_idt&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">idt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InterruptDescriptorTable&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在我们可以增加更多的处理函数。我们首先创建断点异常（&lt;a href="https://wiki.osdev.org/Exceptions#Breakpoint">breakpoint exception&lt;/a>）的处理函数。断点异常是一个绝佳的测试处理异常过程的示例。它唯一的用途是在断点指令&lt;code>int3&lt;/code>执行的时候暂停整个程序。&lt;/p>
&lt;p>断点异常通常被用于调试程序（debugger）：当用户设置了断点，调试程序会使用&lt;code>int3&lt;/code>指令覆盖对应位置的指令，当CPU执行到这一位置的时候会抛出断点异常。当用户希望继续执行程序时，调试程序将&lt;code>int3&lt;/code>指令替换回原来的指令并继续执行。可以从 &lt;a href="https://eli.thegreenplace.net/2011/01/27/how-debuggers-work-part-2-breakpoints">&amp;quot;&lt;em>How debuggers work&lt;/em>&amp;quot;&lt;/a> 系列获取更多的细节。&lt;/p>
&lt;p>我们无需覆盖任何指令。因为我们只希望程序在异常指令执行的时候打印一条消息，然后继续执行。让我们创建一个简单的断点异常处理函数（breakpoint_handler）并添加到IDT：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// in src/interrupts.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x86_64&lt;/span>::&lt;span class="n">structures&lt;/span>::&lt;span class="n">idt&lt;/span>::&lt;span class="p">{&lt;/span>&lt;span class="n">InterruptDescriptorTable&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InterruptStackFrame&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">crate&lt;/span>::&lt;span class="n">println&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">init_idt&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">idt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InterruptDescriptorTable&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">idt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">set_handler_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="n">point_handler&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">extern&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;x86-interrupt&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">breakpoint_handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stack_frame&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InterruptStackFrame&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;EXCEPTION: BREAKPOINT\n{:#?}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stack_frame&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>处理函数只输出了一条消息并美观的打印了中断栈帧。&lt;/p>
&lt;p>当我们试图编译程序的时候，错误出现了：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="n">error&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">E0658&lt;/span>&lt;span class="p">]&lt;/span>: &lt;span class="nc">x86&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">interrupt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ABI&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">is&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">experimental&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">subject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">change&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">see&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">issue&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="mi">40180&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>-&amp;gt; &lt;span class="nc">src&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rs&lt;/span>:&lt;span class="mi">53&lt;/span>:&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="mi">53&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">extern&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;x86-interrupt&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">breakpoint_handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stack_frame&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InterruptStackFrame&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="mi">54&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;EXCEPTION: BREAKPOINT\n{:#?}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stack_frame&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="mi">55&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">help&lt;/span>: &lt;span class="nc">add&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cp">#![feature(abi_x86_interrupt)]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">crate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">attributes&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enable&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个错误是因为 &lt;code>x86-interrupt&lt;/code> 中断调用约定仍然不稳定。我们需要明确地在&lt;code>lib.rs&lt;/code>顶部增加&lt;code>#![feature(abi_x86_interrupt)]&lt;/code>去激活它。&lt;/p>
&lt;h3 id="加载idt">加载IDT&lt;/h3>
&lt;p>为了让CPU使用我们新的中断描述符表，我们需要使用 &lt;a href="https://www.felixcloutier.com/x86/lgdt:lidt">&lt;code>lidt&lt;/code>&lt;/a> 指令去加载它。&lt;code>x86_64&lt;/code> 库的&lt;code>InterruptDescriptorTable&lt;/code> 结构体提供了一个 &lt;code>load&lt;/code> 方法去实现这个操作：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// in src/interrupts.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">init_idt&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">idt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InterruptDescriptorTable&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">idt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">set_handler_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="n">point_handler&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">idt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当我们试图编译程序的时候，下面的错误出现了：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="n">error&lt;/span>: &lt;span class="err">`&lt;/span>&lt;span class="n">idt&lt;/span>&lt;span class="err">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">does&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">live&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enough&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>-&amp;gt; &lt;span class="nc">src&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">interrupts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">mod&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rs&lt;/span>:&lt;span class="mi">43&lt;/span>:&lt;span class="mi">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="mi">43&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">idt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">^^^&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">does&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">live&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enough&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="mi">44&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">borrowed&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">only&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lives&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">until&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">here&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">note&lt;/span>: &lt;span class="nc">borrowed&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">must&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">be&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">valid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">the&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lifetime&lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>load&lt;/code> 方法期望一个 &lt;code>&amp;amp;'static self&lt;/code>，以确保 &lt;code>idt&lt;/code> 引用在整个程序生命周期中可用。因为CPU会在每个异常发生的时候访问这张表，直到我们加载了其它的&lt;code>InterruptDescriptorTable&lt;/code>对象。所以，使用比 &lt;code>'static&lt;/code> 短的生命周期会导致 use-after-free bug。&lt;/p>
&lt;p>事实上，情况很明白。我们的 &lt;code>idt&lt;/code> 在栈上创建，所以它只在 &lt;code>init&lt;/code> 函数的生命周期中有效。一旦这个栈内存被其它函数重用，CPU会把随机的栈内存当作IDT。幸运的是， &lt;code>InterruptDescriptorTable::load&lt;/code> 在函数定义中明确要求了必要的生命周期条件（译者注：也就是必须使用 &lt;code>'static&lt;/code> 生命周期）。所以，Rust 编译器可以在编译期就阻止这个潜在的 bug 。&lt;/p>
&lt;p>为了解决这个问题，我们需要保存我们的 &lt;code>idt&lt;/code> 对象到拥有 &lt;code>'static&lt;/code> 生命周期的地方。我们可以使用 &lt;code>Box&lt;/code> 把 IDT 分配到堆上，并转换为 &lt;code>'static&lt;/code> 引用，但是我们是在开发操作系统内核，所以并不会有堆这个概念。&lt;/p>
&lt;p>作为代替，我们可以把 IDT 保存为 常量（&lt;code>static&lt;/code>）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">static IDT: InterruptDescriptorTable = InterruptDescriptorTable::new();
pub fn init_idt() {
IDT.breakpoint.set_handler_fn(breakpoint_handler);
IDT.load();
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是，这有一个问题：常量是不可变的，所以我们不能修改来自 &lt;code>init&lt;/code> 函数的IDT中的断点条目。我们可以使用 &lt;a href="https://doc.rust-lang.org/1.30.0/book/second-edition/ch19-01-unsafe-rust.html#accessing-or-modifying-a-mutable-static-variable">&lt;code>static mut&lt;/code>&lt;/a> 解决这个问题：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">IDT&lt;/span>: &lt;span class="nc">InterruptDescriptorTable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">InterruptDescriptorTable&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">init_idt&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">unsafe&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">IDT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">set_handler_fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="n">point_handler&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">IDT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种变体不会出现编译错误，但是并不符合优雅的编程风格。 &lt;code>static mut&lt;/code> 非常容易造成数据竞争，所以在每一次访问中都需要使用 &lt;a href="https://doc.rust-lang.org/1.30.0/book/second-edition/ch19-01-unsafe-rust.html#unsafe-superpowers">&lt;code>unsafe&lt;/code>&lt;/a> 代码块。&lt;/p>
&lt;h4 id="懒加载常量">懒加载常量&lt;/h4>
&lt;p>&lt;code>lazy_static&lt;/code> 宏的存在令人庆幸。它可以让常量在被第一次使用的时候被初始化，而不是在编译期。因此，我们可以在初始化代码块中做几乎所有的事情，甚至读取常量在运行时的值。&lt;/p>
&lt;p>我们已经在 &lt;a href="https://os.phil-opp.com/vga-text-mode/#lazy-statics">created an abstraction for the VGA text buffer&lt;/a> 引用了 &lt;code>lazy_static&lt;/code> 库。所以我们可以直接使用 &lt;code>lazy_static!&lt;/code> 宏去创建静态的IDT：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">// in src/interrupts.rs
use lazy_static::lazy_static;
lazy_static! {
static ref IDT: InterruptDescriptorTable = {
let mut idt = InterruptDescriptorTable::new();
idt.breakpoint.set_handler_fn(breakpoint_handler);
idt
};
}
pub fn init_idt() {
IDT.load();
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种方法不需要 &lt;a href="https://doc.rust-lang.org/1.30.0/book/second-edition/ch19-01-unsafe-rust.html#unsafe-superpowers">&lt;code>unsafe&lt;/code>&lt;/a> 代码块，因为 &lt;code>lazy_static!&lt;/code> 宏在底层使用了 &lt;a href="https://doc.rust-lang.org/1.30.0/book/second-edition/ch19-01-unsafe-rust.html#unsafe-superpowers">&lt;code>unsafe&lt;/code>&lt;/a> 代码块，但是抽象出了一个安全接口。&lt;/p>
&lt;h3 id="运行">运行&lt;/h3>
&lt;p>让内核种的异常处理工作的最后一步是在 &lt;code>main.rs&lt;/code> 中调用 &lt;code>init_idt&lt;/code> 函数。在 &lt;code>lib.rs&lt;/code> 中抽象一个总体的 &lt;code>init&lt;/code> 函数而不是直接调用:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">// in src/lib.rs
pub fn init() {
interrupts::init_idt();
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个函数用来放置可以被 &lt;code>main.rs&lt;/code> , &lt;code>lib.rs&lt;/code>中的 &lt;code>_start&lt;/code> 函数和集成测试所共享的初始化代码。&lt;/p>
&lt;p>在 &lt;code>main.rs&lt;/code> 中的 &lt;code>_start&lt;/code> 函数中调用 &lt;code>init&lt;/code> 函数，并触发一个断点异常。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">// in src/main.rs
#[no_mangle]
pub extern &amp;#34;C&amp;#34; fn _start() -&amp;gt; ! {
println!(&amp;#34;Hello World{}&amp;#34;, &amp;#34;!&amp;#34;);
blog_os::init(); // new
// invoke a breakpoint exception
x86_64::instructions::interrupts::int3(); // new
// as before
#[cfg(test)]
test_main();
println!(&amp;#34;It did not crash!&amp;#34;);
loop {}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 &lt;code>cargo run&lt;/code> 命令在QEMU中运行程序：&lt;/p>
&lt;p>&lt;img src="https://markdown-ngy.oss-cn-beijing.aliyuncs.com/qemu-breakpoint-exception.png" alt="qemu-breakpoint-exception">&lt;/p>
&lt;p>CPU成功调用了断点异常处理函数，并打印了一些消息，然后返回 &lt;code>_start&lt;/code> 函数继续打印了 &lt;code>It did not crash!&lt;/code> 消息。&lt;/p>
&lt;p>可以发现，中断栈帧显示了中断发生时的指令和栈指针地址。这有助于调试不该发生的异常。&lt;/p>
&lt;h3 id="增加test">增加Test&lt;/h3>
&lt;p>增加一个确认上文中CPU继续工作的测试。首先，让 &lt;code>lib.rs&lt;/code> 的 &lt;code>_start&lt;/code> 函数同样调用 &lt;code>init&lt;/code> 函数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">// in src/lib.rs
/// Entry point for `cargo test`
#[cfg(test)]
#[no_mangle]
pub extern &amp;#34;C&amp;#34; fn _start() -&amp;gt; ! {
init(); // new
test_main();
loop {}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>既然 &lt;code>lib.rs&lt;/code> 中的测试完全独立于 &lt;code>main.rs&lt;/code> ，必须使用命令 &lt;code>cargo test --lib&lt;/code> 来指定运行 &lt;code>lib.rs&lt;/code> 中的 &lt;code>_start&lt;/code> 函数。在&lt;code>lib.rs&lt;/code> 中的测试运行以前，我们需要调用 &lt;code>init&lt;/code> 函数去建立IDT。&lt;/p>
&lt;p>现在，创建一个 &lt;code>test_breakpoint_exception&lt;/code> 测试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">// in src/interrupts.rs
#[test_case]
fn test_breakpoint_exception() {
// invoke a breakpoint exception
x86_64::instructions::interrupts::int3();
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个测试调用了 &lt;code>x86_64&lt;/code> 库的 &lt;code>int3&lt;/code> 函数去触发断点异常。通过检查异常处理后程序继续执行，可以验证断点异常处理函数正常工作。&lt;/p>
&lt;p>使用 &lt;code>cargo test&lt;/code> （所有测试）或 &lt;code>cargo test --lib&lt;/code>（只限于 &lt;code>lib.rs&lt;/code> 和它的子模块中的测试）命令运行新的测试，应当可以看见：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">blog_os::interrupts::test_breakpoint_exception... [ok]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="过于抽象-too-much-magic">过于抽象?（ Too much Magic?）&lt;/h2>
&lt;p>&lt;code>x86-interrupt&lt;/code> 调用约定和 &lt;a href="https://docs.rs/x86_64/0.12.1/x86_64/structures/idt/struct.InterruptDescriptorTable.html">&lt;code>InterruptDescriptorTable&lt;/code>&lt;/a> 让异常处理流程变得相当简单愉快。如果你觉得太过抽象或有兴趣学习异常处理更硬核的细节，&lt;a href="https://os.phil-opp.com/first-edition/extra/naked-exceptions/">“Handling Exceptions with Naked Functions”&lt;/a> 系列会告诉你如何在不使用 &lt;code>x86-interrupt&lt;/code> 调用约定的情况下处理异常并建立自己的IDT类型。在 &lt;code>x86-interrupt&lt;/code> 调用约定和 &lt;code>x86_64&lt;/code> 库问世以前，这个系列可以说是最主流的异常处理主体相关的博客。不得不提的是，这些文章基于第一版本的 &lt;a href="https://os.phil-opp.com/first-edition/">Writing an OS in Rust &lt;/a>，所以可能会有些过时。&lt;/p>
&lt;h2 id="接下来">接下来?&lt;/h2>
&lt;p>我们成功地触发了第一个异常并从中返回！下一步是确保可以捕获所有异常，因为未被捕获地异常会引发严重的 &lt;a href="https://wiki.osdev.org/Triple_Fault">triple fault&lt;/a> ，继而导致系统复位。下一篇文章解释了如何通过捕获 &lt;a href="https://wiki.osdev.org/Double_Fault#Double_Fault">双重异常 double faults&lt;/a> 来避免这些问题。&lt;/p></description></item><item><title>Go Channel</title><link>https://justice.bj.cn/post/14.language/golang/golang-channel/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-channel/</guid><description>&lt;h1 id="go-channel">Go Channel&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>channel&lt;/code>是first-class的，可以被存储到变量中，可以作为参数传递给函数，也可以作为函数的返回值返回;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>channel分为：有缓存channel和无缓冲channel两种；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>close：如果 Channel 是一个空指针或者已经被关闭时，Go 语言运行时都会直接崩溃并抛出异常;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从一个&lt;code>nil&lt;/code> channel中接收数据会一直被block;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从一个被closed的channel中接收数据会立即返回；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="定义">定义&lt;/h2>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2021/01/26-12-35-27-2021-01-26-12-35-23-image.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Hchan&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">uintgo&lt;/span> &lt;span class="n">qcount&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 队列q中的总数据数量
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uintgo&lt;/span> &lt;span class="n">dataqsiz&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 环形队列q的数据大小
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uint16&lt;/span> &lt;span class="n">elemsize&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//队列的当前使用量
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="n">closed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">uint8&lt;/span> &lt;span class="n">elemalign&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">Alg&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">elemalg&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// interface for element type
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uintgo&lt;/span> &lt;span class="n">sendx&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 发送index
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uintgo&lt;/span> &lt;span class="n">recvx&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 接收index
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">WaitQ&lt;/span> &lt;span class="n">recvq&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 因recv而阻塞的等待队列
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">WaitQ&lt;/span> &lt;span class="n">sendq&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 因send而阻塞的等待队列
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Lock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>带缓冲区的chan，则缓冲区数据实际上是紧接着Hchan结构体中分配的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Hchan&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">hint&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">elem&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">struct&lt;/span> &lt;span class="n">WaitQ&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">SudoG&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">first&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">SudoG&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">SudoG&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">G&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// g and selgen constitute
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">uint32&lt;/span> &lt;span class="n">selgen&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// a weak pointer to g
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">SudoG&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">link&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">int64&lt;/span> &lt;span class="n">releasetime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">byte&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">elem&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// data element
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="读写channel操作">读写channel操作&lt;/h2>
&lt;p>写channel操作，在底层运行时库中对应的是一个runtime.chansend函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">//c &amp;lt;- v
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">runtime&lt;/span>&lt;span class="err">·&lt;/span>&lt;span class="n">chansend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ChanType&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Hchan&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">byte&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ep&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pres&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pc&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="select的实现">select的实现&lt;/h2>
&lt;p>select-case中的chan操作编译成了if-else。比如：&lt;/p>
&lt;p>每个select都对应一个Select结构体&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">select&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="nx">foo&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="nx">bar&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 编译如下：
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="nf">selectnbrecv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="nx">foo&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>&lt;span class="nx">bar&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>select和case关键字使用了下面的结构体：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">struct&lt;/span> &lt;span class="nx">Scase&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nx">SudoG&lt;/span> &lt;span class="nx">sg&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// must be first member (cast to Scase)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Hchan&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="kd">chan&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// chan
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nx">pc&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// return pc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">uint16&lt;/span> &lt;span class="nx">kind&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">uint16&lt;/span> &lt;span class="nx">so&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// vararg of selected bool
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nx">receivedp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// pointer to received bool (recv2)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="kd">struct&lt;/span> &lt;span class="nx">Select&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">uint16&lt;/span> &lt;span class="nx">tcase&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 总的scase[]数量
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">uint16&lt;/span> &lt;span class="nx">ncase&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 当前填充了的scase[]数量
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">uint16&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nx">pollorder&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// case的poll次序
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Hchan&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="nx">lockorder&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// channel的锁住的次序
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Scase&lt;/span> &lt;span class="nx">scase&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// 每个case会在结构体里有一个Scase，顺序是按出现的次序
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.bookstack.cn/read/go-internals/zh-07.1.md">高级数据结构的实现 - channel - 《深入解析Go》 - 书栈网 · BookStack&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Golang之syscall</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bsyscall/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bsyscall/</guid><description>&lt;h1 id="golang之syscall">Golang之syscall&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ User Mode ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
│
│ Application syscall library
program /src/syscall │
│
│
│ ┌───────────────────┐ ┌──────────────────────┐
│ │ ┌────────────▶│Faccessat { │ │
│ │ │ │ │ │
│ │ │ │ runtime·Syscall6 { │ │
│ │... │ │ │ │
│syscall.Access( │ │ │ ... │ │
│ │ path, mode)───┼────────┘ │ SYSCALL ──────────┼────────────────┐
│... ◀──────────┼──────┐ │ ... ◀──────────┼──────────┼─────┼────────┐
│ │ │ └───────────────┼─── return; │ │ │
│ │ │ } │ │ │ │
│ │ │ │} │ │ │
└───────────────────┘ └──────────────────────┘ │ │ │
│ │ │
─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘ │ ▲
│ │
switch to kernel mode │
┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ Kernel Mode ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ▼ │
│ │ │
│ System call Trap handler │ │
service routine │ │ │
│ ┌──────────────────┐ ┌───────────────────────┐ │ │
│sys_faccessat() ◀─┼───────────┐ │system call: ◀───────┼────────┼─────┘ │
│ │{ │ │ │ │ │
│ │ │ │ │ │ │
│ │ │ │ │ ... │ │
│ │ │ │ │ │ │
│ │ ... │ └───────────┼───call sys_call_table │ switch to user mode
│ │ │ │ │ │
│ │ │ ┌───────────┼─▶ ... │ │
│ return error; ──┼───────────┘ │ │ │ │
│ │} │ │ ───────────────────┼───────────▶───────────┘
└──────────────────┘ └───────────────────────┘ │
│
─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">/syscall/syscall_linux.go
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以把系统调用分为三类:&lt;/p>
&lt;ol>
&lt;li>阻塞系统调用&lt;/li>
&lt;li>非阻塞系统调用&lt;/li>
&lt;li>&lt;code>wrapped&lt;/code> 系统调用&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//sys Madvise(b []byte, advice int) (err error)
&lt;/span>&lt;span class="c1">//sysnb EpollCreate(size int) (fd int, err error)
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//mksyscall.pl 脚本 将上面的定义生成如下
&lt;/span>&lt;span class="c1">//sys
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">Madvise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">advice&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">_p0&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pointer&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">_p0&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Pointer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">_p0&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Pointer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">_zero&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">e1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">Syscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">SYS_MADVISE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">_p0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">advice&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">e1&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">errnoErr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//sysnb
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">EpollCreate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">size&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">fd&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">e1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">RawSyscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">SYS_EPOLL_CREATE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">size&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fd&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">e1&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">errnoErr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//wrapped
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">Rename&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">oldpath&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newpath&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">Renameat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">_AT_FDCWD&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">oldpath&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_AT_FDCWD&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newpath&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>入口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Syscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">trap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a3&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r2&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Errno&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">Syscall6&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">trap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a6&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r2&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Errno&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">RawSyscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">trap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a3&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r2&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Errno&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">RawSyscall6&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">trap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a6&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r2&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Errno&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些函数的实现都是汇编，按照 linux 的 syscall 调用规范，我们只要在汇编中把参数依次传入寄存器，并调用 SYSCALL 指令即可进入内核处理逻辑，系统调用执行完毕之后，返回值放在 RAX 中:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>RDI&lt;/th>
&lt;th>RSI&lt;/th>
&lt;th>RDX&lt;/th>
&lt;th>R10&lt;/th>
&lt;th>R8&lt;/th>
&lt;th>R9&lt;/th>
&lt;th>RAX&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>参数一&lt;/td>
&lt;td>参数二&lt;/td>
&lt;td>参数三&lt;/td>
&lt;td>参数四&lt;/td>
&lt;td>参数五&lt;/td>
&lt;td>参数六&lt;/td>
&lt;td>系统调用编号/返回值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Syscall 和 Syscall6 的区别只有传入参数不一样&lt;/p>
&lt;p>Syscall 和 Syscall6在进入和退出Syscall时，分别调用了&lt;code>runtime·entersyscall(SB)&lt;/code>和&lt;code>runtime·exitsyscall(SB)&lt;/code>;&lt;/p>
&lt;p>RawSyscall 和 RawSyscall6 在进入和退出Syscall 时候没有调用；&lt;/p>
&lt;h4 id="新版本抢占式调度中的-rawsyscall-和-syscall">新版本抢占式调度中的 RawSyscall 和 Syscall&lt;/h4>
&lt;p>由于 &lt;code>RawSyscall&lt;/code> 相较于 &lt;code>Syscall&lt;/code> 缺少了 &lt;code>runtime·entersyscall(SB)&lt;/code> 以及 &lt;code>runtime·exitsyscall(SB)&lt;/code> 的调用，当 &lt;code>g&lt;/code> 执行的是阻塞性质的系统调用的时候，当前 &lt;code>g&lt;/code> 会维持 &lt;code>running&lt;/code> 状态，runtime 系统监控在进行全局调度的时候一旦发现运行超过 10ms 的 &lt;code>g&lt;/code> 就会执行抢占操作（1.14.3 版本, linux_amd64 下为例），通过发送信号量给 &lt;code>g&lt;/code> 对应的线程，而由于线程在初始化的时候进行了信号量的监听以及设置了相应的 &lt;code>sa_flags&lt;/code> 参数，虽然包含诸如&lt;code>SA_RESTART&lt;/code>参数会让系统调用在信号中断后自动恢复，但是不是对所有系统调用都会有效，这将会导致在收到信号量的时候对正在阻塞的系统调用产生中断，&lt;/p>
&lt;p>提供给用户使用的系统调用，基本都会通知 runtime，以 entersyscall，exitsyscall 的形式来告诉 runtime，在这个 syscall 阻塞的时候，由 runtime 判断是否把 P 腾出来给其它的 M 用。解绑定指的是把 M 和 P 之间解绑，如果绑定被解除，在 syscall 返回时，这个 g 会被放入执行队列 runq 中。&lt;/p>
&lt;p>同时 runtime 又保留了自己的特权，在执行自己的逻辑的时候，我的 P 不会被调走，这样保证了在 Go 自己“底层”使用的这些 syscall 返回之后都能被立刻处理。&lt;/p>
&lt;p>所以同样是 epollwait，runtime 用的是不能被别人打断的，你用的 syscall.EpollWait 那显然是没有这种特权的。&lt;/p>
&lt;h2 id="vsdo">vsdo&lt;/h2>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://github.com/cch123/golang-notes/blob/master/syscall.md">https://github.com/cch123/golang-notes/blob/master/syscall.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.itpub.net/69908606/viewspace-2642153/">曹春晖：谈一谈 Go 和 Syscall_ITPUB博客&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Golang内存对齐</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid><description>&lt;h1 id="golang内存对齐">Golang内存对齐&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>CPU 始终以字长访问内存，&lt;/li>
&lt;/ul>
&lt;h2 id="对齐保证align-guarantee">对齐保证(align guarantee)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>结构体的成员变量，第一个成员变量的偏移量为 0。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>往后的每个成员变量的对齐值必须为&lt;strong>编译器默认对齐长度&lt;/strong>（&lt;code>#pragma pack(n)&lt;/code>）或&lt;strong>当前成员变量类型的长度&lt;/strong>（&lt;code>unsafe.Sizeof&lt;/code>），取&lt;strong>最小值作为当前类型的对齐值&lt;/strong>。其偏移量必须为对齐值的整数倍&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结构体本身，对齐值必须为&lt;strong>编译器默认对齐长度&lt;/strong>（&lt;code>#pragma pack(n)&lt;/code>）或&lt;strong>结构体的所有成员变量类型中的最大长度&lt;/strong>，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>取&lt;strong>最大数的最小整数倍&lt;/strong>作为对齐值；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结合以上两点，可得知若&lt;strong>编译器默认对齐长度&lt;/strong>（&lt;code>#pragma pack(n)&lt;/code>）超过结构体内成员变量的类型最大长度时，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>默认对齐长度是没有任何意义的；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://geektutu.com/post/hpg-struct-alignment.html">https://geektutu.com/post/hpg-struct-alignment.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://eddycjy.gitbook.io/golang/di-1-ke-za-tan/go-memory-align">1.5 在 Go 中恰到好处的内存对齐 - 跟煎鱼学 Go&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.newbmiao.com/2020/02/10/dig101-golang-struct-memory-align.html">http://blog.newbmiao.com/2020/02/10/dig101-golang-struct-memory-align.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Golang内存管理</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>&lt;h1 id="golang内存管理">Golang内存管理&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Golang内存管理采用类似&lt;code>tcmalloc&lt;/code>的分级分配算法，主要由&lt;code>MHeap&lt;/code>、&lt;code>MCentral&lt;/code>、&lt;code>MCache&lt;/code> 3 级组成。&lt;/p>
&lt;p>按分配对象的大小不同，选择相应的区域进行分配。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2021/12/28-10-17-33-2021-12-28-10-17-27-image.png" alt="">&lt;/p>
&lt;h2 id="内存布局">内存布局&lt;/h2>
&lt;p>golang程序启动时，会根据OS类型向OS申请一大块连续虚拟内存空间如下：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/22-13-49-34-2020-05-04-09-32-44-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>arena&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>由连续的page(8KB)组成，用于具体的对象分配；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>spans&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>存放了&lt;code>mspan&lt;/code>的指针(8Byte)，表示arena区中的某一页(page)属于哪个&lt;code>mspan&lt;/code>，用于管理arena；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>bitmap&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>用于标记&lt;code>arena&lt;/code>(即heap)中的对象, 每个对象使用两个bit进行标记，分别表示gc状态和是否分配；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>高地址部分指向arena区域的低地址部分，地址是由高地址向低地址增长的；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/22-13-49-42-2020-05-04-09-36-04-image.png" alt="">&lt;/p>
&lt;h2 id="基本数据结构">基本数据结构&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>MHeap&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>代表了golang的整个堆内存;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>全局唯一的;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大对象(&amp;gt;32KB)直接在MHeap中分配；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>mheap 包含free，large两个域：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>free: free包含一个256单元的数组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>large:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>给MCentral和MCache等下层提供空间；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/22-13-49-48-2020-05-04-09-39-31-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>MCentral&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>集中管理不同类型（67种）的MSpan，对应TCMalloc中的CentralCache；&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>每个mcentral包含两个mspan列表:
&lt;ul>
&lt;li>noempty: 表示已被mcache的mspan list；&lt;/li>
&lt;li>empty: 表示未被使用(empty)的mspan 链表。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>当某个goroutine中的mcache内存不够时，就会从mcentral的empty链表中分配对应的mspan。&lt;/li>
&lt;li>如果mcentral内存不够，就会从MHeap中分配；&lt;/li>
&lt;li>mcentral中有锁，以为多个goroutine分配提供互斥；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/22-13-49-08-2020-05-04-09-38-29-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>MCache&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>是各个goroutine自有的局部内存;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>向&lt;code>mcentral&lt;/code>申请得到的;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>小对象(&amp;lt;=32KB)的分配直接在goroutine内部进行，不用加锁，提高分配速度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>mcache 内存不够时，会向mcentral重新申请；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/22-13-49-13-2020-05-04-09-38-54-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>MSpan&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>内存管理基本单元，由一片连续的8KB页组成的双向链表，进行内存对象的数据分配;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为满足不同大小对象分配的需要，减少内存碎片，同时兼顾内存利用率，golang将span分层不同的大小类型（总共67种）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对象分配内存时，根据对象大小，选择最合适的mspan进行分配。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/22-13-49-19-2020-05-04-09-37-59-image.png" alt="">&lt;/p>
&lt;h2 id="内存分配">内存分配&lt;/h2>
&lt;p>Go的内存分配器在分配对象时，根据对象的大小，分成三类：&lt;/p>
&lt;ul>
&lt;li>Tiny对象： (0, 16B]，使用mcache的tiny分配器分配，多个tiny对象可组合在一个mspan中&lt;/li>
&lt;li>Small对象：(16B, 32KB ]，在mcache中选择相应规格大小的mspan进行分配；&lt;/li>
&lt;li>大对象：&amp;gt;32KB, 直接从MHeap中分配；&lt;/li>
&lt;/ul>
&lt;p>golang变量是在栈上分配还是在堆上分配，是由逃逸分析的结果决定的。&lt;/p>
&lt;p>通常情况下，编译器是倾向于将变量分配到栈上的，因为它的开销小。&lt;/p>
&lt;p>分配顺序：&lt;/p>
&lt;ul>
&lt;li>首先通过计算使用的大小规格&lt;/li>
&lt;li>然后&lt;code>mcache&lt;/code>中对应大小规格的块分配。&lt;/li>
&lt;li>如果&lt;code>mcache&lt;/code> free 链表不够分配&lt;/li>
&lt;li>如果&lt;code>mcentral&lt;/code>中没有可用的块，则向&lt;code>mheap&lt;/code>申请，并根据算法找到最合适的&lt;code>mspan&lt;/code>。&lt;/li>
&lt;li>如果申请到的&lt;code>mspan&lt;/code> 超出申请大小，将会根据需求进行切分，以返回用户所需的页数。剩余的页构成一个新的 mspan 放回 mheap 的空闲列表。&lt;/li>
&lt;li>如果 mheap 中没有可用 span，则向操作系统申请一系列新的页（最小 1MB）。&lt;/li>
&lt;/ul>
&lt;h2 id="gc流程">GC流程&lt;/h2>
&lt;h3 id="gc时机">GC时机&lt;/h3>
&lt;p>golang gc的触发是由gcpercent变量控制的，当新分配的内存占已在使用中的内存的比例超过gcprecent时就会触发。&lt;/p>
&lt;p>比如，gcpercent=100，当前使用了4M的内存，那么当内存分配到达8M时就会再次gc。&lt;/p>
&lt;p>如果回收完毕后，内存的使用量为5M，那么下次回收的时机则是内存分配达到10M的时候。&lt;/p>
&lt;p>也就是说，并不是内存分配越多，垃圾回收频率越高，这个算法使得垃圾回收的频率比较稳定，适合应用的场景。&lt;/p>
&lt;p>gcpercent的值是通过环境变量GOGC获取的，如果不设置这个环境变量，默认值是100。&lt;/p>
&lt;p>如果将它设置成off，则是关闭垃圾回收。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/27807169">https://zhuanlan.zhihu.com/p/27807169&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/2904efc7f1a8">图解Golang的内存分配&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/29216091">https://zhuanlan.zhihu.com/p/29216091&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/76802887">https://zhuanlan.zhihu.com/p/76802887&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yq.aliyun.com/articles/652551">&lt;strong>简单易懂的 Go 内存分配原理解读&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://juejin.im/post/5c888a79e51d456ed11955a8">https://juejin.im/post/5c888a79e51d456ed11955a8&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/225190602">白话Go语言内存管理三部曲（一）内存分配原理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000022499402">go怎样做stw&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/3gGbJaeuvx4klqcv34hmmw">https://mp.weixin.qq.com/s/3gGbJaeuvx4klqcv34hmmw&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Golang汇编</title><link>https://justice.bj.cn/post/14.language/golang/golang%E6%B1%87%E7%BC%96/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E6%B1%87%E7%BC%96/</guid><description>&lt;h1 id="golang汇编">Golang汇编&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Go语言汇编基于plan9汇编,是一个中间汇编方式，以忽略底层不同架构之间的一些差别；&lt;/p>
&lt;h3 id="寄存器">寄存器&lt;/h3>
&lt;p>Go汇编引入了4个伪寄存器，这4个寄存器是编译器用来维护上下文、特殊标识等作用的:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>PC&lt;/strong>(Program counter, 程序计数器): jumps and branches，指向指令地址&lt;/li>
&lt;li>&lt;strong>FP&lt;/strong>(Frame pointer, 栈桢指针): arguments and locals.(指向当前栈帧)，形如 &lt;code>symbol+offset(FP)&lt;/code> 的方式，引用函数的输入参数。例如 &lt;code>arg0+0(FP)&lt;/code>&lt;/li>
&lt;li>&lt;strong>SB&lt;/strong>(Static base pointer,全局静态基指针): global symbols.(指向全局符号表)&lt;/li>
&lt;li>&lt;strong>SP&lt;/strong>(Stack pointer, 栈顶指针): top of stack.(指向当前栈顶部)，形如 &lt;code>symbol+offset(SP)&lt;/code> 的方式，引用函数的局部变量&lt;/li>
&lt;/ul>
&lt;p>注意:&lt;/p>
&lt;p>    栈是向下增长，golang的汇编是调用者维护参数返回值跟返回地址。所以FP的值小于参数跟返回值。&lt;/p>
&lt;h4 id="常用操作指令">常用操作指令&lt;/h4>
&lt;p>格式：&lt;code>&amp;lt;指令&amp;gt; [源操作数] [目的操作数]&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>助记符&lt;/th>
&lt;th>指令种类&lt;/th>
&lt;th>用途&lt;/th>
&lt;th>示例&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>MOVQ&lt;/code>&lt;/td>
&lt;td>传送&lt;/td>
&lt;td>数据传送&lt;/td>
&lt;td>MOVQ 48, AX&lt;/td>
&lt;td>// 把 48 传送到 AX&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LEAQ&lt;/code>&lt;/td>
&lt;td>传送&lt;/td>
&lt;td>地址传送&lt;/td>
&lt;td>LEAQ AX, BX&lt;/td>
&lt;td>// 把 AX 有效地址传送到 BX&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>PUSHQ&lt;/code>&lt;/td>
&lt;td>传送&lt;/td>
&lt;td>栈压入&lt;/td>
&lt;td>PUSHQ AX&lt;/td>
&lt;td>// 将 AX 内容送入栈顶位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>POPQ&lt;/code>&lt;/td>
&lt;td>传送&lt;/td>
&lt;td>栈弹出&lt;/td>
&lt;td>POPQ AX&lt;/td>
&lt;td>// 弹出栈顶数据后修改栈顶指针&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ADDQ&lt;/code>&lt;/td>
&lt;td>运算&lt;/td>
&lt;td>相加并赋值&lt;/td>
&lt;td>ADDQ BX, AX&lt;/td>
&lt;td>// 等价于 AX+=BX&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SUBQ&lt;/code>&lt;/td>
&lt;td>运算&lt;/td>
&lt;td>相减并赋值&lt;/td>
&lt;td>SUBQ BX, AX&lt;/td>
&lt;td>// 等价于 AX-=BX&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CMPQ&lt;/code>&lt;/td>
&lt;td>运算&lt;/td>
&lt;td>比较大小&lt;/td>
&lt;td>CMPQ SI CX&lt;/td>
&lt;td>// 比较 SI 和 CX 的大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CALL&lt;/code>&lt;/td>
&lt;td>转移&lt;/td>
&lt;td>调用函数&lt;/td>
&lt;td>CALL runtime.printnl(SB)&lt;/td>
&lt;td>// 发起调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>JMP&lt;/code>&lt;/td>
&lt;td>转移&lt;/td>
&lt;td>无条件转移指令&lt;/td>
&lt;td>JMP 0x0185&lt;/td>
&lt;td>//无条件转至 0x0185 地址处&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>JLS&lt;/code>&lt;/td>
&lt;td>转移&lt;/td>
&lt;td>条件转移指令&lt;/td>
&lt;td>JLS 0x0185&lt;/td>
&lt;td>//左边小于右边，则跳到 0x0185&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="err">//&lt;/span> &lt;span class="err">栈&lt;/span>
&lt;span class="nf">SUBQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mh">0x18&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">SP&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="nb">SP&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="err">=&lt;/span> &lt;span class="mh">0x18&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">栈指针下移，栈范围扩大，为函数分配函数栈帧&lt;/span>
&lt;span class="nf">ADDQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mh">0x18&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">SP&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="nb">SP&lt;/span> &lt;span class="o">++&lt;/span> &lt;span class="mh">0x18&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">清除函数栈帧&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">数据&lt;/span>&lt;span class="nf">copy&lt;/span>
&lt;span class="nf">MOVB&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">DI&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="err">，常数用&lt;/span>&lt;span class="kc">$&lt;/span>&lt;span class="nv">num表示&lt;/span>
&lt;span class="nf">MOVW&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mh">0x10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">BX&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="nv">s&lt;/span>
&lt;span class="nf">MOVD&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">DX&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="nv">s&lt;/span>
&lt;span class="nf">MOVQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">AX&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="nv">s&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">计算指令&lt;/span>
&lt;span class="nf">ADDQ&lt;/span> &lt;span class="nb">AX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">BX&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="nb">BX&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="err">=&lt;/span> &lt;span class="nb">AX&lt;/span>
&lt;span class="nf">SUBQ&lt;/span> &lt;span class="nb">AX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">BX&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="nb">BX&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="err">=&lt;/span> &lt;span class="nb">AX&lt;/span>
&lt;span class="nf">IMULQ&lt;/span> &lt;span class="nb">AX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">BX&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="nb">BX&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="err">=&lt;/span> &lt;span class="nb">AX&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">跳转&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">无条件跳转&lt;/span>
&lt;span class="nf">JMP&lt;/span> &lt;span class="nv">addr&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">跳转到地址，地址可为代码中的地址&lt;/span> &lt;span class="err">不过实际上手写不会出现这种东西&lt;/span>
&lt;span class="nf">JMP&lt;/span> &lt;span class="nv">label&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">跳转到标签&lt;/span> &lt;span class="err">可以跳转到同一函数内的标签位置&lt;/span>
&lt;span class="nf">JMP&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">PC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">以当前置顶为基础，向前&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="err">后跳转&lt;/span>&lt;span class="nv">x行&lt;/span>
&lt;span class="nf">JMP&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">PC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">同上&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">有条件跳转&lt;/span>
&lt;span class="nf">JNZ&lt;/span> &lt;span class="nv">target&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">如果&lt;/span>&lt;span class="nv">zero&lt;/span> &lt;span class="nv">flag被set过&lt;/span>&lt;span class="err">，则跳转&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">变量&lt;/span>
&lt;span class="nf">DATA&lt;/span> &lt;span class="nv">symbol&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nv">offset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nv">width&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">value&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">初始化&lt;/span>&lt;span class="nv">symbol&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nv">offset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">的数据中&lt;/span>&lt;span class="nv">width&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="nv">s&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">赋值为&lt;/span>&lt;span class="nv">value&lt;/span>
&lt;span class="nf">GLOBL&lt;/span> &lt;span class="nv">runtime&lt;/span>&lt;span class="err">·&lt;/span>&lt;span class="nv">tlsoffset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">NOPTR&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">声明一个全局变量&lt;/span>&lt;span class="nv">tlsoffset&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="err">，没有&lt;/span>&lt;span class="nv">DATA部分&lt;/span>&lt;span class="err">，因其值为&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="err">。&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="nf">NOPTR&lt;/span> &lt;span class="err">表示这个变量数据中不存在指针，&lt;/span>&lt;span class="nv">GC不需要扫描&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="汇编示例">汇编示例&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">sum&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1">// 不设置该局部变量sum，add栈空间大小会是0
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">sum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">b&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">sum&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编译汇编&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ go tool compile -N -l -S main.go
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="err">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nf">.add&lt;/span> &lt;span class="nv">STEXT&lt;/span> &lt;span class="nv">nosplit&lt;/span> &lt;span class="nb">si&lt;/span>&lt;span class="nv">ze&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="mi">60&lt;/span> &lt;span class="nv">args&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="mh">0x18&lt;/span> &lt;span class="nv">locals&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="mh">0x10&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0000&lt;/span> &lt;span class="mi">00000&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">TEXT&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">NOSPLIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">24&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0000&lt;/span> &lt;span class="mi">00000&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">SUBQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">SP&lt;/span> &lt;span class="c1">;;生成add栈空间&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0004&lt;/span> &lt;span class="mi">00004&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="nb">BP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0009&lt;/span> &lt;span class="mi">00009&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">LEAQ&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">BP&lt;/span>
&lt;span class="c1">;; ...omitted FUNCDATA stuff... &lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x000e&lt;/span> &lt;span class="mi">00014&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.~r2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;初始化返回值&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0017&lt;/span> &lt;span class="mi">00023&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;局部变量sum赋为0&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x001f&lt;/span> &lt;span class="mi">00031&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">AX&lt;/span> &lt;span class="c1">;;取参数a&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0024&lt;/span> &lt;span class="mi">00036&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">ADDQ&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.b&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">AX&lt;/span> &lt;span class="c1">;;等价于AX=a+b&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0029&lt;/span> &lt;span class="mi">00041&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="nb">AX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;赋值局部变量sum&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x002d&lt;/span> &lt;span class="mi">00045&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="nb">AX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.~r2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;设置返回值&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0032&lt;/span> &lt;span class="mi">00050&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">BP&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0037&lt;/span> &lt;span class="mi">00055&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">ADDQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">SP&lt;/span> &lt;span class="c1">;;清除add栈空间&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x003b&lt;/span> &lt;span class="mi">00059&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">RET&lt;/span>
&lt;span class="nf">......&lt;/span>
&lt;span class="err">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nf">.main&lt;/span> &lt;span class="nv">STEXT&lt;/span> &lt;span class="nb">si&lt;/span>&lt;span class="nv">ze&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="mi">107&lt;/span> &lt;span class="nv">args&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="mh">0x0&lt;/span> &lt;span class="nv">locals&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="mh">0x28&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0000&lt;/span> &lt;span class="mi">00000&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">TEXT&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">......&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x000f&lt;/span> &lt;span class="mi">00015&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">SUBQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">SP&lt;/span> &lt;span class="c1">;; 生成main栈空间&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0013&lt;/span> &lt;span class="mi">00019&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="nb">BP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0018&lt;/span> &lt;span class="mi">00024&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">LEAQ&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">BP&lt;/span>
&lt;span class="c1">;; ...omitted FUNCDATA stuff...&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x001d&lt;/span> &lt;span class="mi">00029&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;add入参：1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0025&lt;/span> &lt;span class="mi">00037&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;add入参：2&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x002e&lt;/span> &lt;span class="mi">00046&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">CALL&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;调用add函数&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0033&lt;/span> &lt;span class="mi">00051&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">AX&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0038&lt;/span> &lt;span class="mi">00056&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="nb">AX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">..autotmp_0&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x003d&lt;/span> &lt;span class="mi">00061&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">CALL&lt;/span> &lt;span class="nv">runtime.printlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0042&lt;/span> &lt;span class="mi">00066&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">..autotmp_0&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">AX&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0047&lt;/span> &lt;span class="mi">00071&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="nb">AX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004b&lt;/span> &lt;span class="mi">00075&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">CALL&lt;/span> &lt;span class="nv">runtime.printint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0050&lt;/span> &lt;span class="mi">00080&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">CALL&lt;/span> &lt;span class="nv">runtime.printnl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0055&lt;/span> &lt;span class="mi">00085&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">CALL&lt;/span> &lt;span class="nv">runtime.printunlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x005a&lt;/span> &lt;span class="mi">00090&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">BP&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x005f&lt;/span> &lt;span class="mi">00095&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">ADDQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">SP&lt;/span> &lt;span class="c1">;;清除main栈空间&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0063&lt;/span> &lt;span class="mi">00099&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">RET&lt;/span>
&lt;span class="nf">......&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2022/01/09-15-58-32-2022-01-09-15-58-27-image.png" alt="">&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://guidao.github.io/asm.html">golang汇编基础知识&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://chai2010.cn/advanced-go-programming-book/ch3-asm/ch3-02-arch.html">3.2 计算机结构 · Go语言高级编程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000039753236">汇编是深入理解 Go 的基础&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://go.dev/doc/asm">A Quick Guide to Go's Assembler - The Go Programming Language&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/348227592">https://zhuanlan.zhihu.com/p/348227592&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://xargin.com/plan9-assembly/">Go 系列文章3 ：plan9 汇编入门&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://xiaomi-info.github.io/2019/11/27/golang-compiler-plan9/">https://xiaomi-info.github.io/2019/11/27/golang-compiler-plan9/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Go语言基础</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="go语言基础">Go语言基础&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="初始化">初始化&lt;/h2>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/22-13-51-07-image-20190412160342216.png" alt="image-20190412160342216">&lt;/p>
&lt;p>规则：&lt;/p>
&lt;ul>
&lt;li>每个package 只会被初始化一次；&lt;/li>
&lt;li>同一个 package，不同文件是按照文件名的顺序来初始化；&lt;/li>
&lt;li>不能循环 import , 例如：A import B ,然后又 B import A；&lt;/li>
&lt;li>任何 package , 都可以存在一个以上的 init() , 执行顺序由上而下；&lt;/li>
&lt;li>main() 只能存在于 package main；&lt;/li>
&lt;li>属于 package main 的文件 , 都将会初始化；&lt;/li>
&lt;/ul>
&lt;h2 id="变量">变量&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>golang变量声明即初始化；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//声明
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="nx">VAR_TYPE&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="基础语法">基础语法&lt;/h2>
&lt;h3 id="类型别名">类型别名&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>类型别名是go 1.9中增加的语法，用于给已有类型设置一个另外的名称；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>语法：&lt;code>type TypeAllias = OldType&lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类型别名除了名称和原类型不同外，其他完全一样，可以直接用在原类型用的所有属性，无须转换；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类型别名不允许循环定义；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大写字母开头的别名支持导出；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// 类型别名
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">identifier&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">Type&lt;/span>
&lt;span class="c1">// 类型定义
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">newType&lt;/span> &lt;span class="nx">Type&lt;/span>
&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="kt">byte&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kt">uint8&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="kt">rune&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kt">int32&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="类型嵌入">类型嵌入&lt;/h3>
&lt;p>golang中的类型不支持继承，但提供了嵌合机制；&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Wheel&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Size&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Engine&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Power&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">// 功率
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Type&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="c1">// 类型
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Car&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Wheel&lt;/span>
&lt;span class="nx">Engine&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">Car&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Wheel&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">Wheel&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">Engine&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">Engine&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;1.4T&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Power&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">143&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%+v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="基本数据结构">基本数据结构&lt;/h2>
&lt;h3 id="数组array">数组(array)&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// 初始化
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">arr1&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="nx">arr2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">arr3&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">arr4&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//指针数组
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">arr5&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="nx">arr5&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="c1">//数组复制: 元素个数和类型相同时才能复制
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//多维数组
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">arr10&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="nx">arr10&lt;/span> &lt;span class="o">:=&lt;/span>
&lt;span class="nx">array&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{{&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">31&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">41&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="切片slice">切片(slice)&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//初始化
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">slice1&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="c1">//nil slice
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">slice2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">slice3&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="c1">//空切片
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">slice4&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="映射map">映射(map)&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">dict1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">dict2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Red&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Yellow&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Blue&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="gc">gc&lt;/h3>
&lt;h3 id="goroutine">goroutine&lt;/h3>
&lt;h3 id="channel">channel&lt;/h3>
&lt;h3 id="interface">Interface&lt;/h3>
&lt;h3 id="sync">sync&lt;/h3>
&lt;ul>
&lt;li>WaitGroup&lt;/li>
&lt;/ul>
&lt;h3 id="defer">defer&lt;/h3>
&lt;p>defer 是后进先出。&lt;/p>
&lt;p>panic 需要等defer 结束后才会向上传递。 出现panic恐慌时候，会先按照defer的后入先出的顺序执行，最后才会执行panic。&lt;/p>
&lt;h3 id="关键字">关键字&lt;/h3>
&lt;ul>
&lt;li>defer&lt;/li>
&lt;/ul>
&lt;h3 id="值语义和引用语义">值语义和引用语义&lt;/h3>
&lt;p>Go语言中的大多数类型都基于值语义，包括：&lt;/p>
&lt;ul>
&lt;li>基本类型，如byte、int、bool、float32、string等；&lt;/li>
&lt;li>复合类型，如arry、struct、pointer等；&lt;/li>
&lt;/ul>
&lt;h3 id="字符类型">字符类型&lt;/h3>
&lt;p>golang中有两种字符类型：&lt;/p>
&lt;ul>
&lt;li>byte：uint8 类型， 代表一个&lt;a href="http://c.biancheng.net/c/ascii/">ASCII&lt;/a> 字符;&lt;/li>
&lt;li>rune： int32 类型，代表一个unicode字符；&lt;/li>
&lt;/ul>
&lt;h2 id="注意事项">注意事项&lt;/h2>
&lt;ol>
&lt;li>for-range 的k,v变量在整个遍历过程中共用，不能直接进行引用传递。&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;h2 id="包管理">包管理&lt;/h2>
&lt;h3 id="gopath">GOPATH&lt;/h3>
&lt;h3 id="go-mod">go-mod&lt;/h3>
&lt;h3 id="闭包">闭包&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Go语言支持闭包；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go语言能通过escape analyze识别出变量的作用域，自动将变量在堆上分配；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回闭包时并不是单纯返回一个函数，而是返回了一个结构体，记录下函数返回地址和引用的环境中的变量地址；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">i&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://www.jianshu.com/p/2904efc7f1a8">图解golang内存分配&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://colobu.com/2017/06/26/learn-go-type-aliases/">了解 Go 1.9 的类型别名&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Go语言运行时</title><link>https://justice.bj.cn/post/14.language/golang/golang-runtime/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-runtime/</guid><description>&lt;h1 id="go语言运行时">Go语言运行时&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="go调度器的演化">Go调度器的演化&lt;/h2>
&lt;h2 id="源码分析">源码分析&lt;/h2>
&lt;p>Go 语言程序启动后，需要对自身运行时进行初始化，其真正的程序入口由 runtime 包控制。&lt;/p>
&lt;p>以 AMD64 架构上的 Linux 和 macOS 为例，分别位于：&lt;code>src/runtime/rt0_linux_amd64.s&lt;/code> 和 &lt;code>src/runtime/rt0_darwin_amd64.s&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">TEXT _rt0_amd64_linux(SB),NOSPLIT,$-8
JMP _rt0_amd64(SB)
TEXT _rt0_amd64_darwin(SB),NOSPLIT,$-8
JMP _rt0_amd64(SB)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>两者均跳转到了 &lt;code>_rt0_amd64&lt;/code> 函数:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">TEXT _rt0_amd64(SB),NOSPLIT,$-8
MOVQ 0(SP), DI // argc
LEAQ 8(SP), SI // argv
JMP runtime·rt0_go(SB)
TEXT runtime·rt0_go(SB),NOSPLIT,$0
// 将参数向前复制到一个偶数栈上
MOVQ DI, AX // argc
MOVQ SI, BX // argv
SUBQ $(4*8+7), SP // 2args 2auto
ANDQ $~15, SP
MOVQ AX, 16(SP)
MOVQ BX, 24(SP)
// 初始化 g0 执行栈
MOVQ $runtime·g0(SB), DI // DI = g0
LEAQ (-64*1024+104)(SP), BX
MOVQ BX, g_stackguard0(DI) // g0.stackguard0 = SP + (-64*1024+104)
MOVQ BX, g_stackguard1(DI) // g0.stackguard1 = SP + (-64*1024+104)
MOVQ BX, (g_stack+stack_lo)(DI) // g0.stack.lo = SP + (-64*1024+104)
MOVQ SP, (g_stack+stack_hi)(DI) // g0.stack.hi = SP
// 确定 CPU 处理器的信息
MOVL $0, AX
CPUID // CPUID 会设置 AX 的值
MOVL AX, SI
(...)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2021/01/25-16-54-30-2021-01-25-16-54-23-image.png" alt="golang-runtime启动流程">&lt;/p>
&lt;h2 id="sysmon物理线程">sysmon物理线程&lt;/h2>
&lt;p>sysmon是一个在&lt;code>main.main()&lt;/code>执行之前的runtime初始化中启动物理线程,，主要处理两个事件：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>执行网络的epoll;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>抢占式调度的检测: sysmon会根据系统当前的繁忙程度睡一小段时间，然后每隔10ms至少进行一次epoll并唤醒相应的goroutine&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">newm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sysmon&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nil&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//sysmon 是一个m, 物理线程；
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(;;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">usleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">delay&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lastpoll&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">lastpoll&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1000&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">netpoll&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">retake&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 根据每个P的状态和运行时间决定是否要进行抢占
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="scavenger">scavenger&lt;/h2>
&lt;p>scavenger是一个goroutine，执行的是&lt;code>runtime.MHeap_Scavenger&lt;/code>函数。&lt;/p>
&lt;p>它将一些不再使用的内存归还给操作系统，用于执行内存回收；&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">runtime&lt;/span>&lt;span class="err">·&lt;/span>&lt;span class="n">newproc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">scavenger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">runtime&lt;/span>&lt;span class="err">·&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//scavenger 是一个goroutine
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="go-关键字">go 关键字&lt;/h2>
&lt;p>Go语言中，表达式go f(x, y, z)会启动一个新的goroutine运行函数f(x, y, z)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="k">go&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//go 关键字是如下语句的一个包装
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">newproc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="defer">defer&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>defer&lt;/code>关键字的实现跟&lt;code>go&lt;/code>关键字很类似，不同的是它调用的是&lt;code>runtime.deferproc&lt;/code>而不是&lt;code>runtime.newproc&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在defer出现的地方，插入了指令&lt;code>call runtime.deferproc&lt;/code>，然后在函数返回之前的地方，插入指令&lt;code>call runtime.deferreturn&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>goroutine的控制结构中，有一张表记录defer，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用&lt;code>runtime.deferproc&lt;/code>时会将需要&lt;code>defer&lt;/code>的表达式记录在表中，而在调用&lt;code>runtime.deferreturn&lt;/code>的时候，则会依次从defer表中出栈并执行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//无defer函数返回
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">add&lt;/span> &lt;span class="nx">xx&lt;/span> &lt;span class="nx">SP&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="c1">//defer 函数返回
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">call&lt;/span> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">deferreturn&lt;/span>&lt;span class="err">，&lt;/span>
&lt;span class="nx">add&lt;/span> &lt;span class="nx">xx&lt;/span> &lt;span class="nx">SP&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="go-routine-栈">Go Routine 栈&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>每个&lt;code>go routine&lt;/code>需要能够运行，都有自己的栈。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>初始时只给栈分配很小的空间，然后随着使用过程中的需要自动地增长&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go1.3版本之后则使用的是continuous stack；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个Go函数调用的前几条指令，先比较栈指针寄存器跟g-&amp;gt;stackguard，检测是否发生栈溢出。如果栈指针寄存器值超越了stackguard就需要扩展栈空间；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.bookstack.cn/read/go-internals/zh-04.1.md">Go语言程序初始化过程 - 系统初始化 - 《深入解析Go》 - 书栈网 · BookStack&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://golang.design/under-the-hood/zh-cn/part1basic/ch05life/boot/">https://golang.design/under-the-hood/zh-cn/part1basic/ch05life/boot/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/mafeng/p/10305419.html">深入理解golang 的栈 - ma_fighting - 博客园&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.huamo.online/2019/06/25/%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6goroutine%E6%A0%88/">深入研究goroutine栈 | 花木兰&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/237870981">https://zhuanlan.zhihu.com/p/237870981&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000019570427">https://segmentfault.com/a/1190000019570427&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>HBase</title><link>https://justice.bj.cn/post/30.architech/hbase/hbase%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/30.architech/hbase/hbase%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="hbase">HBase&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Apache HBase是基于Hadoop构建的一个&lt;strong>分布式&lt;/strong>、&lt;strong>可伸缩&lt;/strong>的&lt;strong>海量数据存储系统&lt;/strong>。&lt;/p>
&lt;p>HDFS为Hbase提供底层数据存储服务，&lt;/p>
&lt;p>Zookeeper为Hbase提供稳定服务和Failover机制，&lt;/p>
&lt;p>MapReduce为Hbase提供高性能的计算能力，&lt;/p>
&lt;p>是一个通过大量廉价的机器解决海量数据的高速存储和读取的分布式数据库解决方案。&lt;/p>
&lt;h3 id="特点">&lt;strong>特点&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>海量存储&lt;/strong>：单表支持几十亿行，几百万列，数千个版本的数据，TB/PB级别；&lt;/li>
&lt;li>&lt;strong>无模式&lt;/strong>：每行都有一个可排序的主键和任意多的列，列可以根据需要动态的增加，同一张表中不同的行可以有截然不同的列；&lt;/li>
&lt;li>&lt;strong>列式存储&lt;/strong>：列族存储；&lt;/li>
&lt;li>&lt;strong>易扩展&lt;/strong>：横向扩展(RegionServer)，提高并发能力；纵向扩展(hdfs)，提高存储容量&lt;/li>
&lt;li>&lt;strong>高并发&lt;/strong>：在并发的情况下，Hbase的单个IO延迟下降并不多&lt;/li>
&lt;li>&lt;strong>稀疏&lt;/strong>：空数据不占用存储空间。&lt;/li>
&lt;/ul>
&lt;h3 id="对比">&lt;strong>对比&lt;/strong>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:left">RDBMS&lt;/th>
&lt;th style="text-align:left">HBase&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>硬件架构&lt;/strong>&lt;/td>
&lt;td style="text-align:left">传统的多核系统，硬件成本昂贵&lt;/td>
&lt;td style="text-align:left">分布式集群，硬件成本低廉&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>数据库大小&lt;/strong>&lt;/td>
&lt;td style="text-align:left">GB,TB&lt;/td>
&lt;td style="text-align:left">PB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>扩展性&lt;/strong>&lt;/td>
&lt;td style="text-align:left">横向扩展和纵向扩展较差&lt;/td>
&lt;td style="text-align:left">很方便进行横向扩展和纵向扩展&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>容错性&lt;/strong>&lt;/td>
&lt;td style="text-align:left">一般需要额外硬件设备实现 HA 机制&lt;/td>
&lt;td style="text-align:left">结合HDFS提供可靠的数据冗余，由于由多个节点组成，所以不担心一点或几点宕机&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>吞吐量&lt;/strong>&lt;/td>
&lt;td style="text-align:left">百万查询/每秒&lt;/td>
&lt;td style="text-align:left">数千查询/每秒&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>数据保护&lt;/strong>&lt;/td>
&lt;td style="text-align:left">替换&lt;/td>
&lt;td style="text-align:left">保留&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>存储模式&lt;/strong>&lt;/td>
&lt;td style="text-align:left">行存储，密集&lt;/td>
&lt;td style="text-align:left">列族存储，稀疏&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>数据类型&lt;/strong>&lt;/td>
&lt;td style="text-align:left">丰富&lt;/td>
&lt;td style="text-align:left">字节数组&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>事务支持&lt;/strong>&lt;/td>
&lt;td style="text-align:left">全面的ACID事务支持，表级&lt;/td>
&lt;td style="text-align:left">行级&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>查询语言&lt;/strong>&lt;/td>
&lt;td style="text-align:left">SQL&lt;/td>
&lt;td style="text-align:left">Java API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>索引&lt;/strong>&lt;/td>
&lt;td style="text-align:left">灵活多个&lt;/td>
&lt;td style="text-align:left">Row-Key&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="应用场景">应用场景&lt;/h3>
&lt;p>Hbase是一个通过廉价PC机器集群来存储海量数据的分布式数据库解决方案。它比较适合的场景概括如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>巨量大（百T、PB级别）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查询简单（基于rowkey或者rowkey范围查询）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不涉及到复杂的关联&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>典型应用场景：&lt;/p>
&lt;ul>
&lt;li>海量订单流水数据（长久保存） 交易记录 数据库历史数据；&lt;/li>
&lt;li>交易记录；&lt;/li>
&lt;li>日志、监控类数据；&lt;/li>
&lt;li>对象存储：不少的头条类、新闻类的的新闻、网页、图片存储在HBase之中，一些病毒公司的病毒库也是存储在HBase之中；&lt;/li>
&lt;li>时序数据：HBase之上有OpenTSDB模块，可以满足时序类场景的需求；&lt;/li>
&lt;li>推荐画像：特别是用户的画像，是一个比较大的稀疏矩阵，蚂蚁的风控就是构建在HBase之上；&lt;/li>
&lt;li>时空数据：主要是轨迹、气象网格之类，滴滴打车的轨迹数据主要存在HBase之中，另外在技术所有大一点的数据量的车联网企业，数据都是存在HBase之中；&lt;/li>
&lt;li>CubeDB OLAP：Kylin一个cube分析工具，底层的数据就是存储在HBase之中，不少客户自己基于离线计算构建cube存储在hbase之中，满足在线报表查询的需求；&lt;/li>
&lt;li>消息/订单：在电信领域、银行领域，不少的订单查询底层的存储，另外不少通信、消息同步的应用构建在HBase之上；&lt;/li>
&lt;li>Feeds流：典型的应用就是xx朋友圈类似的应用；&lt;/li>
&lt;li>NewSQL：之上有Phoenix的插件，可以满足二级索引、SQL的需求，对接传统数据需要SQL非事务的需求；&lt;/li>
&lt;/ul>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>架构图&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-20-38-15-1506395765370_9254_1506395767893-20180619102505360.png" alt="img">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Client&lt;/strong>：访问hbase的客户端，并提供缓存；&lt;/li>
&lt;li>&lt;strong>Zookeeper&lt;/strong>：提供元数据查询、集群配置、状态监控及HA；&lt;/li>
&lt;li>&lt;strong>HMaster&lt;/strong>：协调、监控RS集群状态，Region分配、负载均衡、提供DDL表操作功能；&lt;/li>
&lt;li>&lt;strong>HRegionServer&lt;/strong>：管理HRegion，与底层FS交互，读写；&lt;/li>
&lt;li>&lt;strong>HDFS&lt;/strong>: 数据文件存储；&lt;/li>
&lt;/ul>
&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Table&lt;/strong>（表）：数据的逻辑视图；&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-20-38-22-SouthEast.png" alt="img">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Row Key&lt;/strong>（行键）：表中每条记录的全局唯一主键，字节数组，字典排序，最大64K。尽量现在合适的Row Key 是数据相近的数据分布在同一个Region中，提高效率；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Region&lt;/strong>（分区）：表会按Row Key拆分成一定大小的Key Range，每个“Key Range”称为一个Region；&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-20-38-29-image-20180619102331372.png" alt="image-20180619102331372">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>列族（Column Family）：包含多个列数据，同一个CF的列数据存储在一个文件中，读取时可一次读取；建议1-3个CF；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>时间戳（Timestamp）：时间戳用于区分数据的不同版本，最新的时间戳在最前面，通过时间戳简化了数据的更新和删除操作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>值（Key Value）：数据值&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="基本操作">基本操作&lt;/h3>
&lt;ul>
&lt;li>get：根据 (row_key, cf, name ) -&amp;gt; value&lt;/li>
&lt;li>scan: 更加条件获取批量的数据；&lt;/li>
&lt;li>put：插入更新；&lt;/li>
&lt;li>delete：删除数据；&lt;/li>
&lt;/ul>
&lt;h2 id="重要数据结构">重要数据结构&lt;/h2>
&lt;h3 id="hregionserver">HRegionServer&lt;/h3>
&lt;ul>
&lt;li>每个RegionServer 包含一个 WAL（预写日志文件），一个BlockCache（读缓存），0到多个（默认最多1000）Region；&lt;/li>
&lt;li>每个Region包含多个Store（对应CF的数量），每个Store包含1个MemStore（写缓存），0-多个HFile；&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-20-38-35-regionserver.png" alt="regionserver">&lt;/p>
&lt;h3 id="hregion">HRegion&lt;/h3>
&lt;ul>
&lt;li>HBase通过RowKey将表水平切割成多个HRegion，一个HRegion有一个startKey和endKey的row key，包含了从startKey到endKey范围内的所有的行（包含startKey，但不包含endKey）&lt;/li>
&lt;li>每个Regions被HMaster分配到某个RegionServe上，这些RegionServer负责数据的读取和写入。一个RegionServer可以服务多个region。数量大概是1000个。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-20-38-41-Center.png" alt="img">&lt;/p>
&lt;h3 id="memstore写缓存">MemStore（写缓存）&lt;/h3>
&lt;ul>
&lt;li>MemStore 用来缓存写数据的，写入数据的keyValues；&lt;/li>
&lt;li>当memStore的大小达到一个阀值（默认128MB）时，memStore会被flush到文件HFile；&lt;/li>
&lt;/ul>
&lt;h3 id="blockcache读缓存">BlockCache（读缓存）&lt;/h3>
&lt;ul>
&lt;li>BlockCache用来缓存读数据，每个RegionServer维持一个BlockCache；；&lt;/li>
&lt;li>BlockCache由Block组成，Block默认大小64K；&lt;/li>
&lt;li>默认BlockCache将Block分成3个优先队列：Single，Multi，InMemory，用于提高Cache效率。&lt;/li>
&lt;li>BlockCache大小是固定的，可由参数hfile.block.cache.size，默认是RegionServer堆内存的40%；&lt;/li>
&lt;li>BlockCache实现方案：&lt;strong>LRUBlockCache&lt;/strong>，&lt;strong>SlabCache&lt;/strong>，&lt;strong>BucketCache&lt;/strong>；&lt;/li>
&lt;/ul>
&lt;h3 id="hlogwal">HLog（WAL）&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>每一个RegionServer有一个WAL Log文件(1.0后可配置多个)；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>WAL Log 文件为顺序写入，速度很快；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>WAL Log 文件只append，不更改；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由于WAL 文件可由HDFS自动生成副本，发生故障时，可通过副本进行恢复；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MemStore 在内存中的数据失效后，可由WAL文件进行恢复；&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-20-38-48-1506396165989_1943_1506396168304.png" alt="img">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="hfile">HFile&lt;/h3>
&lt;p>HFile是Hbase数据在磁盘上的存储文件，在HDFS上的存储目录结构为 &lt;em>表名/region名/列族名/HFiles&lt;/em>，HFile存储了一个多级索引(multi-layered index), 通过多级索引就可以快速得到数据(工作机制类似于b+tree)&lt;/p>
&lt;ul>
&lt;li>Key-Value按照升序排列&lt;/li>
&lt;li>Key-Value存储在以64KB为单位的Block里&lt;/li>
&lt;li>每个Block有一个叶索引(leaf-index), 记录Block的位置&lt;/li>
&lt;li>每个Block的最后一个Key(&lt;em>译注: 最后一个key也是最大的key&lt;/em>), 放入中间索引(intermediate index)&lt;/li>
&lt;li>根索引(root index)指向中间索引&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-20-38-55-1356783866_3720.png" alt="img">&lt;/p>
&lt;h2 id="关键流程">关键流程&lt;/h2>
&lt;h3 id="region定位">Region定位&lt;/h3>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-20-39-01-1506396002537_2157_1506396004590.png" alt="img">&lt;/p>
&lt;h3 id="写流程">写流程&lt;/h3>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-20-39-06-20150723174212472.png" alt="img">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-20-39-13-1506396036453_6524_1506396038477.png" alt="img">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>client 向zk查询应该写入到哪个RS；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将数据append到RS的WAL中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将数据写入到MemStore中，写操作返回；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MemStore达到一定条件&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，则把数据flush到HFile文件中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当HFile文件数量达到一定阈值，会触发&lt;strong>合并&lt;/strong>（compaction）操作；当单个HFile大小超过一定阈值后，会触发&lt;strong>拆分&lt;/strong>（split）操作。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="storefile的合并compaction和拆分split">StoreFile的合并(Compaction)和拆分(Split)&lt;/h3>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-20-39-18-20150723175721133.gif" alt="img">&lt;/p>
&lt;p>&lt;strong>Compaction&lt;/strong>分为两种：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>minor compaction&lt;/strong>：把多个小HFile合并成一个大HFile，主要是为了提高读效率（因为一个row可能散布在多个HFile文件中）。minor compaction不做任何删除数据、过期数据的清理工作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>major compaction&lt;/strong>：把给定region的一个列族的所有HFile合并成一个文件，major compaction会丢弃有删除标记的或过期的内容，释放占用的空间。&lt;/p>
&lt;p>minor合并是轻量级的，可以频繁发生；major合并相当耗资源，不要经常使用，且通常需要手工触发。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Split&lt;/strong>操作过程完成的非常快，因为原始的数据文件并不会被改变，系统只是简单的创建两个Reference文件指向原始的数据文件，每个Reference文件管理原始文件一半的数据。Reference文件名字是一个ID，它使用被参考的region的名字的hash作为前缀，例如：1278437856009925445.3323223323。Reference文件只含有非常少量的信息，这些信息包括被分割的原始region的key以及这个文件管理前半段还是后半段。只有当系统做compaction的时候原始数据文件才会被分割成两个独立的文件并放到相应的region目录下面，同时原始数据文件和那些Reference文件也会被清除。&lt;/p>
&lt;h3 id="读流程">读流程&lt;/h3>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-20-39-24-firstread.png" alt="firstread">&lt;/p>
&lt;ol>
&lt;li>Client先从Zookeeper中获取托管META表的RegionServer。&lt;/li>
&lt;li>Client查询.META.服务，来获取需要访问的RowKey对应的Region Server。Client将这些信息与META表位置一起缓存起来。&lt;/li>
&lt;li>Client从相应的Region Server获取该行的数据。&lt;/li>
&lt;li>之后的查询都是从 client 缓存读取 meta 信息从对应的 region server 查询；(如果缓存中查询不到对应的数据那么将从第一步重新开始)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-20-39-30-readamplification.png" alt="img">&lt;/p>
&lt;p>具体从RegionServer中读数据的过程&lt;/p>
&lt;ol>
&lt;li>先从BlockCache（&lt;strong>读缓存&lt;/strong>）中找对应的 row；&lt;/li>
&lt;li>如果缓存里找不到，那就去查询 MemStore（&lt;strong>写缓存&lt;/strong>）找对应的最近的写数据；&lt;/li>
&lt;li>如果两个地方都没用，那么就会根据 BlockCache 中的 B+ Tree Index（mentioned above）以及 Bloom Filter找 HFile 里的数据；&lt;/li>
&lt;li>两个缓存无法命中且大量 HFile 未合并的时候，将有可能对很多的 HFiles 进行读操作（这叫 &lt;strong>读放大（Read Amplification&lt;/strong>）。&lt;/li>
&lt;/ol>
&lt;h2 id="6-总结">6. 总结&lt;/h2>
&lt;ul>
&lt;li>HDFS + ZooKeeper 提供了高可用和数据可靠存储的能力；&lt;/li>
&lt;li>通过CF + Region 的相关设计，将数据进行按序物理分片，实现了数据的海量扩展；&lt;/li>
&lt;li>通过WAL + MemStore 的相关设计，将随机写转化为顺序写，实现了写操作的性能优化；&lt;/li>
&lt;li>通过 BlockCache + HFile 的相关设计 ，将随机读操作；&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="http://hbase.apache.org/book.html">Apache HBase ™ Reference Guide&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.ibm.com/developerworks/cn/analytics/library/ba-cn-bigdata-hbase/index.html">HBase 深入浅出&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/30414252">深度分析HBase架构&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.blogjava.net/DLevin/archive/2015/08/22/426877.html">深入HBase架构解析（一）&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.blogjava.net/DLevin/archive/2015/08/22/426950.html">深入HBase架构解析（二）&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://leonlibraries.github.io/2017/05/18/%E4%BB%8ELSM%E5%88%B0HBase/">从 LSM Tree 到 HBase&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/u011331430/article/details/79036441">一张图秒懂HBase（HBase架构图）&lt;/a>&lt;/p>
&lt;h2 id="注解">注解&lt;/h2>
&lt;/li>
&lt;/ol>
&lt;p>HBase会在如下几种情况下触发flush操作，需要注意的是MemStore的最小flush单元是HRegion而不是单个MemStore。可想而知，如果一个HRegion中Memstore过多，每次flush的开销必然会很大，因此我们也建议在进行表设计的时候尽量减少ColumnFamily的个数。&lt;/p>
&lt;ol>
&lt;li>Memstore级别限制：当Region中任意一个MemStore的大小达到了上限（hbase.hregion.memstore.flush.size，默认128MB），会触发Memstore刷新。&lt;/li>
&lt;li>Region级别限制：当Region中所有Memstore的大小总和达到了上限（hbase.hregion.memstore.block.multiplier * hbase.hregion.memstore.flush.size，默认 2* 128M = 256M），会触发memstore刷新。&lt;/li>
&lt;li>Region Server级别限制：当一个Region Server中所有Memstore的大小总和达到了上限（hbase.regionserver.global.memstore.upperLimit ＊ hbase_heapsize，默认 40%的JVM内存使用量），会触发部分Memstore刷新。Flush顺序是按照Memstore由大到小执行，先Flush Memstore最大的Region，再执行次大的，直至总体Memstore内存使用量低于阈值（hbase.regionserver.global.memstore.lowerLimit ＊ hbase_heapsize，默认 38%的JVM内存使用量）。&lt;/li>
&lt;li>当一个Region Server中HLog数量达到上限（可通过参数hbase.regionserver.maxlogs配置）时，系统会选取最早的一个 HLog对应的一个或多个Region进行flush&lt;/li>
&lt;li>HBase定期刷新Memstore：默认周期为1小时，确保Memstore不会长时间没有持久化。为避免所有的MemStore在同一时间都进行flush导致的问题，定期的flush操作有20000左右的随机延时。&lt;/li>
&lt;li>手动执行flush：用户可以通过shell命令 flush ‘tablename’或者flush ‘region name’分别对一个表或者一个Region进行flush。&lt;/li>
&lt;li>&lt;a href="http://www.dataguru.cn/article-9479-1.html">http://www.dataguru.cn/article-9479-1.html&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="参考-1">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://jimolonely.github.io/2019/08/28/java/060-hbase-shell-hex-decode/">hbase shell里编码原理与解析 | 在我的世界&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;strong>Memstore Flush触发条件&lt;/strong>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>HBase协处理器</title><link>https://justice.bj.cn/post/30.architech/hbase/hbase-%E5%8D%8F%E5%A4%84%E7%90%86%E5%99%A8/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/30.architech/hbase/hbase-%E5%8D%8F%E5%A4%84%E7%90%86%E5%99%A8/</guid><description>&lt;h1 id="hbase协处理器">HBase协处理器&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>HBase 的协处理器是从 0.92.0 开始引入的，参见 &lt;a href="https://www.iteblog.com/redirect.php?url=aHR0cHM6Ly9pc3N1ZXMuYXBhY2hlLm9yZy9qaXJhL2Jyb3dzZS9IQkFTRS0yMDAw&amp;amp;article=true">HBASE-2000&lt;/a>。它的实现灵感来源于 Jeff Dean 在 LADIS 2009 分享主题 &lt;a href="https://www.iteblog.com/redirect.php?url=aHR0cHM6Ly96aC5zY3JpYmQuY29tL2RvYy8yMTYzMTQ0OC9EZWFuLUtleW5vdGUtTGFkaXMyMDA5&amp;amp;article=true">《Designs, Lessons and Advice fromBuilding LargeDistributed Systems》&lt;/a>中关于 Google 的 BigTable 协处理器的分享。当时的 BigTable 协处理器具有以下功能：&lt;/p>
&lt;ul>
&lt;li>每个表服务器的任意子表都可以运行代码；&lt;/li>
&lt;li>客户端的高层调用接口；&lt;/li>
&lt;li>跨多行的调用会自动拆分为多个并行化的 RPC 请求；&lt;/li>
&lt;li>通过协处理器可以非常灵活的构建分布式服务模型，能够自动化扩展、负载均衡、应用请求路由等。&lt;/li>
&lt;/ul>
&lt;p>HBase 当然也想要一个这么好的功能，因为通过这个功能我们可以实现二级索引（secondary indexing）、复杂过滤（complex filtering） 比如谓词下推（push down predicates）以及访问控制等功能。虽然 HBase 协处理器受 BigTable 协处理器的启发，但在实现细节方面存在差异。HBase 为我们建立了一个框架，并提供类库和运行时环境，使得我们可以在 HBase RegionServer 和 Master 上运行用户自定义代码；而 Google 的 BigTable 却不是这样的。&lt;/p>
&lt;h2 id="协处理器支持的扩展">协处理器支持的扩展&lt;/h2>
&lt;p>协处理器框架已经为我们提供了一些实现类，我们可以通过继承这些类来扩展自己的功能。这些类主要分为两大类，即 Observer 和 Endpoint。&lt;/p>
&lt;h3 id="observer">Observer&lt;/h3>
&lt;p>Observer 和 RDMBS 的触发器很类似，在一些特定的事件发生时被执行。这些事件包括用户产生的事件，也包括服务器内部产生的事件。 目前 HBase 内置实现的 Observer 主要有以下几个：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>WALObserver&lt;/strong>：提供控制 WAL 的钩子函数；&lt;/li>
&lt;li>&lt;strong>MasterObserver&lt;/strong>：可以被用作管理或 DDL 类型的操作，这些是集群级的事件；&lt;/li>
&lt;li>&lt;strong>RegionObserver&lt;/strong>：用户可以用这种处理器处理数据修改事件，它们与表的 Region 联系紧密；&lt;/li>
&lt;li>&lt;strong>BulkLoadObserver&lt;/strong>：进行 BulkLoad 的操作之前或之后会触发这个钩子函数；&lt;/li>
&lt;li>&lt;strong>RegionServerObserver&lt;/strong> ：RegionServer 上发生的一些操作可以触发一些这个钩子函数，这个是 RegionServer 级别的事件；&lt;/li>
&lt;li>&lt;strong>EndpointObserver&lt;/strong>：每当用户调用 Endpoint 之前或之后会触发这个钩子，主要提供了一些回调方法。&lt;/li>
&lt;/ul>
&lt;h3 id="endpoint">Endpoint&lt;/h3>
&lt;p>Endpoint 和 RDMBS 的存储过程很类似，用户提供一些自定义代码，并在 HBase 服务器端执行，结果通过 RPC 返回给客户。比较常见的场景包括聚合操作（求和、计数等）。有了 Endpoint ，我们就可以充分利用服务器的资源，进行一些计算，大大提升计算的效率和通讯的开销。&lt;/p>
&lt;h2 id="协处理器编写和配置">协处理器编写和配置&lt;/h2>
&lt;p>下面我将通过介绍一个计数的例子来介绍 HBase 协处理器的使用。我们知道，HBase 自带了一个 &lt;code>count&lt;/code> 命令用于计算某张表的行数，但是这个命令是单线程执行，效率非常低。我们可以通过 Endpoint 来实现一个计数类，并利用集群的资源来计算，最终将结果返回到客户端，客户端这边通过对结果进行汇总得到最终的结果。其实，HBase 自带了一个名为 &lt;code>RowCountEndpoint&lt;/code> 的例子，里面就实现了计数逻辑。注意本文基于 HBase 1.4.0 进行介绍的，HBase 2.x 的代码已经有些变化，但大部分结构都类似。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.coprocessor.example&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.IOException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.ArrayList&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.List&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.Cell&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.CellUtil&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.Coprocessor&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.CoprocessorEnvironment&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.client.Scan&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.coprocessor.CoprocessorException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.coprocessor.CoprocessorService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.coprocessor.example.generated.ExampleProtos&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.filter.FirstKeyOnlyFilter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.protobuf.ResponseConverter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.regionserver.InternalScanner&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.apache.hadoop.hbase.util.Bytes&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.google.protobuf.RpcCallback&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.google.protobuf.RpcController&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.google.protobuf.Service&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RowCountEndpoint&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">ExampleProtos&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RowCountService&lt;/span>
&lt;span class="kd">implements&lt;/span> &lt;span class="n">Coprocessor&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">CoprocessorService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">RegionCoprocessorEnvironment&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">RowCountEndpoint&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Just returns a reference to this object, which implements the RowCounterService interface.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Service&lt;/span> &lt;span class="nf">getService&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 返回表的行数
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getRowCount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RpcController&lt;/span> &lt;span class="n">controller&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ExampleProtos&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CountRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">RpcCallback&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ExampleProtos&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CountResponse&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Scan&lt;/span> &lt;span class="n">scan&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Scan&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">scan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">FirstKeyOnlyFilter&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">ExampleProtos&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CountResponse&lt;/span> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">InternalScanner&lt;/span> &lt;span class="n">scanner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">scanner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRegion&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getScanner&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">scan&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Cell&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Cell&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">hasMore&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">lastRow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">do&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">hasMore&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scanner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">results&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Cell&lt;/span> &lt;span class="n">kv&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">results&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">currentRow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CellUtil&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cloneRow&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">kv&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">lastRow&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">Bytes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">lastRow&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">currentRow&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">lastRow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">currentRow&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">clear&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hasMore&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ExampleProtos&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CountResponse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newBuilder&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">setCount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IOException&lt;/span> &lt;span class="n">ioe&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ResponseConverter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setControllerException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">controller&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ioe&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">scanner&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">scanner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IOException&lt;/span> &lt;span class="n">ignored&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 返回表中 KV 的数量
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">getKeyValueCount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RpcController&lt;/span> &lt;span class="n">controller&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ExampleProtos&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CountRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="n">RpcCallback&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ExampleProtos&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CountResponse&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ExampleProtos&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CountResponse&lt;/span> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">InternalScanner&lt;/span> &lt;span class="n">scanner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">scanner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRegion&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getScanner&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Scan&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Cell&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Cell&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="n">hasMore&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">do&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">hasMore&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scanner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">results&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Cell&lt;/span> &lt;span class="n">kv&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">results&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">clear&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hasMore&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ExampleProtos&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CountResponse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newBuilder&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">setCount&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IOException&lt;/span> &lt;span class="n">ioe&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ResponseConverter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setControllerException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">controller&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ioe&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">scanner&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">scanner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IOException&lt;/span> &lt;span class="n">ignored&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">start&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CoprocessorEnvironment&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">env&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">RegionCoprocessorEnvironment&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">RegionCoprocessorEnvironment&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CoprocessorException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Must be loaded on a table region!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">stop&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CoprocessorEnvironment&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// nothing to do
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于 HBase 内部使用 protobuf 协议进行通信，所以这个例子定义了名为 &lt;code>Examples.proto&lt;/code> 的文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span class="kn">package&lt;/span> &lt;span class="nn">hbase&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pb&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">option&lt;/span> &lt;span class="n">java_package&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;org.apache.hadoop.hbase.coprocessor.example.generated&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">option&lt;/span> &lt;span class="n">java_outer_classname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;ExampleProtos&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">option&lt;/span> &lt;span class="n">java_generic_services&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">option&lt;/span> &lt;span class="n">java_generate_equals_and_hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">option&lt;/span> &lt;span class="n">optimize_for&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SPEED&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">CountRequest&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">CountResponse&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="k">required&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="k">default&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="kd">service&lt;/span> &lt;span class="n">RowCountService&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="k">rpc&lt;/span> &lt;span class="n">getRowCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CountRequest&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="k">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">CountResponse&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="k">rpc&lt;/span> &lt;span class="n">getKeyValueCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CountRequest&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span> &lt;span class="k">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">CountResponse&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于 RowCountEndpoint 类是 HBase 自带的例子，所以在我们的 HBase 类路径下已经加载了这个类，在实际的应用中，我们需要将 Examples.proto 文件生成对应的类，并将相关的类进行编译打包（具体如何编译可以参见 《在 IDEA 中使用 Maven 编译 proto 文件》）。因为这个类 HBase 其实已经编译好了，所以我就不再进行介绍了，直接讲如何部署。&lt;/p>
&lt;h2 id="协处理器部署">协处理器部署&lt;/h2>
&lt;p>协处理器的部署有很多种方法，这里我将一一进行介绍。&lt;/p>
&lt;p>通过 hbase-site.xml 文件进行配置&lt;/p>
&lt;p>我们可以直接在 hbase-site.xml 文件里面进行配置，配置完之后需要重启 HBase 集群，而且这个配置是全局影响的。如下设置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>hbase.coprocessor.region.classes&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;value&amp;gt;&lt;/span>org.apache.hadoop.hbase.coprocessor.RowCountEndpoint&lt;span class="nt">&amp;lt;/value&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为 RowCountEndpoint 这个类是 HBase 自带的，如果是我们自定义的 Endpoint，我们需要将打包好的 jar 包放到所有节点的 $HBASE_HOME/lib/ 路径下。&lt;/p>
&lt;h3 id="通过-hbase-shell-配置">通过 HBase Shell 配置&lt;/h3>
&lt;p>如果我们只想对某一张表设置 Endpoint，那么可以直接在 HBase Shell 中进行配置，如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">hbase(main): &amp;gt; alter &amp;#39;iteblog&amp;#39;, &amp;#39;coprocessor&amp;#39; =&amp;gt; &amp;#39;|org.apache.hadoop.hbase.coprocessor.example.RowCountEndpoint ||&amp;#39;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>说明：上面的 coprocessor 设置的值为 &amp;lsquo;|org.apache.hadoop.hbase.coprocessor.example.RowCountEndpoint ||'，它的值主要由四部分组成。&amp;lsquo;coprocessor&amp;rsquo; =&amp;gt; &amp;lsquo;Jar File Path|Class Name|Priority|Arguments&amp;rsquo;。其中&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Jar File Path&lt;/code>：协处理器实现类所在 Jar 包的路径，这个路径要求所有的 RegionServer 能够读取得到。比如放在所有 RegionServer 的本地磁盘；比较推荐的做法是将文件放到 HDFS 上。如果没有设置这个值，那么将直接从 HBase 服务的 classpath 中读取。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Class Name：协处理器实现类的类名称，包括包名。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Priority：协处理器的优先级，是一个整数。如果同一个钩子函数有多个协处理器实现，那么将按照优先级执行。如果没有指定，将按照默认优先级执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Arguments：传递给协处理器实现类的参数列表，可以不指定。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这四个部分使用 | 符号进行分割。&lt;/p>
&lt;h3 id="通过-hbase-api-配置">通过 HBase API 配置&lt;/h3>
&lt;p>除了可以通过 HBase Shell 和 hbase-site.xml 配置文件来加载协处理器，还可以通过 Client API 来加载协处理器。具体的方法是调用 HTableDescriptor 的 addCoprocessor 方法。该方法有两种调用形式：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>addCoprocessor(String className)：传入类名。该方法类似通过配置来加载协处理器，用户需要先把jar包分发到各个 RegionServer 的 $HBASE_HOME/lib 目录下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>addCoprocessor(String className, Path jarFilePath, int priority, final Map kvs)：该方法类似通过 Shell 来加载协处理器。通过调用该方法可以同时传入协处理器的 className 以及 jar 所在的路径，priority 是协处理器的执行优先级，kvs 是给协处理器预定义的参数。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>使用如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">HTableDescriptor&lt;/span> &lt;span class="n">htd&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">HTableDescriptor&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;testTable&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">htd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;CORPROCESSOR$1&amp;#34;&lt;/span> &lt;span class="o">,&lt;/span>
&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s">&amp;#34;|&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">RowCountEndpoint&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCanonicalName&lt;/span>&lt;span class="o">()+&lt;/span>&lt;span class="s">&amp;#34;|&amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">Coprocessor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Priority&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">USER&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="如何判断协处理器设置生效">如何判断协处理器设置生效&lt;/h3>
&lt;p>可以通过 HBase Shell 提供的 describe 命令查看的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用协处理器">使用协处理器&lt;/h2>
&lt;p>通过上面几步，我们已经为表设置好了协处理器，现在我们可以编写客户端程序来调用这个协处理器，主要通过 HTable 的 coprocessorService 方法实现，这个方法主要由三种实现：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>coprocessorService(byte[] row)：这个通过 row 来定位对应的 Region，然后在这个 Region 上运行相关的协处理器代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>coprocessorService(final Class&lt;T> service, byte[] startKey, byte[] endKey, final Batch.Call&amp;lt;T,R&amp;gt; callable)：service 指定是调用哪个协处理器实现类，因为一个 Region 上可以部署多个协处理器，客户端必须通过指定 Service 类来区分究竟需要调用哪个协处理器提供的服务。startKey 和 endKey 主要用于确定需要与那些 Region 进行交互。callable 定义了如何调用协处理器，用户通过重载该接口的 call() 方法来实现客户端的逻辑。在 call() 方法内，可以调用 RPC，并对返回值进行任意处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>coprocessorService(final Class&lt;T> service, byte[] startKey, byte[] endKey, final Batch.Call&amp;lt;T,R&amp;gt; callable, final Batch.Callback&lt;R> callback)：这个方法和第二个比较多了一个 callback，coprocessorService 会为每一个 RPC 返回结果调用该 callback，用户可以在 callback 中执行需要的逻辑，比如执行 sum 累加。第二个方法，每个 Region 协处理器 RPC 的返回结果先放入一个列表，所有的 Region 都返回后，用户代码再从该列表中取出每一个结果进行累加；用这种方法，直接在 callback 中进行累加，省掉了创建结果集合和遍历该集合的开销，效率会更高一些。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这里我们调用第二种方法，具体的代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行这段代码，就可以快速算出 iteblog 表的总行数。如果我们把 counter.getRowCount(controller, request, rpcCallback); 修改成 counter.getKeyValueCount(controller, request, rpcCallback);，那么将会返回 iteblog 表 KV 的总数。上面查询运行的流程可以用下面的图来表示&lt;/p>
&lt;p>&lt;img src="assets/2020-04-03-12-59-01-image.png" alt="">&lt;/p>
&lt;p>图中 Client A 的过程就是上面程序的处理流程，主要是并行 RPC 请求。从图中可以看到，这个表的所有 Region 都会参与计算，每个 Region 计算出自己的总数，然后返回给客户端，所有的 Region 结果最后存储在 Map results 中，其中 Key 是每个 Region 的名字，Value 就是这个 Region 计算到的行数。我们只需要遍历这个 Map，然后将所有 Region 计算的行数加起来就是整个表的行数。&lt;/p>
&lt;p>如果我们仅仅想计算某个 row 对应的 Region 的行数，可以实现如下：&lt;/p>
&lt;p>上面代码可以返回 row-890 所在 Region 的行数，由于这个 Row 只对应于一个 Region，所以上面代码的运行流程见上图的 Client B 运行过程。可以看出，这个程序仅仅发出一个 RPC 请求。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/scgaliguodong123_/article/details/46714201">HBase协处理器及实例_大数据_吃果冻不吐果冻皮-CSDN博客&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/wangmin1983/article/details/83507353">实际动手编写HBase Coprocessor_大数据_功夫熊猫-CSDN博客&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cloud.tencent.com/developer/article/1158195">https://cloud.tencent.com/developer/article/1158195&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item></channel></rss>