<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Justice的小站</title><link>https://justice.bj.cn/</link><description>Recent content on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 28 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>Justice's Blog</title><link>https://justice.bj.cn/homepage/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/about/</guid><description>&lt;h2 id="self-introduction">Self Introduction&lt;/h2>
&lt;p>Cras ex dui, tristique a libero eget, consectetur semper ligula. Nunc augue arcu, malesuada a nisi et, molestie finibus metus. Sed lacus odio, ultricies a nisl vitae, sollicitudin tempor ipsum. Vivamus quis feugiat arcu. Sed mi nunc, efficitur quis tellus vitae, posuere mattis metus. Phasellus in mattis dui. Nullam blandit, augue non ullamcorper dapibus, lacus dui molestie massa, in iaculis purus lectus eu lectus. Duis hendrerit lacinia tellus, sit amet feugiat dolor placerat id. Aenean ac velit massa. Vivamus feugiat dui at magna viverra, ut dictum nunc rutrum. Duis eget sapien finibus, lobortis orci id, vestibulum tellus. Maecenas lobortis urna libero, quis fermentum lectus lobortis nec. Nullam laoreet volutpat libero, ac mattis magna ullamcorper quis. Duis eget ipsum eu nisi mattis cursus et vitae turpis.&lt;/p>
&lt;p>Aliquam pretium diam eget leo feugiat finibus. Donec malesuada commodo ipsum. Aenean a massa in lacus venenatis vestibulum. Duis vel sem quis elit iaculis consectetur et quis dolor. Morbi eu ipsum hendrerit, malesuada ante sed, dapibus est. Suspendisse feugiat nulla ut gravida convallis. Phasellus id massa posuere, rhoncus justo ut, porttitor dolor. Nulla ultrices malesuada egestas. Nunc fermentum tincidunt sem ac vulputate. Donec mollis sollicitudin justo eget varius. Donec ornare velit et felis blandit, id molestie sapien lobortis. Morbi eget tristique justo. Mauris posuere, nibh eu laoreet ultricies, ligula erat iaculis sapien, vel dapibus lacus libero ut diam. Etiam viverra ante felis, et scelerisque nunc pellentesque vitae. Praesent feugiat dictum molestie.&lt;/p>
&lt;h2 id="details">Details&lt;/h2>
&lt;p>Nunc pellentesque vitae:&lt;/p>
&lt;ul>
&lt;li>Morbi accumsan nibh efficitur diam molestie, non dignissim diam facilisis.&lt;/li>
&lt;li>Donec dignissim leo in mollis faucibus.&lt;/li>
&lt;li>Donec blandit lacus a pellentesque fermentum.&lt;/li>
&lt;/ul>
&lt;p>Donec mollis sollicitudin:&lt;/p>
&lt;ul>
&lt;li>Nunc dictum purus ornare purus consectetur, eu pellentesque massa ullamcorper.&lt;/li>
&lt;li>Aliquam eu leo vitae justo aliquam tincidunt.&lt;/li>
&lt;li>Fusce non massa id augue interdum feugiat sed et nulla.&lt;/li>
&lt;li>Vivamus molestie augue in tristique laoreet.&lt;/li>
&lt;/ul></description></item><item><title>Pages</title><link>https://justice.bj.cn/homepage/pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/pages/</guid><description/></item><item><title>Experiences</title><link>https://justice.bj.cn/homepage/experiences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/experiences/</guid><description/></item><item><title>Vintage</title><link>https://justice.bj.cn/homepage/vintage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/vintage/</guid><description/></item><item><title>Blank</title><link>https://justice.bj.cn/homepage/blank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/blank/</guid><description>
&lt;div style="text-align:center">
&lt;p>Write anything you like here!&lt;/p>
&lt;/div></description></item><item><title>全排列</title><link>https://justice.bj.cn/post/leetcode/doc/46.%E5%85%A8%E6%8E%92%E5%88%97/</link><pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/46.%E5%85%A8%E6%8E%92%E5%88%97/</guid><description>&lt;h1 id="全排列httpsleetcode-cncomproblemspermutationsdescription-httpsleetcode-cncomproblemspermutationsdescription">&lt;a href="https://leetcode-cn.com/problems/permutations/description/" title="https://leetcode-cn.com/problems/permutations/description/">全排列&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Category&lt;/th>
&lt;th>Difficulty&lt;/th>
&lt;th>Likes&lt;/th>
&lt;th>Dislikes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>algorithms&lt;/td>
&lt;td>Medium (78.41%)&lt;/td>
&lt;td>1698&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Tags&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://leetcode.com/tag/backtracking" title="https://leetcode.com/tag/backtracking">&lt;code>backtracking&lt;/code>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Companies&lt;/strong>&lt;/p>
&lt;p>&lt;code>linkedin&lt;/code> | &lt;code>microsoft&lt;/code>&lt;/p>
&lt;p>给定一个不含重复数字的数组 &lt;code>nums&lt;/code> ，返回其 &lt;strong>所有可能的全排列&lt;/strong> 。你可以 &lt;strong>按任意顺序&lt;/strong> 返回答案。&lt;/p>
&lt;p>&lt;strong>示例 1：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：nums = [1,2,3]
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 2：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：nums = [0,1]
输出：[[0,1],[1,0]]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 3：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：nums = [1]
输出：[[1]]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>提示：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>1 &amp;lt;= nums.length &amp;lt;= 6&lt;/code>&lt;/li>
&lt;li>&lt;code>-10 &amp;lt;= nums[i] &amp;lt;= 10&lt;/code>&lt;/li>
&lt;li>&lt;code>nums&lt;/code> 中的所有整数 &lt;strong>互不相同&lt;/strong>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://leetcode-cn.com/problems/permutations/comments/" title="https://leetcode-cn.com/problems/permutations/comments/">Discussion&lt;/a> | &lt;a href="https://leetcode-cn.com/problems/permutations/solution/" title="https://leetcode-cn.com/problems/permutations/solution/">Solution&lt;/a>&lt;/p>
&lt;h2 id="解法">解法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>CubeFS-BlobStore</title><link>https://justice.bj.cn/post/40.storage/chubaofs/cubefs-blobstore/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/chubaofs/cubefs-blobstore/</guid><description>&lt;h1 id="cubefs-blobstore">CubeFS-BlobStore&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>CubeFS-BlobStore是一个高可靠、高可用、低成本、支持超大规模(EB)的分布式存储系统。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>采用纠删码中的Reed-Solomon编码，对比三副本，以更低的存储成本提供更高的数据耐久性保障，支持多种纠删码模式和多可用区部署，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同时针对小文件做了专门优化，可满足不同业务场景的存储需求。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/02/08-10-42-13-2022-02-08-10-42-09-image.png" alt="">&lt;/p>
&lt;h2 id="组件">组件&lt;/h2>
&lt;p>blobstore包含如下组件：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>模块&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>功能&lt;/th>
&lt;th>依赖组件&lt;/th>
&lt;th>本地存储&lt;/th>
&lt;th>部署&lt;/th>
&lt;th>部署数量&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ClusterMgr&lt;/td>
&lt;td>集群管理&lt;/td>
&lt;td>负责集群管理和卷的生成&lt;/td>
&lt;td>consul&lt;/td>
&lt;td>有&lt;/td>
&lt;td>可跨机房部署，多机房&lt;/td>
&lt;td>&amp;gt;=3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Allocator&lt;/td>
&lt;td>集群管理代理&lt;/td>
&lt;td>提供数据写入资源id的分配&lt;/td>
&lt;td>clusterMgr&lt;/td>
&lt;td>无&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Access&lt;/td>
&lt;td>接入模块&lt;/td>
&lt;td>对外提供数据读、写和删除接口&lt;/td>
&lt;td>redis,consul&lt;/td>
&lt;td>无&lt;/td>
&lt;td>单节点部署，一个机房部署一个，&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BlobNode&lt;/td>
&lt;td>blob存储&lt;/td>
&lt;td>提供存储资源&lt;/td>
&lt;td>ClusterMgr&lt;/td>
&lt;td>有&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Worker&lt;/td>
&lt;td>&lt;/td>
&lt;td>卷修补、迁移和回收任务执行模块&lt;/td>
&lt;td>&lt;/td>
&lt;td>无&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Scheduler&lt;/td>
&lt;td>异步任务调度中心&lt;/td>
&lt;td>卷修补、迁移和回收任务的生成和调度&lt;/td>
&lt;td>mongodb&lt;/td>
&lt;td>无&lt;/td>
&lt;td>一个cluster至少一个&lt;/td>
&lt;td>&amp;gt;=1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MQProxy&lt;/td>
&lt;td>异步消息代理&lt;/td>
&lt;td>修补和删除操作消息保存模块,用于后续异步执行&lt;/td>
&lt;td>kafka&lt;/td>
&lt;td>无&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tinker&lt;/td>
&lt;td>后台数据整理管理模块&lt;/td>
&lt;td>修补和删除操作异步执行模块&lt;/td>
&lt;td>kafka，mongodb&lt;/td>
&lt;td>无&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cli&lt;/td>
&lt;td>cli工具&lt;/td>
&lt;td>提供cli管理操作&lt;/td>
&lt;td>consul，redis&lt;/td>
&lt;td>无&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Consul&lt;/td>
&lt;td>注册管理&lt;/td>
&lt;td>提供节点、组件注册；&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>必选&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MongoDB&lt;/td>
&lt;td>mongodb&lt;/td>
&lt;td>为scheduler提供存储&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kafaka&lt;/td>
&lt;td>消息队列服务&lt;/td>
&lt;td>scheduler任务调度消息队列&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Redis&lt;/td>
&lt;td>缓存服务&lt;/td>
&lt;td>为access,cli访问clustermgr提供缓存加速&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>可选&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="资源">资源&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Region(区域)&lt;/strong>: 一个region可包含多个cluster；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cluster(集群)&lt;/strong>：一个Cluster是由多个相同cluster_id的clustermgr组成，可以提供完整的Blobstore服务的单位。cluster可以跨机房部署，多个跨机房clustermgr通过raft组成一个cluster；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Idc(数据中心/机房)&lt;/strong>: 一个cluster可以跨多个idc部署；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Rack(机架)&lt;/strong>：机房内一个机柜; 同一机架内的机器在一个交换机内，可以拥有很低的网络访问延迟和很高的网络带宽；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>AZ(Available Zone)&lt;/strong>：EC 中数据块的有效分区数，一个集群中，AZ的数量要和 IDC个数匹配；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Node(节点)&lt;/strong>: 对应一台物理机或容器实例；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Disk(物理磁盘)&lt;/strong>: 一块已格式化好，并被挂载到某一目录的物理磁盘或一个目录；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Chunk(数据簇)&lt;/strong>：每个Disk的空间被划分为多个Chunk，Chunk对应一个Chunk File；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Volume(逻辑卷)&lt;/strong>: 逻辑卷是面对用户的存储资源管理抽象视图，一个Volume包含多个Unit；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Unit(逻辑卷数据单元)&lt;/strong>: 逻辑卷的数据组织单元。Unit主要包含了Vuid和bid两个字段；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Location(定位)&lt;/strong>：数据在blobstore中的定位，一个location中的数据由多个blob组成；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Blob(数据段)&lt;/strong>: Blob是location中的一段数据，每个Blob是EC编解码的一个数据块, Blob最大默认:4MB；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Shard(数据分片)&lt;/strong>：一块Blob数据在ec encode时，根据编码策略，切分成多个分片Shard，每个分片称为一个shard；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="erasercode">EraserCode&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// ec参数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Tactic&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">N&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//数据块个数；
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">M&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//校验块个数;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">L&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//LRC中，本地校验块个数；
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">AZCount&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//分区个数;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">PutQuorum&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//写操作时，最少写成功的数据块个数,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 为了保证写入时，有一个az挂掉后还能恢复数，最小写入块数必须&amp;gt;=(N+M)/AZCount+N
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">GetQuorum&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//读操作时，最少读成功的数据块个数;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">MinShardSize&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//每个数据块最小大小；
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//当1en(data) &amp;lt; MinShardSize*N, 每个shard大小为MinShardSize, 后面不够的填0
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//当len(data) &amp;gt; MinShardSize*N, 每个shard大小为[len(data)/N], 后面填0;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 预制的ec
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">constCodeModeTactic&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">CodeMode&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">Tactic&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">EC15P12&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC6P6&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC16P20L2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCounect&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">34&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC6P10L2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="c1">// single az
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">EC12P4&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC16P4&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">19&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC3P3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC10P4&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC6P3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="c1">// for env test
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">EC6P3L3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC6P6Align0&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize0B&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC6P6Align512&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize512B&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC4P4L2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//vol layout ep:EC6P10L2
&lt;/span>&lt;span class="c1">//|----N------|--------M----------------|--L--|
&lt;/span>&lt;span class="c1">//|0,1,2,3,4,5|6,7,8,9,10,11,12,13,14,15|16,17|
&lt;/span>&lt;span class="c1">// global stripe:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], n=6 m=10
&lt;/span>&lt;span class="c1">// two local stripes:
&lt;/span>&lt;span class="c1">// local stripe1:[0,1,2, 6, 7, 8, 9,10, 16] n=8 m=1
&lt;/span>&lt;span class="c1">// local stripe2:[3,4,5, 11,12,13,14,15, 17] n=8 m=1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="table">Table&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// normaldb
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">scopeCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;scope&amp;#34;&lt;/span> &lt;span class="c1">//分配的bid范围
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">diskCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;disk&amp;#34;&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">configCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;config&amp;#34;&lt;/span>
&lt;span class="nx">diskDropCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;disk_drop&amp;#34;&lt;/span>
&lt;span class="nx">serviceCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;service&amp;#34;&lt;/span>
&lt;span class="nx">diskStatusIndexCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;disk-status&amp;#34;&lt;/span>
&lt;span class="nx">diskHostIndexCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;disk-host&amp;#34;&lt;/span>
&lt;span class="nx">diskIDCIndexCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;disk-idc&amp;#34;&lt;/span>
&lt;span class="nx">diskIDCRackIndexCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;disk-idc-rack&amp;#34;&lt;/span>
&lt;span class="c1">// volumedb
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">volumeCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;volume&amp;#34;&lt;/span>
&lt;span class="nx">volumeUnitCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;volume_unit&amp;#34;&lt;/span>
&lt;span class="nx">volumeTokenCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;volume_token&amp;#34;&lt;/span>
&lt;span class="nx">volumeTaskCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;volume_task&amp;#34;&lt;/span>
&lt;span class="nx">transitedVolumeCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;transited_volume&amp;#34;&lt;/span>
&lt;span class="nx">transitedVolumeUnitCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;transited_volume_unit&amp;#34;&lt;/span>
&lt;span class="nx">volumeUnitDiskIDIndexCF&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;volumeUnit_DiskID&amp;#34;&lt;/span>
&lt;span class="c1">// raftdb
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="组件详情">组件详情&lt;/h2>
&lt;h3 id="access访问接入点">Access(访问接入点)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>access是面向client，提供访问api接口的组件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>access为无状态节点；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个access为一个&lt;code>region&lt;/code>下的所有&lt;code>cluster&lt;/code>提供访问接入点;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>access主要提供如下访问接口：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>put: 单个put对象, 默认最大size：5GB;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>putAt:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>get:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>delete&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>启动时，会从&lt;code>consul_agent_addr&lt;/code>获取配置region的cluster信息加载到当前节点内存中;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// Location: 一次put的数据位置信息；
&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Location&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">_&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;span class="nx">ClusterID&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ClusterID&lt;/span> &lt;span class="s">`json:&amp;#34;cluster_id&amp;#34;`&lt;/span>
&lt;span class="nx">CodeMode&lt;/span> &lt;span class="nx">codemode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CodeMode&lt;/span> &lt;span class="s">`json:&amp;#34;code_mode&amp;#34;`&lt;/span>
&lt;span class="nx">Size&lt;/span> &lt;span class="kt">uint64&lt;/span> &lt;span class="s">`json:&amp;#34;size&amp;#34;`&lt;/span>
&lt;span class="nx">BlobSize&lt;/span> &lt;span class="kt">uint32&lt;/span> &lt;span class="s">`json:&amp;#34;blob_size&amp;#34;`&lt;/span>
&lt;span class="nx">Crc&lt;/span> &lt;span class="kt">uint32&lt;/span> &lt;span class="s">`json:&amp;#34;crc&amp;#34;`&lt;/span>
&lt;span class="nx">Blobs&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">SliceInfo&lt;/span> &lt;span class="s">`json:&amp;#34;blobs&amp;#34;`&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Blob&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Bid&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BlobID&lt;/span>
&lt;span class="nx">Vid&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Vid&lt;/span>
&lt;span class="nx">Size&lt;/span> &lt;span class="kt">uint32&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">SliceInfo&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">_&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;span class="nx">MinBid&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BlobID&lt;/span> &lt;span class="s">`json:&amp;#34;min_bid&amp;#34;`&lt;/span>
&lt;span class="nx">Vid&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Vid&lt;/span> &lt;span class="s">`json:&amp;#34;vid&amp;#34;`&lt;/span>
&lt;span class="nx">Count&lt;/span> &lt;span class="kt">uint32&lt;/span> &lt;span class="s">`json:&amp;#34;count&amp;#34;`&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">MaxLocationBlobs&lt;/span> &lt;span class="kt">uint32&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="c1">//location中最大blob数量，4个
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">MaxDeleteLocations&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1024&lt;/span> &lt;span class="c1">//delete请求中最多包含location数：1024
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">MaxBlobSize&lt;/span> &lt;span class="kt">uint32&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">25&lt;/span> &lt;span class="c1">// location中单个blob最大size：32MB
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>配置文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//access.conf&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;bind_addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;:9500&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;auditlog&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;logdir&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/tmp/access/&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;consul_agent_addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;127.0.0.1:8500&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">//&lt;/span>
&lt;span class="nt">&amp;#34;service_register&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;consul_addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;127.0.0.1:8500&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;service_ip&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;x.x.x.x&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;stream&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;idc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;idc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;cluster_config&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;region&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;region&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="access-client">Access Client&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>access client 为访问access 提供api；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>access client api通过配置文件中的&lt;code>PriorityAddrs&lt;/code>或consul 来连接access；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每次api发送请求时，会从发现的所有access中随机选择&lt;code>MaxHostRetry&lt;/code>(默认：3)个依次给access发送api请求，如果一个请求发送成功，则成功返回；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>access client 主要 提供3个api：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Put(): 写入数据, 返回数据location；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Get(): 根据location，获取数据内容；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Delete(): 删除指定location的数据；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// API access api for s3
&lt;/span>&lt;span class="c1">// To trace request id, the ctx is better WithRequestID(ctx, rid).
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">API&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Put object once if size is not greater than MaxSizePutOnce, otherwise put blobs one by one.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// return a location and map of hash summary bytes you excepted.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nf">Put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">PutArgs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">location&lt;/span> &lt;span class="nx">Location&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">hashSumMap&lt;/span> &lt;span class="nx">HashSumMap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Get object, range is supported.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">GetArgs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">body&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ReadCloser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Delete all blobs in these locations.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// return failed locations which have yet been deleted if error is not nil.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nf">Delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">DeleteArgs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">failedLocations&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">Location&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="allocator资源分配器">Allocator(资源分配器)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>allocator主要为accessor提供volume/alloc, list两个接口，负责vid,bid的分配；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>allocator启动时，将自身组成到clustermgr的服务中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>allocator内置了&lt;code>volumeMgr&lt;/code>, &lt;code>bidmgr&lt;/code>；&lt;/p>
&lt;ul>
&lt;li>
&lt;p>volumeMgr：负责volume的分配的管理。启动时，开启后台线程，将clusterMgr上的所有&lt;code>volInfo&lt;/code>加载到allocate内存中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>bidMgr：负责volume 的bid range分配；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>配置文件：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//&lt;/span> &lt;span class="err">allocator.conf&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;bind_addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;:9100&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:9100&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;cluster_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;idc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;z0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;clustermgr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;hosts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;http://127.0.0.1:9998&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;http://127.0.0.1:9999&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;http://127.0.0.1:10000&amp;#34;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;log&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;level&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;auditlog&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;logdir&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/tmp/allocator/&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="clustermgr集群管理器">ClusterMgr(集群管理器)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>clustermgr用于集群相关信息的管理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>clustermgr内部由多个管理器组成，包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ServiceMgr(服务管理)：管理集群中的各个Service, 包括：allocator，mqproxy, tinker；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ConfigMgr(配置管理): cluster_config, 集群的全局配置；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>VolumeMgr(逻辑卷管理)：管理逻辑卷&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DiskMgr(磁盘管理)：管理集群内所有blobnode磁盘；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ScopeMgr(Bid管理)：id分配管理；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>clustermgr内置kvdb(目前为rocksdb)来保存各种管理器的相关数据；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多个clustermgr通过raft保证kvdb数据在多个节点的同步以保证高可用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>clustermgr周期性(参数&lt;code>cluster_report_interval_s&lt;/code>，默认：60s)的将clusterinfo汇报给&lt;code>consul_agent_addr&lt;/code>上，以&lt;code>ebs/&amp;lt;region&amp;gt;/clusters/&amp;lt;clusterID&amp;gt;:&amp;lt;clusterInfo&amp;gt;&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>leader clustermgr周期性的(默认: 10s)检查并更新disk状态；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//&lt;/span> &lt;span class="err">clustermgr.conf&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;max_procs&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;bind_addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;:9998&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;cluster_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;idc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;z0&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;region&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;test-region&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;readonly&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;chunk_size&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">16777216&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;consul_agent_addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;127.0.0.1:8500&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">//option,&lt;/span> &lt;span class="err">default:&lt;/span> &lt;span class="err">127.0.0.1:8500&lt;/span>
&lt;span class="nt">&amp;#34;log&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;level&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;auditlog&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;logdir&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/tmp/clustermgr/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;backup&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;log_file_suffix&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;.log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;rotate_new&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;chunkbits&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">14&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;auth&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;enable_auth&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;secret&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;testsecret&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;normal_db_path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;/tmp/normaldb0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;normal_db_option&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;create_if_missing&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;code_mode_policies&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;mode_name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;EC3P3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;min_size&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;max_size&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;size_ratio&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">0.2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;enable&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;mode_name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;EC6P6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;min_size&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1025&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;max_size&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">2048&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;size_ratio&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">0.8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;enable&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;volume_mgr_config&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;volume_db_path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;/tmp/volumedb0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;volume_db_option&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;create_if_missing&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;min_allocable_volume_count&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;each_allocator_volume_threshold&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;retain_time_s&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">600&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;cluster_config&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;disk_repair&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Disable&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;balance&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Disable&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;disk_drop&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Disable&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;blob_delete&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Disable&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;shard_repair&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Disable&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;vol_inspect&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Disable&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;init_volume_num&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;volume_reserve_size&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10485760&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;data_node_heartbeat_interval_s&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">60&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;raft_config&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;raft_db_path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/tmp/raftdb0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;raft_db_option&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;create_if_missing&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;snapshot_patch_num&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">64&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;server_config&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;nodeId&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;listen_port&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10110&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;raft_wal_dir&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/tmp/raftwal0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;peers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;127.0.0.1:10110&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;127.0.0.1:10111&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;127.0.0.1:10112&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;raft_node_config&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>
&lt;span class="nt">&amp;#34;flush_num_interval&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;flush_time_interval_s&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;truncate_num_interval&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;node_protocol&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;nodes&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;127.0.0.1:9998&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;127.0.0.1:9999&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;127.0.0.1:10000&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;disk_mgr_config&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;refresh_interval_s&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;rack_aware&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host_aware&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="kc">false&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="cluster集群">Cluster(集群)&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>一个cluster由多个cluster_id相同的多个clustermgr节点组成；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个cluster中的多个clustermgr通过raft组成一个raft group进行数据复制同步；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个region中可包含多个cluster，同一region下的cluster注册为consul下的多个服务；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据put时，access根据配置的region，会随机在region下选择一个cluster来put数据，返回的location中包含cluster_id用以指明所在cluster；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="volume卷">Volume(卷)&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Volume是数据管理逻辑单元，是面向客户端的数据视图；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基本信息&lt;/p>
&lt;ul>
&lt;li>
&lt;p>vid(32bits)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CodeMode: 编码模式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Status: 状态&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HealthScore: 健康分&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Total: 总空间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Free: 可用空间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Used: 已使用空间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CreateByNodeID: 创建NodeID&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Volume Status&lt;/p>
&lt;ul>
&lt;li>
&lt;p>idle:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>active:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>lock:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>unlocking&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//卷信息
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">VolumeInfo&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Units&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">Unit&lt;/span>
&lt;span class="nx">VolumeInfoBase&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//卷单元
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Unit&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Vuid&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Vuid&lt;/span>
&lt;span class="nx">DiskID&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DiskID&lt;/span>
&lt;span class="nx">Host&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// clustermgr/srv.go
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">BidScopeName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;bid&amp;#34;&lt;/span>
&lt;span class="nx">MaxBidCount&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">100000&lt;/span>
&lt;span class="nx">DefaultChunkSize&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">17179869184&lt;/span>
&lt;span class="nx">DefaultVolumeReserveSize&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10485760&lt;/span>
&lt;span class="nx">defaultClusterReportIntervalS&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">60&lt;/span>
&lt;span class="nx">defaultHeartbeatNotifyIntervalS&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="nx">defaultMaxHeartbeatNotifyNum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2000&lt;/span>
&lt;span class="nx">defaultMetricReportIntervalM&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="blobnode">BlobNode&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>BlobNode是blob管理节点，提供数据的blob存储管理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>blobnode启动时，将扫描并加载配置文件下的disk，然后后&lt;code>clusterMgr&lt;/code>上已有的disk进行对比，如果&lt;code>clusterMgr&lt;/code>中&lt;code>not found&lt;/code>，则&lt;code>AddDisk&lt;/code>到&lt;code>clusterMgr&lt;/code>的管理器中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动时开启如下全局协程：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>loopHeartbeatToClusterMgr(): 周期性(默认：30s)维持和&lt;code>clusterMgr&lt;/code>间的心跳；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>loopReportChunkInfoToClusterMgr()：周期性(默认：57s)向&lt;code>clusterMgr&lt;/code>汇报chunkInfo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>loopGcRubbishChunkFile(): 周期(默认：60min)检查chunkfile，执行垃圾回收任务；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>loopCleanExpiredStatFile(): 周期()清理过期stat文件(/tmp/shm/目录下的iostat文件)；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="blobnode中disk的管理">blobnode中disk的管理&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>blobnode中disk由配置文件中&lt;code>disks&lt;/code>项指定，一个blobnode可以包含多个disk;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>blobnode启动时，先通过rpc从&lt;code>clusterMgr&lt;/code>获取该host已经注册的disk；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后根据配置文件, 逐个加载disk；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个disk包含.sys, meta等子目录，.sys目录里面保存disk的格式相关信息；.meta里面使用rocksdb来记录chunk相关的元数据信息；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>blobnode&lt;/p>
&lt;/li>
&lt;li>
&lt;p>disk加载流程：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过配置文件获取disk根目录；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>加载磁盘format信息。通过读取.sys目录下的format.json内获取disk format信息(包括DiskID), 如果该文件不存在，则从&lt;code>clusterMgr&lt;/code>分配一个新的DiskID, 并注册disk到clusterMgr的table中;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开meta目录下的rocksdb，初始化化superblock;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从meta db中读取&lt;code>diskinfo&lt;/code>来加载diskinfo；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>设置disk iostat 相关数据结构；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动loop相关后台协程&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ds.loopCleanChunk&lt;/code>: 清理已released 的chunk；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ds.loopCompactFile&lt;/code>: compact chunk file;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ds.loopDiskUsage&lt;/code>:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ds.loopCleanTrash&lt;/code>:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ds.loopMetricReport&lt;/code>:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>加载好的diskStorage记录在map[diskID]&lt;code>Disks&lt;/code> 中;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="配置文件">配置文件&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//&lt;/span> &lt;span class="err">blobnode.conf&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;bind_addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;:8899&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;cluster_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;idc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;z0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;rack&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;testrack&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:8899&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;disks&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./run/disks/disk1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;auto_format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;max_chunks&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1024&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./run/disks/disk2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;auto_format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;max_chunks&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1024&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./run/disks/disk3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;auto_format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;max_chunks&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1024&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./run/disks/disk4&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;auto_format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;max_chunks&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1024&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./run/disks/disk5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;auto_format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;max_chunks&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1024&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./run/disks/disk6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;auto_format&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;max_chunks&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1024&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;clustermgr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;hosts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;http://127.0.0.1:9998&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;http://127.0.0.1:9999&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;http://127.0.0.1:10000&amp;#34;&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;log&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;level&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;filename&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./run/blobnode.log&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;auditlog&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;logdir&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./run/auditlog&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="disk磁盘">Disk(磁盘)&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Disk是BlobNode节点上一个格式化后挂载到某一目录的物理磁盘，用来存储具体的数据；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Disk基本信息包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>DiskID: 磁盘ID(uint32), 1~1^31-1；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ClusterID: 所属ClusterID(uint32)；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Idc: Idc&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Path：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Host：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Status&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ReadOnly: 是否只读&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Disk Status包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Normal: 正常&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Broken:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Repairing&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Repaired&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Droped&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// disk format
&lt;/span>&lt;span class="c1">// blobnode/core/format.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * ${diskRoot}/
&lt;/span>&lt;span class="cm"> * - .sys/ //disk
&lt;/span>&lt;span class="cm"> * - .format.json //disk 格式信息；
&lt;/span>&lt;span class="cm"> * - .format.json.tmp
&lt;/span>&lt;span class="cm"> * - .trash/ //回收站，被清理的chunk
&lt;/span>&lt;span class="cm"> * - data/ //disk数据信息, chunk file
&lt;/span>&lt;span class="cm"> - &amp;lt;chunkID1&amp;gt;file // chunk file 1 (最多8196个chunk)
&lt;/span>&lt;span class="cm"> - &amp;lt;chunkID2&amp;gt;file // chunk file 2
&lt;/span>&lt;span class="cm"> * - meta/ //disk元信息
&lt;/span>&lt;span class="cm"> - superblock/ //disk超级块，disk meta kvdb
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="c1">// 磁盘格式信息受保护域，
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">FormatInfoProtectedField&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">DiskID&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DiskID&lt;/span> &lt;span class="s">`json:&amp;#34;diskid&amp;#34;`&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Version&lt;/span> &lt;span class="kt">uint8&lt;/span> &lt;span class="s">`json:&amp;#34;version&amp;#34;`&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Ctime&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="s">`json:&amp;#34;ctime&amp;#34;`&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Format&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;format&amp;#34;`&lt;/span> &lt;span class="c1">//disk格式，当前只支持fs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//磁盘格式信息
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">FormatInfo&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">FormatInfoProtectedField&lt;/span>
&lt;span class="nx">CheckSum&lt;/span> &lt;span class="kt">uint32&lt;/span> &lt;span class="s">`json:&amp;#34;check_sum&amp;#34;`&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//disk metadb(rocksdb)
&lt;/span>&lt;span class="c1">// k ---- v
&lt;/span>&lt;span class="c1">// disk/&amp;lt;diskid&amp;gt; [diskid]
&lt;/span>&lt;span class="c1">// chunk/&amp;lt;chunkid&amp;gt; [chunkid]
&lt;/span>&lt;span class="c1">// vuid/&amp;lt;vuid&amp;gt; [vuid]
&lt;/span>&lt;span class="c1">// diskinfo [diskmeta]
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//DiskMeta
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">DiskMeta&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">FormatInfo&lt;/span>
&lt;span class="nx">Host&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;host&amp;#34;`&lt;/span>
&lt;span class="nx">Path&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;path&amp;#34;`&lt;/span>
&lt;span class="nx">Status&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DiskStatus&lt;/span> &lt;span class="s">`json:&amp;#34;status&amp;#34;`&lt;/span>
&lt;span class="nx">Registered&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="s">`json:&amp;#34;registered&amp;#34;`&lt;/span>
&lt;span class="nx">Readonly&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="s">`json:&amp;#34;readonly&amp;#34;`&lt;/span>
&lt;span class="nx">Mtime&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="s">`json:&amp;#34;mtime&amp;#34;`&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="chunk">Chunk&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Chunk是对Disk上具体数据的一种抽象，当前的chunk实现为一个file；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>chunk file 位于disk的data目录下, 以chunkID为名的file；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>chunkID组成：&lt;code>vuid+&amp;lt;创建chunk时的时间戳&amp;gt;&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个chunk由多个连续的shard组成，&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>一个disk默认最多chunk数&lt;code>DefaultMaxChunks&lt;/code>：8192;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个chunk默认最大size&lt;code>DefaultMaxChunk&lt;/code>: 1TiB;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>默认chunk size&lt;code>DefaultChunkSize&lt;/code>：16GiB;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>chunk status:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Default:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Normal:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ReadOnly:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Release:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// cubufs-blobstore/blobnode/core/shard.go
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// chunk datafile format:
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | chunk header | (4k)
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | shard | ----------------------
&lt;/span>&lt;span class="c1">// | shard | | header (32 Bytes) |
&lt;/span>&lt;span class="c1">// | shard | ----&amp;gt; | data (...) |
&lt;/span>&lt;span class="c1">// | shard | | footer (8 Bytes) |
&lt;/span>&lt;span class="c1">// | .... | ----------------------
&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">// Chunkdata header format:
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | magic number | ---- 4 bytes
&lt;/span>&lt;span class="c1">// | version | ---- 1 byte
&lt;/span>&lt;span class="c1">// | parent chunk | ---- 16 byte //compact前的chunk
&lt;/span>&lt;span class="c1">// | create time | ---- 8 byte
&lt;/span>&lt;span class="c1">// | padding | ---- aligned with shard padding size ( 4k-4-1-16-8)
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// shard
&lt;/span>&lt;span class="c1">// shard header format:
&lt;/span>&lt;span class="c1">// ---------------------
&lt;/span>&lt;span class="c1">// |crc(header)(uint32)|
&lt;/span>&lt;span class="c1">// | magic (uint32) |
&lt;/span>&lt;span class="c1">// | bid (int64) |
&lt;/span>&lt;span class="c1">// | vuid (uint64) |
&lt;/span>&lt;span class="c1">// | size (uint32) |
&lt;/span>&lt;span class="c1">// | padding (4 bytes) |
&lt;/span>&lt;span class="c1">// ---------------------
&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">// shard data format.
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | block | ---- 64 KiB
&lt;/span>&lt;span class="c1">// | block | ---- 64 KiB
&lt;/span>&lt;span class="c1">// | block | ---- 64 KiB
&lt;/span>&lt;span class="c1">// ---------------
&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">// block format.
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | crc | ---- 4 Byte
&lt;/span>&lt;span class="c1">// | data | ---- (64 KiB - 4)
&lt;/span>&lt;span class="c1">// ---------------
&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">// footer format:
&lt;/span>&lt;span class="c1">// ----------------------
&lt;/span>&lt;span class="c1">// | magic (int32) |
&lt;/span>&lt;span class="c1">// | crc(shard) (int32) |
&lt;/span>&lt;span class="c1">// | padding (0 bytes) |
&lt;/span>&lt;span class="c1">// ----------------------
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Chunkdata has a header (4k).
&lt;/span>&lt;span class="c1">// Chunkdata header format:
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | magic number | ---- 4 bytes
&lt;/span>&lt;span class="c1">// | version | ---- 1 byte
&lt;/span>&lt;span class="c1">// | parent chunk | ---- 16 byte
&lt;/span>&lt;span class="c1">// | create time | ---- 8 byte
&lt;/span>&lt;span class="c1">// | padding | ---- aligned with shard padding size ( 4k-4-1-16-8)
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | shard |
&lt;/span>&lt;span class="c1">// | shard |
&lt;/span>&lt;span class="c1">// | shard |
&lt;/span>&lt;span class="c1">// | shard |
&lt;/span>&lt;span class="c1">// | shard |
&lt;/span>&lt;span class="c1">// | .... |
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">ChunkHeader&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">magic&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">_chunkMagicSize&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;span class="nx">version&lt;/span> &lt;span class="kt">byte&lt;/span>
&lt;span class="nx">parentChunk&lt;/span> &lt;span class="nx">bnapi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ChunkId&lt;/span>
&lt;span class="nx">createTime&lt;/span> &lt;span class="kt">int64&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Chunk ID
&lt;/span>&lt;span class="c1">// vuid + timestamp
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">const&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">chunkVuidLen&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="nx">chunkTimestmapLen&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="nx">ChunkIdLength&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">chunkVuidLen&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">chunkTimestmapLen&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="shard">Shard&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>shard是chunk中用于存储一个ec编码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>shard status:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Default:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Normal:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MarkDelete:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="mqproxy消息代理">MQProxy(消息代理)&lt;/h3>
&lt;ul>
&lt;li>mqproxy为kafka mq代理，作为异步消息传输通道；&lt;/li>
&lt;li>启动时，将自身作为 service注册到&lt;code>clustermsg&lt;/code>中的service table中；&lt;/li>
&lt;li>mqproxy接收&lt;code>access&lt;/code>下发的&lt;code>shardRepardMsg&lt;/code>和&lt;code>blobDeleteMsg&lt;/code>消息，被&lt;code>scheduler&lt;/code>消费；&lt;/li>
&lt;li>scheduler中的&lt;code>inspectMgr&lt;/code>在巡检时，如果发现丢失的shard，将给mqproxy发送&lt;code>shardRepairedMsg&lt;/code>;&lt;/li>
&lt;li>提供rpc接口：
*&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//mqproxy.conf&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;bind_addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;:9600&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;cluster_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;cm_cfg&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;hosts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;http://127.0.0.1:7000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:7010&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:7020&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;clustermgr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;blob_delete_topic&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;blob_delete&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;shard_repair_topic&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;shard_repair&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;shard_repair_priority_topic&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;shard_repair_prior&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;msg_sender&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;broker_list&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;127.0.0.1:9092&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;service_register&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:9600&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;idc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;z0&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;log&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;level&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;filename&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/tmp/mqproxy.log&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;auditlog&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;logdir&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./auditlog/mqproxy&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="scheduler任务调度器">Scheduler(任务调度器)&lt;/h3>
&lt;ul>
&lt;li>&lt;code>scheduler&lt;/code>提供所在cluster后台任务调度服务;&lt;/li>
&lt;li>内置管理器：
&lt;ul>
&lt;li>ClusterTopoMgr: 集群拓扑管理器, 周期性(默认：5min)的从&lt;code>clustermgr&lt;/code>获取配置集群的disk信息，然后构建拓扑信息；&lt;/li>
&lt;li>BalanceMgr：数据平衡管理器, 周期性(默认：5s)收集disk分布情况，构建MigrateMgr任务，使数据自动保证平衡；&lt;/li>
&lt;li>MigrateMgr: 迁移管理器, 分为自动、手动迁移管理器两种。自动迁移管理器有BalanceMgr管理；手动迁移管理器由api调用触发：&lt;/li>
&lt;li>DiskDropMgr：下线磁盘管理器，负责；&lt;/li>
&lt;li>RepairMgr：修复任务管理器，&lt;/li>
&lt;li>InspectMgr: 巡检管理器, 巡检vol，发现坏的blob时，给mqproxy发送&lt;code>ShardRepairMsg&lt;/code>；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>启动时，先根据配置文件初始化化各个管理器 ，再从mongo中加载已有的task，最后使各个mgr run起来；&lt;/li>
&lt;li>scheduler内置service table, tinker和worker组件在启动时，会将自身注册到scheduler的service table中；&lt;/li>
&lt;li>各管理器生成task，并插入到相应的mongdb task table中；&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json"> &lt;span class="err">//&lt;/span> &lt;span class="err">scheduler.conf&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;bind_addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;:9800&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">服务端口&lt;/span>
&lt;span class="nt">&amp;#34;cluster_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">集群id&lt;/span>
&lt;span class="nt">&amp;#34;clustermgr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">clustermgr地址&lt;/span>
&lt;span class="nt">&amp;#34;hosts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;http://127.0.0.1:9998&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:9999&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:10000&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;database&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">后台任务相关配置&lt;/span>
&lt;span class="nt">&amp;#34;mongo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;uri&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;mongodb://127.0.0.1:27017&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">mongodb&lt;/span> &lt;span class="err">地址&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;db_name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;scheduler&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">数据库名&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;task_archive_store_db&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>    &lt;span class="err">#&lt;/span> &lt;span class="err">后台任务备份表&lt;/span>
&lt;span class="nt">&amp;#34;mongo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;uri&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;mongodb://127.0.0.1:27017&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">mongodb&lt;/span> &lt;span class="err">地址&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;db_name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;task_archive_store&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">数据库名&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;log&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>                         &lt;span class="err">#&lt;/span> &lt;span class="err">运行日志相关配置&lt;/span>
&lt;span class="nt">&amp;#34;level&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>                    &lt;span class="err">#&lt;/span> &lt;span class="err">0:debug,&lt;/span> &lt;span class="err">1:info,&lt;/span> &lt;span class="err">2:warn,&lt;/span> &lt;span class="err">3:error,&lt;/span> &lt;span class="err">4:panic,&lt;/span> &lt;span class="err">5:fatal&lt;/span>
&lt;span class="nt">&amp;#34;filename&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/tmp/scheduler.log&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">运行日志文件，会自动轮转&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;auditlog&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>                    &lt;span class="err">#&lt;/span> &lt;span class="err">审计日志相关配置&lt;/span>
&lt;span class="nt">&amp;#34;logdir&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./auditlog/scheduler&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">审计日志目录&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>API&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// scheduler/startup.go
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/task/acquire&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPTaskAcquire&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsQuery&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/task/reclaim&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPTaskReclaim&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/task/cancel&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPTaskCancel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/task/complete&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPTaskComplete&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/manual/migrate/task/add&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPManualMigrateTaskAdd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/inspect/acquire&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPInspectAcquire&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsQuery&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/inspect/complete&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPInspectComplete&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/task/report&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPTaskReport&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/task/renewal&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPTaskRenewal&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/balance/task/detail&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPBalanceTaskDetail&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/repair/task/detail&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPRepairTaskDetail&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/drop/task/detail&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPDropTaskDetail&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/manual/migrate/task/detail&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPManualMigrateTaskDetail&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/stats&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPStats&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsQuery&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/service/list&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPServiceList&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsQuery&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/service/register&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPServiceRegister&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/service/get&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPServiceGet&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsQuery&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/service/delete&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HTTPServiceDelete&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">OptArgsBody&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="worker">Worker()&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>执行tinker下发(rpc api)的shard repair, blob delete任务；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动时，将自身注册到&lt;code>scheduler&lt;/code>的service 列表中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>周期性(默认: 500ms)的从&lt;code>scheduler&lt;/code>获取task, 并执行task(包括: Repair, Balance, DiskDrop, ManualMigrate, Inspect)；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json"> &lt;span class="err">//worker.conf&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;bind_addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;:9910&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">服务端口&lt;/span>
&lt;span class="nt">&amp;#34;cluster_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">集群id&lt;/span>
&lt;span class="nt">&amp;#34;service_register&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">自身服务consul注册信息&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:9910&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">服务地址&lt;/span>
&lt;span class="nt">&amp;#34;idc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;z0&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">服务所属机房&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;scheduler&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">scheduler服务相关配置&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:9800&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">服务地址&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;dropped_bid_record&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">丢弃blob&lt;/span> &lt;span class="err">id原因记录&lt;/span>
&lt;span class="nt">&amp;#34;dir&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./dropped&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">记录目录&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;log&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">运行日志相关配置&lt;/span>
&lt;span class="nt">&amp;#34;level&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">0:debug,&lt;/span> &lt;span class="err">1:info,&lt;/span> &lt;span class="err">2:warn,&lt;/span> &lt;span class="err">3:error,&lt;/span> &lt;span class="err">4:panic,&lt;/span> &lt;span class="err">5:fatal&lt;/span>
&lt;span class="nt">&amp;#34;filename&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/tmp/worker.log&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">运行日志文件，会自动轮转&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;auditlog&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">审计日志相关配置&lt;/span>
&lt;span class="nt">&amp;#34;logdir&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./auditlog/worker&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">审计日志目录&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="tinker修补器">Tinker(修补器)&lt;/h3>
&lt;ul>
&lt;li>启动时，将自身注册到&lt;code>scheduler&lt;/code>的service服务列表中；&lt;/li>
&lt;li>内置&lt;code>shardRepairMgr&lt;/code>, &lt;code>BlobDeleteMgr&lt;/code>, 执行shard repair，blob delete任务；&lt;/li>
&lt;li>从kafka mq中消费相应的消息, 并通过rpc通知&lt;code>worker&lt;/code>执行相应的任务;&lt;/li>
&lt;li>tinker使用mongodb保存kafka offset和&lt;code>orphanShard&lt;/code>;&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//tinker.conf&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;bind_addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;:9700&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">服务端口&lt;/span>
&lt;span class="nt">&amp;#34;cluster_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">集群id&lt;/span>
&lt;span class="nt">&amp;#34;database_conf&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">mongodb相关配置&lt;/span>
&lt;span class="nt">&amp;#34;mongo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;uri&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;mongodb://127.0.0.1:27017&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">mongodb地址&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;db_name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;tinker&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">数据库名&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;shard_repair&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">数据修补相关配置&lt;/span>
&lt;span class="nt">&amp;#34;broker_list&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s2">&amp;#34;127.0.0.1:9092&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">kafka&lt;/span> &lt;span class="err">地址&lt;/span>
&lt;span class="nt">&amp;#34;priority_topics&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">修补主题配置&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;priority&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">修复优先级，数值越大优先级越高&lt;/span>
&lt;span class="nt">&amp;#34;topic&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;shard_repair&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">主题&lt;/span>
&lt;span class="nt">&amp;#34;partitions&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">消费分区&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;priority&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">修复优先级，数值越大优先级越高&lt;/span>
&lt;span class="nt">&amp;#34;topic&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;shard_repair_prior&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">主题&lt;/span>
&lt;span class="nt">&amp;#34;partitions&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">消费分区&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;fail_topic&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">修补主题消费配置&lt;/span>
&lt;span class="nt">&amp;#34;topic&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;shard_repair_failed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">主题&lt;/span>
&lt;span class="nt">&amp;#34;partitions&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">消费分区&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;blob_delete&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">数据删除相关配置&lt;/span>
&lt;span class="nt">&amp;#34;broker_list&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s2">&amp;#34;127.0.0.1:9092&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">kafka地址&lt;/span>
&lt;span class="nt">&amp;#34;normal_topic&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">删除消息消费配置&lt;/span>
&lt;span class="nt">&amp;#34;topic&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;blob_delete&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">#&lt;/span> &lt;span class="err">主题&lt;/span>
&lt;span class="nt">&amp;#34;partitions&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">消费分区&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;fail_topic&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">删除失败消息消费配置&lt;/span>
&lt;span class="nt">&amp;#34;topic&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;fail_blob_delete&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">主题&lt;/span>
&lt;span class="nt">&amp;#34;partitions&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">分区&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;safe_delay_time_h&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">72&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">删除保护期&lt;/span>
&lt;span class="nt">&amp;#34;dellog&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">删除记录相关配置&lt;/span>
&lt;span class="nt">&amp;#34;dir&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./delete_log&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">删除日志目录&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;clustermgr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">clustermgr地址&lt;/span>
&lt;span class="nt">&amp;#34;hosts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;http://127.0.0.1:9998&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:9999&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:10000&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;scheduler&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">scheduler服务地址&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:9800&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;service_register&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">自身服务注册信息&lt;/span>
&lt;span class="nt">&amp;#34;host&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;http://127.0.0.1:9700&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>    &lt;span class="err">#&lt;/span> &lt;span class="err">服务地址&lt;/span>
&lt;span class="nt">&amp;#34;idc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;z0&amp;#34;&lt;/span>                 &lt;span class="err">#&lt;/span> &lt;span class="err">服务所属机房&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;log&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>                         &lt;span class="err">#&lt;/span> &lt;span class="err">运行日志相关配置&lt;/span>
&lt;span class="nt">&amp;#34;level&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>                    &lt;span class="err">#&lt;/span> &lt;span class="err">0:debug,&lt;/span> &lt;span class="err">1:info,&lt;/span> &lt;span class="err">2:warn,&lt;/span> &lt;span class="err">3:error,&lt;/span> &lt;span class="err">4:panic,&lt;/span> &lt;span class="err">5:fatal&lt;/span>
&lt;span class="nt">&amp;#34;filename&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;/tmp/tinker.log&amp;#34;&lt;/span>     &lt;span class="err">#&lt;/span> &lt;span class="err">运行日志文件，会自动轮转&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;auditlog&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>                    &lt;span class="err">#&lt;/span> &lt;span class="err">审计日志相关配置&lt;/span>
&lt;span class="nt">&amp;#34;logdir&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;./auditlog/tinker&amp;#34;&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="err">审计日志目录&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="cli">Cli&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//cli.conf&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;access&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;conn_mode&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">//4:&lt;/span> &lt;span class="err">no&lt;/span> &lt;span class="err">timeout&lt;/span>
&lt;span class="nt">&amp;#34;consul_addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;http://127.0.0.1:8500&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">//&lt;/span>
&lt;span class="nt">&amp;#34;max_host_retry&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;max_part_retry&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;max_size_put_once&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;priority_addrs&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;http://localhost:9500&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;http://127.0.0.1:9500&amp;#34;&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;service_interval_ms&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;redis_addrs&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;127.0.0.1:6379&amp;#34;&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;redis_user&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;redis_pass&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;cm_addrs&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;http://localhost:9998&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;http://127.0.0.1:9998&amp;#34;&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;verbose&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;vverbose&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="外部组件">外部组件&lt;/h2>
&lt;h3 id="consul">Consul&lt;/h3>
&lt;ul>
&lt;li>提供cluster信息注册，查询服务；&lt;/li>
&lt;/ul>
&lt;h3 id="mongodb">MongoDB&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>mongodb用于存储scheduler模块调度信息；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>db&lt;/th>
&lt;th>dafault table&lt;/th>
&lt;th>config key&lt;/th>
&lt;th>说明&lt;/th>
&lt;th>模块&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>scheduler&lt;/td>
&lt;td>&lt;/td>
&lt;td>&amp;ldquo;database:db_name&amp;rdquo;&lt;/td>
&lt;td>&lt;/td>
&lt;td>scheduler.conf&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>balance_tbl&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>disk_drop_tbl&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>repair_tbl&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>inspect_checkpoint_tbl&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>manual_migrate_tbl&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>svr_register_tbl&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>tasks_tbl&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="kafka">Kafka&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>用于组件间异步 任务消息传递, mqproxy对其相关操作进行封装；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主要用来传递&lt;code>shardRepair&lt;/code>和&lt;code>blobDelete&lt;/code>两类消息；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="redis">Redis&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>为access访问cm volume提供缓存；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缓存expires：30-60min;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//redis key
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">GroupVolumeKey&lt;/span> &lt;span class="s">&amp;#34;get-volume-&amp;lt;cvid&amp;gt;&amp;#34;&lt;/span>
&lt;span class="nx">RedisVolumeKey&lt;/span> &lt;span class="s">&amp;#34;access/volume/&amp;lt;clusterID&amp;gt;/&amp;lt;vid&amp;gt;&amp;#34;&lt;/span> &lt;span class="nx">Value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">VolumePly&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参数">参数&lt;/h2>
&lt;h3 id="consul-1">Consul&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// ConsulRegisterPath
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">key&lt;/span> &lt;span class="nx">value&lt;/span>
&lt;span class="nx">clusterMgr&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">ebs&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">region&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">clusters&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">cluster_id&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">cluster_info&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="blobnode-1">BlobNode&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>一个disk默认最多chunk数&lt;code>DefaultMaxChunks&lt;/code>：8192;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个chunk默认最大size&lt;code>DefaultMaxChunk&lt;/code>: 1TiB;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>默认chunk size&lt;code>DefaultChunkSize&lt;/code>：16GiB;&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//blobnode/core/config.go
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">DefaultDiskReservedSpaceB&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">int64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">60&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 60 GiB
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultChunkSize&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">int64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 16 GiB
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultMaxChunks&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">int32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 8192
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultChunkReleaseProtectionM&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1440&lt;/span> &lt;span class="c1">// 1 days
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultChunkGcCreateTimeProtectionM&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1440&lt;/span> &lt;span class="c1">// 1 days
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultChunkGcModifyTimeProtectionM&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1440&lt;/span> &lt;span class="c1">// 1 days
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultChunkCompactIntervalSec&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="c1">// 10 min
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultChunkCleanIntervalSec&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="c1">// 1 min
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultDiskUsageIntervalSec&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="c1">// 1 min
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultDiskCleanTrashIntervalSec&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="c1">// 60 min
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultDiskTrashProtectionM&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2880&lt;/span> &lt;span class="c1">// 2 days
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultCompactBatchSize&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1024&lt;/span> &lt;span class="c1">// 1024 counts
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultCompactMinSizeThreshold&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 16 GiB
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultCompactTriggerThreshold&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 1 TiB
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultMetricReportIntervalS&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">30&lt;/span> &lt;span class="c1">// 30 Sec
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultCompactEmptyRateThreshold&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">float64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 80% rate
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// blobnode/core/disk/disk.go
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">MaxChunkSize&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">int64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 1024 GiB, 一个disk chunk最大size，
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// access config
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">defaultMaxObjectSize&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//单个object最大put大小；
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="关键流程">关键流程&lt;/h2>
&lt;h3 id="创建卷createvolume">创建卷(CreateVolume)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>入口为clusterMgr中volumeMgr的&lt;code>createVolume()&lt;/code>函数；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>先通过&lt;code>scopMgr.Alloc&lt;/code> 分配一个新vid;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据mode获取unitCount(为tactic的N+M+L);&lt;/p>
&lt;/li>
&lt;li>
&lt;p>初始化volume units信息vuInfos；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>初始化volInfo；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过raft执行initCreateVolume指令，将volume信息记录到transitedTable中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过&lt;code>allocChunkForAllUnits&lt;/code>为vol所有的units分配chunk;&lt;/p>
&lt;ul>
&lt;li>
&lt;p>allocChunkForAllUnits会根据vol的编码策略，将chunk随机分布到不同idc上；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过blobnode ChunkCreate rpc调用在blobnode上创建chunk;&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>通过raft执行CreateVolume指令，删除transitedTbl中的volume units，将volume units相关信息记录到volumeTbl中 ；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="写入put">写入(Put)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>put提供了将数据写入到blobstore中的能力；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/02/08-10-44-35-2022-02-08-10-44-24-image.png" alt="">&lt;/p>
&lt;p>Put流程从access-client中的&lt;code>Put()&lt;/code>方法开始：&lt;/p>
&lt;h4 id="access-client-1">access-client&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>access-client &lt;code>Put()&lt;/code>流程：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>根据数据判断，如果size == 0， 返回空location；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Size &amp;lt;= MaxSizePutOnec(默认：256MB) ，通过&lt;code>putObject()&lt;/code>单个对象上传；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>否则，通过&lt;code>putParts&lt;/code>分块上传：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>putObject流程：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>数据size小于PutOnce缓存(默认: 8MB)，把数据一次读入buffer中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用access put rpc将数据put上去；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回location;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>putParts流程：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过rpc 从access中alloc一个location和tokens&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动一个后台goroutine，将数据按&lt;code>config.PartConcurrenc（默认：4）&lt;/code>读取到buffer中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将buffer中的数据增加token，cid，vid等相关信息组装为一个parts；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过&lt;code>putPartsBatch&lt;/code>将parts批量上传；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="access">access&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>access put rpc的入口为&lt;code>service.Put&lt;/code>, 其处理流程如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ParseArgs(args)解析参数；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>args.IsValid()判断参数是否有效；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据args中的hashes设置hasherMap;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用&lt;code>streamHandler.Put()&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过hasherMap计算返回的hashSumMap;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>stream_put Put()流程：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果size&amp;gt;maxObjectSize(默认：256MB), 返回错误；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果hasherMap个数&amp;gt;0; 复制一个reader用于计算hash；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用SelectCodeMode(size)，根据大小选择一个合适的纠删码策略；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据access配置&lt;code>MaxBlobSize&lt;/code>，设置blobSize(默认: 4MB)；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用&lt;code>allocFromAllocatorWithHystrix()&lt;/code>, 根据纠删码、size, blobSize，从allocator分配&lt;code>clusterID,blobs&lt;/code>, blob个数由size, blobSize计算而来；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据要读取blob的大小和纠删码策略，在编码器encoder中&lt;code>ec.NewBuffer()&lt;/code>一块ec.Buffer；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过&lt;code>ec.Split()&lt;/code>将ec.Buffer中数据缓存切分为对应编码的&lt;code>shards&lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>依次处理各个blob：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>读取blob数据填充到ec.Buffer的dataBuf中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用对应编码器的&lt;code>Encode()&lt;/code>将shards进行编码；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过&lt;code>writeToBlobnodesWithHystrix()&lt;/code>将shards写入到blobnode中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果有写入出错的个数&amp;gt;0, 则调用&lt;code>RepairMsgBg()&lt;/code>，往&lt;code>mqproxy&lt;/code>发送repair消息&lt;code>sendRepairMsgBg&lt;/code>；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>上传过程如果不成功，通过&lt;code>clearGarbage()&lt;/code>清理无用垃圾数据；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ec.NewBuffer()&lt;/code>建立编码缓冲区流程：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>根据dataSize和编码策略数据分片数shardN，计算每个分片的大小&lt;code>shardSize=(dataSize+shardN-1)/shardN&lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据分片大小shardSize和策略参数，计算编码总缓冲大小&lt;code>ecSize=shardSize*(N+M+L)&lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从内存池中申请ecSize大小的缓存buf；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据参数设置buf中的不同部分；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回设置好的Buffer；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>writeToBlobnodes()&lt;/code>数据写入到blobnode流程：&lt;/p>
&lt;ul>
&lt;li>根据clusterID、vid参数获取volume；&lt;/li>
&lt;li>获取volume中的ec相关参数(包括：tactic，putQuorum等)；&lt;/li>
&lt;li>根据volume中的units, 开启goroutine，通过&lt;code>h.blobnodeClient.PutShard()&lt;/code>往blobnode节点同时发送写入shard请求；&lt;/li>
&lt;li>等待请求发送完后，如果写入成功的个数&lt;code>writtenNum&amp;gt;=putQuorum&lt;/code>成功写入标准()，则写入成功；&lt;/li>
&lt;li>否则, 判断当AZCount &amp;gt;=3时，如果一个AZ down掉，判断剩下的AZ是否每个shard都写入成功，如果是，则也可以判断写入成功；&lt;/li>
&lt;li>否则写入不成功，返回错误；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="blobnode-2">blobnode&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>blobnode ShardPut_():&lt;/p>
&lt;ul>
&lt;li>ShardPut_接收&lt;code>access&lt;/code>节点发送的PutShard Rpc调用，执行shard put 写入shard数据操作；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>datafile Write():&lt;/p>
&lt;ul>
&lt;li>
&lt;p>根据&lt;code>Shard.Size&lt;/code>大小， 计算(Alignphysize)写入到chunkfile中的编码后物理大小phySize(Shard 包含header，footer和block crc)；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据phySize在datafile中分配待写入空间(allocSpace), 更新变量(cd.wOff)写入偏移(偏移需和4k对齐),并获取旧的(cd.wOff)作为&lt;code>shard.Offset&lt;/code>本次shard写入偏移；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>写入shard header数据到chunk file；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>crc32block.NewEncoder&lt;/code>新建一个crc编码写入器，通过编码器将数据编码，并写入到chunkfile的shard header数据区后面；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>写入shard footer数据到 chunk file；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="读取get">读取(Get)&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/02/08-10-45-04-2022-02-08-10-44-59-image.png" alt="">&lt;/p>
&lt;h4 id="access-client-2">access-client&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>access-client 中get入口为&lt;code>api/access/client.go (c *client)Get()&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>先检查get参数有效性，如果size 为0，直接返回空；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后随机顺序向多个access发送get rpc请求，返回第一个成功的请求；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="access-1">access&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>access 由&lt;code>access/stream_get.go （h *Handler)Get()&lt;/code>负责get rpc 入口；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>先调用&lt;code>genLocationBlobs&lt;/code>根据参数&lt;code>location,offset,readSize&lt;/code>获取location中需要读取的blobs；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在根据location获取clusterMgr controller sc;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果&lt;code>len(blobs)== 1&lt;/code>, 如果大小较小，直接调用&lt;code>getDataShardOnly()&lt;/code>读取blob数据；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开启一个后台协程，依次通过&lt;code>readOneBlob&lt;/code>从blobnode读取blobs中的每个blob的数据，通过chan传送个主流程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主流程依次接收读取的数据，并写入到get结果的buffer中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读取一个blob数据&lt;code>access/readOneBlob()&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>根据BlobSize和编码策略，分配一块新的EC buffer&lt;code>GetBufferSizes()&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>// 1. try to min-read shards byte&lt;/p>
&lt;/li>
&lt;li>
&lt;p>// 2. if failed try to read next shard to reconstruct&lt;/p>
&lt;/li>
&lt;li>
&lt;p> // 3. write the the right offset bytes to writer&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="blobnode-3">blobnode&lt;/h4>
&lt;h3 id="删除delete">删除(Delete)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>删除调用了punch hole来是否被删除的data；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过compact异步对碎片化过多的chunkfile进行整理；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="合并compact">合并(Compact)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>compact用于在后台整理chunkfile，由blobnode提供了rpc api；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>chunkfile 是否需要compact（&lt;code>NeedCompact&lt;/code>）:&lt;/p>
&lt;ul>
&lt;li>chunk file size &amp;gt;= &lt;code>conf.CompactTriggerThredshold(默认：1TiB)&lt;/code>，return true；&lt;/li>
&lt;li>chunk file size &amp;gt; &lt;code>conf.CompactMinSizeThreshold(默认: 16GB)&lt;/code>且chunkfile 稀疏率&amp;gt;=80%(&lt;code>CompactEnptyRateThreshold&lt;/code>参数);&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>blobnode/core/chunk/chunk.doCompact():&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="iotype">IOType&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go"> &lt;span class="nx">NormalIO&lt;/span> &lt;span class="nx">IOType&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">iota&lt;/span> &lt;span class="c1">// From: external: user io: read/write
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">BackgroundIO&lt;/span> &lt;span class="c1">// From: external: repair, chunk transfer, delete
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">CompactIO&lt;/span> &lt;span class="c1">// From: internal: chunk compact
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DeleteIO&lt;/span> &lt;span class="c1">// From: external: delete io
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">InternalIO&lt;/span> &lt;span class="c1">// From: internal: io, such rubbish clean, batch delete
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安全">安全&lt;/h2>
&lt;ul>
&lt;li>uptoken&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// token between alloc and putat
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// TokenSize max size of token array
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// clusterID + vid + bid + count + time + size
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">TokenSize&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;span class="c1">// UploadToken token between alloc and putat
&lt;/span>&lt;span class="c1">// [0:8] hmac (8) first 8 bytes of sha1 summary
&lt;/span>&lt;span class="c1">// [8:16] minBid (8) in the SliceInfo
&lt;/span>&lt;span class="c1">// [16:20] count (4) in the SliceInfo
&lt;/span>&lt;span class="c1">// [20:24] time (4) expired unix utc time, 0 means not expired
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">UploadToken&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Data&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">TokenSize&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;span class="nx">Offset&lt;/span> &lt;span class="kt">uint8&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://cubefs.readthedocs.io/zh_CN/latest/design/blobstore.html">https://cubefs.readthedocs.io/zh_CN/latest/design/blobstore.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/itlz/p/14090193.html">详解Hadoop3.x新特性功能-HDFS纠删码 - 五分钟学大数据 - 博客园&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/shelldon/article/details/54144730?spm=1001.2101.3001.6661.1&amp;amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;amp;utm_relevant_index=1">Erasure Code - EC纠删码原理_shelldon的专栏-CSDN博客_ec纠删码&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Golang数据结构之map</title><link>https://justice.bj.cn/post/14.language/golang/go%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bmap/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/go%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bmap/</guid><description>&lt;h1 id="golang数据结构之map">Golang数据结构之map&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="用法">用法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//字面量初始化
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">hash1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;5&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//make初始化
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">hash2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">hash2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="nx">hash2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="nx">hash2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;5&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">6&lt;/span>
&lt;span class="c1">//取值
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">hash1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1">//for 遍历
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">hash2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// k, v
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">// delete
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">hash1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">value&lt;/span>
&lt;span class="nx">hash1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">newValue&lt;/span>
&lt;span class="nb">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hash&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="底层实现">底层实现&lt;/h2>
&lt;p>golang的map核心结构是&lt;code>hmap&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">hmap&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">count&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="nx">flags&lt;/span> &lt;span class="kt">uint8&lt;/span>
&lt;span class="nx">B&lt;/span> &lt;span class="kt">uint8&lt;/span>
&lt;span class="nx">noverflow&lt;/span> &lt;span class="kt">uint16&lt;/span>
&lt;span class="nx">hash0&lt;/span> &lt;span class="kt">uint32&lt;/span>
&lt;span class="nx">buckets&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pointer&lt;/span>
&lt;span class="nx">oldbuckets&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pointer&lt;/span>
&lt;span class="nx">nevacuate&lt;/span> &lt;span class="kt">uintptr&lt;/span>
&lt;span class="nx">extra&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">mapextra&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">mapextra&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">overflow&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">bmap&lt;/span>
&lt;span class="nx">oldoverflow&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">bmap&lt;/span>
&lt;span class="nx">nextOverflow&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">bmap&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">bmap&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">topbits&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">uint8&lt;/span>
&lt;span class="nx">keys&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">keytype&lt;/span>
&lt;span class="nx">values&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">valuetype&lt;/span>
&lt;span class="nx">pad&lt;/span> &lt;span class="kt">uintptr&lt;/span>
&lt;span class="nx">overflow&lt;/span> &lt;span class="kt">uintptr&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/02/25-18-17-28-2022-02-25-18-17-22-image.png" alt="">&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000023879178">https://segmentfault.com/a/1190000023879178&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.bookstack.cn/read/go-internals/zh-02.3.md">基本数据结构 - map的实现 - 《深入解析Go》 - 书栈网 · BookStack&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-hashmap/">理解 Golang 哈希表 Map 的原理 | Go 语言设计与实现&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>两数之和</title><link>https://justice.bj.cn/post/leetcode/doc/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid><description>&lt;h1 id="两数之和httpsleetcode-cncomproblemstwo-sumdescription-httpsleetcode-cncomproblemstwo-sumdescription">&lt;a href="https://leetcode-cn.com/problems/two-sum/description/" title="https://leetcode-cn.com/problems/two-sum/description/">两数之和&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Category&lt;/th>
&lt;th>Difficulty&lt;/th>
&lt;th>Likes&lt;/th>
&lt;th>Dislikes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>algorithms&lt;/td>
&lt;td>Easy (47.03%)&lt;/td>
&lt;td>6994&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Tags&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Companies&lt;/strong>&lt;/p>
&lt;p>给定一个整数数组 &lt;code>nums&lt;/code> 和一个目标值 &lt;code>target&lt;/code>，请你在该数组中找出和为目标值的那 &lt;strong>两个&lt;/strong> 整数，并返回他们的数组下标。&lt;/p>
&lt;p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。&lt;/p>
&lt;p>&lt;strong>示例:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>&lt;a href="https://leetcode-cn.com/problems/two-sum/comments/" title="https://leetcode-cn.com/problems/two-sum/comments/">Discussion&lt;/a> | &lt;a href="https://leetcode-cn.com/problems/two-sum/solution/" title="https://leetcode-cn.com/problems/two-sum/solution/">Solution&lt;/a>&lt;/p>
&lt;h2 id="解法">解法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Solution&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="s1"> ## 解题思路
&lt;/span>&lt;span class="s1"> 1.
&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">twoSum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;span class="n">needed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">enumerate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">needed&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">needed&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">needed&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>两链表数相加</title><link>https://justice.bj.cn/post/leetcode/doc/2.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/2.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</guid><description>&lt;h1 id="两链表数相加httpsleetcode-cncomproblemsadd-two-numbersdescription-httpsleetcode-cncomproblemsadd-two-numbersdescription">&lt;a href="https://leetcode-cn.com/problems/add-two-numbers/description/" title="https://leetcode-cn.com/problems/add-two-numbers/description/">两链表数相加&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Category&lt;/th>
&lt;th>Difficulty&lt;/th>
&lt;th>Likes&lt;/th>
&lt;th>Dislikes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>algorithms&lt;/td>
&lt;td>Medium (36.10%)&lt;/td>
&lt;td>3467&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Tags****Companies&lt;/strong>&lt;/p>
&lt;p>给出两个 &lt;strong>非空&lt;/strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 &lt;strong>逆序&lt;/strong> 的方式存储的，并且它们的每个节点只能存储 &lt;strong>一位&lt;/strong> 数字。&lt;/p>
&lt;p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。&lt;/p>
&lt;p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。&lt;/p>
&lt;p>&lt;strong>示例：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：(2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)
输出：7 -&amp;gt; 0 -&amp;gt; 8
原因：342 + 465 = 807
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>&lt;a href="https://leetcode-cn.com/problems/add-two-numbers/comments/" title="https://leetcode-cn.com/problems/add-two-numbers/comments/">Discussion&lt;/a> | &lt;a href="https://leetcode-cn.com/problems/add-two-numbers/solution/" title="https://leetcode-cn.com/problems/add-two-numbers/solution/">Solution&lt;/a>&lt;/p>
&lt;h2 id="解法">解法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">class&lt;/span> &lt;span class="nc">Solution&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span class="s1"> ## 解题思路
&lt;/span>&lt;span class="s1"> 1.
&lt;/span>&lt;span class="s1"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">addTwoNumbers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">l1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ListNode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">l2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ListNode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">ListNode&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dummy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ListNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">l1&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">l2&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">l1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">val&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">l1&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="kc">None&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">l2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">val&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">l2&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="kc">None&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">v&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">10&lt;/span>
&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ListNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">next&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">l1&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">l1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">next&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">l2&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">l2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">l2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">next&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ListNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">dummy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">next&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>外观数列</title><link>https://justice.bj.cn/post/leetcode/doc/38.%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/38.%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</guid><description>&lt;h1 id="外观数列httpsleetcode-cncomproblemscount-and-saydescription-httpsleetcode-cncomproblemscount-and-saydescription">&lt;a href="https://leetcode-cn.com/problems/count-and-say/description/" title="https://leetcode-cn.com/problems/count-and-say/description/">外观数列&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Category&lt;/th>
&lt;th>Difficulty&lt;/th>
&lt;th>Likes&lt;/th>
&lt;th>Dislikes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>algorithms&lt;/td>
&lt;td>Medium (59.80%)&lt;/td>
&lt;td>869&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Tags&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://leetcode.com/tag/string" title="https://leetcode.com/tag/string">&lt;code>string&lt;/code>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Companies&lt;/strong>&lt;/p>
&lt;p>&lt;code>facebook&lt;/code>&lt;/p>
&lt;p>给定一个正整数 &lt;code>n&lt;/code> ，输出外观数列的第 &lt;code>n&lt;/code> 项。&lt;/p>
&lt;p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。&lt;/p>
&lt;p>你可以将其视作是由递归公式定义的数字字符串序列：&lt;/p>
&lt;ul>
&lt;li>&lt;code>countAndSay(1) = &amp;quot;1&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>countAndSay(n)&lt;/code> 是对 &lt;code>countAndSay(n-1)&lt;/code> 的描述，然后转换成另一个数字字符串。&lt;/li>
&lt;/ul>
&lt;p>前五项如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">1. 1
2. 11
3. 21
4. 1211
5. 111221
第一项是数字 1
描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 &amp;#34;11&amp;#34;
描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 &amp;#34;21&amp;#34;
描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 &amp;#34;1211&amp;#34;
描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 &amp;#34;111221&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>要 &lt;strong>描述&lt;/strong> 一个数字字符串，首先要将字符串分割为 &lt;strong>最小&lt;/strong> 数量的组，每个组都由连续的最多 &lt;strong>相同字符&lt;/strong> 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。&lt;/p>
&lt;p>例如，数字字符串 &lt;code>&amp;quot;3322251&amp;quot;&lt;/code> 的描述如下图：&lt;/p>
&lt;p>&lt;img src="https://pic.leetcode-cn.com/1629874763-TGmKUh-image.png" alt="">&lt;/p>
&lt;p>&lt;strong>示例 1：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：n = 1
输出：&amp;#34;1&amp;#34;
解释：这是一个基本样例。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 2：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：n = 4
输出：&amp;#34;1211&amp;#34;
解释：
countAndSay(1) = &amp;#34;1&amp;#34;
countAndSay(2) = 读 &amp;#34;1&amp;#34; = 一 个 1 = &amp;#34;11&amp;#34;
countAndSay(3) = 读 &amp;#34;11&amp;#34; = 二 个 1 = &amp;#34;21&amp;#34;
countAndSay(4) = 读 &amp;#34;21&amp;#34; = 一 个 2 + 一 个 1 = &amp;#34;12&amp;#34; + &amp;#34;11&amp;#34; = &amp;#34;1211&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>提示：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>1 &amp;lt;= n &amp;lt;= 30&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://leetcode-cn.com/problems/count-and-say/comments/" title="https://leetcode-cn.com/problems/count-and-say/comments/">Discussion&lt;/a> | &lt;a href="https://leetcode-cn.com/problems/count-and-say/solution/" title="https://leetcode-cn.com/problems/count-and-say/solution/">Solution&lt;/a>&lt;/p>
&lt;h2 id="解法">解法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Solution&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// ## 解题思路
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// * 递归法
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// * 先求出n-1时的字符串；
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// * 再统计n-1个字符串中每个字符出现的次数；
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// * 统计时，可以使用fold iter；
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">count_and_say&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n_1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Self&lt;/span>::&lt;span class="n">count_and_say&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n_1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">fold&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sc">&amp;#39;&amp;amp;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">done&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in_prog&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in_prog&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">done&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in_prog&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in_prog&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sc">&amp;#39;&amp;amp;&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}{}{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">done&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">in_prog&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">done&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}{}{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>字符串相乘</title><link>https://justice.bj.cn/post/leetcode/doc/43.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/43.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/</guid><description>&lt;h1 id="字符串相乘httpsleetcode-cncomproblemsmultiply-stringsdescription-httpsleetcode-cncomproblemsmultiply-stringsdescription">&lt;a href="https://leetcode-cn.com/problems/multiply-strings/description/" title="https://leetcode-cn.com/problems/multiply-strings/description/">字符串相乘&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Category&lt;/th>
&lt;th>Difficulty&lt;/th>
&lt;th>Likes&lt;/th>
&lt;th>Dislikes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>algorithms&lt;/td>
&lt;td>Medium (44.98%)&lt;/td>
&lt;td>838&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Tags&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://leetcode.com/tag/math" title="https://leetcode.com/tag/math">&lt;code>math&lt;/code>&lt;/a> | &lt;a href="https://leetcode.com/tag/string" title="https://leetcode.com/tag/string">&lt;code>string&lt;/code>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Companies&lt;/strong>&lt;/p>
&lt;p>&lt;code>facebook&lt;/code> | &lt;code>twitter&lt;/code>&lt;/p>
&lt;p>给定两个以字符串形式表示的非负整数 &lt;code>num1&lt;/code> 和 &lt;code>num2&lt;/code>，返回 &lt;code>num1&lt;/code> 和 &lt;code>num2&lt;/code> 的乘积，它们的乘积也表示为字符串形式。&lt;/p>
&lt;p>**注意：**不能使用任何内置的 BigInteger 库或直接将输入转换为整数。&lt;/p>
&lt;p>&lt;strong>示例 1:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入: num1 = &amp;#34;2&amp;#34;, num2 = &amp;#34;3&amp;#34;
输出: &amp;#34;6&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 2:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入: num1 = &amp;#34;123&amp;#34;, num2 = &amp;#34;456&amp;#34;
输出: &amp;#34;56088&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>提示：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>1 &amp;lt;= num1.length, num2.length &amp;lt;= 200&lt;/code>&lt;/li>
&lt;li>&lt;code>num1&lt;/code> 和 &lt;code>num2&lt;/code> 只能由数字组成。&lt;/li>
&lt;li>&lt;code>num1&lt;/code> 和 &lt;code>num2&lt;/code> 都不包含任何前导零，除了数字0本身。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://leetcode-cn.com/problems/multiply-strings/comments/" title="https://leetcode-cn.com/problems/multiply-strings/comments/">Discussion&lt;/a> | &lt;a href="https://leetcode-cn.com/problems/multiply-strings/solution/" title="https://leetcode-cn.com/problems/multiply-strings/solution/">Solution&lt;/a>&lt;/p>
&lt;h2 id="解法">解法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>数据湖(Delta Lake)</title><link>https://justice.bj.cn/post/30.architech/%E6%95%B0%E6%8D%AE%E6%B9%96/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/%E6%95%B0%E6%8D%AE%E6%B9%96/</guid><description>&lt;h1 id="数据湖delta-lake">数据湖(Delta Lake)&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Data lake&lt;/strong>这个术语由Pentaho公司创始人兼CTO&lt;strong>詹姆斯·狄克逊&lt;/strong>(James Dixon)发明，他对数据湖的解释是： &lt;u>把你以前在磁带上拥有的东西倒入到数据湖，然后开始探索这些数据&lt;/u>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据湖的想法是将企业中的所有数据（从原始数据开始保存，这意味着源系统数据的精确副本）保存于同一个存储介质中，以用于各种任务（包括报告，可视化，分析和机器学习）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据湖创建了一个适用于所有格式数据的集中式数据存储，包括：关系数据库的数据（行和列），半结构化数据（CSV，日志，XML，JSON），非结构化数据（电子邮件，文档，PDF）甚至二进制数据（图像，音频，视频）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在数据湖方案里，数据移动和管理的工具非常重要。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="数据湖与数据仓库数据集市的区别">数据湖与数据仓库、数据集市的区别&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>数据库：侧重事务处理能力，OLTP，关注:QPS, TPS, IOPS这些指标；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据仓库：侧重分析能力，数据入库时有一定的scheme，OLAP；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据湖：入库时没有scheme，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>湖仓一体：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="主要功能">主要功能&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>ACID 事务&lt;/strong>：Delta Lake 提供多次写入之间的 ACID 事务。每次写入都是一个事务，并且在事务日志中顺序记录了写入的序列。事务日志跟踪文件级别的写入并使用&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FOptimistic_concurrency_control">乐观并发控制&lt;/a>，这非常适合数据湖泊，因为不会经常发生多个写入尝试修改相同的文件的情况。在存在冲突的情况下，Delta Lake 会抛出并发修改异常以遍用户处理并重试其作业。 Delta Lake 还提供强大的&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FIsolation_%28database_systems%29%23Serializable">可序列化隔离级别&lt;/a>，允许工程师持续写入一个目录或表，并允许消费者持续从同一目录或表中进行读取。读取者将会看到开始读取时存在的最新快照。&lt;/li>
&lt;li>&lt;strong>Schema 管理&lt;/strong>：Delta Lake 自动验证正在写入的 DataFrame 的 Schema 是否与表的 Schema 兼容。表中存在但不在 DataFrame 中的列设置为 null。如果 DataFrame 中有 Schema 中没有定义的列，则此操作会引发异常。 Delta Lake 具有显式添加新列的 DDL 以及自动更新 Schema 的能力。&lt;/li>
&lt;li>&lt;strong>可扩展的元数据处理&lt;/strong>：Delta Lake 将表或目录的元数据信息存储在事务日志中，而不是 Metastore 中，这允许Delta Lake在恒定时间内列出大型目录中的文件，并在读取数据时更高效。&lt;/li>
&lt;li>&lt;strong>数据版本控制和时间旅行&lt;/strong>：Delta Lake 允许用户读取表或目录的历史快照。在写入或者修改文件时，Delta Lake会创建较新版本的文件并保留旧版本。当用户想要读取旧版本的表或目录时，他们可以为 Apache Spark 的读取 API 提供时间戳或版本号，Delta Lake 根据事务日志中的信息构建该时间戳或版本的完整快照。这允许用户重现实验和报告，并在需要时将表还原为旧版本。&lt;/li>
&lt;li>&lt;strong>统一批处理和流式处理&lt;/strong>：除了批量写入，Delta Lake 还可以用作 Apache Spark Structured Streaming 的高效流式接收器。结合 ACID 事务和可扩展的元数据处理，高效的流式传输接收器现在可以实现大量近实时分析用例，而无需维护复杂的流式传输和批处理管道。&lt;/li>
&lt;li>&lt;strong>记录更新和删除&lt;/strong>（即将发布）：Delta Lake 提供合并、更新和删除这些 DML 命令。这允许工程师很方便的对数据进行修改和删除，简化数据变更捕获以及 GDPR。因为 Delta Lake 按文件粒度跟踪数据变更，所以比一次处理所有分区或表要高效的多。&lt;/li>
&lt;li>&lt;strong>数据期望&lt;/strong>（即将推出）：Delta Lake 还将支持新的 API 来设置表或目录的数据期望。工程师将能够指定布尔条件并调整严重程度以处理数据期望。当 Apache Spark 作业写入表或目录时，Delta Lake 将自动验证记录，当存在违规时，它将根据提供的严重程度配置对记录进行处理。&lt;/li>
&lt;/ul>
&lt;h2 id="deltalake">deltalake&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="c1">//# spark version: 2.4.6
&lt;/span>&lt;span class="c1">//# jdk: 1.8.0_172
&lt;/span>&lt;span class="c1">//# scala: 2.11
&lt;/span>&lt;span class="c1">//$ cd $SPARK_HOME
&lt;/span>&lt;span class="c1">//$ bin/spark-shell --jars ./jars/delta-core_2.11-0.6.0.jar
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">spark&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;delta&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;file:///mnt/cfs/spark/delta-table&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">spark&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;delta&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;overwrite&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;file:///mnt/cfs/spark/delta-table&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//du数据
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="n">df&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">spark&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;delta&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/tmp/delta-table&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">show&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="n">df&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">spark&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;delta&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="n">option&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;versionAsOf&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/tmp/delta-table&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">show&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://help.aliyun.com/document_detail/148369.html?spm=a2c6h.12873639.0.0.43197803PJYFDj">https://help.aliyun.com/document_detail/148369.html?spm=a2c6h.12873639.0.0.43197803PJYFDj&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>无重复字符的最长子串</title><link>https://justice.bj.cn/post/leetcode/doc/3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</guid><description>&lt;h1 id="无重复字符的最长子串httpsleetcode-cncomproblemslongest-substring-without-repeating-charactersdescription-httpsleetcode-cncomproblemslongest-substring-without-repeating-charactersdescription">&lt;a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/description/" title="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/description/">无重复字符的最长子串&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Category&lt;/th>
&lt;th>Difficulty&lt;/th>
&lt;th>Likes&lt;/th>
&lt;th>Dislikes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>algorithms&lt;/td>
&lt;td>Medium (32.18%)&lt;/td>
&lt;td>2861&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Tags&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://leetcode.com/tag/hash-table" title="https://leetcode.com/tag/hash-table">&lt;code>hash-table&lt;/code>&lt;/a> | &lt;a href="https://leetcode.com/tag/two-pointers" title="https://leetcode.com/tag/two-pointers">&lt;code>two-pointers&lt;/code>&lt;/a> | &lt;a href="https://leetcode.com/tag/string" title="https://leetcode.com/tag/string">&lt;code>string&lt;/code>&lt;/a> | &lt;a href="https://leetcode.com/tag/sliding-window" title="https://leetcode.com/tag/sliding-window">&lt;code>sliding-window&lt;/code>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Companies&lt;/strong>&lt;/p>
&lt;p>&lt;code>adobe&lt;/code> | &lt;code>amazon&lt;/code> | &lt;code>bloomberg&lt;/code> | &lt;code>yelp&lt;/code>&lt;/p>
&lt;p>给定一个字符串，请你找出其中不含有重复字符的 **最长子串 **的长度。&lt;/p>
&lt;p>&lt;strong>示例 1:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入: &amp;#34;abcabcbb&amp;#34;
输出: 3
解释: 因为无重复字符的最长子串是 &amp;#34;abc&amp;#34;，所以其长度为 3。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 2:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入: &amp;#34;bbbbb&amp;#34;
输出: 1
解释: 因为无重复字符的最长子串是 &amp;#34;b&amp;#34;，所以其长度为 1。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 3:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入: &amp;#34;pwwkew&amp;#34;
输出: 3
解释: 因为无重复字符的最长子串是 &amp;#34;wke&amp;#34;，所以其长度为 3。
  请注意，你的答案必须是 子串 的长度，&amp;#34;pwke&amp;#34; 是一个子序列，不是子串。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>&lt;a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/comments/" title="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/comments/">Discussion&lt;/a> | &lt;a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/" title="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/">Solution&lt;/a>&lt;/p>
&lt;h2 id="解法">解法&lt;/h2>
&lt;h3 id="1-滑动窗口">1. 滑动窗口&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>使用一个滑动窗口来记录每个无重复字符子串；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>窗口的右边界&lt;code>r&lt;/code>为遍历时当前字符数组下标；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>窗口的左边界&lt;code>l&lt;/code>在出现重复字符&lt;code>c&lt;/code>时，向右滑动一格；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最长子串长度为所有滑动窗口长度&lt;code>m&lt;/code>的最大值；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为了快速判断是否出现重复字符，使用map来记录每个已经遍历过的字符c的最后一次出现的下标；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="代码">代码&lt;/h2>
&lt;ul>
&lt;li>rust&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">collections&lt;/span>::&lt;span class="n">HashMap&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Solution&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// ## 解题思路
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">///
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">length_of_longest_substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HashMap&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">enumerate&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">unwrap_or&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>有效的数独</title><link>https://justice.bj.cn/post/leetcode/doc/36.%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/36.%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/</guid><description>&lt;h1 id="有效的数独httpsleetcode-cncomproblemsvalid-sudokudescription-httpsleetcode-cncomproblemsvalid-sudokudescription">&lt;a href="https://leetcode-cn.com/problems/valid-sudoku/description/" title="https://leetcode-cn.com/problems/valid-sudoku/description/">有效的数独&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Category&lt;/th>
&lt;th>Difficulty&lt;/th>
&lt;th>Likes&lt;/th>
&lt;th>Dislikes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>algorithms&lt;/td>
&lt;td>Medium (63.73%)&lt;/td>
&lt;td>772&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Tags&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://leetcode.com/tag/hash-table" title="https://leetcode.com/tag/hash-table">&lt;code>hash-table&lt;/code>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Companies&lt;/strong>&lt;/p>
&lt;p>&lt;code>apple&lt;/code> | &lt;code>snapchat&lt;/code> | &lt;code>uber&lt;/code>&lt;/p>
&lt;p>请你判断一个 &lt;code>9 x 9&lt;/code> 的数独是否有效。只需要 &lt;strong>根据以下规则&lt;/strong> ，验证已经填入的数字是否有效即可。&lt;/p>
&lt;ol>
&lt;li>数字 &lt;code>1-9&lt;/code> 在每一行只能出现一次。&lt;/li>
&lt;li>数字 &lt;code>1-9&lt;/code> 在每一列只能出现一次。&lt;/li>
&lt;li>数字 &lt;code>1-9&lt;/code> 在每一个以粗实线分隔的 &lt;code>3x3&lt;/code> 宫内只能出现一次。（请参考示例图）&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>注意：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>一个有效的数独（部分已被填充）不一定是可解的。&lt;/li>
&lt;li>只需要根据以上规则，验证已经填入的数字是否有效即可。&lt;/li>
&lt;li>空白格用 &lt;code>'.'&lt;/code> 表示。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>示例 1：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/12/250px-sudoku-by-l2g-20050714svg.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：board =
[[&amp;#34;5&amp;#34;,&amp;#34;3&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;7&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;]
,[&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;5&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;]
,[&amp;#34;.&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;]
,[&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;3&amp;#34;]
,[&amp;#34;4&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;3&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;1&amp;#34;]
,[&amp;#34;7&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;2&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;]
,[&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;2&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;]
,[&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;4&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;5&amp;#34;]
,[&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;7&amp;#34;,&amp;#34;9&amp;#34;]]
输出：true
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 2：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：board =
[[&amp;#34;8&amp;#34;,&amp;#34;3&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;7&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;]
,[&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;5&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;]
,[&amp;#34;.&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;]
,[&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;3&amp;#34;]
,[&amp;#34;4&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;3&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;1&amp;#34;]
,[&amp;#34;7&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;2&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;]
,[&amp;#34;.&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;2&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;]
,[&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;4&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;5&amp;#34;]
,[&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;.&amp;#34;,&amp;#34;7&amp;#34;,&amp;#34;9&amp;#34;]]
输出：false
解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>提示：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>board.length == 9&lt;/code>&lt;/li>
&lt;li>&lt;code>board[i].length == 9&lt;/code>&lt;/li>
&lt;li>&lt;code>board[i][j]&lt;/code> 是一位数字（&lt;code>1-9&lt;/code>）或者 &lt;code>'.'&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://leetcode-cn.com/problems/valid-sudoku/comments/" title="https://leetcode-cn.com/problems/valid-sudoku/comments/">Discussion&lt;/a> | &lt;a href="https://leetcode-cn.com/problems/valid-sudoku/solution/" title="https://leetcode-cn.com/problems/valid-sudoku/solution/">Solution&lt;/a>&lt;/p>
&lt;h2 id="解法">解法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">class&lt;/span> &lt;span class="nc">Solution&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * ## 解题思路
&lt;/span>&lt;span class="cm"> * 1. 使用map分别保存每行，每列，每个sub的&amp;lt;c, count&amp;gt;
&lt;/span>&lt;span class="cm"> * 2. 任意map value &amp;gt; 1, 则返回false;
&lt;/span>&lt;span class="cm"> * 3. 没有重复，则retrun true;
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kt">bool&lt;/span> &lt;span class="n">isValidSudoku&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">board&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">col&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">blk&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">board&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="sc">&amp;#39;.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">col&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">blk&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Rust中的Pin</title><link>https://justice.bj.cn/post/14.language/rust/rust-pin/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust-pin/</guid><description>&lt;h1 id="rust中的pin">Rust中的Pin&lt;/h1>
&lt;h3 id="简介">简介&lt;/h3>
&lt;p>&lt;code>Pin&amp;lt;P&amp;lt;T&amp;gt;&amp;gt;&lt;/code>是一个&lt;code>struct&lt;/code>, 作用是将P所指向的T在内存中固定住，不能移动。不能通过safe代码拿到&lt;code>&amp;amp;mut T&lt;/code>。&lt;/p>
&lt;p>定义如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Pin&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pointer&lt;/span>: &lt;span class="nc">P&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="unpin">Unpin&lt;/h4>
&lt;p>这是一个trait，定义在&lt;code>std::marker&lt;/code>中，如果一个&lt;code>T: Unpin&lt;/code>，就说明T在pin后可以安全的移动，&lt;strong>实际就是可以拿到&lt;code>&amp;amp;mut T&lt;/code>。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">auto&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Unpin&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="unpin-1">!Unpin&lt;/h4>
&lt;p>对Unpin取反，!Unpin的双重否定就是pin。如果一个类型中包含了PhantomPinned，那么这个类型就是!Unpin。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">PhantomPinned&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="cp">#[stable(feature = &lt;/span>&lt;span class="s">&amp;#34;pin&amp;#34;&lt;/span>&lt;span class="cp">, since = &lt;/span>&lt;span class="s">&amp;#34;1.33.0&amp;#34;&lt;/span>&lt;span class="cp">)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">Unpin&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PhantomPinned&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="pinp的实现">&lt;code>Pin&amp;lt;P&amp;gt;&lt;/code>的实现&lt;/h3>
&lt;p>我们这里只关注safe方法，重点是new方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">P&lt;/span>: &lt;span class="nc">Deref&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Target&lt;/span>: &lt;span class="nc">Unpin&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Pin&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pointer&lt;/span>: &lt;span class="nc">P&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Pin&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">unsafe&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Pin&lt;/span>::&lt;span class="n">new_unchecked&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pointer&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看出，只有P所指向的&lt;code>T: Unpin&lt;/code>，才可以new出一个&lt;code>Pin&amp;lt;P&amp;lt;T&amp;gt;&amp;gt;&lt;/code>。这里的T就是应该被pin的实例，可是由于&lt;code>T: Unpin&lt;/code>实际上T的实例并不会被pin。 也就是说，T没有实现Unpin trait时，T才会被真正的pin住。&lt;/p>
&lt;p>由于&lt;code>Pin::new&lt;/code>方法要求&lt;code>T: Unpin&lt;/code>，通常创建一个不支持Unpin的T的pin实例的方法是用&lt;code>Box::pin&lt;/code>方法，定义如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">pin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="nc">T&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Pin&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">box&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">into&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>例如，自定义了Node结构，如下的代码生成pin实例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">node_pined&lt;/span>: &lt;span class="nc">Pin&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>::&lt;span class="n">pin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Node&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">movded_node_pined&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">node_pined&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Node没有实现Unpin时，通过Pin的安全方法都不能得到&lt;code>&amp;amp;mut Node&lt;/code>，所以就不能移动Node实例。注意，这里是不能移动Node实例，node_pined是Pin实例，是可以移动的。&lt;/p>
&lt;p>当然，通过Pin的unsafe方法，仍然可以得到&lt;code>mut Node&lt;/code>，也可以移动Node实例，但这些unsafe的操作就需要程序员自己去承担风险。Pin相关方法中对此有很详细的说明。&lt;/p>
&lt;p>&lt;strong>Pin可以被看作一个限制指针（&lt;code>Box&amp;lt;T&amp;gt;&lt;/code>或&lt;code>&amp;amp;mut T&lt;/code>）的结构，在&lt;code>T: Unpin&lt;/code>的情况下，&lt;code>Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code>和&lt;code>Box&amp;lt;T&amp;gt;&lt;/code>是类似的，通过&lt;code>DerefMut&lt;/code>就可以直接得到&lt;code>&amp;amp;mut T&lt;/code>，在T没有实现Unpin的情况下，&lt;code>Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code>只能通过&lt;code>Deref&lt;/code>得到&lt;code>&amp;amp;T&lt;/code>，就是说T被pin住了。&lt;/strong>&lt;/p>
&lt;p>Pin这种自废武功的方法怪怪的，为什么要有Pin？虽然Box、Rc、Arc等指针类型也可以让实例在heap中固定，但是这些指针的safe方法会暴露出&amp;amp;mut T，这就会导致T的实例被移动，比如通过&lt;code>std::mem::swap&lt;/code>方法，也可以是&lt;code>Option::take&lt;/code>方法，还可能是&lt;code>Vec::set_len&lt;/code>、&lt;code>Vec::resize&lt;/code>方法等，这些可都是safe等方法。这些方法的共同点都是需要&lt;code>&amp;amp;mut Self&lt;/code>，所以说只要不暴露&lt;code>&amp;amp;mut Self&lt;/code>，就可以达到pin的目标。&lt;/p>
&lt;h3 id="为什么需要pin">为什么需要pin？&lt;/h3>
&lt;p>事情的起因就是Async/.Await异步编程的需要。&lt;/p>
&lt;p>看看如下异步编程的代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fut_one&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cm">/* ... */&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fut_two&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cm">/* ... */&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">move&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fut_one&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fut_two&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>rustc在编译是会自动生成类似如下的代码，其中的AsyncFuture会是一个自引用结构：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// The `Future` type generated by our `async { ... }` block
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">AsyncFuture&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fut_one&lt;/span>: &lt;span class="nc">FutOne&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fut_two&lt;/span>: &lt;span class="nc">FutTwo&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">state&lt;/span>: &lt;span class="nc">State&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// List of states our `async` block can be in
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="nc">State&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AwaitingFutOne&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AwaitingFutTwo&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Done&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Future&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AsyncFuture&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span> &lt;span class="nc">Output&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">poll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>: &lt;span class="nc">Pin&lt;/span>&lt;span class="o">&amp;lt;&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Self&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cx&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Context&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="na">&amp;#39;_&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Poll&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意&lt;code>Future::poll&lt;/code>方法的第一个参数是&lt;code>Pin&amp;lt;&amp;amp;mut Self&amp;gt;&lt;/code>，如果在&lt;code>Future::poll&lt;/code>方法中有类似&lt;code>std::mem::swap&lt;/code>等方法调用，就有可能导致AsyncFuture被移动，那么AsyncFuture中的自引用field就会导致灾难。&lt;/p>
&lt;p>可能你也注意到了，这里的&lt;code>Future::poll&lt;/code>代码是自动生成的，可以不调用&lt;code>std::mem::swap&lt;/code>等方法，就不会导致AsyncFuture被移动。的确是这样的，如果在这里将&lt;code>Future::poll&lt;/code>的第一个参数改为&lt;code>Box&amp;lt;Self&amp;gt;&lt;/code>或者&lt;code>&amp;amp;mut Self&lt;/code>，大概率是没有问题的。很多executor的实现，都是要求Future是支持Unpin，因为在poll代码中的确有修改Self的需求，但不会产生错误，也是这个原因。&lt;/p>
&lt;p>但是，对于程序员实现Future的情况，问题就来了。&lt;/p>
&lt;p>**如果poll的参数是&amp;amp;mut Self，那么程序员就可能使用safe代码（比如std::mem::swap）产生错误，这是与rust安全编码的理念相冲突的。**这就是Pin引入的根本原因！&lt;/p>
&lt;p>其实，在future 0.1版本中，poll的这个参数就是&lt;code>&amp;amp;mut Self&lt;/code>，如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Future&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span> &lt;span class="nc">Item&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span> &lt;span class="nc">Error&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">poll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Poll&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Self&lt;/span>::&lt;span class="n">Item&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Self&lt;/span>::&lt;span class="n">Error&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="总结一下">总结一下&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Pin实际是对P指针的限制，在T没有实现Unpin的情况下，避免P指针暴露&lt;code>&amp;amp;mut Self&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pin的引入是Async/.Await异步编程的需要，核心就是&lt;code>Future::poll&lt;/code>方法参数的需要。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>除了&lt;code>Future::poll&lt;/code>方法之外，不建议使用Pin，也没有必要使用Pin.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>CubeFS Bcache</title><link>https://justice.bj.cn/post/40.storage/chubaofs/cubefs-bcache/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/chubaofs/cubefs-bcache/</guid><description>&lt;h1 id="cubefs-bcache">CubeFS Bcache&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="参考">参考&lt;/h2></description></item><item><title>Elasticsearch内核解析 - 查询篇</title><link>https://justice.bj.cn/post/30.architech/elasticsearch/es%E8%AF%BB%E6%B5%81%E7%A8%8B/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/elasticsearch/es%E8%AF%BB%E6%B5%81%E7%A8%8B/</guid><description>&lt;h1 id="elasticsearch内核解析---查询篇">Elasticsearch内核解析 - 查询篇&lt;/h1>
&lt;h2 id="读操作">读操作&lt;/h2>
&lt;p>实时性和《&lt;a href="https://zhuanlan.zhihu.com/p/34669354">Elasticsearch内核解析 - 写入篇&lt;/a>》中的“写操作”一样，对于搜索而言是近实时的，延迟在100ms以上，对于NoSQL则需要是实时的。&lt;/p>
&lt;p>一致性指的是写入成功后，下次读操作一定要能读取到最新的数据。对于搜索，这个要求会低一些，可以有一些延迟。但是对于NoSQL数据库，则一般要求最好是强一致性的。&lt;/p>
&lt;p>结果匹配上，NoSQL作为数据库，查询过程中只有符合不符合两种情况，而搜索里面还有是否相关，类似于NoSQL的结果只能是0或1，而搜索里面可能会有0.1，0.5，0.9等部分匹配或者更相关的情况。&lt;/p>
&lt;p>结果召回上，搜索一般只需要召回最满足条件的Top N结果即可，而NoSQL一般都需要返回满足条件的所有结果。&lt;/p>
&lt;p>搜索系统一般都是两阶段查询，第一个阶段查询到对应的Doc ID，也就是PK；第二阶段再通过Doc ID去查询完整文档，而NoSQL数据库一般是一阶段就返回结果。在Elasticsearch中两种都支持。&lt;/p>
&lt;p>目前NoSQL的查询，聚合、分析和统计等功能上都是要比搜索弱的。&lt;/p>
&lt;h2 id="lucene的读">Lucene的读&lt;/h2>
&lt;p>Elasticsearch使用了Lucene作为搜索引擎库，通过Lucene完成特定字段的搜索等功能，在Lucene中这个功能是通过IndexSearcher的下列接口实现的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">TopDocs&lt;/span> &lt;span class="nf">search&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Query&lt;/span> &lt;span class="n">query&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Document&lt;/span> &lt;span class="nf">doc&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">docID&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">count&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Query&lt;/span> &lt;span class="n">query&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">......(&lt;/span>&lt;span class="n">其他&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一个search接口实现搜索功能，返回最满足Query的N个结果；第二个doc接口通过doc id查询Doc内容；第三个count接口通过Query获取到命中数。&lt;/p>
&lt;p>这三个功能是搜索中的最基本的三个功能点，对于大部分Elasticsearch中的查询都是比较复杂的，直接用这个接口是无法满足需求的，比如分布式问题。这些问题都留给了Elasticsearch解决，我们接下来看Elasticsearch中相关读功能的剖析。&lt;/p>
&lt;h2 id="get">get&lt;/h2>
&lt;p>&lt;img src="https://justice.bj.cn/Users/justice/tmp/notebook-img/2022-02-13-16-39-21-image.png" alt="">&lt;/p>
&lt;p>Elasticsearch中每个Shard都会有多个Replica，主要是为了保证数据可靠性，除此之外，还可以增加读能力，因为写的时候虽然要写大部分Replica Shard，但是查询的时候只需要查询Primary和Replica中的任何一个就可以了。&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-1ad1351408bdf0ce7f76f251d6ef8bc4_720w.jpg" alt="">&lt;/p>
&lt;p>Search On Replicas&lt;/p>
&lt;p>在上图中，该Shard有1个Primary和2个Replica Node，当查询的时候，从三个节点中根据Request中的preference参数选择一个节点查询。preference可以设置_local，_primary，_replica以及其他选项。如果选择了primary，则每次查询都是直接查询Primary，可以保证每次查询都是最新的。如果设置了其他参数，那么可能会查询到R1或者R2，这时候就有可能查询不到最新的数据。&lt;/p>
&lt;blockquote>
&lt;p>上述代码逻辑在OperationRouting.Java的searchShards方法中。&lt;/p>
&lt;/blockquote>
&lt;h3 id="search">search&lt;/h3>
&lt;p>&lt;img src="https://justice.bj.cn/Users/justice/tmp/notebook-img/2022-02-13-17-12-15-image.png" alt="">&lt;/p>
&lt;p>查询阶段包含以下步骤:&lt;/p>
&lt;ol>
&lt;li>客户端的搜索请求被随机发送到某个节点（协调节点），协调节点创建一个大小为 &lt;code>from + size&lt;/code> 的空优先队列；&lt;/li>
&lt;li>查询请求转发到索引的每个primary shard或replica shard分片中；&lt;/li>
&lt;li>每个分片在本地执行查询，添加结果到大小为 &lt;code>from + size&lt;/code> 的本地有序优先队列中，并返回各自优先队列中所有文档的 ID 和排序值给协调节点；&lt;/li>
&lt;li>协调节点合并这些值到自己的优先队列中来产生一个全局排序后的结果列表；&lt;/li>
&lt;/ol>
&lt;p>接下来看一下，Elasticsearch中的查询是如何支持分布式的。&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-737f6cb48ccf22c50c2e630433c6ad48_720w.jpg" alt="">&lt;/p>
&lt;p>Elasticsearch中通过分区实现分布式，数据写入的时候根据_routing规则将数据写入某一个Shard中，这样就能将海量数据分布在多个Shard以及多台机器上，已达到分布式的目标。这样就导致了查询的时候，潜在数据会在当前index的所有的Shard中，所以Elasticsearch查询的时候需要查询所有Shard，同一个Shard的Primary和Replica选择一个即可，查询请求会分发给所有Shard，每个Shard中都是一个独立的查询引擎，比如需要返回Top 10的结果，那么每个Shard都会查询并且返回Top 10的结果，然后在Client Node里面会接收所有Shard的结果，然后通过优先级队列二次排序，选择出Top 10的结果返回给用户。&lt;/p>
&lt;p>这里有一个问题就是请求膨胀，用户的一个搜索请求在Elasticsearch内部会变成Shard个请求，这里有个优化点，虽然是Shard个请求，但是这个Shard个数不一定要是当前Index中的Shard个数，只要是当前查询相关的Shard即可，这个需要基于业务和请求内容优化，通过这种方式可以优化请求膨胀数。&lt;/p>
&lt;p>Elasticsearch中的查询主要分为两类:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Get请求：通过ID查询特定Doc；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Search请求：通过Query查询匹配Doc。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://pic2.zhimg.com/80/v2-1f4c1cf921049b841ae2612b4734cdb1_720w.jpg" alt="">&lt;/p>
&lt;blockquote>
&lt;p>上图中内存中的Segment是指刚Refresh Segment，但是还没持久化到磁盘的新Segment，而非从磁盘加载到内存中的Segment。&lt;/p>
&lt;/blockquote>
&lt;p>对于Search类请求，查询的时候是一起查询内存和磁盘上的Segment，最后将结果合并后返回。这种查询是近实时（Near Real Time）的，主要是由于内存中的Index数据需要一段时间后才会刷新为Segment。&lt;/p>
&lt;p>对于Get类请求，查询的时候是先查询内存中的TransLog，如果找到就立即返回，如果没找到再查询磁盘上的TransLog，如果还没有则再去查询磁盘上的Segment。这种查询是实时（Real Time）的。这种查询顺序可以保证查询到的Doc是最新版本的Doc，这个功能也是为了保证NoSQL场景下的实时性要求。&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-c5455432442548d1f12c975684fc4a00_720w.jpg" alt="">&lt;/p>
&lt;p>多阶段查询&lt;/p>
&lt;p>所有的搜索系统一般都是两阶段查询，&lt;/p>
&lt;p>第一阶段查询到匹配的DocID，&lt;/p>
&lt;p>第二阶段再查询DocID对应的完整文档，这种在Elasticsearch中称为query_then_fetch，&lt;/p>
&lt;p>还有一种是一阶段查询的时候就返回完整Doc，在Elasticsearch中称作query_and_fetch，一般第二种适用于只需要查询一个Shard的请求。&lt;/p>
&lt;p>除了一阶段，两阶段外，还有一种三阶段查询的情况。&lt;/p>
&lt;p>搜索里面有一种算分逻辑是根据TF（Term Frequency）和IDF（Document Frequency）计算基础分，但是Elasticsearch中查询的时候，是在每个Shard中独立查询的，每个Shard中的TF和DF也是独立的，虽然在写入的时候通过_routing保证Doc分布均匀，但是没法保证TF和DF均匀，那么就有会导致局部的TF和DF不准的情况出现，这个时候基于TF、DF的算分就不准。为了解决这个问题，Elasticsearch中引入了DFS查询，比如DFS_query_then_fetch，会先收集所有Shard中的TF和DF值，然后将这些值带入请求中，再次执行query_then_fetch，这样算分的时候TF和DF就是准确的，类似的有DFS_query_and_fetch。这种查询的优势是算分更加精准，但是效率会变差。另一种选择是用BM25代替TF/DF模型。&lt;/p>
&lt;p>在新版本Elasticsearch中，用户没法指定DFS_query_and_fetch和query_and_fetch，这两种只能被Elasticsearch系统改写。&lt;/p>
&lt;h2 id="elasticsearch查询流程">Elasticsearch查询流程&lt;/h2>
&lt;p>Elasticsearch中的大部分查询，以及核心功能都是Search类型查询，上面我们了解到查询分为一阶段，二阶段和三阶段，这里我们就以最常见的的二阶段查询为例来介绍查询流程。&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-10acab5576a2359ca279331e81adc1e2_720w.jpg" alt="">&lt;/p>
&lt;p>查询流程&lt;/p>
&lt;p>&lt;strong>注册Action&lt;/strong>&lt;/p>
&lt;p>Elasticsearch中，查询和写操作一样都是在ActionModule.java中注册入口处理函数的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">registerHandler.accept(new RestSearchAction(settings, restController));
......
actions.register(SearchAction.INSTANCE, TransportSearchAction.class);
......
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果请求是Rest请求，则会在RestSearchAction中解析请求，检查查询类型，不能设置为dfs_query_and_fetch或者query_and_fetch，这两个目前只能用于Elasticsearch中的优化场景，然后将请求发给后面的TransportSearchAction处理。然后构造SearchRequest，将请求发送给TransportSearchAction处理。&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-02fdc9375a9d6af62ac6c2035b5a9730_720w.jpg" alt="">&lt;/p>
&lt;p>如果是第一阶段的Query Phase请求，则会调用SearchService的executeQueryPhase方法。&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-be3a37c7fe08d4f1559b9eb0aaa8d37a_720w.jpg" alt="">&lt;/p>
&lt;p>如果是第二阶段的Fetch Phase请求，则会调用SearchService的executeFetchPhase方法。&lt;/p>
&lt;h2 id="client-node">&lt;strong>Client Node&lt;/strong>&lt;/h2>
&lt;p>Client Node 也包括了前面说过的Parse Request，这里就不再赘述了，接下来看一下其他的部分。&lt;/p>
&lt;p>&lt;strong>1. Get Remove Cluster Shard&lt;/strong>&lt;/p>
&lt;p>判断是否需要跨集群访问，如果需要，则获取到要访问的Shard列表。&lt;/p>
&lt;p>&lt;strong>2. Get Search Shard Iterator&lt;/strong>&lt;/p>
&lt;p>获取当前Cluster中要访问的Shard，和上一步中的Remove Cluster Shard合并，构建出最终要访问的完整Shard列表。&lt;/p>
&lt;p>这一步中，会根据Request请求中的参数从Primary Node和多个Replica Node中选择出一个要访问的Shard。&lt;/p>
&lt;p>&lt;strong>3. For Every Shard:Perform&lt;/strong>&lt;/p>
&lt;p>遍历每个Shard，对每个Shard执行后面逻辑。&lt;/p>
&lt;p>&lt;strong>4. Send Request To Query Shard&lt;/strong>&lt;/p>
&lt;p>将查询阶段请求发送给相应的Shard。&lt;/p>
&lt;p>&lt;strong>5. Merge Docs&lt;/strong>&lt;/p>
&lt;p>上一步将请求发送给多个Shard后，这一步就是异步等待返回结果，然后对结果合并。这里的合并策略是维护一个Top N大小的优先级队列，每当收到一个shard的返回，就把结果放入优先级队列做一次排序，直到所有的Shard都返回。&lt;/p>
&lt;p>翻页逻辑也是在这里，如果需要取Top 30~ Top 40的结果，这个的意思是所有Shard查询结果中的第30到40的结果，那么在每个Shard中无法确定最终的结果，每个Shard需要返回Top 40的结果给Client Node，然后Client Node中在merge docs的时候，计算出Top 40的结果，最后再去除掉Top 30，剩余的10个结果就是需要的Top 30~ Top 40的结果。&lt;/p>
&lt;p>上述翻页逻辑有一个明显的缺点就是每次Shard返回的数据中包括了已经翻过的历史结果，如果翻页很深，则在这里需要排序的Docs会很多，比如Shard有1000，取第9990到10000的结果，那么这次查询，Shard总共需要返回1000 * 10000，也就是一千万Doc，这种情况很容易导致OOM。&lt;/p>
&lt;p>另一种翻页方式是使用search_after，这种方式会更轻量级，如果每次只需要返回10条结构，则每个Shard只需要返回search_after之后的10个结果即可，返回的总数据量只是和Shard个数以及本次需要的个数有关，和历史已读取的个数无关。这种方式更安全一些，推荐使用这种。&lt;/p>
&lt;p>如果有aggregate，也会在这里做聚合，但是不同的aggregate类型的merge策略不一样，具体的可以在后面的aggregate文章中再介绍。&lt;/p>
&lt;p>&lt;strong>6. Send Request To Fetch Shard&lt;/strong>&lt;/p>
&lt;p>选出Top N个Doc ID后发送给这些Doc ID所在的Shard执行Fetch Phase，最后会返回Top N的Doc的内容。&lt;/p>
&lt;h2 id="query-phase">Query Phase&lt;/h2>
&lt;p>接下来我们看第一阶段查询的步骤：&lt;/p>
&lt;p>&lt;strong>1. Create Search Context&lt;/strong>&lt;/p>
&lt;p>创建Search Context，之后Search过程中的所有中间状态都会存在Context中，这些状态总共有50多个，具体可以查看DefaultSearchContext或者其他SearchContext的子类。&lt;/p>
&lt;p>&lt;strong>2. Parse Query&lt;/strong>&lt;/p>
&lt;p>解析Query的Source，将结果存入Search Context。这里会根据请求中Query类型的不同创建不同的Query对象，比如TermQuery、FuzzyQuery等，最终真正执行TermQuery、FuzzyQuery等语义的地方是在Lucene中。&lt;/p>
&lt;p>这里包括了dfsPhase、queryPhase和fetchPhase三个阶段的preProcess部分，只有queryPhase的preProcess中有执行逻辑，其他两个都是空逻辑，执行完preProcess后，所有需要的参数都会设置完成。&lt;/p>
&lt;p>由于Elasticsearch中有些请求之间是相互关联的，并非独立的，比如scroll请求，所以这里同时会设置Context的生命周期。&lt;/p>
&lt;p>同时会设置lowLevelCancellation是否打开，这个参数是集群级别配置，同时也能动态开关，打开后会在后面执行时做更多的检测，检测是否需要停止后续逻辑直接返回。&lt;/p>
&lt;p>&lt;strong>3. Get From Cache&lt;/strong>&lt;/p>
&lt;p>判断请求是否允许被Cache，如果允许，则检查Cache中是否已经有结果，如果有则直接读取Cache，如果没有则继续执行后续步骤，执行完后，再将结果加入Cache。&lt;/p>
&lt;p>&lt;strong>4. Add Collectors&lt;/strong>&lt;/p>
&lt;p>Collector主要目标是收集查询结果，实现排序，对自定义结果集过滤和收集等。这一步会增加多个Collectors，多个Collector组成一个List。&lt;/p>
&lt;ol>
&lt;li>FilteredCollector*：*先判断请求中是否有Post Filter，Post Filter用于Search，Agg等结束后再次对结果做Filter，希望Filter不影响Agg结果。如果有Post Filter则创建一个FilteredCollector，加入Collector List中。&lt;/li>
&lt;li>PluginInMultiCollector：判断请求中是否制定了自定义的一些Collector，如果有，则创建后加入Collector List。&lt;/li>
&lt;li>MinimumScoreCollector：判断请求中是否制定了最小分数阈值，如果指定了，则创建MinimumScoreCollector加入Collector List中，在后续收集结果时，会过滤掉得分小于最小分数的Doc。&lt;/li>
&lt;li>EarlyTerminatingCollector：判断请求中是否提前结束Doc的Seek，如果是则创建EarlyTerminatingCollector，加入Collector List中。在后续Seek和收集Doc的过程中，当Seek的Doc数达到Early Terminating后会停止Seek后续倒排链。&lt;/li>
&lt;li>CancellableCollector：判断当前操作是否可以被中断结束，比如是否已经超时等，如果是会抛出一个TaskCancelledException异常。该功能一般用来提前结束较长的查询请求，可以用来保护系统。&lt;/li>
&lt;li>EarlyTerminatingSortingCollector：如果Index是排序的，那么可以提前结束对倒排链的Seek，相当于在一个排序递减链表上返回最大的N个值，只需要直接返回前N个值就可以了。这个Collector会加到Collector List的头部。EarlyTerminatingSorting和EarlyTerminating的区别是，EarlyTerminatingSorting是一种对结果无损伤的优化，而EarlyTerminating是有损的，人为掐断执行的优化。&lt;/li>
&lt;li>TopDocsCollector：这个是最核心的Top N结果选择器，会加入到Collector List的头部。TopScoreDocCollector和TopFieldCollector都是TopDocsCollector的子类，TopScoreDocCollector会按照固定的方式算分，排序会按照分数+doc id的方式排列，如果多个doc的分数一样，先选择doc id小的文档。而TopFieldCollector则是根据用户指定的Field的值排序。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>5. lucene::search&lt;/strong>&lt;/p>
&lt;p>这一步会调用Lucene中IndexSearch的search接口，执行真正的搜索逻辑。每个Shard中会有多个Segment，每个Segment对应一个LeafReaderContext，这里会遍历每个Segment，到每个Segment中去Search结果，然后计算分数。&lt;/p>
&lt;p>搜索里面一般有两阶段算分，第一阶段是在这里算的，会对每个Seek到的Doc都计算分数，为了减少CPU消耗，一般是算一个基本分数。这一阶段完成后，会有个排序。然后在第二阶段，再对Top 的结果做一次二阶段算分，在二阶段算分的时候会考虑更多的因子。二阶段算分在后续操作中。&lt;/p>
&lt;p>具体请求，比如TermQuery、WildcardQuery的查询逻辑都在Lucene中，后面会有专门文章介绍。&lt;/p>
&lt;p>&lt;strong>6. rescore&lt;/strong>&lt;/p>
&lt;p>根据Request中是否包含rescore配置决定是否进行二阶段排序，如果有则执行二阶段算分逻辑，会考虑更多的算分因子。二阶段算分也是一种计算机中常见的多层设计，是一种资源消耗和效率的折中。&lt;/p>
&lt;p>Elasticsearch中支持配置多个Rescore，这些rescore逻辑会顺序遍历执行。每个rescore内部会先按照请求参数window选择出Top window的doc，然后对这些doc排序，排完后再合并回原有的Top 结果顺序中。&lt;/p>
&lt;p>&lt;strong>7. suggest::execute()&lt;/strong>&lt;/p>
&lt;p>如果有推荐请求，则在这里执行推荐请求。如果请求中只包含了推荐的部分，则很多地方可以优化。推荐不是今天的重点，这里就不介绍了，后面有机会再介绍。&lt;/p>
&lt;p>&lt;strong>8. aggregation::execute()&lt;/strong>&lt;/p>
&lt;p>如果含有聚合统计请求，则在这里执行。Elasticsearch中的aggregate的处理逻辑也类似于Search，通过多个Collector来实现。在Client Node中也需要对aggregation做合并。aggregate逻辑更复杂一些，就不在这里赘述了，后面有需要就再单独开文章介绍。&lt;/p>
&lt;p>上述逻辑都执行完成后，如果当前查询请求只需要查询一个Shard，那么会直接在当前Node执行Fetch Phase。&lt;/p>
&lt;h2 id="fetch-phase">Fetch Phase&lt;/h2>
&lt;p>Elasticsearch作为搜索系统时，或者任何搜索系统中，除了Query阶段外，还会有一个Fetch阶段，这个Fetch阶段在数据库类系统中是没有的，是搜索系统中额外增加的阶段。搜索系统中额外增加Fetch阶段的原因是搜索系统中数据分布导致的，在搜索中，数据通过routing分Shard的时候，只能根据一个主字段值来决定，但是查询的时候可能会根据其他非主字段查询，那么这个时候所有Shard中都可能会存在相同非主字段值的Doc，所以需要查询所有Shard才能不会出现结果遗漏。同时如果查询主字段，那么这个时候就能直接定位到Shard，就只需要查询特定Shard即可，这个时候就类似于数据库系统了。另外，数据库中的二级索引又是另外一种情况，但类似于查主字段的情况，这里就不多说了。&lt;/p>
&lt;p>基于上述原因，第一阶段查询的时候并不知道最终结果会在哪个Shard上，所以每个Shard中管都需要查询完整结果，比如需要Top 10，那么每个Shard都需要查询当前Shard的所有数据，找出当前Shard的Top 10，然后返回给Client Node。如果有100个Shard，那么就需要返回100 * 10 = 1000个结果，而Fetch Doc内容的操作比较耗费IO和CPU，如果在第一阶段就Fetch Doc，那么这个资源开销就会非常大。所以，一般是当Client Node选择出最终Top N的结果后，再对最终的Top N读取Doc内容。通过增加一点网络开销而避免大量IO和CPU操作，这个折中是非常划算的。&lt;/p>
&lt;p>Fetch阶段的目的是通过DocID获取到用户需要的完整Doc内容。这些内容包括了DocValues，Store，Source，Script和Highlight等，具体的功能点是在SearchModule中注册的，系统默认注册的有：&lt;/p>
&lt;ul>
&lt;li>ExplainFetchSubPhase&lt;/li>
&lt;li>DocValueFieldsFetchSubPhase&lt;/li>
&lt;li>ScriptFieldsFetchSubPhase&lt;/li>
&lt;li>FetchSourceSubPhase&lt;/li>
&lt;li>VersionFetchSubPhase&lt;/li>
&lt;li>MatchedQueriesFetchSubPhase&lt;/li>
&lt;li>HighlightPhase&lt;/li>
&lt;li>ParentFieldSubFetchPhase&lt;/li>
&lt;/ul>
&lt;p>除了系统默认的8种外，还有通过插件的形式注册自定义的功能，这些SubPhase中最重要的是Source和Highlight，Source是加载原文，Highlight是计算高亮显示的内容片断。&lt;/p>
&lt;p>上述多个SubPhase会针对每个Doc顺序执行，可能会产生多次的随机IO，这里会有一些优化方案，但是都是针对特定场景的，不具有通用性。&lt;/p>
&lt;p>Fetch Phase执行完后，整个查询流程就结束了。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Elasticsearch中的查询流程比较简单，更多的查询原理都在Lucene中，后续我们会有针对不同请求的Lucene原理介绍性文章。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://xie.infoq.cn/article/7f84ceaca3e1537eab40b853d">【Elasticsearch 技术分享】—— ES 查询检索数据的过程，是什么样子的？&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_query_phase.html#_query_phase">查询阶段 | Elasticsearch: 权威指南 | Elastic&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>ElasticSearch基础</title><link>https://justice.bj.cn/post/30.architech/elasticsearch/es%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/elasticsearch/es%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="elasticsearch基础">ElasticSearch基础&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Elasticsearch 是一个基于&lt;code>Lucene&lt;/code>的搜索和分析引擎;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>近实时；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分布式可扩展的近实时；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/07-14-03-48-2022-01-07-14-03-43-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>一个 ES Index 在集群模式下，有多个 Node （节点）组成。每个节点就是 ES 的Instance (实例)。&lt;/li>
&lt;li>每个节点上会有多个 shard （分片）， P1 P2 是主分片, R1 R2 是副本分片&lt;/li>
&lt;li>每个分片上对应着就是一个 Lucene Index（底层索引文件）&lt;/li>
&lt;li>Lucene Index 是一个统称
&lt;ul>
&lt;li>由多个 Segment （段文件，就是倒排索引）组成。每个段文件存储着就是 Doc 文档。&lt;/li>
&lt;li>commit point记录了所有 segments 的信息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="特点">特点&lt;/h2>
&lt;ul>
&lt;li>分布式存储&lt;/li>
&lt;li>近实时检索&lt;/li>
&lt;/ul>
&lt;h2 id="核心概念">核心概念&lt;/h2>
&lt;ul>
&lt;li>索引(index):&lt;/li>
&lt;li>分片(shard):&lt;/li>
&lt;li>分段(segment):&lt;/li>
&lt;li>Translog:&lt;/li>
&lt;/ul>
&lt;h2 id="数据类型">数据类型&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Elasticsearch中每个field都要精确对应一个数据类型；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类型包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>keyword：不需要分词，进行过滤、排序、聚合等操作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>text：分词，用于全文搜索，无法排序，聚合等操作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>integer：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="shard分片和replica副本">Shard分片和Replica副本&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>es通过&lt;code>shard（分片）&lt;/code>来保证数据的可扩展性；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>es通过&lt;code>replica（副本）&lt;/code>来保证数据的高可用性；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>默认基于hash的分片规则：&lt;code>shard = hash(routing) % number_of_primary_shards&lt;/code>, routing为doc id；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在创建索引数据时，可以指定相关的shards数量和replicas，否则默认为5和1；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于索引来说，shards设置后，无法改变；replicas可以通过api更新；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分片数量和节点数相关，一般满足：节点最大数 = 分片数 * （副本数 + 1）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个分片都是一个Lucene Index，所以一个分片只能存放 Integer.MAX_VALUE - 128 = 2,147,483,519个docs。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在索引写入时，副本分片做着与主分片相同的工作。新文档首先被索引进主分片然后再同步到其它所有的副本分片。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="master选举">Master选举&lt;/h2>
&lt;h2 id="读写流程">读写流程&lt;/h2>
&lt;h3 id="写流程">写流程&lt;/h3>
&lt;p>创建索引的过程：&lt;/p>
&lt;ul>
&lt;li>准备待索引的原文档，数据来源可能是文件、数据库或网络&lt;/li>
&lt;li>对文档的内容进行分词组件处理，形成一系列的Term&lt;/li>
&lt;li>索引组件对文档和Term处理，形成字典和倒排表&lt;/li>
&lt;/ul>
&lt;p>搜索索引的过程：&lt;/p>
&lt;ul>
&lt;li>对查询语句进行分词处理，形成一系列Term&lt;/li>
&lt;li>根据倒排索引表查找出包含Term的文档，并进行合并形成符合结果的文档集&lt;/li>
&lt;li>比对查询语句与各个文档相关性得分，并按照得分高低返回&lt;/li>
&lt;/ul>
&lt;h2 id="单文档写入流程">单文档写入流程&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/09-17-17-45-2022-01-09-17-17-40-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>客户端向 Node 1 发送新建、索引或者删除请求。&lt;/li>
&lt;li>节点使用文档的 _id 确定文档属于分片 0 。请求会被转发到 Node 3，因为分片 0 的主分片目前被分配在 Node 3 上。&lt;/li>
&lt;li>Node 3 在主分片上面执行请求。如果成功了，它将请求并行转发到 Node 1 和 Node 2 的副本分片上。一旦所有的副本分片都报告成功, Node 3 将向协调节点报告成功，协调节点向客户端报告成功。&lt;/li>
&lt;/ul>
&lt;h2 id="常用操作">常用操作&lt;/h2>
&lt;ul>
&lt;li>清空index数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># create index&lt;/span>
curl -X PUT http://192.168.0.10:20000/test6 --header &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -d index.json
cat index.json
&lt;span class="c1"># delete index&lt;/span>
curl -X DELETE http://192.168.0.10:20000/test6
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="tfidf">TF/IDF&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>TF(Term Frequency, 词频): 词(Term)在文档中出现的频率；&lt;/p>
&lt;p>$ tf(t\in d) = \sqrt{frequency} $&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IDF(Invert Doc Frequency, 逆向文档频率): 索引中文档数量除以所有包含该词的文档数&lt;/p>
&lt;p>$ idf(t) = 1 + log ( numDocs / (docFreq + 1)) $&lt;/p>
&lt;/li>
&lt;li>
&lt;p>norm(字段长度归一值): 字段中词数平方根的倒数,&lt;/p>
&lt;p>$ norm(d) = 1 / \sqrt{numTerms} $&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://pdai.tech/md/db/nosql-es/elasticsearch-y-th-2.html">ES详解 - 原理：ES原理知识点补充和整体结构 | Java 全栈知识体系&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>ElasticSearch基础之lucene</title><link>https://justice.bj.cn/post/30.architech/elasticsearch/es%E5%9F%BA%E7%A1%80%E4%B9%8Blucene/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/elasticsearch/es%E5%9F%BA%E7%A1%80%E4%B9%8Blucene/</guid><description>&lt;h1 id="elasticsearch基础之lucene">ElasticSearch基础之lucene&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Elasticsearch 是一个基于lucene的分布式可扩展的近实时搜索和分析引擎。&lt;/p>
&lt;p>Lucene索引结构&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/09-17-11-59-2022-01-09-17-11-56-image.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/09-17-11-19-2022-01-09-17-11-13-image.png" alt="">&lt;/p>
&lt;h3 id="lucene索引处理流程">Lucene索引处理流程&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/09-17-09-44-2022-01-09-17-09-40-image.png" alt="">&lt;/p>
&lt;h3 id="heading">&lt;/h3>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://pdai.tech/md/db/nosql-es/elasticsearch-y-th-2.html">ES详解 - 原理：ES原理知识点补充和整体结构 | Java 全栈知识体系&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item></channel></rss>