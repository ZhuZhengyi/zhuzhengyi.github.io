<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Justice的小站</title><link>https://justice.bj.cn/</link><description>Recent content on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 27 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://justice.bj.cn/post/12.data_struct/readme/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/readme/</guid><description>&lt;h2 id="数据结构">数据结构&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="./00.%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.md">基础数据结构&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="./01.%E6%AF%94%E7%89%B9.md">比特/字节&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="./%E6%95%B0%E7%BB%84.md">数组&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="./05.%E6%A0%91.md">树&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="./Tree/B-Tree.md">B 树&lt;/a>&lt;/li>
&lt;li>&lt;a href="./Tree/RB-Tree.md">红黑树&lt;/a>&lt;/li>
&lt;li>&lt;a href="./Tree/TrieTree.md">字典树&lt;/a>&lt;/li>
&lt;li>&lt;a href="./Tree/Segment-Tree.md">线段树&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title/><link>https://justice.bj.cn/post/70.tool/readme/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/readme/</guid><description/></item><item><title>Bazel</title><link>https://justice.bj.cn/post/70.tool/bazel/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/bazel/</guid><description>&lt;h1 id="bazel">Bazel&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Bazel是Google开源的自动化构建工具，&lt;/p>
&lt;h2 id="特点">特点&lt;/h2>
&lt;ul>
&lt;li>构建快。支持增量编译。对依赖关系进行了优化，从而支持并发执行。&lt;/li>
&lt;li>可构建多种语言。bazel可用来构建Java C++ Android ios等很多语言和框架，并支持mac windows linux等不同平台&lt;/li>
&lt;li>可伸缩。可处理任意大小的代码库，可处理多个库，也可以处理单个库&lt;/li>
&lt;li>可扩展。使用bazel扩展语言可支持新语言和新平台。&lt;/li>
&lt;/ul>
&lt;h2 id="项目结构">项目结构&lt;/h2>
&lt;p>bazel顶层，也就是根目录下为工作区workspace，workspace下包含多个package，每个package又包含多个编译目标target。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>workspace&lt;/p>
&lt;p>要进行构建的文件系统，根目录下必须包含一个文件名为WORKSPACE的文件，即使它内容为空。它指明了构建的根目录。文件系统中包括源文件，头文件，输出目录的符号链接等。WORKSPACE采用类似Python的语法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>package&lt;/p>
&lt;p>一个WORKSPACE工作区下可以包括多个包package，每个package可以实现一个子模块，从而让各个模块进行解耦。每个package下必须包含一个BUILD文件，它指定了package的编译构建规则。&lt;/p>
&lt;p>BUILD文件也是采用的类似Python的语法，它定义了编译规则，lib依赖等各项规则。其中有些命令专属于BUILD文件，有些则是bazel语法通用的，如WORKSPACE文件中也可以使用。主要方法调用如下&lt;/p>
&lt;ul>
&lt;li>tf_cc_binary：目标文件编译规则，为一个二进制可执行文件。name必须唯一，srcs指定了源文件，linkopts指定了链接规则，deps指定了依赖文件&lt;/li>
&lt;li>cc_library：库文件编译规则，name指定了编译为库文件后的文件名，srcs和hdrs指定源文件和头文件，deps指定需要依赖的其他文件&lt;/li>
&lt;li>tf_cc_test：测试文件规则&lt;/li>
&lt;li>package：通用方法，定义的值会作用到下面的每个子rule中。default_visibility指定了这个包的默认可见规则。可见的情况下才能被其他package调用。&lt;/li>
&lt;li>licenses：通用方法，默认的license&lt;/li>
&lt;li>load：通用方法，加载.bzl文件&lt;/li>
&lt;li>filegroup：通用方法，为多个编译目标target指定一个名字，glob是一个帮助函数，指定了目录中哪些文件会include，哪些会exclude。visibility指定了target的可见性，也就是可以被哪些package调用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>label&lt;/p>
&lt;p>包的名称叫做标签，用来标识一个包package。标签由两部分组成，一部分为包名my/app/main， 一部分为包构建的目标名app_binary。每个标签用来唯一标示包构建的目标，从而在被其他包使用时可以标识出来。同一个包下，标签可以省略包名部分，如:app_binary表示同一个包下的目标。不同包之间，则千万不能省略包名。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>target&lt;/p>
&lt;p>包package是一个容器，组成它的元素称为目标，分为文件和规则。文件分为两种，一种为程序员写的源代码，一种为构建工具生成的文件。规则定义了如何利用输入来构建得到输出，如上面的BUILD。输入一般是源文件，库文件等，输出则一般是生成的构建目标文件。&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="命令">命令&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ bazel build //...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>brew</title><link>https://justice.bj.cn/post/70.tool/brew/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/brew/</guid><description>&lt;h1 id="brew">brew&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="操作">操作&lt;/h2>
&lt;ul>
&lt;li>安装指定版本&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ git clone http://github.com/homebrew/homebrew-core
$ vi homebrew-core/Formula/xxxx.rb
$ brew install homebrew-core/Formula/xxxx.rb
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="更换homebrew源">更换Homebrew源&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 替换brew.git:&lt;/span>
&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git
&lt;span class="c1"># 替换homebrew-core.git:&lt;/span>
&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">/Library/Taps/homebrew/homebrew-core&amp;#34;&lt;/span>
git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git
&lt;span class="c1"># 替换homebrew-bottles:&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.zshrc
&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;span class="c1"># 替换homebrew-cask.git:&lt;/span>
&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>brew --repo&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>/Library/Taps/homebrew/homebrew-cask
git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>clonezilla</title><link>https://justice.bj.cn/post/70.tool/clonezilla/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/clonezilla/</guid><description>&lt;h1 id="clonezilla">clonezilla&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="1-initrdimg修改">1. initrd.img修改&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">### 解压initrd.img&lt;/span>
$ xz -d initrd.img.xz &lt;span class="c1">#Xz格式&lt;/span>
$ gunzip initrd.img.gz &lt;span class="c1">#Gz格式&lt;/span>
&lt;span class="c1">### 解压cpio&lt;/span>
$ cpio -i -d &amp;lt; initrd.img
&lt;span class="c1">### 打包initrd.img&lt;/span>
$ &lt;span class="nb">cd&lt;/span> initrd &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> find . &lt;span class="p">|&lt;/span> cpio -o -H newc &lt;span class="p">|&lt;/span> gzip &amp;gt; ../initrd.img
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="2-filesystemsquashfs修改">2. filesystem.squashfs修改&lt;/h2>
&lt;ul>
&lt;li>解压squashfs&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ unsquashfs filesystem.squashfs
&lt;span class="c1">#或者&lt;/span>
$ mount –t squashfs filesystem.squashfs /mnt/tmp
$ cp –r /mnt/tmp squashfs-root-dir
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="3-增加驱动">3. 增加驱动&lt;/h2>
&lt;p>将驱动模块拷贝到相应目录下，更新相关配置信息:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cp *.ko /lib/modules/&lt;span class="k">$(&lt;/span>uname -r&lt;span class="k">)&lt;/span>/extra/
$ depmod –a
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="4-打包squashfs">4. 打包squashfs&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ mksquashfs squashfs-root-dir filesystem.squashfs –force-uid &lt;span class="m">0&lt;/span> –all-root
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="5-pxelinuxcfgdefault">5. pxelinux.cfg/default&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">LABEL myos
MENU LABEL myos
kernel myos/live/vmlinuz
append initrd=/myos/live/initrd.img boot=live union=overlayfs noswap edd=on nomodeset noprompt config nosplash only-ubiquity ip=frommedia vgz=791 locales=zh_CN.UTF-8 keyboard-layouts=NONE ocs_live_batch=&amp;#34;yes&amp;#34; fetch=tftp://192.18.0.2/myos/live/filesystem.squashfs ocs_premount=&amp;#34;mount -t nfs 192.168.0.2:/tftpboot/myos/home/partimag /home/partimag&amp;#34; ocs_live_run=&amp;#34;ocs-sr -g auto -e1 auto -e2 -c -r -j2 -k1 -p reboot restoredisk ask_user ask_user&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>curl</title><link>https://justice.bj.cn/post/70.tool/curl/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/curl/</guid><description>&lt;h1 id="curl">curl&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="常用操作">常用操作&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">## GET&lt;/span>
&lt;span class="c1">## PUT json data&lt;/span>
$ curl -X PUT &lt;span class="nv">$consul_url&lt;/span> -d @- &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span class="s"> {
&lt;/span>&lt;span class="s"> &amp;#34;id&amp;#34;: &amp;#34;${id}&amp;#34;,
&lt;/span>&lt;span class="s"> &amp;#34;name&amp;#34;: &amp;#34;${name}&amp;#34;,
&lt;/span>&lt;span class="s"> &amp;#34;address&amp;#34;: &amp;#34;${addr}&amp;#34;,
&lt;/span>&lt;span class="s"> &amp;#34;port&amp;#34;: ${port},
&lt;/span>&lt;span class="s"> &amp;#34;tags&amp;#34;: [
&lt;/span>&lt;span class="s"> &amp;#34;role=$role&amp;#34;,
&lt;/span>&lt;span class="s"> &amp;#34;cluster=$cluster&amp;#34;,
&lt;/span>&lt;span class="s"> &amp;#34;env=$env&amp;#34;
&lt;/span>&lt;span class="s"> ]
&lt;/span>&lt;span class="s"> }
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://www.jianshu.com/p/fc0eb6c60816">https://www.jianshu.com/p/fc0eb6c60816&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Electron</title><link>https://justice.bj.cn/post/70.tool/electron/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/electron/</guid><description>&lt;h1 id="electron">Electron&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="mark-text-编译">mark-text 编译&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ yarn run dev
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="签名">签名&lt;/h2>
&lt;p>mac 下，用electron-builder 打包dmg，关闭签名：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sh" data-lang="sh">$ &lt;span class="nb">export&lt;/span> &lt;span class="nv">CSC_IDENTITY_AUTO_DISCOVERY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span>
$ yarn release:mac
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>fio</title><link>https://justice.bj.cn/post/70.tool/fio/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/fio/</guid><description>&lt;h1 id="fio">fio&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>FIO（Flexible I/O Tester） 是一款由 Jens Axboe 开发的用于测评和压力/硬件验证的&lt;a href="https://github.com/axboe/fio">自由开源&lt;/a>的软件，支持 19 种不同类型的 I/O 引擎 (sync、mmap、libaio、posixaio、SG v3、splice、null、network、 syslet、guasi、solarisaio，以及更多)， I/O 优先级（针对较新的 Linux 内核），I/O 速度，fork 的任务或线程任务等等。它能够在块设备和文件上工作。是测试IOPS的非常好的工具，用来对硬件进行压力测试和验证。磁盘IO是检查磁盘性能的重要指标，可以按照负载情况分成照顺序读写，随机读写两大类。&lt;/p>
&lt;h2 id="测试场景">测试场景&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 100%随机，100%读， 4K&lt;/span>
$ fio -filename&lt;span class="o">=&lt;/span>/dev/emcpowerb &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -direct&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -iodepth &lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -thread &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -rw&lt;span class="o">=&lt;/span>randread &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -ioengine&lt;span class="o">=&lt;/span>psync &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -bs&lt;span class="o">=&lt;/span>4k &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -size&lt;span class="o">=&lt;/span>1000G &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -numjobs&lt;span class="o">=&lt;/span>&lt;span class="m">50&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -runtime&lt;span class="o">=&lt;/span>&lt;span class="m">180&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -group_reporting &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -name&lt;span class="o">=&lt;/span>rand_100read_4k
&lt;span class="c1"># 100%随机，100%写， 4K&lt;/span>
$ fio -filename&lt;span class="o">=&lt;/span>/dev/emcpowerb &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -direct&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -iodepth &lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -thread &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -rw&lt;span class="o">=&lt;/span>randwrite &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -ioengine&lt;span class="o">=&lt;/span>psync &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -bs&lt;span class="o">=&lt;/span>4k &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -size&lt;span class="o">=&lt;/span>1000G &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -numjobs&lt;span class="o">=&lt;/span>&lt;span class="m">50&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -runtime&lt;span class="o">=&lt;/span>&lt;span class="m">180&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -group_reporting &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -name&lt;span class="o">=&lt;/span>rand_100write_4k
&lt;span class="c1">#100%顺序，100%读 ，4K&lt;/span>
$ fio &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -filename&lt;span class="o">=&lt;/span>/dev/emcpowerb &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -direct&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -iodepth &lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -thread &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -rw&lt;span class="o">=&lt;/span>&lt;span class="nb">read&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -ioengine&lt;span class="o">=&lt;/span>psync &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -bs&lt;span class="o">=&lt;/span>4k &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -size&lt;span class="o">=&lt;/span>1000G &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -numjobs&lt;span class="o">=&lt;/span>&lt;span class="m">50&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -runtime&lt;span class="o">=&lt;/span>&lt;span class="m">180&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -group_reporting &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -name&lt;span class="o">=&lt;/span>sqe_100read_4k
&lt;span class="c1"># 100%顺序，100%写 ，4K&lt;/span>
$ fio &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -filename&lt;span class="o">=&lt;/span>/dev/emcpowerb &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -direct&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -iodepth &lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -thread &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -rw&lt;span class="o">=&lt;/span>write &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -ioengine&lt;span class="o">=&lt;/span>psync &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -bs&lt;span class="o">=&lt;/span>4k &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -size&lt;span class="o">=&lt;/span>1000G &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -numjobs&lt;span class="o">=&lt;/span>&lt;span class="m">50&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -runtime&lt;span class="o">=&lt;/span>&lt;span class="m">180&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -group_reporting &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -name&lt;span class="o">=&lt;/span>sqe_100write_4k
&lt;span class="c1"># 100%随机，70%读，30%写 4K&lt;/span>
$ fio &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -filename&lt;span class="o">=&lt;/span>/dev/emcpowerb &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -direct&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -iodepth &lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -thread &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -rw&lt;span class="o">=&lt;/span>randrw &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -rwmixread&lt;span class="o">=&lt;/span>&lt;span class="m">70&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -ioengine&lt;span class="o">=&lt;/span>psync &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -bs&lt;span class="o">=&lt;/span>4k &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -size&lt;span class="o">=&lt;/span>1000G &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -numjobs&lt;span class="o">=&lt;/span>&lt;span class="m">50&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -runtime&lt;span class="o">=&lt;/span>&lt;span class="m">180&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -group_reporting &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -name&lt;span class="o">=&lt;/span>randrw_70read_4k &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -write_bw_log&lt;span class="o">=&lt;/span>fio-test &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -write_iops_log&lt;span class="o">=&lt;/span>fio-test &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -write_lat_log&lt;span class="o">=&lt;/span>fio-test
&lt;span class="c1"># &lt;/span>
$ fio &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -ioengine&lt;span class="o">=&lt;/span>psync &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -filename&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">TestFile&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -bs&lt;span class="o">=&lt;/span>&lt;span class="nv">$bs&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -fdatasync&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -rw&lt;span class="o">=&lt;/span>write &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -size&lt;span class="o">=&lt;/span>1g &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -runtime&lt;span class="o">=&lt;/span>&lt;span class="m">60&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -name&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$TEST_FILE&lt;/span>&lt;span class="s2">-write-&lt;/span>&lt;span class="nv">$bs&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>GCC</title><link>https://justice.bj.cn/post/70.tool/gcc/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/gcc/</guid><description>&lt;h1 id="gcc">GCC&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>gcc&lt;/p>
&lt;h2 id="编译链接">编译链接&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/18-10-03-25-image-20190712101420215.png" alt="image-20190712101420215">&lt;/p>
&lt;h2 id="编译选项">编译选项&lt;/h2>
&lt;ul>
&lt;li>-shared ：指定生成动态链接库。&lt;/li>
&lt;li>-static ：指定生成静态链接库。&lt;/li>
&lt;li>-fPIC ：生成可用于共享库的位置独立代码。所有的内部寻址均通过全局偏移表完成。要确定一个地址，需要将代码自身的内存位置作为表中一项插入。该选项产生可以在共享库中存放并从中加载的目标模块。&lt;/li>
&lt;li>-L. ：表示要连接的库所在的目录。&lt;/li>
&lt;li>-l：指定链接时需要的动态库。编译器查找动态连接库时有隐含的命名规则，即在给出的名字前面加上lib，后面加上&lt;code>.a或.so&lt;/code>来确定库的名称。&lt;/li>
&lt;li>-Wall ：生成所有警告信息。&lt;/li>
&lt;li>-ggdb ：此选项将尽可能的生成gdb的可以使用的调试信息。&lt;/li>
&lt;li>-g ：编译器在编译的时候产生调试信息。&lt;/li>
&lt;li>-c ：只激活预处理、编译和汇编,也就是把程序做成目标文件(.o文件)。&lt;/li>
&lt;li>-Wl,options ：把参数(options)传递给链接器ld。如果options中间有逗号,就将options分成多个选项,然后传递给链接程序。&lt;/li>
&lt;/ul>
&lt;h3 id="--whole-archive--no-whole-archive">&amp;ndash;whole-archive/&amp;ndash;no-whole-archive&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&amp;ndash;whole-archive 和 &amp;ndash;no-whole-archive 是ld专有的命令行参数，gcc 并不认识，要通gcc传递到 ld，需要在他们前面加 -Wl;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>默认情况下，对于未使用到的符号（函数是一种符号），链接器不会将它们链接进共享库和可执行程序。&lt;/p>
&lt;p>这个时候，可以启用链接参数“&amp;ndash;whole-archive”来告诉链接器，将后面库中所有符号都链接进来&lt;/p>
&lt;/li>
&lt;li>
&lt;p>参数“-no-whole-archive”则是重置，以避免后面库的所有符号被链接进来。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="安装编译">安装编译&lt;/h2>
&lt;ul>
&lt;li>centos7 gcc 版本升级&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 红帽提供的开发工具包devtoolset包含了不同版本的gcc，devtoolset-x对应gcc-x.&lt;/span>
$ yum install centos-release-scl
&lt;span class="c1"># 安装gcc -v8&lt;/span>
$ yum install devtoolset-8
&lt;span class="c1"># 切换&lt;/span>
$ scl &lt;span class="nb">enable&lt;/span> devtoolset-8 bash
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="动态链接">动态链接&lt;/h2>
&lt;h2 id="静态链接">静态链接&lt;/h2>
&lt;ul>
&lt;li>GCC在链接过程中，参数的解析是从右往左的，参数右侧的库会先于左侧的库加载；&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ gcc -c test.c -o test.o
$ ar crv test.a test1.o test2.o test3.o
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>GDB</title><link>https://justice.bj.cn/post/70.tool/gdb/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/gdb/</guid><description>&lt;h1 id="gdb">GDB&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>&lt;strong>GDB&lt;/strong>（Gnu Debugger）&lt;/p>
&lt;h2 id="用法">用法&lt;/h2>
&lt;ul>
&lt;li>屏蔽信号&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 屏蔽PIPE信号，在接收到SIGINT时不要停止、打印出来、传递给调试目标程序&lt;/span>
&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> handle SIGPIPE nostop print pass
&lt;span class="c1"># 直接向调试的应用程序发送信号INT&lt;/span>
&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> signal SIGINT
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2></description></item><item><title>Git LFS-git的大文件管理</title><link>https://justice.bj.cn/post/70.tool/git-lfs/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/git-lfs/</guid><description>&lt;h1 id="git-lfs-git的大文件管理">Git LFS-git的大文件管理&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Git 在克隆过程中会将仓库的整个历史记录传输到客户端。对于包涵大文件的项目，初始克隆需要大量时间，因为客户端会下载每个文件的每个版本。Git LFS（Large File Storage）是由 Atlassian, GitHub 以及其他开源贡献者开发的 Git 扩展，它通过延迟地（lazily）下载大文件的相关版本来减少大文件在仓库中的影响，具体来说，大文件是在 checkout 的过程中下载的，而不是 clone 或 fetch 过程中下载的。&lt;/p>
&lt;h2 id="原理">原理&lt;/h2>
&lt;p>Git LFS 通过将仓库中的大文件替换为微小的&lt;em>指针（pointer）&lt;/em> 文件来做到这一点。在正常使用期间，你将永远不会看到这些指针文件，因为它们是由 Git LFS 自动处理的：&lt;/p>
&lt;ol>
&lt;li>当添加（执行 git add 命令）一个文件到仓库时，Git LFS 用一个指针替换其内容，并将文件内容存储在本地 Git LFS 缓存中（本地 Git LFS 缓存位于仓库的.git/lfs/objects 目录中）。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/05-10-37-08-2020-12-05-10-37-03-image.png" alt="git add" title="git add">&lt;/p>
&lt;ol start="2">
&lt;li>当推送新的提交到服务器时，新推送的提交引用的所有 Git LFS 文件都会从本地 Git LFS 缓存传输到绑定到 Git 仓库的远程 Git LFS 存储（即 LFS 文件内容会直接从本地 Git LFS 缓存传输到远程 Git LFS 存储服务器）。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/05-10-38-40-2020-12-05-10-38-29-image.png" alt="">&lt;/p>
&lt;ol start="3">
&lt;li>当 checkout 一个包含 Git LFS 指针的提交时，指针文件将替换为本地 Git LFS 缓存中的文件，或者从远端 Git LFS 存储区下载。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/05-10-39-26-2020-12-05-10-39-19-image.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>LFS 的指针文件&lt;/strong>：LFS 的指针文件是一个文本文件，存储在 Git 仓库中，对应大文件的内容存储在 LFS 服务器里，而不是 Git 仓库中，下面为一个图片 LFS 文件的指针文件内容：&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">version https://git-lfs.github.com/spec/v1
oid sha256:5b62e134d2478ae0bbded57f6be8f048d8d916cb876f0656a8a6d1363716d999
size 285
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>指针文件很小，小于 1KB。其格式为 key-value 格式，第一行为指针文件规范 URL，第二行为文件的对象 id，也即 LFS 文件的存储对象文件名，可以在.git/lfs/objects 目录中找到该文件的存储对象，第三行为文件的实际大小（单位为字节）。所有 LFS 指针文件都是这种格式。&lt;/p>
&lt;ul>
&lt;li>Git LFS 是无缝的：在你的工作副本中，你只会看到实际的文件内容。这意味着你不需要更改现有的 Git 工作流程就可以使用 Git LFS。你只需按常规进行 git checkout、编辑文件、git add 和 git commit。git clone 和 git pull 将明显更快，因为你只下载实际检出的提交所引用的大文件版本，而不是曾经存在过的文件的每一个版本。&lt;/li>
&lt;/ul>
&lt;h2 id="安装">安装&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># mac&lt;/span>
$ brew install git-lfs
&lt;span class="c1"># ubuntu&lt;/span>
$ curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh &lt;span class="p">|&lt;/span> sudo bash
apt-get install git-lfs
&lt;span class="c1"># centos&lt;/span>
$
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="操作">操作&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ &lt;span class="nb">cd&lt;/span> &amp;lt;git_dir&amp;gt;
&lt;span class="c1"># 初始化&lt;/span>
$ git lfs install
&lt;span class="c1"># 添加lfs追踪文件&lt;/span>
$ git lfs track &lt;span class="s2">&amp;#34;*.dat&amp;#34;&lt;/span>
&lt;span class="c1"># 将.gitattributes加入到版本库中。&lt;/span>
$ git add .gitattributes
&lt;span class="c1"># 提交&lt;/span>
$ git commit -m &lt;span class="s2">&amp;#34;add .gitattributes&amp;#34;&lt;/span>
&lt;span class="c1"># 至此，lfs已经配置完成。后续的二进制add、commit、push同正常的代码提交完全一致&lt;/span>
&lt;span class="c1"># 拉取lfs&lt;/span>
$ git lfs pull
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/cangqinglang/p/13097777.html">详解 Git 大文件存储（Git LFS） - 苍青浪 - 博客园&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://git-lfs.github.com/">https://git-lfs.github.com/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>GitHub 相关工具</title><link>https://justice.bj.cn/post/70.tool/github/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/github/</guid><description>&lt;h1 id="github-相关工具">GitHub 相关工具&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="travis-ci持续集成">travis-ci(持续集成)&lt;/h2>
&lt;h2 id="codecov代码测试覆盖率">codecov(代码测试覆盖率)&lt;/h2>
&lt;p>&lt;a href="https://github.com/codecov/example-go">https://github.com/codecov/example-go&lt;/a>&lt;/p></description></item><item><title>Git内部原理揭秘</title><link>https://justice.bj.cn/post/70.tool/git%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/git%E5%8E%9F%E7%90%86/</guid><description>&lt;h1 id="git内部原理揭秘">Git内部原理揭秘&lt;/h1>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/24-09-52-48-640.png" alt="">&lt;/p>
&lt;h2 id="git是怎么储存信息的">Git是怎么储存信息的&lt;/h2>
&lt;p>这里会用一个简单的例子让大家直观感受一下git是怎么储存信息的。&lt;/p>
&lt;p>首先我们先创建两个文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ git init
$ echo &amp;#39;111&amp;#39; &amp;gt; a.txt
$ echo &amp;#39;222&amp;#39; &amp;gt; b.txt
$ git add *.txt
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Git会将整个数据库储存在&lt;code>.git/&lt;/code>目录下，如果你此时去查看&lt;code>.git/objects&lt;/code>目录，你会发现仓库里面多了两个object。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ tree .git/objects
.git/objects
├── 58
│   └── c9bdf9d017fcd178dc8c073cbfcbb7ff240d6c
├── c2
│   └── 00906efd24ec5e783bee7f23b5d7c941b0c12c
├── info
└── pack
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>好奇的我们来看一下里面存的是什么东西&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ cat .git/objects/58/c9bdf9d017fcd178dc8c073cbfcbb7ff240d6c
xKOR0a044K%
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>怎么是一串乱码？这是因为Git将信息压缩成二进制文件。但是不用担心，因为Git也提供了一个能够帮助你探索它的api &lt;code>git cat-file [-t] [-p]&lt;/code>， &lt;code>-t&lt;/code>可以查看object的类型，&lt;code>-p&lt;/code>可以查看object储存的具体内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ git cat-file -t 58c9
blob
$ git cat-file -p 58c9
111
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以发现这个object是一个blob类型的节点，他的内容是111，也就是说这个object储存着a.txt文件的内容。&lt;/p>
&lt;p>这里我们遇到第一种Git object，blob类型，它只储存的是一个文件的内容，不包括文件名等其他信息。然后将这些信息经过SHA1哈希算法得到对应的哈希值&lt;br>
58c9bdf9d017fcd178dc8c073cbfcbb7ff240d6c，作为这个object在Git仓库中的唯一身份证。&lt;/p>
&lt;p>也就是说，我们此时的Git仓库是这样子的：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/24-09-53-08-6402.png" alt="">&lt;/p>
&lt;p>我们继续探索，我们创建一个commit。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ git commit -am &amp;#39;[+] init&amp;#39;
$ tree .git/objects
.git/objects
├── 0c
│   └── 96bfc59d0f02317d002ebbf8318f46c7e47ab2
├── 4c
│   └── aaa1a9ae0b274fba9e3675f9ef071616e5b209
...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们会发现当我们commit完成之后，Git仓库里面多出来两个object。同样使用&lt;code>cat-file&lt;/code>命令，我们看看它们分别是什么类型以及具体的内容是什么。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ git cat-file -t 4caaa1
tree
$ git cat-file -p 4caaa1
100644 blob 58c9bdf9d017fcd178dc8c0...     a.txt
100644 blob c200906efd24ec5e783bee7...    b.txt
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里我们遇到了第二种Git object类型——tree，它将当前的目录结构打了一个快照。从它储存的内容来看可以发现它储存了一个目录结构（类似于文件夹），以及每一个文件（或者子文件夹）的权限、类型、对应的身份证（SHA1值）、以及文件名。&lt;/p>
&lt;p>此时的Git仓库是这样的：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/24-09-53-16-3.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ git cat-file -t 0c96bf
commit
$ git cat-file -p 0c96bf
tree 4caaa1a9ae0b274fba9e3675f9ef071616e5b209
author lzane 李泽帆  1573302343 +0800
committer lzane 李泽帆  1573302343 +0800
[+] init
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着我们发现了第三种Git object类型——commit，它储存的是一个提交的信息，包括对应目录结构的快照tree的哈希值，上一个提交的哈希值（这里由于是第一个提交，所以没有父节点。在一个merge提交中还会出现多个父节点），提交的作者以及提交的具体时间，最后是该提交的信息。&lt;/p>
&lt;p>此时我们去看Git仓库是这样的：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/24-09-53-28-4.png" alt="">&lt;/p>
&lt;p>到这里我们就知道Git是怎么储存一个提交的信息的了，那有同学就会问，我们平常接触的分支信息储存在哪里呢？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ cat .git/HEAD
ref: refs/heads/master
$ cat .git/refs/heads/master
0c96bfc59d0f02317d002ebbf8318f46c7e47ab2
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在Git仓库里面，HEAD、分支、普通的Tag可以简单的理解成是一个指针，指向对应commit的SHA1值。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/24-09-53-34-45.png" alt="">&lt;/p>
&lt;p>其实还有第四种Git object，类型是tag，在添加含附注的tag（&lt;code>git tag -a&lt;/code>）的时候会新建，这里不详细介绍，有兴趣的朋友按照上文中的方法可以深入探究。&lt;/p>
&lt;p>至此我们知道了Git是什么储存一个文件的内容、目录结构、commit信息和分支的。&lt;strong>其本质上是一个key-value的数据库加上默克尔树形成的有向无环图（DAG）&lt;/strong>。这里可以蹭一下区块链的热度，区块链的数据结构也使用了默克尔树。&lt;/p>
&lt;h2 id="git的三个分区">Git的三个分区&lt;/h2>
&lt;p>接下来我们来看一下Git的三个分区（工作目录、Index 索引区域、Git仓库），以及Git变更记录是怎么形成的。了解这三个分区和Git链的内部原理之后可以对Git的众多指令有一个“可视化”的理解，不会再经常搞混。&lt;/p>
&lt;p>接着上面的例子，目前的仓库状态如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/24-09-53-41-65.png" alt="">&lt;/p>
&lt;p>这里有三个区域，他们所储存的信息分别是：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>工作目录 （ working directory ）：操作系统上的文件，所有代码开发编辑都在这上面完成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>索引（ index or staging area ）：可以理解为一个暂存区域，这里面的代码会在下一次commit被提交到Git仓库。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Git仓库（ git repository ）：由Git object记录着每一次提交的快照，以及链式结构记录的提交变更历史。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>我们来看一下更新一个文件的内容这个过程会发生什么事。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/24-09-53-48-4325.png" alt="">&lt;/p>
&lt;p>运行&lt;code>echo &amp;quot;333&amp;quot; &amp;gt; a.txt&lt;/code>将a.txt的内容从111修改成333，此时如上图可以看到，此时索引区域和git仓库没有任何变化。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/24-09-54-02-432423.png" alt="">&lt;/p>
&lt;p>运行&lt;code>git add a.txt&lt;/code>将a.txt加入到索引区域，此时如上图所示，git在仓库里面新建了一个blob object，储存了新的文件内容。并且更新了索引将a.txt指向了新建的blob object。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/24-09-54-15-543234.png" alt="">&lt;/p>
&lt;p>运行&lt;code>git commit -m 'update'&lt;/code>提交这次修改。如上图所示&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Git首先根据当前的索引生产一个tree object，充当新提交的一个快照。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个新的commit object，将这次commit的信息储存起来，并且parent指向上一个commit，组成一条链记录变更历史。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将master分支的指针移到新的commit结点。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>至此我们知道了Git的三个分区分别是什么以及他们的作用，以及历史链是怎么被建立起来的。**基本上Git的大部分指令就是在操作这三个分区以及这条链。&lt;strong>可以尝试的思考一下git的各种命令，试一下你能不能够在上图将它们&lt;/strong>“可视化”**出来，这个很重要，建议尝试一下。&lt;/p>
&lt;p>如果不能很好的将日常使用的指令“可视化”出来，推荐阅读 &lt;a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html">图解Git&lt;/a>&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.jiqizhixin.com/articles/2019-12-20">这才是真正的Git——Git内部原理揭秘！ | 机器之心&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Git基础</title><link>https://justice.bj.cn/post/70.tool/git/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/git/</guid><description>&lt;h1 id="git基础">Git基础&lt;/h1>
&lt;h2 id="1-简介">1. 简介&lt;/h2>
&lt;p>Git是一个分布式版本管理系统，2005年由Linus大神在一周时间完成最初版，以代替BitKeeper用于linux的开发。&lt;/p>
&lt;h2 id="2-特点">2. 特点&lt;/h2>
&lt;h2 id="3-原理">3. 原理&lt;/h2>
&lt;p>Git本质上是一个小型的kv存储文件系统。其文件系统原数据都存储在&lt;code>.git/&lt;/code>目录下。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/18-10-04-08-2020-03-13-12-28-29-image.png" alt="">&lt;/p>
&lt;h2 id="4-配置">4. 配置&lt;/h2>
&lt;h3 id="配置文件">配置文件&lt;/h3>
&lt;p>可使用&lt;code>$ git config&lt;/code>对git配置进行管理。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ git config --list &lt;span class="c1">#查看配置信息&lt;/span>
$ git config --global -e &lt;span class="c1">#修改配置信息&lt;/span>
&lt;span class="c1"># git 配置用户信息 &lt;/span>
$ git config --global user.name &lt;span class="s2">&amp;#34;user&amp;#34;&lt;/span>
$ git config --global user.email &lt;span class="s2">&amp;#34;user@email.com&amp;#34;&lt;/span>
&lt;span class="c1"># 文本编辑器&lt;/span>
$ git config --global core.editor vim
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="日志设置">日志设置&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 普通设置&lt;/span>
$ git log -p -2 &lt;span class="c1"># 显示每次提交内容差异 &lt;/span>
$ git log --pretty&lt;span class="o">=&lt;/span>format:&lt;span class="s2">&amp;#34;%h - %an, %ar : %s &amp;#34;&lt;/span>
&lt;span class="c1"># 设置可视化日志 &lt;/span>
$ git config --global alias.lg &lt;span class="s2">&amp;#34;log --graph \
&lt;/span>&lt;span class="s2"> --pretty=format:&amp;#39;%Cred%h%Creset \
&lt;/span>&lt;span class="s2"> -%C(yellow)%d%Creset %s \
&lt;/span>&lt;span class="s2">%Cgreen(%cr)%C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39; --abbrev-commit&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="commit增加签名">commit增加签名&lt;/h3>
&lt;p>增加&lt;code>.git/hooks/prepare-commit-msg&lt;/code>文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="cp">#!/bin/sh
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="nv">NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>git config user.name&lt;span class="k">)&lt;/span>
&lt;span class="nv">EMAIL&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>git config user.email&lt;span class="k">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$NAME&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;empty git config user.name&amp;#34;&lt;/span>
&lt;span class="nb">exit&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$EMAIL&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;empty git config user.email&amp;#34;&lt;/span>
&lt;span class="nb">exit&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="5-操作">5. 操作&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/21-08-41-55-2020-03-13-13-01-35-image.png" alt="loading-ag-766">&lt;/p>
&lt;h3 id="基本用法">基本用法&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ &lt;span class="nb">cd&lt;/span> &amp;lt;project_dir&amp;gt; &lt;span class="c1">#进入工程目录&lt;/span>
$ git init &lt;span class="c1">#初始化当前目录git&lt;/span>
$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;*.log&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore &lt;span class="c1">#设置git 忽略文件&lt;/span>
$ git add ./ &lt;span class="c1">#将当前目录文件加入到git 暂存区&lt;/span>
$ git commit -a -m &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="c1">#提交暂存区到本地仓库中&lt;/span>
$ git push origin master &lt;span class="c1">#将git仓库推送到远程仓库中&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="撤销修改">撤销修改&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 回退&lt;/span>
$ git reset HEAD^N &lt;span class="c1">#回退N个提交&lt;/span>
&lt;span class="c1"># 修改最后一次提交 &lt;/span>
$ git commit --amend
&lt;span class="c1"># 撤销已暂存文件&lt;/span>
$ git reset HEAD filename
&lt;span class="c1"># 取消工作区文件修改&lt;/span>
$ git checkout -- filename
&lt;span class="c1"># 合并多个提交为一个提交&lt;/span>
$ git rebase -i HEAD~n
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="6-补丁patch">6. 补丁：patch&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ git format-path &lt;span class="o">[&lt;/span>commit-id&lt;span class="o">]&lt;/span> -n &lt;span class="c1">#生成patch&lt;/span>
$ git am &lt;span class="o">[&lt;/span>path/to/xxx.patch&lt;span class="o">]&lt;/span> &lt;span class="c1">#应用patch&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="7-远程仓库git-remote">7. 远程仓库：git remote&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 查看远程仓库&lt;/span>
$ git remote &lt;span class="o">[&lt;/span> -v &lt;span class="o">]&lt;/span>
&lt;span class="c1"># 添加远程仓库&lt;/span>
$ git remote add &lt;span class="o">[&lt;/span> shortname &lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>url&lt;span class="o">]&lt;/span>
&lt;span class="c1"># 查看远程仓库信息&lt;/span>
$ git remote show &lt;span class="o">[&lt;/span> remote-name &lt;span class="o">]&lt;/span>
&lt;span class="c1"># 重命名远程仓库名称&lt;/span>
$ git remote rename &lt;span class="o">[&lt;/span> remote-old-name &lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span> remote-new-name &lt;span class="o">]&lt;/span>
&lt;span class="c1"># 获取远程仓库数据&lt;/span>
$ git fetch &lt;span class="o">[&lt;/span> remote-name &lt;span class="o">]&lt;/span>
&lt;span class="c1"># 推送数据到远程仓库&lt;/span>
$ git push &lt;span class="o">[&lt;/span> remote-name &lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span> branch-name &lt;span class="o">]&lt;/span>
&lt;span class="c1"># 增加多个远程分支，push时能同时推送到多个remote仓库&lt;/span>
$ git remote set-url --add &amp;lt;remote-name&amp;gt; &amp;lt;url&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="8-git-lfs-git的大文件管理">8. Git lfs： Git的大文件管理&lt;/h2>
&lt;h2 id="8-git-svn">8. Git-svn&lt;/h2>
&lt;h3 id="常规用法">常规用法&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 下载SVN库到本地目录 &lt;/span>
$ git svn clone svn://192.168.0.2/_private/code mycode
&lt;span class="c1"># 从本地库中检出最新版本为b1分支&lt;/span>
$ git checkout -b b1
&lt;span class="c1"># 编辑代码，增加或删除文件&lt;/span>
$ git add/remove file
&lt;span class="c1"># 提交到本地库master分支中&lt;/span>
$ git commit -a -m &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="c1"># 将本地master分支远程同步到svn库中&lt;/span>
$ git svn dcommit
&lt;span class="c1"># 将svn库中的文件重新同步到本地&lt;/span>
$ git svn rebase
&lt;span class="c1"># 创建新的svn分支&lt;/span>
$ git svn branch b2
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="git-添加svn分支">Git 添加svn分支&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ svn mkdir -m &lt;span class="s2">&amp;#34;init&amp;#34;&lt;/span> svn://192.168.0.2/repos/prj
$ &lt;span class="nb">cd&lt;/span> git_root
$ git svn init -s svn://192.168.0.2/repos/prj
$ git svn fetch
$ git svn rebase
$ git svn stash
$ git svn dcommit
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="10-faq">10. Faq&lt;/h2>
&lt;ul>
&lt;li>fatal: The remote end hung up unexpectedly&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ git config --local http.postBuffer &lt;span class="m">524288000&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="11-参考">11. 参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-Git-%E7%AE%80%E5%8F%B2">Git简史&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://bingohuang.gitbooks.io/progit2/content/01-introduction/sections/about-version-control.html">ProGit&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/25989135">https://zhuanlan.zhihu.com/p/25989135&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/45510461">https://zhuanlan.zhihu.com/p/45510461&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>grub</title><link>https://justice.bj.cn/post/70.tool/grub/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/grub/</guid><description>&lt;h1 id="grub">grub&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="1-安装grub">1. 安装grub&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ grub-install --boot-directory&lt;span class="o">=&lt;/span>/mnt/ /dev/disk
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="2-grub2本地启动配置文件">2. grub2本地启动配置文件&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">## 加载Ubuntu USB Live&lt;/span>
menuentry &lt;span class="s2">&amp;#34;Ubuntu Live&amp;#34;&lt;/span> &lt;span class="o">{&lt;/span>
search --file /casper/ubuntu.squashfs --set root
linux /casper/vmlinux &lt;span class="nv">boot&lt;/span>&lt;span class="o">=&lt;/span>casper ro noacpid ignore_uuid quiet splash
initrd /casper/initrd.img
&lt;span class="o">}&lt;/span>
&lt;span class="c1">## 加载Ubuntu ISO Live&lt;/span>
menuentry &lt;span class="s2">&amp;#34;Ubuntu ISO&amp;#34;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nb">set&lt;/span> &lt;span class="nv">isoname&lt;/span>&lt;span class="o">=&lt;/span>/boot/iso/ubuntu.iso
search --file &lt;span class="si">${&lt;/span>&lt;span class="nv">isoname&lt;/span>&lt;span class="si">}&lt;/span> --set root
loopback loop0 &lt;span class="si">${&lt;/span>&lt;span class="nv">isoname&lt;/span>&lt;span class="si">}&lt;/span>
linux &lt;span class="o">(&lt;/span>loop0&lt;span class="o">)&lt;/span>/casper/vmlinux &lt;span class="nv">boot&lt;/span>&lt;span class="o">=&lt;/span>casper ro &lt;span class="nv">locale&lt;/span>&lt;span class="o">=&lt;/span>zh_CN.TFT-8 &lt;span class="nv">rtc_cmos&lt;/span>&lt;span class="o">=&lt;/span>localtime ignore_uuid quiet splash iso-scan/filename&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">isoname&lt;/span>&lt;span class="si">}&lt;/span>
initrd &lt;span class="o">(&lt;/span>loop0&lt;span class="o">)&lt;/span>/casper/initrd.gz
&lt;span class="o">}&lt;/span>
&lt;span class="c1">## 加载Clonezilla&lt;/span>
menuentry &lt;span class="s2">&amp;#34;Clonezilla&amp;#34;&lt;/span> &lt;span class="o">{&lt;/span>
search --file /live/clonezilla.squashfs --set root
linux /live/vmlinux &lt;span class="nv">boot&lt;/span>&lt;span class="o">=&lt;/span>live &lt;span class="nv">union&lt;/span>&lt;span class="o">=&lt;/span>aufs live-config &lt;span class="nv">video&lt;/span>&lt;span class="o">=&lt;/span>normal ro splash quiet &lt;span class="nv">ocs_live_extra_param&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="nv">ocs_live_keymap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;NONE&amp;#34;&lt;/span> &lt;span class="nv">ocs_live_batch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;no&amp;#34;&lt;/span> &lt;span class="nv">ocs_lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zh_CN.UTF-8&amp;#34;&lt;/span>
initrd /live/initrd.img
&lt;span class="o">}&lt;/span>
&lt;span class="c1">## 加载WinXP&lt;/span>
menuentry &lt;span class="s2">&amp;#34;WinXP&amp;#34;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nb">set&lt;/span> &lt;span class="nv">imgname&lt;/span>&lt;span class="o">=&lt;/span>/boot/winpe.iso
search --file &lt;span class="si">${&lt;/span>&lt;span class="nv">imgname&lt;/span>&lt;span class="si">}&lt;/span> --set
insmod memdisk
linux16 /boot/memdisk iso raw
initrd16 &lt;span class="si">${&lt;/span>&lt;span class="nv">imgname&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">## 加载WinPE.iso&lt;/span>
menuentry &lt;span class="s2">&amp;#34;WinPE.iso&amp;#34;&lt;/span> &lt;span class="o">{&lt;/span>
search --file /ntldr --set root
chainloader +1
boot
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="3-pxe远程启动">3. pxe远程启动&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ cat /etc/dhcpd.conf
allow booting&lt;span class="p">;&lt;/span>
allow bootp&lt;span class="p">;&lt;/span>
ddns-update-style none&lt;span class="p">;&lt;/span>
log-facility local7&lt;span class="p">;&lt;/span>
default-lease-time -1&lt;span class="p">;&lt;/span>
max-lease-time 7200&lt;span class="p">;&lt;/span>
ddns-update-style interim&lt;span class="p">;&lt;/span>
ignore client-updates&lt;span class="p">;&lt;/span>
subnet 192.168.0.0 netmask 255.255.255.0 &lt;span class="o">{&lt;/span>
use-host-decl-names on&lt;span class="p">;&lt;/span>
option routers 192.168.0.2&lt;span class="p">;&lt;/span>
option subnet-mask 255.255.0.0&lt;span class="p">;&lt;/span>
option domain-name-servers 192.168.0.2&lt;span class="p">;&lt;/span>
range dynamic-bootp 192.168.254.1 192.168.254.254&lt;span class="p">;&lt;/span>
default-lease-time 21600&lt;span class="p">;&lt;/span>
&lt;span class="c1">#option root-path &amp;#34;iscsi:192.168.0.84:::iqn.2010-02.casic706:iscsiboot&amp;#34;;&lt;/span>
next-server 192.168.0.2&lt;span class="p">;&lt;/span>
server-name &lt;span class="s2">&amp;#34;netstore.casic&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
server-identifier 192.168.0.2&lt;span class="p">;&lt;/span>
filename &lt;span class="s2">&amp;#34;pxelinux.0&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># pxelinux.0&lt;/span>
&lt;span class="c1">#filename &amp;#34;grub2pxe.0&amp;#34;; # pxelinux.0&lt;/span>
&lt;span class="c1">#filename &amp;#34;grldr&amp;#34;; # grub4dos&lt;/span>
&lt;span class="c1">#host fusion {&lt;/span>
&lt;span class="c1"># hardware ethernet 00:1E:67:65:9E:D6;&lt;/span>
&lt;span class="c1"># fixed-address 192.168.42.201;&lt;/span>
&lt;span class="c1">#}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="5-pxe启动配置文件">5. PXE启动配置文件&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ cat /tftpboot/pxelinux.cfg/default
&lt;span class="c1">## 从本机硬盘启动 &lt;/span>
LABEL &lt;span class="s2">&amp;#34;Local BOOT&amp;#34;&lt;/span>
MENU LABEL ^0. Local Boot
MENU DEFAULT
KERNEL boot/chain.c32
APPEND hd0
TEXT HELP
hd0 boot
ENDTEXT
&lt;span class="c1">## 启动Ubuntu &lt;/span>
LABEL &lt;span class="s2">&amp;#34;Ubuntu 12.10&amp;#34;&lt;/span>
MENU LABEL ^1. Ubuntu 12.10
KERNEL boot/ubuntu_12.10/vmlinuz
APPEND &lt;span class="nv">initrd&lt;/span>&lt;span class="o">=&lt;/span>boot/ubuntu_12.10/initrd.img &lt;span class="nv">boot&lt;/span>&lt;span class="o">=&lt;/span>casper quiet noacpi only-ubiquity splash &lt;span class="nv">netboot&lt;/span>&lt;span class="o">=&lt;/span>nfs &lt;span class="nv">nfsroot&lt;/span>&lt;span class="o">=&lt;/span>192.168.0.2:/tftpboot/iso/ubuntu_12.10 -
TEXT HELP
ubuntu 12.10 boot
ENDTEXT
&lt;span class="c1">## 启动Clonezilla&lt;/span>
LABEL &lt;span class="s2">&amp;#34;clonezilla&amp;#34;&lt;/span>
MENU LABEL ^2. Clonezilla
KERNEL boot/clonezilla/vmlinuz
APPEND &lt;span class="nv">initrd&lt;/span>&lt;span class="o">=&lt;/span>boot/clonezilla/initrd.img &lt;span class="nv">boot&lt;/span>&lt;span class="o">=&lt;/span>live &lt;span class="nv">union&lt;/span>&lt;span class="o">=&lt;/span>aufs noswap &lt;span class="nv">edd&lt;/span>&lt;span class="o">=&lt;/span>on nomodeset noprompt config only-ubiquity nosplash &lt;span class="nv">ip&lt;/span>&lt;span class="o">=&lt;/span>frommedia &lt;span class="nv">video&lt;/span>&lt;span class="o">=&lt;/span>uvesafb:mode_option&lt;span class="o">=&lt;/span>1024x768-32 &lt;span class="nv">ocs_live_keymap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;NONE&amp;#34;&lt;/span> &lt;span class="nv">ocs_live_batch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;no&amp;#34;&lt;/span> &lt;span class="nv">ocs_lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zh_CN.UTF-8&amp;#34;&lt;/span> &lt;span class="nv">fetch&lt;/span>&lt;span class="o">=&lt;/span>tftp://192.168.0.2/iso/clonezilla/clonezilla.squashfs -
TEXT HELP
clonezilla boot
ENDTEXT
&lt;span class="c1">## 启动Redhat&lt;/span>
LABEL &lt;span class="s2">&amp;#34;RedHat&amp;#34;&lt;/span>
MENU LABEL ^3. RedHat
KERNEL boot/redhat/vmlinuz
APPEND &lt;span class="nv">initrd&lt;/span>&lt;span class="o">=&lt;/span>boot/redhat/initrd.img &lt;span class="nv">ramdisk_size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">8196&lt;/span> &lt;span class="nv">ks&lt;/span>&lt;span class="o">=&lt;/span>nfs:192.168.0.2:/tftpboot/iso/redhat/ks.cfg
TEXT HELP
redhat boot
ENDTEXT
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>hexo</title><link>https://justice.bj.cn/post/70.tool/hexo/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/hexo/</guid><description>&lt;h1 id="hexo">hexo&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Hexo 是一个快速、简洁且高效的博客markdown博客框架。&lt;/p>
&lt;h2 id="基本用法">基本用法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">$ npm install -g hexo-cli &lt;span class="c1">#安装&lt;/span>
$ hexo new &lt;span class="c1">#&lt;/span>
$ hexo genarate &lt;span class="c1">#&lt;/span>
$ hexo server &lt;span class="c1">#&lt;/span>
$ hexo deploy &lt;span class="c1">#部署&lt;/span>
$ npm install hexo-deployer-git --save &lt;span class="c1">#git部署插件&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>JQ</title><link>https://justice.bj.cn/post/70.tool/jq/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/jq/</guid><description>&lt;h1 id="jq">JQ&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="用法">用法&lt;/h2>
&lt;h3 id="select">select&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;ID&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;Name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ltptest&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;Owner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ltptest&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;DpReplicaNum&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;MpReplicaNum&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;Status&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;Capacity&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;RwDpCnt&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">25&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;MpCnt&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;DpCnt&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">25&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;AvailSpaceAllocated&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;Tokens&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;bHRwdGVzdCMxIzE1NzY4MjU1MzY=&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;TokenType&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;Value&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;bHRwdGVzdCMxIzE1NzY4MjU1MzY=&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;VolName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ltptest&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;bHRwdGVzdCMyIzE1NzY4MjU1MzY=&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;TokenType&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;Value&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;bHRwdGVzdCMyIzE1NzY4MjU1MzY=&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;VolName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ltptest&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ jq &lt;span class="s1">&amp;#39;.Tokens | .[] | select( .TokenType == 2) | .Value&amp;#39;&lt;/span>
&lt;span class="s2">&amp;#34;bHRwdGVzdCMyIzE1NzY4MjU1MzY=&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>获取chubaofs docker image下载量&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl &lt;span class="s2">&amp;#34;https://hub.docker.com/v2/repositories/chubaofs/&amp;#34;&lt;/span> 2&amp;gt;/dev/null &lt;span class="p">|&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>    jq &lt;span class="s1">&amp;#39;reduce (.results | .[] | .pull_count ) as $item (0; .+$item) &amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="jq命令使用文档">jq命令使用文档&lt;/h1>
&lt;h6 id="heading">&lt;/h6>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># 打开https://github.com/stedolan/jq/releases&lt;/span>
&lt;span class="c1"># 找到Source code (tar.gz),点击并下载&lt;/span>
tar xvf 压缩包
&lt;span class="nb">cd&lt;/span> jq目录./configure &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> sudo
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h6 id="httpsgithubcomguonaihongrecycle_binblobmastershelljqmde6a0bce5bc8fe58c96json格式化json">&lt;a href="https://github.com/guonaihong/recycle_bin/blob/master/shell/jq.md#%E6%A0%BC%E5%BC%8F%E5%8C%96json">&lt;/a>格式化json&lt;/h6>
&lt;p>不加任何选项和表达式的作用是格式化json字符串,比较实用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;key&amp;#34;:&amp;#34;va&amp;#34;, &amp;#34;key2&amp;#34;:&amp;#34;val2&amp;#34;}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="c1">#格式化echo里面的json&lt;/span>
cat t.txt&lt;span class="p">|&lt;/span>jq &lt;span class="c1">#格式化t.txt里面的json&lt;/span>
jq . t.txt &lt;span class="c1">#jq打开文件,并格式化t.txt里面的json&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h6 id="httpsgithubcomguonaihongrecycle_binblobmastershelljqmde6a0b9e68daekeye69fa5e8afa2jsone79a84e580bc根据key查询json的值">&lt;a href="https://github.com/guonaihong/recycle_bin/blob/master/shell/jq.md#%E6%A0%B9%E6%8D%AEkey%E6%9F%A5%E8%AF%A2json%E7%9A%84%E5%80%BC">&lt;/a>根据key查询json的值&lt;/h6>
&lt;p>根据key查询json可以写成.key,如果key是特殊的字符,比如全数字需要用引号括起来: .&amp;ldquo;key&amp;rdquo;&lt;br>
.foo.bar的形式类似于shell的管道符|,.foo.bar等于.foo|.bar&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;foo&amp;#34;: 42, &amp;#34;bar&amp;#34;: &amp;#34;less interesting data&amp;#34;}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.foo&amp;#39;&lt;/span>
&lt;span class="m">42&lt;/span> &lt;span class="c1">#如果key对应的val存在则输出val&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;notfoo&amp;#34;: true, &amp;#34;alsonotfoo&amp;#34;: false}&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.foo&amp;#39;&lt;/span>
null &lt;span class="c1">#如果key对应的val值不存在则输出null&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;111&amp;#34;:&amp;#34;222&amp;#34;, &amp;#34;333&amp;#34;:&amp;#34;444&amp;#34;}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.[&amp;#34;111&amp;#34;]&amp;#39;&lt;/span>
&lt;span class="s2">&amp;#34;222&amp;#34;&lt;/span> &lt;span class="c1">#输出&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;111&amp;#34;:&amp;#34;222&amp;#34;, &amp;#34;333&amp;#34;:&amp;#34;444&amp;#34;}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.&amp;#34;111&amp;#34;&amp;#39;&lt;/span> &lt;span class="c1">#效果和上面一条一样&lt;/span>
&lt;span class="s2">&amp;#34;222&amp;#34;&lt;/span> &lt;span class="c1">#输出&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="查询json里面的数组">查询json里面的数组&lt;/h5>
&lt;p>.[index]查询一个值,需要注意的是,json的数组是第0开始计数的, .[index]查询第index+1个元素&lt;br>
.[2]就是查询第3个元素&lt;/p>
&lt;p>.[start:end]选取一个范围内的数组,包含start不包含end&lt;br>
.[2:10]就是查询下标为2(包含下标2)&lt;/p>
&lt;p>.[:end]选取end之前的元素(不包含end索引)
.[:2]输出就是下标为0,1的元素&lt;/p>
&lt;p>.[-index:] index前面有-号,表示倒过来的第index个,这时候的-index:是从-1开始计数的后面的元素
.[-2:]就是倒数第1到2元素的所有元素&lt;/p>
&lt;p>.[-index] 倒数第index个元素
到下标到10(不包含10)范围内的数组&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#查询数组第1个元素&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[{&amp;#34;name&amp;#34;:&amp;#34;JSON&amp;#34;, &amp;#34;good&amp;#34;:true}, {&amp;#34;name&amp;#34;:&amp;#34;XML&amp;#34;, &amp;#34;good&amp;#34;:false}]&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.[0]&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;JSON&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;good&amp;#34;&lt;/span>: &lt;span class="nb">true&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">#查询第3个元素,需要注意的是数组的下标是从0开始算的&lt;/span>
&lt;span class="s1">&amp;#39;[{&amp;#34;name&amp;#34;:&amp;#34;JSON&amp;#34;, &amp;#34;good&amp;#34;:true}, {&amp;#34;name&amp;#34;:&amp;#34;XML&amp;#34;, &amp;#34;good&amp;#34;:false}]&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.[2]&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
null
&lt;span class="c1">#查询下标为2到3之间的元素&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;c&amp;#34;,&amp;#34;d&amp;#34;,&amp;#34;e&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.[2:4]&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;c&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;d&amp;#34;&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;span class="c1">#查询下标为3之前的元素&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;c&amp;#34;,&amp;#34;d&amp;#34;,&amp;#34;e&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.[:3]&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;c&amp;#34;&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;span class="c1">#查询倒数第1-2个元素&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;c&amp;#34;,&amp;#34;d&amp;#34;,&amp;#34;e&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.[-2:]&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;d&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;e&amp;#34;&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;span class="c1">#查询倒数第2个元素&lt;/span>
jq &lt;span class="s1">&amp;#39;.[-2]&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="s2">&amp;#34;d&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>######查询对象的所有值.[]
可以使用.[]语法,查询json对象的所有值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#拿到key的val以及key2的val2&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;key&amp;#34;:&amp;#34;val&amp;#34;, &amp;#34;key2&amp;#34;:&amp;#34;val2&amp;#34;}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.[]&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="s2">&amp;#34;val&amp;#34;&lt;/span>
&lt;span class="s2">&amp;#34;val2&amp;#34;&lt;/span>
&lt;span class="c1">#拿到key的val(一个object),key2的val&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;key&amp;#34;:{&amp;#34;key3&amp;#34;:&amp;#34;val3&amp;#34;, &amp;#34;key4&amp;#34;:&amp;#34;val4&amp;#34;}, &amp;#34;key2&amp;#34;:&amp;#34;val2&amp;#34;}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.[]&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;key3&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;val3&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;key4&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;val4&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="s2">&amp;#34;val2&amp;#34;&lt;/span>
&lt;span class="c1">#拿到json数组里面的值&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39; [{&amp;#34;name&amp;#34;:&amp;#34;JSON&amp;#34;, &amp;#34;good&amp;#34;:true}, {&amp;#34;name&amp;#34;:&amp;#34;XML&amp;#34;, &amp;#34;good&amp;#34;:false}]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.[]&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;JSON&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;good&amp;#34;&lt;/span>: &lt;span class="nb">true&lt;/span>
&lt;span class="o">}{&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;XML&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;good&amp;#34;&lt;/span>: &lt;span class="nb">false&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>######多条件使用,分开
如果要写多个过滤条件使用,号,现输出,左边的结果在输出,右边的结果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;foo&amp;#34;: 42, &amp;#34;bar&amp;#34;: &amp;#34;something else&amp;#34;, &amp;#34;baz&amp;#34;: true}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.foo,.bar,.baz&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="m">42&lt;/span>
&lt;span class="s2">&amp;#34;something else&amp;#34;&lt;/span>
&lt;span class="nb">true&lt;/span>
&lt;span class="c1">#.key和[]表达式可以组合使用&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;user&amp;#34;:&amp;#34;stedolan&amp;#34;, &amp;#34;projects&amp;#34;: [&amp;#34;jq&amp;#34;, &amp;#34;wikiflow&amp;#34;]}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.user,.projects[]&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="s2">&amp;#34;stedolan&amp;#34;&lt;/span>
&lt;span class="s2">&amp;#34;jq&amp;#34;&lt;/span>
&lt;span class="s2">&amp;#34;wikiflow&amp;#34;&lt;/span>
&lt;span class="c1">#可以使用,一次查询数组里的多个元素&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;c&amp;#34;,&amp;#34;d&amp;#34;,&amp;#34;e&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.[4,3]&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="s2">&amp;#34;e&amp;#34;&lt;/span>
&lt;span class="s2">&amp;#34;d&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>######管道符号|
shell里面的|是连接各个shell命令的通道,像大管道套小管道,过滤器就是命令,可以很方便的过滤出想要的数据来&lt;br>
jq里面也有|符号&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#可以先用.[]拿到值,再使用|(管道)拿到name&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[{&amp;#34;name&amp;#34;:&amp;#34;JSON&amp;#34;, &amp;#34;good&amp;#34;:true}, {&amp;#34;name&amp;#34;:&amp;#34;XML&amp;#34;, &amp;#34;good&amp;#34;:false}]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.[] | .name&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="s2">&amp;#34;JSON&amp;#34;&lt;/span>
&lt;span class="s2">&amp;#34;XML&amp;#34;&lt;/span>
&lt;span class="c1">######把查询结果包装成一个数组(array)--使用[]符号&lt;/span>
&lt;span class="o">[]&lt;/span>在jq里面表示数组,可以现查询再使用&lt;span class="o">[]&lt;/span>把查询结果包装成数组
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[{&amp;#34;name&amp;#34;:&amp;#34;JSON&amp;#34;, &amp;#34;good&amp;#34;:true}, {&amp;#34;name&amp;#34;:&amp;#34;XML&amp;#34;, &amp;#34;good&amp;#34;:false}]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;[.[]|.name]&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;JSON&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;XML&amp;#34;&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>######把查询结果包装成一个对象(object)&amp;ndash;使用{}符号&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#修改json的key名&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;user&amp;#34;:&amp;#34;stedolan&amp;#34;,&amp;#34;titles&amp;#34;:[&amp;#34;JQ Primer&amp;#34;, &amp;#34;More JQ&amp;#34;]}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;{user1: .user, title2: .titles}&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;user1&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;stedolan&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;title2&amp;#34;&lt;/span>: &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;JQ Primer&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;More JQ&amp;#34;&lt;/span>
&lt;span class="o">]}&lt;/span>
&lt;span class="c1">#如果其中一个表达式产生多个结果,那最终生成的json也有多个结果&lt;/span>
&lt;span class="c1">#其中.titles[]会查询出两个结果,那最终生成的json也是两个&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;user&amp;#34;:&amp;#34;stedolan&amp;#34;,&amp;#34;titles&amp;#34;:[&amp;#34;JQ Primer&amp;#34;, &amp;#34;More JQ&amp;#34;]}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;{user, titles:.titles[]}&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;user&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;stedolan&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;titles&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;JQ Primer&amp;#34;&lt;/span>
&lt;span class="o">}{&lt;/span> &lt;span class="s2">&amp;#34;user&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;stedolan&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;titles&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;More JQ&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">#如果想使用原来的json某个key的值作新的json的key,可以使用(.key)语法&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;user&amp;#34;:&amp;#34;stedolan&amp;#34;,&amp;#34;titles&amp;#34;:[&amp;#34;JQ Primer&amp;#34;, &amp;#34;More JQ&amp;#34;]}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span> jq &lt;span class="s1">&amp;#39;{(.user): .titles}&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;stedolan&amp;#34;&lt;/span>: &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;JQ Primer&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;More JQ&amp;#34;&lt;/span>
&lt;span class="o">]}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>#####运算符
jq的运算符会根据参数(数字,数组,字符串)的不同,有不同的形为,jq不会做隐式类型转换,如果把string添加到一个object&lt;br>
就会报错&lt;/p>
&lt;p>######加法+运算符
+运算符需要两个相同输入,并把结果加在一起&lt;/p>
&lt;ul>
&lt;li>数字常规的加法&lt;/li>
&lt;li>array拼接成一个大的数组&lt;/li>
&lt;li>string拼接成一个大的string&lt;/li>
&lt;li>object也是合并操作,如果有两个key相同的object新的覆盖旧的&lt;/li>
&lt;/ul>
&lt;p>null可以与任何值相加,返回另外一个值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#数字相加&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;a&amp;#34;:1}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.a + 1&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="m">2&lt;/span>
&lt;span class="c1">#array相加&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;a&amp;#34;: [1,2], &amp;#34;b&amp;#34;: [3,4]}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.a+.b&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span> 1, 2, 3, 4&lt;span class="o">]&lt;/span>
&lt;span class="c1">#string相加&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;a&amp;#34;: &amp;#34;hello&amp;#34;, &amp;#34;b&amp;#34;: &amp;#34;world&amp;#34;}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.a+.b&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="s2">&amp;#34;helloworld&amp;#34;&lt;/span>
&lt;span class="c1">#object相加&lt;/span>
&lt;span class="nb">echo&lt;/span> null&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;{a: 42} + {b: 2} + {c: 3} + {a: 1}&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span>: 1, &lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span>: 2, &lt;span class="s2">&amp;#34;c&amp;#34;&lt;/span>: 3&lt;span class="o">}&lt;/span>
&lt;span class="c1">#有空值相加的情况&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;a&amp;#34;: 1}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;null +.a&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="m">1&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.a+1&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="m">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>######减法-运算符
-号运算符用于数字,用于数组,会在第一个数组删除第二个数组中出现的所有项&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#数字相减&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;a&amp;#34;:4}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;4 - .a&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="m">0&lt;/span>
&lt;span class="c1">#数组相减&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39; [&amp;#34;xml&amp;#34;, &amp;#34;yaml&amp;#34;, &amp;#34;json&amp;#34;]&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;. - [&amp;#34;xml&amp;#34;, &amp;#34;json&amp;#34;]&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;yaml&amp;#34;&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>######乘法*除法运算符&lt;/p>
&lt;ul>
&lt;li>
&lt;p>/只能用在数字类型上&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">echo&lt;/span> 5&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;10 / . * 3&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="m">6&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>######length
length用于不同类型值的长度&lt;/p>
&lt;ul>
&lt;li>string:返回字符串中字符的个数,如果有中文返回中文的个数&lt;/li>
&lt;li>array: 返回数组元素的个数&lt;/li>
&lt;li>object: 返回键-值对的个数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[&amp;#34;郭&amp;#34;, [1,2], &amp;#34;string&amp;#34;, {&amp;#34;a&amp;#34;:2}, null]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span> jq &lt;span class="s1">&amp;#39;.[]|length&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="m">12610&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>######keys and keys_unsorted
keys可以返回json键名数组,其中keys与keys_unsorted区别是keys返回的数组是排过序的&lt;br>
keys_unsorted返回的数组是不排序&lt;br>
当json的顶层元素是数组时,keys返回数组的下标&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;abc&amp;#34;: 1, &amp;#34;abcd&amp;#34;: 2, &amp;#34;Foo&amp;#34;: 3}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;keys&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;Foo&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;abcd&amp;#34;&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;abc&amp;#34;: 1, &amp;#34;abcd&amp;#34;: 2, &amp;#34;Foo&amp;#34;: 3}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;keys_unsorted&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;abcd&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;Foo&amp;#34;&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[&amp;#34;aaa&amp;#34;, &amp;#34;bbb&amp;#34;, &amp;#34;ccc&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;keys&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span> 0, 1, 2&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>######has(key)
返回输入的json对象是否有给定的key,或者数组存在指定的索引,有返回true,没有返回false&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[{&amp;#34;foo&amp;#34;:123, &amp;#34;abc&amp;#34;:456}, {&amp;#34;cde&amp;#34;:789, &amp;#34;fgh&amp;#34;:111}]&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;map(has(&amp;#34;foo&amp;#34;))&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span> true, &lt;span class="nb">false&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[[0,1], [&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;c&amp;#34;]]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;map(has(2))&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span> false, &lt;span class="nb">true&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>######in
检查输入的键是否在对象中,或者输入的索引存在数组中,有返回true,没有返回false,本质上是反过来的has&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[&amp;#34;foo&amp;#34;, &amp;#34;123&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.[]|in({&amp;#34;foo&amp;#34;:123})&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="nb">true&lt;/span>
&lt;span class="nb">false&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[2, 3]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;.[]|in([&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;])&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="nb">true&lt;/span>
&lt;span class="nb">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>######path&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#TODO&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>######del
del用来删除json 对象的键和值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#删除一个键值对&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;aaa&amp;#34;: 111, &amp;#34;bbb&amp;#34;: 222, &amp;#34;ccc&amp;#34;:33}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;del(.aaa)&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;bbb&amp;#34;&lt;/span>: 222, &lt;span class="s2">&amp;#34;ccc&amp;#34;&lt;/span>: 33&lt;span class="o">}&lt;/span>
&lt;span class="c1">#删除多个键值对&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;aaa&amp;#34;: 111, &amp;#34;bbb&amp;#34;: 222, &amp;#34;ccc&amp;#34;:33}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;del(.[&amp;#34;aaa&amp;#34;, &amp;#34;bbb&amp;#34;])&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;ccc&amp;#34;&lt;/span>: 33&lt;span class="o">}&lt;/span>
&lt;span class="c1">#根据下标删除数组元素&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[111, 222, 33]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;del(.[1,2])&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span> 111&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h6 id="to_entries-from_entries-with_entries">to_entries, from_entries, with_entries&lt;/h6>
&lt;ul>
&lt;li>to_entries 把json对象转成键-值对数值&lt;/li>
&lt;li>from_entries 键-值对数组转成json对象&lt;/li>
&lt;li>with_entries 是 to_entries | map(foo) | from_entries 的缩写&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;aa&amp;#34;:11, &amp;#34;bb&amp;#34;:22}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;to_entries&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;key&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;aa&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;value&amp;#34;&lt;/span>: &lt;span class="m">11&lt;/span> &lt;span class="o">}&lt;/span>, &lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;key&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;bb&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;value&amp;#34;&lt;/span>: &lt;span class="m">22&lt;/span> &lt;span class="o">}]&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[{&amp;#34;key&amp;#34; : &amp;#34;aa&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;11&amp;#34;}, {&amp;#34;key&amp;#34;:&amp;#34;bb&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;22&amp;#34;}]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;from_entries&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;aa&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;11&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;bb&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;22&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">#修改key名&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;{&amp;#34;a&amp;#34;: 1, &amp;#34;b&amp;#34;: 2}&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;with_entries(.key |= &amp;#34;student_&amp;#34; + .)&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">{&lt;/span> &lt;span class="s2">&amp;#34;student_a&amp;#34;&lt;/span>: 1, &lt;span class="s2">&amp;#34;student_b&amp;#34;&lt;/span>: 2&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h6 id="select-1">select&lt;/h6>
&lt;p>select 是过滤器,里面可以写表达式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#选择数组里面的偶数&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="o">[&lt;/span>1,2,3,4,5,6&lt;span class="o">]&lt;/span>&lt;span class="p">|&lt;/span>jq &lt;span class="s1">&amp;#39;map(select(.%2 == 0))&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">[&lt;/span>
2,
4,
&lt;span class="m">6&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[{&amp;#34;id&amp;#34;: &amp;#34;first&amp;#34;, &amp;#34;val&amp;#34;: 1}, {&amp;#34;id&amp;#34;: &amp;#34;second&amp;#34;, &amp;#34;val&amp;#34;: 2}]&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span> jq &lt;span class="s1">&amp;#39;.[]|select(.id==&amp;#34;first&amp;#34;)&amp;#39;&lt;/span>
&lt;span class="c1">#输出&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;first&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;val&amp;#34;&lt;/span>: &lt;span class="m">1&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://gist.github.com/olih/f7437fb6962fb3ee9fe95bda8d2c8fa4">https://gist.github.com/olih/f7437fb6962fb3ee9fe95bda8d2c8fa4&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Jupyter Notebook</title><link>https://justice.bj.cn/post/70.tool/jupyter-notebook/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/jupyter-notebook/</guid><description>&lt;h1 id="jupyter-notebook">Jupyter Notebook&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Jupyter是 &lt;strong>Ju&lt;/strong>lia、&lt;strong>Pyt&lt;/strong>hon 以及 &lt;strong>R&lt;/strong> 语言的组合，是一个开源的Web应用程序，允许用户创建和共享包含代码、方程式、可视化和文本的文档。&lt;/p>
&lt;h2 id="特点">特点&lt;/h2>
&lt;ul>
&lt;li>可选择语言：支持超过40种编程语言，包括Python、R、Julia、Scala等。&lt;/li>
&lt;li>分享笔记本：可以使用电子邮件、Dropbox、GitHub和Jupyter Notebook Viewer与他人共享。&lt;/li>
&lt;li>交互式输出：代码可以生成丰富的交互式输出，包括HTML、图像、视频、LaTeX等等。&lt;/li>
&lt;li>大数据整合：通过Python、R、Scala编程语言使用Apache Spark等大数据框架工具。支持使用pandas、scikit-learn、ggplot2、TensorFlow来探索同一份数据。&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2></description></item><item><title>Kademlia算法</title><link>https://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</guid><description>&lt;h1 id="kademlia算法">Kademlia算法&lt;/h1>
&lt;hr>
&lt;p>Kademlia算法是一种分布式存储及路由的算法。&lt;/p>
&lt;p>什么是分布式存储？试想一下，一所1000人的学校，现在学校突然决定拆掉图书馆（不设立中心化的服务器），将图书馆里所有的书都分发到每位学生手上（所有的文件分散存储在各个节点上）。即是所有的学生，共同组成了一个分布式的图书馆。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-795f3af7231108b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800/format/webp" alt="">&lt;/p>
&lt;p>由中心图书馆到分布式图书馆&lt;/p>
&lt;p>在这种场景下，有几个关键的问题需要回答。&lt;/p>
&lt;h3 id="1关键问题">1）关键问题&lt;/h3>
&lt;ol>
&lt;li>每个同学手上都分配哪些书。即如何分配存储内容到各个节点，新增/删除内容如何处理。&lt;/li>
&lt;li>当你需要找到一本书，譬如《分布式算法》的时候，如何知道哪位同学手上有《分布式算法》（对1000个人挨个问一遍，“你有没有《分布式算法》？”，显然是个不经济的做法），又如何联系上这位同学。即一个节点如果想获取某个特定的文件，如何找到存储文件的节点/地址/路径。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-8b12f9959fa3144f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/358/format/webp" alt="">&lt;/p>
&lt;p>如何寻找需要的书籍？&lt;/p>
&lt;p>接下来，让我们来看看Kademlia算法如何巧妙地解决这些问题。&lt;/p>
&lt;h3 id="2节点的要素">2）节点的要素&lt;/h3>
&lt;p>首先我们来看看每个同学（节点）都有哪些属性：&lt;/p>
&lt;ul>
&lt;li>学号（Node ID，2进制，160位）&lt;/li>
&lt;li>手机号码（节点的IP地址及端口）&lt;/li>
&lt;/ul>
&lt;p>每个同学会维护以下内容：&lt;/p>
&lt;ul>
&lt;li>从图书馆分发下来的书本（被分配到需要存储的内容），每本书当然都有书名和书本内容（内容以&amp;lt;key, value&amp;gt;对的形式存储，可以理解为文件名和文件内容）；&lt;/li>
&lt;li>一个通讯录，包含一小部分其他同学的学号和手机号，通讯录按学号分层（一个路由表，称为“k-bucket”，按Node ID分层，记录有限个数的其他节点的ID和IP地址及端口）。&lt;/li>
&lt;/ul>
&lt;p>根据上面那个类比，可以看看这个表格：&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-ac0338100a380c61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/601/format/webp" alt="">&lt;/p>
&lt;p>概念对比&lt;/p>
&lt;p>&lt;em>（Hash的概念解释，可参见&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E5%2593%2588%25E5%25B8%258C%25E7%25AE%2597%25E6%25B3%2595%2F4960188">百度百科-哈希算法&lt;/a>）&lt;/em>&lt;/p>
&lt;p>&lt;em>关于为什么不是每个同学都有全量通讯录（每个节点都维护全量路由信息）：其一，分布式系统中节点的进入和退出是相当频繁的，每次有变动时都全网广播通讯录更新，通讯量会很大；其二，一旦任意一个同学被坏人绑架了（节点被黑客攻破），则坏人马上就拥有了所有人的手机号码，这并不安全。&lt;/em>&lt;/p>
&lt;h3 id="3文件的存储及查找">3）文件的存储及查找&lt;/h3>
&lt;p>原来收藏在图书馆里，按索引号码得整整齐齐的书，以一种什么样的方式分发到同学们手里呢？大致的原则，包括：1）书本能够比较均衡地分布在同学们的手里，不会出现部分同学手里书特别多、而大部分同学连一本书都没有的情况；2）同学想找一本特定的书的时候，能够一种相对简单的索引方式找到这本书。&lt;br>
Kademlia作了下面这种安排：&lt;br>
假设《分布式算法》这本书的书名的hash值是 &lt;em>00010000&lt;/em>，那么这本书就会被要求存在学号为&lt;em>00010000&lt;/em>的同学手上。（这要求hash算法的值域与node ID的值域一致。Kademlia的Node ID是160位2进制。这里的示例对Node ID进行了简略）&lt;br>
但还得考虑到会有同学缺勤。万一&lt;em>00010000&lt;/em>今天没来上学（节点没有上线或彻底退出网络），那《分布式算法》这本书岂不是谁都拿不到了？那算法要求这本书不能只存在一个同学手上，而是被要求同时存储在学号最接近&lt;em>00010000&lt;/em>的k位同学手上，即&lt;em>00010001&lt;/em>、&lt;em>00010010&lt;/em>、&lt;em>00010011&lt;/em>…等同学手上都会有这本书。&lt;/p>
&lt;p>同样地，当你需要找《分布式算法》这本书时，将书名hash一下，得到 &lt;em>00010000&lt;/em>，这个便是索书号，你就知道该找哪（几）位同学了。剩下的问题，就是找到这（几）位同学的手机号。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-54dfcb165392638e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/628/format/webp" alt="">&lt;/p>
&lt;p>书籍搜索定位&lt;/p>
&lt;h3 id="4节点的异或距离">4）节点的异或距离&lt;/h3>
&lt;p>由于你手上只有一部分同学的通讯录，你很可能并没有&lt;em>00010000&lt;/em>的手机号（IP地址）。那如何联系上目标同学呢？&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-41d8839bc652fea1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/338/format/webp" alt="">&lt;/p>
&lt;p>通讯录上并没有目标同学的情况&lt;/p>
&lt;p>一个可行的思路就是在你的通讯录里找到一位拥有目标同学的联系方式的同学。前面提到，每位同学手上的通讯录都是按距离分层的。算法的设计是，如果一个同学离你越近，你手上的通讯录里存有ta的手机号码的概率越大。而算法的核心的思路就可以是：当你知道目标同学Z与你之间的距离，你可以在你的通讯录上先找到一个你认为与同学Z最相近的同学B，请同学B再进一步去查找同学Z的手机号。&lt;/p>
&lt;p>上文提到的距离，是学号（Node ID）之间的异或距离(XOR distance）。异或是针对yes/no或者二进制的运算.&lt;/p>
&lt;blockquote>
&lt;p>异或的运算法则为：0⊕0=0，1⊕0=1，0⊕1=1，1⊕1=0（同为0，异为1）&lt;br>
&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E5%25BC%2582%25E6%2588%2596%2F10993677%3Ffr%3Daladdin">百度百科-异或&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>举2个例子：&lt;br>
&lt;em>01010000&lt;/em>与&lt;em>01010010&lt;/em>距离（即是2个ID的异或值）为&lt;em>00000010&lt;/em>（换算为十进制即为2）；&lt;br>
&lt;em>01000000&lt;/em>与&lt;em>00000001&lt;/em>距离为&lt;em>01000001&lt;/em>（换算为十进制即为26+1，即65）；&lt;br>
如此类推。&lt;/p>
&lt;p>那通讯录是如何按距离分层呢？下面的示例会告诉你，按异或距离分层，基本上可以理解为按位数分层。设想以下情景：&lt;br>
以&lt;em>0000110&lt;/em>为基础节点，如果一个节点的ID，前面所有位数都与它相同，只有最后1位不同，这样的节点只有1个——&lt;em>0000111&lt;/em>，与基础节点的异或值为&lt;em>0000001&lt;/em>，即距离为1；对于&lt;em>0000110&lt;/em>而言，这样的节点归为**“k-bucket 1”**；&lt;br>
如果一个节点的ID，前面所有位数相同，从倒数第2位开始不同，这样的节点只有2个：*0000101*、*0000100*，与基础节点的异或值为*0000011*和*0000010*，即距离范围为3和2；对于*0000110*而言，这样的节点归为**“k-bucket 2”**；&lt;br>
……&lt;br>
如果一个节点的ID，前面所有位数相同，从倒数第n位开始不同，这样的节点只有2(i-1)个，与基础节点的距离范围为[2(i-1), 2i）；对于*0000110*而言，这样的节点归为**“k-bucket i”**；&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-6bdd6e96a80d0780.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/430/format/webp" alt="">&lt;/p>
&lt;p>按位数区分k-bucket&lt;/p>
&lt;p>对上面描述的另一种理解方式：如果将整个网络的节点梳理为一个按节点ID排列的二叉树，树最末端的每个叶子便是一个节点，则下图就比较直观的展现出，节点之间的距离的关系。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-c12846900b0525db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/913/format/webp" alt="">&lt;/p>
&lt;p>k-bucket示意图：右下角的黑色实心圆，为基础节点（按wiki百科的配图修改）&lt;/p>
&lt;p>回到我们的类比。每个同学只维护一部分的通讯录，这个通讯录按照距离分层（可以理解为按学号与自己的学号从第几位开始不同而分层），即k-bucket1, k-bucket 2, k-bucket 3…虽然每个k-bucket中实际存在的同学人数逐渐增多，但每个同学在它自己的每个k-bucket中只记录k位同学的手机号（k个节点的地址与端口，这里的k是一个可调节的常量参数）。&lt;br>
由于学号（节点的ID）有160位，所以每个同学的通讯录中共分160层（节点共有160个k-bucket）。整个网络最多可以容纳2^160个同学（节点），但是每个同学（节点）最多只维护160 * k 行通讯录（其他节点的地址与端口）。&lt;/p>
&lt;h3 id="5节点定位">5）节点定位&lt;/h3>
&lt;p>我们现在来阐述一个完整的索书流程。&lt;/p>
&lt;p>A同学（学号&lt;em>00000110&lt;/em>）想找《分布式算法》，A首先需要计算书名的哈希值，hash(《分布式算法》) = &lt;em>00010000&lt;/em>。那么A就知道ta需要找到&lt;em>00010000&lt;/em>号同学（命名为Z同学）或学号与Z邻近的同学。&lt;br>
Z的学号&lt;em>00010000&lt;/em>与自己的异或距离为 &lt;em>00010110&lt;/em>，距离范围在[24, 25)，所以这个Z同学可能在k-bucket 5中（或者说，Z同学的学号与A同学的学号从第5位开始不同，所以Z同学可能在k-bucket 5中）。&lt;br>
然后A同学看看自己的k-bucket 5有没有Z同学：&lt;/p>
&lt;ul>
&lt;li>如果有，那就直接联系Z同学要书；&lt;/li>
&lt;li>如果没有，在k-bucket 5里随便找一个B同学（注意任意B同学，它的学号第5位肯定与Z相同，即它与Z同学的距离会小于24，相当于比Z、A之间的距离缩短了一半以上），请求B同学在它自己的通讯录里按同样的查找方式找一下Z同学：&lt;br>
&amp;ndash; 如果B知道Z同学，那就把Z同学的手机号（IP Address）告诉A；&lt;br>
&amp;ndash; 如果B也不知道Z同学，那B按同样的搜索方法，可以在自己的通讯录里找到一个离Z更近的C同学（Z、C之间距离小于23），把C同学推荐给A；A同学请求C同学进行下一步查找。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-1396765e4e0afb12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/866/format/webp" alt="">&lt;/p>
&lt;p>查询方式示意&lt;/p>
&lt;p>Kademlia的这种查询机制，有点像是将一张纸不断地对折来收缩搜索范围，保证对于任意n个学生，最多只需要查询log2(n)次，即可找到获得目标同学的联系方式（即在对于任意一个有[2(n−1), 2n)个节点的网络，最多只需要n步搜索即可找到目标节点）。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-1143169c8318a2ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/666/format/webp" alt="">&lt;/p>
&lt;p>每次搜索都将距离至少收缩一半&lt;/p>
&lt;p>以上便是Kademlia算法的基本原理。以下再简要介绍协议中的技术细节。&lt;/p>
&lt;h3 id="6算法的三个参数keyspacek和α">6）算法的三个参数：keyspace，k和α&lt;/h3>
&lt;ul>
&lt;li>keyspace&lt;br>
&amp;ndash; 即ID有多少位&lt;br>
&amp;ndash; 决定每个节点的通讯录有几层&lt;/li>
&lt;li>k&lt;br>
&amp;ndash; 每个一层k-bucket里装k个node的信息，即&amp;lt;node ID, IP Adress, port&amp;gt;&lt;br>
&amp;ndash; 每次查找node时，返回k个node的信息&lt;br>
&amp;ndash; 对于某个特定的data，离其key最近的k个节点被会要求存储这个data&lt;/li>
&lt;li>α&lt;br>
&amp;ndash; 每次向其他node请求查找某个node时，会向α个node发出请求&lt;/li>
&lt;/ul>
&lt;h3 id="7节点的指令">7）节点的指令&lt;/h3>
&lt;p>Kademlia算法中，每个节点只有4个指令&lt;/p>
&lt;ul>
&lt;li>PING&lt;br>
&amp;ndash; 测试一个节点是否在线&lt;/li>
&lt;li>STORE&lt;br>
&amp;ndash; 要求一个节点存储一份数据&lt;/li>
&lt;li>FIND_NODE&lt;br>
&amp;ndash; 根据节点ID查找一个节点&lt;/li>
&lt;li>FIND_VALUE&lt;br>
&amp;ndash; 根据KEY查找一个数据，实则上跟FIND_NODE非常类似&lt;/li>
&lt;/ul>
&lt;h3 id="8k-bucket的维护及更新机制">8)k-bucket的维护及更新机制&lt;/h3>
&lt;ul>
&lt;li>每个bucket里的节点都按最后一次接触的时间倒序排列&lt;/li>
&lt;li>每次执行四个指令中的任意一个都会触发更新&lt;/li>
&lt;li>当一个节点与自己接触时，检查它是否在K-bucket中&lt;br>
&amp;ndash; 如果在，那么将它挪到k-bucket列表的最底（最新）&lt;br>
&amp;ndash; 如果不在，PING一下列表最上面（最旧）的一个节点&lt;br>
&amp;ndash; a) 如果PING通了，将旧节点挪到列表最底，并丢弃新节点&lt;br>
&amp;ndash; b) 如果PING不通，删除旧节点，并将新节点加入列表&lt;/li>
&lt;/ul>
&lt;p>该机制保证了任意节点加入和离开都不影响整体网络。&lt;/p>
&lt;h3 id="9总结">9）总结&lt;/h3>
&lt;p>Kademlia是分布式哈希表（Distributed Hash Table, DHT）的一种。而DHT是一类去中心化的分布式系统。在这类系统中，每个节点（node）分别维护一部分的存储内容以及其他节点的路由/地址，使得网络中任何参与者（即节点）发生变更（进入/退出）时，对整个网络造成的影响最小。DHT可以用于构建更复杂的应用，包括分布式文件系统、点对点技术文件分享系统、合作的网页高速缓存、域名系统以及实时通信等。&lt;br>
Kademlia算法在2002年由Petar Maymounkov 和 David Mazières 所设计，以异或距离来对哈希表进行分层是其特点。Kademlia后来被eMule、BitTorrent等P2P软件采用作为底层算法。Kademlia可以作为信息安全技术的奠基之一。&lt;br>
Kademlia的优点在于：&lt;/p>
&lt;ul>
&lt;li>对于任意一个有[ 2(n−1) ,2𝑛)个节点的网络，最多只需要n步搜索即可找到目标节点；&lt;/li>
&lt;li>K-bucket的更新机制一定程度上保持了网络的活性和安全性。&lt;/li>
&lt;/ul>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDistributed_hash_table">wiki百科-分布式哈希表&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FKademlia">wiki百科-Kademlia&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://links.jianshu.com/go?to=http%3A%2F%2Fpdos.csail.mit.edu%2F%7Epetar%2Fpapers%2Fmaymounkov-kademlia-lncs.pdf">Kademlia: A Peer-to-peer information system based on the XOR Metric&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000000351815">王子亭的Kademlia笔记&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>LLVM</title><link>https://justice.bj.cn/post/70.tool/llvm/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/llvm/</guid><description>&lt;h1 id="llvm">LLVM&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>To use the bundled libc++ please add the following LDFLAGS:
LDFLAGS=&amp;quot;-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib&amp;quot;&lt;/p>
&lt;p>llvm is keg-only, which means it was not symlinked into /usr/local,
because macOS already provides this software and installing another version in
parallel can cause all kinds of trouble.&lt;/p>
&lt;p>If you need to have llvm first in your PATH run:
echo &amp;lsquo;export PATH=&amp;quot;/usr/local/opt/llvm/bin:$PATH&amp;quot;&amp;rsquo; &amp;raquo; ~/.zshrc&lt;/p>
&lt;p>For compilers to find llvm you may need to set:
export LDFLAGS=&amp;quot;-L/usr/local/opt/llvm/lib&amp;quot;
export CPPFLAGS=&amp;quot;-I/usr/local/opt/llvm/include&amp;quot;&lt;/p></description></item></channel></rss>