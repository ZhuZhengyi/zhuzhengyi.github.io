<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Justice的小站</title><link>https://justice.bj.cn/</link><description>Recent content on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 14 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>Justice's Blog</title><link>https://justice.bj.cn/homepage/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/about/</guid><description>&lt;h2 id="self-introduction">Self Introduction&lt;/h2>
&lt;p>Cras ex dui, tristique a libero eget, consectetur semper ligula. Nunc augue arcu, malesuada a nisi et, molestie finibus metus. Sed lacus odio, ultricies a nisl vitae, sollicitudin tempor ipsum. Vivamus quis feugiat arcu. Sed mi nunc, efficitur quis tellus vitae, posuere mattis metus. Phasellus in mattis dui. Nullam blandit, augue non ullamcorper dapibus, lacus dui molestie massa, in iaculis purus lectus eu lectus. Duis hendrerit lacinia tellus, sit amet feugiat dolor placerat id. Aenean ac velit massa. Vivamus feugiat dui at magna viverra, ut dictum nunc rutrum. Duis eget sapien finibus, lobortis orci id, vestibulum tellus. Maecenas lobortis urna libero, quis fermentum lectus lobortis nec. Nullam laoreet volutpat libero, ac mattis magna ullamcorper quis. Duis eget ipsum eu nisi mattis cursus et vitae turpis.&lt;/p>
&lt;p>Aliquam pretium diam eget leo feugiat finibus. Donec malesuada commodo ipsum. Aenean a massa in lacus venenatis vestibulum. Duis vel sem quis elit iaculis consectetur et quis dolor. Morbi eu ipsum hendrerit, malesuada ante sed, dapibus est. Suspendisse feugiat nulla ut gravida convallis. Phasellus id massa posuere, rhoncus justo ut, porttitor dolor. Nulla ultrices malesuada egestas. Nunc fermentum tincidunt sem ac vulputate. Donec mollis sollicitudin justo eget varius. Donec ornare velit et felis blandit, id molestie sapien lobortis. Morbi eget tristique justo. Mauris posuere, nibh eu laoreet ultricies, ligula erat iaculis sapien, vel dapibus lacus libero ut diam. Etiam viverra ante felis, et scelerisque nunc pellentesque vitae. Praesent feugiat dictum molestie.&lt;/p>
&lt;h2 id="details">Details&lt;/h2>
&lt;p>Nunc pellentesque vitae:&lt;/p>
&lt;ul>
&lt;li>Morbi accumsan nibh efficitur diam molestie, non dignissim diam facilisis.&lt;/li>
&lt;li>Donec dignissim leo in mollis faucibus.&lt;/li>
&lt;li>Donec blandit lacus a pellentesque fermentum.&lt;/li>
&lt;/ul>
&lt;p>Donec mollis sollicitudin:&lt;/p>
&lt;ul>
&lt;li>Nunc dictum purus ornare purus consectetur, eu pellentesque massa ullamcorper.&lt;/li>
&lt;li>Aliquam eu leo vitae justo aliquam tincidunt.&lt;/li>
&lt;li>Fusce non massa id augue interdum feugiat sed et nulla.&lt;/li>
&lt;li>Vivamus molestie augue in tristique laoreet.&lt;/li>
&lt;/ul></description></item><item><title>Pages</title><link>https://justice.bj.cn/homepage/pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/pages/</guid><description/></item><item><title>Experiences</title><link>https://justice.bj.cn/homepage/experiences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/experiences/</guid><description/></item><item><title>Vintage</title><link>https://justice.bj.cn/homepage/vintage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/vintage/</guid><description/></item><item><title>Blank</title><link>https://justice.bj.cn/homepage/blank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/blank/</guid><description>
&lt;div style="text-align:center">
&lt;p>Write anything you like here!&lt;/p>
&lt;/div></description></item><item><title>Hive</title><link>https://justice.bj.cn/post/30.architech/hive/</link><pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/hive/</guid><description>&lt;h1 id="hive">Hive&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Hive是建立在 Hadoop 上的数据仓库基础构架。它提供了一系列的工具，可以用来进行数据提取转化加载（ETL），这是一种可以存储、查询和分析存储在 Hadoop 中的大规模数据的机制。&lt;/p>
&lt;p>Hive 定义了简单的类 SQL 查询语言，称为 HQL，它允许熟悉 SQL 的用户查询数据。同时，这个语言也允许熟悉 MapReduce 开发者的开发自定义的 mapper 和 reducer 来处理内建的 mapper 和 reducer 无法完成的复杂的分析工作。&lt;/p>
&lt;h2 id="特性">特性&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Hive 的存储结构包括数据库、表、视图、分区和表数据等。数据库，表，分区等等都对应 HDFS 上的一个目录。表数据对应 HDFS 对应目录下的文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hive 中所有的数据都存储在 HDFS 中，没有专门的数据存储格式，因为 Hive 是读模式（Schema On Read），可支持 TextFile，SequenceFile，RCFile 或者自定义格式等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>只需要在创建表的时候告诉 Hive 数据中的列分隔符和行分隔符，Hive 就可以解析数据&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Hive 的默认列分隔符：控制符 Ctrl + A，\x01&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hive 的默认行分隔符：换行符 \n&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Hive 中包含以下数据模型：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>database：在 HDFS 中表现为${hive.metastore.warehouse.dir}目录下一个文件夹&lt;/p>
&lt;/li>
&lt;li>
&lt;p>table：在 HDFS 中表现所属 database 目录下一个文件夹&lt;/p>
&lt;/li>
&lt;li>
&lt;p>external table：与 table 类似，不过其数据存放位置可以指定任意 HDFS 目录路径&lt;/p>
&lt;/li>
&lt;li>
&lt;p>partition：在 HDFS 中表现为 table 目录下的子目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>bucket：在 HDFS 中表现为同一个表目录或者分区目录下根据某个字段的值进行 hash 散列之后的多个文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>view：与传统数据库类似，只读，基于基本表创建&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Hive 的元数据存储在 RDBMS 中，除元数据外的其它所有数据都基于 HDFS 存储。默认情况下，Hive 元数据保存在内嵌的 Derby 数据库中，只能允许一个会话连接，只适合简单的测试。实际生产环境中不适用，为了支持多用户会话，则需要一个独立的元数据库，使用MySQL 作为元数据库，Hive 内部对 MySQL 提供了很好的支持。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>内部表和外部表的区别：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>删除内部表，删除表元数据和数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除外部表，删除元数据，不删除数据&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/13-10-01-21-image-20190430154313090.png" alt="image-20190430154313090">&lt;/p>
&lt;h3 id="服务端">服务端&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Driver&lt;/strong>：包含Complier, Optimizer, Executor。作用是将HiveQL进行解析、编译优化，生成执行计划，然后调用底层的mapreduce计算框架。&lt;/li>
&lt;li>&lt;strong>Metastore&lt;/strong>：元数据服务组件，这个组件存储hive的元数据，hive的元数据存储在关系数据库里，hive支持的关系数据库有derby、mysql。元数据对于hive十分重要，因此hive支持把metastore服务独立出来，安装到远程的服务器集群里，从而解耦hive服务和metastore服务，保证hive运行的健壮性。&lt;/li>
&lt;li>&lt;strong>Thrift服务&lt;/strong>：提供rpc接口服务。&lt;/li>
&lt;/ul>
&lt;h3 id="客户端">客户端&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>CLI&lt;/strong>：command line interface，命令行接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Thrift客户端&lt;/strong>：上面的架构图里没有写上Thrift客户端，但是hive架构的许多客户端接口是建立在thrift客户端之上，包括JDBC和ODBC接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>WEBGUI&lt;/strong>：hive客户端提供了一种通过网页的方式访问hive所提供的服务。这个接口对应hive的hwi组件（hive web interface），使用前要启动hwi服务。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="执行流程">执行流程&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/13-10-01-28-image-20190430153754789.png" alt="image-20190430153754789">&lt;/p>
&lt;h2 id="部署">部署&lt;/h2>
&lt;h3 id="依赖">依赖&lt;/h3>
&lt;ul>
&lt;li>jdk&lt;/li>
&lt;li>hadoop&lt;/li>
&lt;li>mysql&lt;/li>
&lt;li>hive&lt;/li>
&lt;/ul>
&lt;h3 id="组件">组件&lt;/h3>
&lt;ul>
&lt;li>metastore： 元数据存储服务&lt;/li>
&lt;li>hive：hive 命令行接口工具；&lt;/li>
&lt;li>Hiveserver2：hive thrift server&lt;/li>
&lt;li>beeline：hive thrift client&lt;/li>
&lt;li>HCatalog：&lt;/li>
&lt;li>WebHCat&lt;/li>
&lt;/ul>
&lt;p>Core-site.xml&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>fs.defaultFS&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;value&amp;gt;&lt;/span>file:///mnt/cfs/hive01&lt;span class="nt">&amp;lt;/value&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>hadoop.tmp.dir&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;value&amp;gt;&lt;/span>/export/Data/Hadoop/temp&lt;span class="nt">&amp;lt;/value&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="metastore">metastore&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>内嵌模式：&lt;/p>
&lt;p>hive-site.xml&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>javax.jdo.option.ConnectionURL&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;value&amp;gt;&lt;/span>jdbc:derby:;databaseName=metastore_db;create=true&lt;span class="nt">&amp;lt;/value&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>javax.jdo.option.ConnectionDriverName&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;value&amp;gt;&lt;/span>org.apache.derby.jdbc.EmbeddedDriver&lt;span class="nt">&amp;lt;/value&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>hive.metastore.local&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;value&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/value&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>hive.metastore.schema.verification&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;value&amp;gt;&lt;/span>false&lt;span class="nt">&amp;lt;/value&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>hive.metastore.warehouse.dir&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;value&amp;gt;&lt;/span>/user/hive/warehouse&lt;span class="nt">&amp;lt;/value&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>datanucleus.schema.autoCreateAll&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;value&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/value&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>本地模式：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>远程模式：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="启动">启动&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">//初始化元数据表
bin/schematool -initSchema -dbType mysql --verbose
//启动metastore
nohup bin/hive --service metastore -v &amp;gt; /export/Logs/hive/hive-metastore.out &lt;span class="p">&amp;amp;&lt;/span>
//启动
nohup bin/hive --service hiveserver2 &amp;gt; /export/Logs/hive/hiveserver2.out &lt;span class="p">&amp;amp;&lt;/span>
//打开调试
bin/hive --hiveconf hive.root.logger&lt;span class="o">=&lt;/span>INFO,cosole
//执行脚本
bin/hive -f script.q
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="cli实例操作">CLI实例操作&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ht_big_data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">row&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">delimited&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fields&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">terminated&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;\t&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ht_big_data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;name1&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ht_big_data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;name2&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ht_big_data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;name3&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">load&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">local&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">inpath&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;/mnt/cfs/hive01/a.txt&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">overwrite&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ht_big_data&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ht_big_data&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">records&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">year&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">quality&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">row&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">delimited&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fields&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">terminated&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;\t&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">load&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">data&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">local&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">inpath&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;/mnt/cfs/hive02/records/sample.txt&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">overwrite&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">records&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">records&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">year&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">quality&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2019&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">year&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">records&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">group&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">year&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">year&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">year&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">records&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">group&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">year&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">cat sample.txt
1990 23 2
1990 21 2
1990 25 2
1991 32 2
1991 34 2
1991 24 2
1992 42 2
1992 32 2
1992 25 2
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="hive-on-spark">hive on spark&lt;/h2>
&lt;ul>
&lt;li>配置文件&lt;/li>
&lt;/ul>
&lt;p>$HIVE_HOME/conf/hive-site.xml&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml"> &lt;span class="nt">&amp;lt;property&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>hive.execution.engine&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;value&amp;gt;&lt;/span>spark&lt;span class="nt">&amp;lt;/value&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/property&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>$HIVE_HOME/conf/spark-defaults.conf&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">spark.home /export/App/spark-2.3.0
spark.master spark://10.194.138.200:7077
&lt;span class="c1">#spark.master yarn&lt;/span>
&lt;span class="c1">#spark.submit.deployMode cluster&lt;/span>
spark.eventLog.enabled &lt;span class="nb">true&lt;/span>
spark.eventLog.dir /mnt/cfs/spark/log
spark.yarn.stagingDir /mnt/cfs/spark/staging
spark.executor.memory 512m
spark.serializer org.apache.spark.serializer.KryoSerializer
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">在 bin/hive 中，输入：
set hive.execution.engine=spark;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="hive-for-hbase">hive for hbase&lt;/h2>
&lt;p>Hive中执行如下操作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hbase&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">zookeeper&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">quorum&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">zkNode1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">zkNode2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">zkNode3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">zookeeper&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">znode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">=/&lt;/span>&lt;span class="n">hbase&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">ADD&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">jar&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">usr&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">local&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">apache&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">hive&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">bin&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">hive&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">hbase&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">handler&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">jar&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">EXTERNAL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lxw1234&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">rowkey&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">f1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">STRING&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">STRING&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">f2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">STRING&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">STRING&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">f3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">STRING&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">STRING&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">STORED&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;org.apache.hadoop.hive.hbase.HBaseStorageHandler&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SERDEPROPERTIES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hbase.columns.mapping&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;:key,f1:,f2:,f3:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">TBLPROPERTIES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hbase.table.name&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;lxw1234&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lxw1234&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>原理&lt;/li>
&lt;/ul>
&lt;p>Hive与HBase利用两者本身对外的API来实现整合，主要是靠HBaseStorageHandler进行通信，利用 HBaseStorageHandler，Hive可以获取到Hive表对应的HBase表名，列簇以及列，InputFormat和 OutputFormat类，创建和删除HBase表等。
Hive访问HBase中表数据，实质上是通过MapReduce读取HBase表数据，其实现是在MR中，使用HiveHBaseTableInputFormat完成对HBase表的切分，获取RecordReader对象来读取数据。
对HBase表的切分原则是一个Region切分成一个Split,即表中有多少个Regions,MR中就有多少个Map；
读取HBase表数据都是通过构建Scanner，对表进行全表扫描，如果有过滤条件，则转化为Filter。当过滤条件为rowkey时，则转化为对rowkey的过滤；
Scanner通过RPC调用RegionServer的next()来获取数据；&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://juejin.cn/post/6844904005756272654">Hive 基础教程 - 掘金&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>MySQL 日志</title><link>https://justice.bj.cn/post/30.architech/mysql/mysql%E6%97%A5%E5%BF%97/</link><pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/mysql/mysql%E6%97%A5%E5%BF%97/</guid><description>&lt;h1 id="mysql-日志">MySQL 日志&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>MySQL innodb引擎中有6种日志：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>重做日志（redo log）:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>回滚日志（undo log）:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>二进制日志（binlog）：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>错误日志（errorlog）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>慢查询日志（slow query log）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一般查询日志（general log）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>中继日志（relay log）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="日志">日志&lt;/h2>
&lt;h3 id="wal">WAL&lt;/h3>
&lt;ul>
&lt;li>预写日志；&lt;/li>
&lt;/ul>
&lt;h3 id="redo-log">redo log&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>物理日志；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用于恢复事务；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在事务开始时产生；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="undo-log">undo log&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>逻辑日志；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用于&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="bin-log">bin log&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>用于复制；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.jianshu.com/p/d829df873332">MySQL innoDB——redo log/undo log - 简书&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Spark 基础知识</title><link>https://justice.bj.cn/post/30.architech/spark/spark%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/spark/spark%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>&lt;h1 id="spark-基础知识">Spark 基础知识&lt;/h1>
&lt;hr>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Spark 是一种快速、通用、可扩展的大数据分析引擎，2009 年诞生于加州大学伯克利分校 AMPLab，2010 年开源，2013 年 6 月成为 Apache 孵化项目，2014 年 2 月成为 Apache 顶级项目。项目是用 Scala 进行编写。&lt;/p>
&lt;p>Spark 是基于内存计算的大数据并行计算框架。除了扩展了广泛使用的 MapReduce 计算模型，而且高效地支持更多计算模式，包括交互式查询和流处理。&lt;/p>
&lt;hr>
&lt;h2 id="特性">特性&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>基于内存，高性能；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同时支持流批两种方式；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>拥有多种算子；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多语言支持；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>Spark 架构采用了分布式计算中的 Master-Slave 模型，支持Yarn、Mesos、K8S进行资源调度，主要组件包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Driver Node：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Cluster Manager：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Worker Node：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../../img/2020-01-15-14-49-53-image.png" alt="">&lt;/p>
&lt;hr>
&lt;h2 id="核心概念">核心概念&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>RDD&lt;/strong>: Resilent Distributed DataSets，弹性数据集。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../../img/2020-01-10-14-09-49-image.png" alt="stage">&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>
&lt;h2 id="stage">Stage&lt;/h2>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../../img/2020-01-09-11-25-11-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>窄依赖&lt;/strong>(Narrow Depency):&lt;/p>
&lt;ul>
&lt;li>父RDD的每个分区只被一个子RDD分区使用，子RDD分区通常只对应常数个父RDD分区&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>child RDD 只依赖于 parent RDD(s)固定数量的 partition；&lt;/li>
&lt;li>窄依赖的函数有：&lt;br>
map, filter, union, join(父RDD是hash-partitioned ), mapPartitions, mapValues&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>宽依赖&lt;/strong>（Wide Depency）:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>父RDD的每个分区都有可能被多个子RDD分区使用，子RDD分区通常对应父RDD所有分区；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>child RDD 的每一个 partition 都依赖于 parent RDD(s)所有 partition；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>宽依赖往往对应着shuffle操作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>宽依赖的函数有：&lt;br>
groupByKey, join(父RDD不是hash-partitioned ), partitionBy&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>stage: 根据宽依赖和窄依赖，&lt;/p>
&lt;ul>
&lt;li>整个 job 会划分为不同的 stage, 像是用篱笆隔开了一样， 如果中间有宽依赖，就用刀切一刀， 前后划分为两个 stage；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>stage 分为两种， ResultStage 和 ShuffleMapStage，&lt;/p>
&lt;ul>
&lt;li>
&lt;p>spark job 中产生结果最后一个阶段生成的 stage 是 ResultStage ，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>中间阶段生成的 stage 是 ShuffleMapStage&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/03-19-40-05-2022-01-03-19-40-00-image.png" alt="窄依赖">&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/03-19-41-20-2022-01-03-19-41-12-image.png" alt="宽依赖">&lt;/p>
&lt;p>&lt;img src="../../img/2020-01-09-11-29-09-image.png" alt="">&lt;/p>
&lt;hr>
&lt;h2 id="partition">Partition&lt;/h2>
&lt;p>Spark RDD 是一种分布式的数据集，由于数据量很大，因此要它被切分并存储在各个结点的分区当中。从而当我们对 RDD 进行操作时，实际上是对每个分区中的数据并行操作。&lt;/p>
&lt;hr>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/parent-absent-son/p/9969767.html">spark内核源码深度剖析（1）&amp;ndash;Spark内核架构深度剖析 - 上海小墨子 - 博客园&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Zeus- Uber的分布式Spark Shuffle Service</title><link>https://justice.bj.cn/post/30.architech/spark/zeus-uber-remote-spark-shuffle-service/</link><pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/spark/zeus-uber-remote-spark-shuffle-service/</guid><description>&lt;h1 id="zeus-uber的分布式spark-shuffle-service">Zeus: Uber的分布式Spark Shuffle Service&lt;/h1>
&lt;hr>
&lt;h2 id="特性">特性&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>垂直扩展&lt;/p>
&lt;ul>
&lt;li>
&lt;p>独立节点运行；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>去中心化存储，节点无状态；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>解决网络延迟&lt;/p>
&lt;ul>
&lt;li>
&lt;p>降低服务响应等待时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>流数据&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>性能优化&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://justice.bj.cn/Users/zhuzhengyi/Documents/gitnote/img/2020-07-02-17-06-40-image.png" alt="">&lt;/p>
&lt;hr>
&lt;h2 id="优化点">优化点&lt;/h2>
&lt;h3 id="横向扩展">横向扩展&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>shuffle 服务独立，可在不同应用间共享；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>shuffle 节点无状态；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>shuffle 节点可根据需求横向扩展；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="分布式shuffle服务">分布式shuffle服务&lt;/h3>
&lt;p>&lt;img src="https://justice.bj.cn/Users/zhuzhengyi/Documents/gitnote/img/2020-07-02-10-50-42-image.png" alt="">&lt;/p>
&lt;hr>
&lt;h3 id="磁盘文件直接读写">磁盘文件直接读写&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>直接写入文件，无应用层的缓存；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>零拷贝&lt;/p>
&lt;/li>
&lt;li>
&lt;p>顺序读写，无随机磁盘IO；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="实现方面优化">实现方面优化&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Netty：高性能异步服务框架&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2个线程组：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>group1接收网络连接；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>group2读取数据；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>彼此不阻塞；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>二进制网络协议&lt;/p>
&lt;ul>
&lt;li>编码和压缩更有效&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="客户端压缩">客户端压缩&lt;/h3>
&lt;ul>
&lt;li>shuffle client&lt;/li>
&lt;/ul></description></item><item><title>ChubaoFS DataNode</title><link>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-datanode/</link><pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-datanode/</guid><description>&lt;h1 id="chubaofs-datanode">ChubaoFS DataNode&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>chubaofs datanode 是chubaofs中的数据存储节点，用于将chubaofs中的文件数据存储在磁盘中；&lt;/p>
&lt;p>chubaofs 中的datanode数据以&lt;code>dataPartition&lt;/code>为单位进行管理。&lt;code>dataPartition&lt;/code>是datanode中进行数据管理的最高单位。&lt;/p>
&lt;h2 id="大文件小文件">大文件/小文件&lt;/h2>
&lt;p>文件系统中，每个文件存在元数据。由于磁盘和内存的性能成本差别，导致同一个文件系统对于大小文件的操作管理成本存在显著的差异。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>对于小文件，其单个文件数据量少，平均磁盘操作成本巨大，且元数据数量膨胀快；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大文件数据文件大，顺序读写可以获得较低的磁盘操作成本，取得较高的性能，元数据相对总数据量成本低；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>因此同一个文件系统对于大小文件很难使用同一策略来满足高效低费存储需求。&lt;/p>
&lt;p>chubaofs对于大小文件的读写使用了不同的策略，以此满足大小文件的不同需求。&lt;/p>
&lt;p>chubaofs中的小文件是客户端指定，小于一定大小（默认为：1MB）的文件。可以通过客户端配置参数&lt;code>tinySize&lt;/code>指定。&lt;/p>
&lt;p>每个客户端文件的前1MB字节内的文件都使用&lt;code>TinyExtent&lt;/code>进行存储管理，&lt;/p>
&lt;p>大于&lt;code>1MB&lt;/code>的文件部分使用&lt;code>NormalExtent&lt;/code>方式进行存储管理。&lt;/p>
&lt;h2 id="顺序写随机写">顺序写/随机写&lt;/h2>
&lt;p>ChubaoFS同时支持&lt;code>顺序写&lt;/code>和&lt;code>随机写&lt;/code>两种文件写入方式。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>顺序写&lt;/code>: 指写入的数据每次只往文件末尾追加;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>随机写&lt;/code>:指覆盖之前已经写过的文件内容;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>客户端在发起写请求时，根据写入数据的偏移是否已经存在，来决定使用那种写入方式；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>顺序写&lt;/code>: 使用主从方式进行副本间同步数据, 对应的存储引擎；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>随机写&lt;/code>:使用Raft协议来在数据副本间同步数据；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// sdk/data/stream/stream_writer.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Streamer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">offset&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">flags&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">total&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">requests&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">writeSize&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ExtentKey&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//已存在旧写入数据extentkey
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">writeSize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">doOverwrite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">direct&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//随机覆盖写
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">writeSize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">doWrite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">FileOffset&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">direct&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//顺序写
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="datanode目录结构">datanode目录结构&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>datanode配置文件中的&lt;code>disks&lt;/code>指定了每个datanode dp的存储磁盘；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个&lt;code>disk&lt;/code>中包含一系列&lt;code>datapartition_&amp;lt;id&amp;gt;_&amp;lt;dp_size&amp;gt;&lt;/code>和命名的目录，用于存储对应dp；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个&lt;code>disk&lt;/code>中还可能包含&lt;code>expired_dataparition_&amp;lt;id&amp;gt;_&amp;lt;dp_size&amp;gt;&lt;/code>的过期dp，这些dp是在master中不存在的；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">## datanode配置文件中的disks设置datanode管理的哪些disk； &lt;/span>
$ cat /opt/chubaofs/conf/datanode.json
...
&lt;span class="s2">&amp;#34;disks&amp;#34;&lt;/span>: &lt;span class="o">[&lt;/span>
&lt;span class="s2">&amp;#34;/data/hdfs10:159978629365&amp;#34;&lt;/span>, //磁盘目录：可用大小
&lt;span class="s2">&amp;#34;/data/hdfs12:159978629365&amp;#34;&lt;/span>,
...
&lt;span class="o">]&lt;/span>,
...
&lt;span class="c1">## 每个disk中包含一系列的dp目录&lt;/span>
$ ls -1 /data/hdfs10
...
datapartition_1001_128849018880 //正常dp，1001：dpid，128849018880：dpsize
datapartition_1003_128849018880
datapartition_1004_128849018880
...
expired_datapartition_2004_128849018880 //过期dp，在master中 不存在的dp
...
&lt;span class="c1">## 每个dp包含一系列的extent file 和dp 元数据&lt;/span>
$ tree /data/hdfs10/datapartition_1001_128849018880
├── &lt;span class="m">1&lt;/span>
├── &lt;span class="m">10&lt;/span>
├── &lt;span class="m">11&lt;/span>
├── &lt;span class="m">12&lt;/span>
├── &lt;span class="m">13&lt;/span>
├── &lt;span class="m">14&lt;/span>
├── &lt;span class="m">15&lt;/span>
├── &lt;span class="m">16&lt;/span>
...
├── &lt;span class="m">63&lt;/span>
├── &lt;span class="m">64&lt;/span>
├── &lt;span class="m">7&lt;/span>
├── &lt;span class="m">8&lt;/span>
├── &lt;span class="m">9&lt;/span> //extent file， 1-64, tiny extent file&lt;span class="p">;&lt;/span> 1000-, normal extent file
├── APPLY //dp apply index, 里面存储了当前dp.appliedID&lt;span class="o">(&lt;/span>raft rsm apply index&lt;span class="o">)&lt;/span>
├── .apply //apply index临时文件
├── EXTENT_CRC //extent file crc,
├── EXTENT_META //extent meta
├── .meta //临时META文件，
├── META //dp meta
├── NORMALEXTENT_DELETE //
├── TINYEXTENT_DELETE
└── wal_1001 //raft wal
├── 0000000000000001-0000000000000001.log
└── META
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="datapartition">DataPartition&lt;/h2>
&lt;h3 id="dp存储">dp存储&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>datanode配置文件中的&lt;code>disks&lt;/code>指定了每个datanode dp的存储磁盘；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个&lt;code>disk&lt;/code>中包含一系列&lt;code>datapartition_&amp;lt;id&amp;gt;_&amp;lt;dp_size&amp;gt;&lt;/code>和命名的目录，用于存储对应dp；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个&lt;code>disk&lt;/code>中还可能包含&lt;code>expired_dataparition_&amp;lt;id&amp;gt;_&amp;lt;dp_size&amp;gt;&lt;/code>的过期dp，这些dp是在master中不存在的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个dp&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="apply文件">APPLY文件:&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>保存当前dp的&lt;code>appliedID&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>dp的&lt;code>StartRaftLoggingSchedule()&lt;/code>协程周期性(10s)将dp的appliedID 写入到APPLY文件中(先写.apply,后move);&lt;/p>
&lt;/li>
&lt;li>
&lt;p>dp&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="meta文件">META文件&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>META保存了当前dp的配置元信息；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当dp配置信息改变时，由&lt;code>PersistMetadata()&lt;/code>将dp的配置元信息持久化到该文件中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>dp加载时(LoadDataPartition)，从META中读取dp元信息；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>写入时机包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>dp创建时；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>周期性truncate raft log时，lastTruncateID发生改变；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>raft 配置变更；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="err">//&lt;/span> &lt;span class="err">cat&lt;/span> &lt;span class="err">/data/hdfs&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="err">/datapartition_&lt;/span>&lt;span class="mi">1001&lt;/span>&lt;span class="err">_&lt;/span>&lt;span class="mi">128849018880&lt;/span>&lt;span class="err">/META&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;VolumeID&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;weqewqe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;PartitionID&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1001&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;PartitionSize&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">128849018880&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;CreateTime&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2021-11-29 18:26:21&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;Peers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;10.201.69.20:17310&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;10.201.74.33:17310&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;addr&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;10.201.76.21:17310&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;Hosts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;10.201.74.33:17310&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;10.201.69.20:17310&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;10.201.76.21:17310&amp;#34;&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;DataPartitionCreateType&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;LastTruncateID&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="extent_meta">EXTENT_META&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>metadataFp&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保存baseExtentID + PreAllocSpaceExtentID, 2个uint64, 总共16字节；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="extent_crc">EXTENT_CRC&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>verifyExtentFp: 保存dp所有normal extent crc;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>extent 加载时，根据extentID， 从EXTENT_CRC中加载对应extent 的crc到extent header 中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>normal extent写入时, 根据offset，size计算blockNo(128K为一个Block);&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果刚好是一个整block, 将crc写入&lt;code>EXTENT_CRC&lt;/code>文件; 否则规整化后，写0&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>每个datapartition存储目录中有一个&lt;code>EXTENT_CRC&lt;/code>文件，用于保存该datapartition 所有&lt;code>normal_extent&lt;/code>的crc校验头；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>EXTENT_CRC&lt;/code>文件由多个4KB大小的校验块组成，每个校验块存储一个&lt;code>normal_extent&lt;/code>的crc校验；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个4KB的校验块由1000个4B的CRC检验数据组成；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>datanode节点在加载normal_extent时，&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">|crc|
| 4 | 4 |... | 4 | 4 |... |
|--------------|--------------|---------------|
4k 4k
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="extent-file">extent file&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>TinyExtent file(id: 1-64):&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Normal Extent file:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>写请求追加写到extent文件末尾；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>normal extent file最大128MB, 写入前会对写入数据offset，size进行检查，超出128MB时无法写入；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="normalextent_delete">NORMALEXTENT_DELETE&lt;/h3>
&lt;ul>
&lt;li>
&lt;h3 id="tinyextent_delete">TINYEXTENT_DELETE&lt;/h3>
&lt;/li>
&lt;li>
&lt;p>记录本dp已经删除过的tiny extent 数据块, 在第一次调用fallocate puchhole后记录；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个被删除的tiny extent 数据块记录为24Byte，按&lt;code>&amp;lt;extentID&amp;gt;&amp;lt;offset&amp;gt;&amp;lt;size&amp;gt;&lt;/code>这个依次追加到该文件中；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h4 id="status">&lt;strong>Status&lt;/strong>&lt;/h4>
&lt;h2 id="extent">Extent&lt;/h2>
&lt;p>每个dp包含多个&lt;code>extent&lt;/code>, 每个extent 对应一个extent file，用于存储数据。&lt;/p>
&lt;p>extent file大小限制为128MB, 每个datapartition 包含的extent 个数不超过2000个(256GB)&lt;/p>
&lt;p>extent分为&lt;code>NormalExtent&lt;/code> 和 &lt;code>TinyExtent&lt;/code> 两种类型。&lt;/p>
&lt;h3 id="tinyextent">TinyExtent&lt;/h3>
&lt;ul>
&lt;li>id范围: [1, 64]&lt;/li>
&lt;li>在每个dp加载时，会通过&lt;/li>
&lt;/ul>
&lt;h3 id="normalextent">NormalExtent&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>id: [1000, +)&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="extentstore">ExtentStore&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>datanode 数据存储目录结构&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>EXTENT_META&lt;/code>: &lt;code>metadataFp&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>EXTENT_CRC&lt;/code>: &lt;code>verifyExtentFp&lt;/code>, 存储当前datapartition 的所有&lt;code>normal_extent&lt;/code>crc校验数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>TINYEXTENT_DELETE&lt;/code>: &lt;code>tinyExtentDeleteFp&lt;/code>,&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="tinyextent中的删除">TinyExtent中的删除&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>删除的extent数据段offset必须是4K对齐的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>先通过seek从文件中找到从offset开始的DATA起始位置newoffset；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过newoffset 和 offset之间的关系判断要删除的数据段是否已被删除；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>总共有以下4种情形：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>其中第2中的数据完全落在Hole中，其中数据已经删除过；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他情况都需要通过fallocate PunchHole来打洞删除从offset开始的size长的数据；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">// 情形1：待删除数据区offset+size完全落在DATA区域, newoffset == offset
data hole data hole
|-------------|xxxxxxxxx|--------------|xxxxxxxx|--------
^-----+
offset size
// 情形2：待删除数据区offset+size完全落在HOLE区域， newoffset - offset &amp;gt; size
data hole data hole
|-------------|xxxxxxxxx|--------------|xxxxxxxx|--------
^---+ ^
offset newoffset
// 情形3：待删除数据区offset+size部分落在DATA区域；
data hole data hole
|-------------|xxxxxxxxx|--------------|xxxxxxxx|--------
^----------+
offset size
// 情形4：待删除数据区offset+size部分落在DATA区域；
data hole data hole
|-------------|xxxxxxxxx|--------------|xxxxxxxx|--------
^-------------+
offset ^newoffset
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="加载datapartition">加载DataPartition&lt;/h2>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="datapartition数据修复">DataPartition数据修复&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>每个dp在新建和加载后会启动一个&lt;code>statusUpdateScheduler()&lt;/code>协程;&lt;/p>
&lt;ul>
&lt;li>
&lt;p>该协程每过1min会先更新一下dp状态(计算usage，更新status)，并交替启动repair任务(TinyExtent, NormalExtent交替分开)；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每5min会启动&lt;code>ReloadSnapshot()&lt;/code>任务；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Repair任务由&lt;code>LaunchRepair()&lt;/code>启动；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>先检查dp状态, &lt;code>Unavailable&lt;/code>状态的dp不参与修复；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后&lt;code>updateRelicas()&lt;/code>从master获取最新的副本ip；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>检查是否为leader，非leader退出，不启动 修复；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后由&lt;code>repair()&lt;/code>函数执行修复任务；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul></description></item><item><title>RocksDB</title><link>https://justice.bj.cn/post/30.architech/rocksdb/</link><pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/rocksdb/</guid><description>&lt;h1 id="rocksdb">RocksDB&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>RocksDB是Facebook基于LevelDB开发的一种嵌入式Key-value存储系统，该数据库能够充分利用闪存的性能，大大提升应用服务器的速度。
这是一个c++库,用于存储键和值,可以是任意大小的字节流。支持原子读和写。
RocksDB具有高度灵活的配置功能,可以通过配置使其运行在各种各样的生产环境,包括纯内存,Flash,硬盘或HDFS。它支持各种压缩算法，并提供了便捷的生产环境维护和调试工具。&lt;/p>
&lt;ul>
&lt;li>内存结构memtable&lt;/li>
&lt;li>类似事务日志角色的WAL文件：&lt;/li>
&lt;li>持久化的SST文件：&lt;/li>
&lt;/ul>
&lt;h2 id="写流程">写流程&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/25-09-36-56-image-20190905182525925.png" alt="image-20190905182525925">&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/25-09-37-55-image-20190905182625720.png" alt="image-20190905182625720">&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/pdev/p/11277784.html">RocksDB解析 - Pentium.Labs - 博客园&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>缓存算法之CLOCK算法</title><link>https://justice.bj.cn/post/13.algorithm/%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95%E4%B9%8Bclock%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95%E4%B9%8Bclock%E7%AE%97%E6%B3%95/</guid><description>&lt;h1 id="缓存算法之clock算法">缓存算法之CLOCK算法&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>CLOCK算法(时钟置换算法)是一种LRU算法的一个变种，将LRU的链表缓存环形数组；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>即逐出的页面都是最近没有使用的那个。我们给每一个页面设置一个标记位u，u=1表示最近有使用u=0则表示该页面最近没有被使用，应该被逐出。&lt;/p>
&lt;p>capacity=4, &lt;code>1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/13-16-23-59-2022-01-13-16-23-53-image.png" alt="">&lt;/p>
&lt;p>时钟置换算法的基础上可以做一个改进，就是增加一个标记为m，修改过标记为1，没有修改过则标记为0。那么u和m组成了一个元组，有四种可能，其被逐出的优先顺序也不一样：&lt;/p>
&lt;ul>
&lt;li>(u=0, m=0) 没有使用也没有修改，被逐出的优先级最高；&lt;/li>
&lt;li>(u=1, m=0) 使用过，但是没有修改过，优先级第二；&lt;/li>
&lt;li>(u=0, m=1) 没有使用过，但是修改过，优先级第三；&lt;/li>
&lt;li>(u=1, m=1) 使用过也修改过，优先级第四。&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/wingsless/p/12295246.html">页面置换算法之Clock算法 - wingsless - 博客园&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>B-Link-Tree</title><link>https://justice.bj.cn/post/12.data_struct/tree/b-link-tree/</link><pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/b-link-tree/</guid><description>&lt;h1 id="b-link-tree">B-Link-Tree&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>B-Link-Tree是B+ Tree的一个变种；优化了B+ Tree结构调整时的锁粒度，提升并发度，保持高并发下的性能稳定&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在中间节点增加字段link pointer，指向右兄弟节点，B-link Tree的名字也由此而来&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在每个节点内增加一个字段high key，在查询时如果目标值超过该节点的high key，就需要循着link pointer继续往后继节点查找&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="特点">特点&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>树结构调整时无需对全局或者局部子树加锁，进而有利于高并发下的性能稳定性；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个节点增加额外字段，link pointer和high key，但代价不大&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查询时需要额外判断，如果查询找超过high key，需要额外通过link pointer查询其后继节点，在数据库应用中可能会产生一次额外的IO，从而造成单次查找性能的下降，但由于树结构调整是一个频率较低的动作，而且查询后继节点的操作也只会发生在子节点调整和父节点调整过程之间，一旦父节点调整完毕，就可以通过父节点的指针直接查询了而无需再通过子节点的后继指针查找。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="结构">结构&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/10-14-25-15-2022-01-10-14-25-07-image.png" alt="">&lt;/p>
&lt;h2 id="节点分裂过程">节点分裂过程&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>B+ Tree在分裂时，为了保证一致性，需要使用全局锁住整棵树；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>B-Link-Tree在分裂时，执行一种自底向上的调整方法，每次只对当前调整节点加锁，当子节点调整完毕后再向上回溯调整父节点，直到所有调整完毕。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/10-14-28-05-2022-01-10-14-27-59-image.png" alt="">&lt;/p>
&lt;h2 id="应用">应用&lt;/h2>
&lt;ul>
&lt;li>在GreenPlum中就使用了B-link Tree来作为其存储引擎的索引。&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/372830975">https://zhuanlan.zhihu.com/p/372830975&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.csd.uoc.gr/~hy460/pdf/p650-lehman.pdf">https://www.csd.uoc.gr/~hy460/pdf/p650-lehman.pdf&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhmin.github.io/posts/blink-tree/">B+Tree 的并发优化 BLink-Tree | 学习笔记&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>FUSE简介</title><link>https://justice.bj.cn/post/40.storage/fuse/fuse/</link><pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/fuse/fuse/</guid><description>&lt;h1 id="fuse简介">FUSE简介&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>FUSE（Filesystem in Userspace）是linux kernel中一个在用户空间的文件系统框架，通过FUSE内核模块的支持，使用者只需要根据fuse提供的接口实现具体的文件操作就可以实现一个文件系统。&lt;/p>
&lt;p>fuse在linux kernel 2.6版本加入。&lt;/p>
&lt;h2 id="特点">特点&lt;/h2>
&lt;ul>
&lt;li>用户空间文件系统——类Unix OS的框架&lt;/li>
&lt;li>允许非超户在用户空间开发文件系统&lt;/li>
&lt;li>内核的API接口，使用fs-type操作&lt;/li>
&lt;li>支持多种编程语言（ c、c++、perl、java 等）&lt;/li>
&lt;li>普通用户也可以挂载FUSE&lt;/li>
&lt;li>不用重新编译内核&lt;/li>
&lt;/ul>
&lt;h2 id="fuse组成">FUSE组成&lt;/h2>
&lt;p>fuse主要由三部分组成：&lt;/p>
&lt;ul>
&lt;li>fuse内核模块：实现了和VFS的对接，实现了一个能被用户空间进程打开的设备，当VFS发来文件操作请求之后，将请求转化为特定格式，并通过设备传递给用户空间进程，用户空间进程在处理完请求后，将结果返回给fuse内核模块，内核模块再将其还原为Linux kernel需要的格式，并返回给VFS；&lt;/li>
&lt;li>fuse库libfuse：负责和内核空间通信，接收来自/dev/fuse的请求，并将其转化为一系列的函数调用，将结果写回到/dev/fuse；提供的函数可以对fuse文件系统进行挂载卸载、从linux内核读取请求以及发送响应到内核。libfuse提供了两个APIs：一个“high-level”同步API 和一个“low-level” 异步API 。这两种API 都从内核接收请求传递到主程序（fuse_main函数），主程序使用相应的回调函数进行处理。当使用high-level API时，回调函数使用文件名（file names）和路径（paths）工作，而不是索引节点inodes，回调函数返回时也就是一个请求处理的完成。使用low-level API 时，回调函数必须使用索引节点inode工作，响应发送必须显示的使用一套单独的API函数。&lt;/li>
&lt;li>挂载工具：实现对用户态文件系统的挂载&lt;/li>
&lt;/ul>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/10-12-17-08-2022-01-10-12-16-58-image.png" alt="">&lt;/p>
&lt;p>Fuse包含一个内核模块和一个用户空间守护进程（下文称fuse daemon）。内核模块加载时被注册成 Linux 虚拟文件系统的一个 fuse 文件系统驱动。此外，还注册了一个/dev/fuse的块设备。该块设备作为fuse daemon与内核通信的桥梁，fuse daemon通过/dev/fuse读取fuse request，处理后将reply写入/dev/fuse。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/09-15-29-23-2020-12-09-15-29-18-image.png" alt="">&lt;/p>
&lt;h2 id="实现">实现&lt;/h2>
&lt;p>编译过程中需要指定库文件：-lfuse -pthread&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_operations&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">getattr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">stat&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">readlink&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">mknod&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mode_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dev_t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">mkdir&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mode_t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">unlink&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">rmdir&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">symlink&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">rename&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">link&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">chmod&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mode_t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">chown&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uid_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gid_t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">truncate&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">off_t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">utime&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">utimbuf&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">open&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">off_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">off_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">statfs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">statvfs&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">flush&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fsync&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">setxattr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">getxattr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">listxattr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">removexattr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">opendir&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">readdir&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fuse_fill_dir_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">off_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">releasedir&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fsyncdir&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">init&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_conn_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">conn&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">destroy&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">access&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mode_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ftruncate&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">off_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fgetattr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">stat&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_file_info&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">cmd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">flock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">utimens&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">timespec&lt;/span> &lt;span class="n">tv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">bmap&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">blocksize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">uint64_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_operations&lt;/span> &lt;span class="n">memfs_oper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">getattr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">memfs_getattr&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">access&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">memfs_access&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">readdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">memfs_readdir&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">open&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">memfs_open&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">read&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">memfs_read&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">memfs_write&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">release&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">memfs_release&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">mknod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">memfs_mknod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">unlink&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">memfs_unlink&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">mkdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">memfs_mkdir&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">rmdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">memfs_rmdir&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">statfs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">memfs_statfs&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/stayneckwind2/article/details/82876330">Linux下使用fuse编写自己的文件系统_staticnetwind的专栏-CSDN博客&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/ty_laurel/article/details/51685193?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control">用户态文件系统fuse学习_ty_laurel的博客-CSDN博客_fuse文件系统&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/Linux-tech/p/14110335.html">FUSE文件系统 - 内核工匠 - 博客园&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Golang汇编</title><link>https://justice.bj.cn/post/14.language/golang/golang%E6%B1%87%E7%BC%96/</link><pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E6%B1%87%E7%BC%96/</guid><description>&lt;h1 id="golang汇编">Golang汇编&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>golang的汇编基于plan9汇编,是一个中间汇编方式，以忽略底层不同架构之间的一些差别；&lt;/p>
&lt;h3 id="寄存器">寄存器&lt;/h3>
&lt;p>各种伪计数器:&lt;/p>
&lt;ul>
&lt;li>FP: Frame pointer: arguments and locals.(指向当前栈帧)&lt;/li>
&lt;li>PC: Program counter: jumps and branches.(指向指令地址)&lt;/li>
&lt;li>SB(Static base pointer,全局静态基指针): global symbols.(指向全局符号表)&lt;/li>
&lt;li>SP: Stack pointer: top of stack.(指向当前栈顶部)&lt;/li>
&lt;/ul>
&lt;p>注意: 栈是向下整长 golang的汇编是调用者维护参数返回值跟返回地址。所以FP的值小于参数跟返回值。&lt;/p>
&lt;h4 id="常用操作指令">常用操作指令&lt;/h4>
&lt;p>格式：&amp;lt;指令&amp;gt; [源操作数] [目的操作数]&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>助记符&lt;/th>
&lt;th>指令种类&lt;/th>
&lt;th>用途&lt;/th>
&lt;th>示例&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>MOVQ&lt;/code>&lt;/td>
&lt;td>传送&lt;/td>
&lt;td>数据传送&lt;/td>
&lt;td>MOVQ 48, AX&lt;/td>
&lt;td>// 把 48 传送到 AX&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LEAQ&lt;/code>&lt;/td>
&lt;td>传送&lt;/td>
&lt;td>地址传送&lt;/td>
&lt;td>LEAQ AX, BX&lt;/td>
&lt;td>// 把 AX 有效地址传送到 BX&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>PUSHQ&lt;/code>&lt;/td>
&lt;td>传送&lt;/td>
&lt;td>栈压入&lt;/td>
&lt;td>PUSHQ AX&lt;/td>
&lt;td>// 将 AX 内容送入栈顶位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>POPQ&lt;/code>&lt;/td>
&lt;td>传送&lt;/td>
&lt;td>栈弹出&lt;/td>
&lt;td>POPQ AX&lt;/td>
&lt;td>// 弹出栈顶数据后修改栈顶指针&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ADDQ&lt;/code>&lt;/td>
&lt;td>运算&lt;/td>
&lt;td>相加并赋值&lt;/td>
&lt;td>ADDQ BX, AX&lt;/td>
&lt;td>// 等价于 AX+=BX&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SUBQ&lt;/code>&lt;/td>
&lt;td>运算&lt;/td>
&lt;td>相减并赋值&lt;/td>
&lt;td>SUBQ BX, AX&lt;/td>
&lt;td>// 等价于 AX-=BX&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CMPQ&lt;/code>&lt;/td>
&lt;td>运算&lt;/td>
&lt;td>比较大小&lt;/td>
&lt;td>CMPQ SI CX&lt;/td>
&lt;td>// 比较 SI 和 CX 的大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CALL&lt;/code>&lt;/td>
&lt;td>转移&lt;/td>
&lt;td>调用函数&lt;/td>
&lt;td>CALL runtime.printnl(SB)&lt;/td>
&lt;td>// 发起调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>JMP&lt;/code>&lt;/td>
&lt;td>转移&lt;/td>
&lt;td>无条件转移指令&lt;/td>
&lt;td>JMP 0x0185&lt;/td>
&lt;td>//无条件转至 0x0185 地址处&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>JLS&lt;/code>&lt;/td>
&lt;td>转移&lt;/td>
&lt;td>条件转移指令&lt;/td>
&lt;td>JLS 0x0185&lt;/td>
&lt;td>//左边小于右边，则跳到 0x0185&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="汇编示例">汇编示例&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">sum&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1">// 不设置该局部变量sum，add栈空间大小会是0
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">sum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">b&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">sum&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编译汇编&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ go tool compile -N -l -S main.go
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="err">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nf">.add&lt;/span> &lt;span class="nv">STEXT&lt;/span> &lt;span class="nv">nosplit&lt;/span> &lt;span class="nb">si&lt;/span>&lt;span class="nv">ze&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="mi">60&lt;/span> &lt;span class="nv">args&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="mh">0x18&lt;/span> &lt;span class="nv">locals&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="mh">0x10&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0000&lt;/span> &lt;span class="mi">00000&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">TEXT&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nv">NOSPLIT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">24&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0000&lt;/span> &lt;span class="mi">00000&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">SUBQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">SP&lt;/span> &lt;span class="c1">;;生成add栈空间&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0004&lt;/span> &lt;span class="mi">00004&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="nb">BP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0009&lt;/span> &lt;span class="mi">00009&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">LEAQ&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">BP&lt;/span>
&lt;span class="c1">;; ...omitted FUNCDATA stuff... &lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x000e&lt;/span> &lt;span class="mi">00014&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.~r2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;初始化返回值&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0017&lt;/span> &lt;span class="mi">00023&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;局部变量sum赋为0&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x001f&lt;/span> &lt;span class="mi">00031&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.a&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">AX&lt;/span> &lt;span class="c1">;;取参数a&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0024&lt;/span> &lt;span class="mi">00036&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">ADDQ&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.b&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">AX&lt;/span> &lt;span class="c1">;;等价于AX=a+b&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0029&lt;/span> &lt;span class="mi">00041&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="nb">AX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;赋值局部变量sum&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x002d&lt;/span> &lt;span class="mi">00045&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="nb">AX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.~r2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;设置返回值&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0032&lt;/span> &lt;span class="mi">00050&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">BP&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0037&lt;/span> &lt;span class="mi">00055&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">ADDQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">SP&lt;/span> &lt;span class="c1">;;清除add栈空间&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x003b&lt;/span> &lt;span class="mi">00059&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">RET&lt;/span>
&lt;span class="nf">......&lt;/span>
&lt;span class="err">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nf">.main&lt;/span> &lt;span class="nv">STEXT&lt;/span> &lt;span class="nb">si&lt;/span>&lt;span class="nv">ze&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="mi">107&lt;/span> &lt;span class="nv">args&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="mh">0x0&lt;/span> &lt;span class="nv">locals&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="mh">0x28&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0000&lt;/span> &lt;span class="mi">00000&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">TEXT&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">......&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x000f&lt;/span> &lt;span class="mi">00015&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">SUBQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">SP&lt;/span> &lt;span class="c1">;; 生成main栈空间&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0013&lt;/span> &lt;span class="mi">00019&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="nb">BP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0018&lt;/span> &lt;span class="mi">00024&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">LEAQ&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">BP&lt;/span>
&lt;span class="c1">;; ...omitted FUNCDATA stuff...&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x001d&lt;/span> &lt;span class="mi">00029&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;add入参：1&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0025&lt;/span> &lt;span class="mi">00037&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;add入参：2&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x002e&lt;/span> &lt;span class="mi">00046&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">CALL&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">.add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;;调用add函数&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0033&lt;/span> &lt;span class="mi">00051&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">AX&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0038&lt;/span> &lt;span class="mi">00056&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="nb">AX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">..autotmp_0&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x003d&lt;/span> &lt;span class="mi">00061&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">CALL&lt;/span> &lt;span class="nv">runtime.printlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0042&lt;/span> &lt;span class="mi">00066&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="nv">..autotmp_0&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">AX&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0047&lt;/span> &lt;span class="mi">00071&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="nb">AX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x004b&lt;/span> &lt;span class="mi">00075&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">CALL&lt;/span> &lt;span class="nv">runtime.printint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0050&lt;/span> &lt;span class="mi">00080&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">CALL&lt;/span> &lt;span class="nv">runtime.printnl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0055&lt;/span> &lt;span class="mi">00085&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">CALL&lt;/span> &lt;span class="nv">runtime.printunlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">SB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x005a&lt;/span> &lt;span class="mi">00090&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">MOVQ&lt;/span> &lt;span class="mi">32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">SP&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">BP&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x005f&lt;/span> &lt;span class="mi">00095&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">ADDQ&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">SP&lt;/span> &lt;span class="c1">;;清除main栈空间&lt;/span>
&lt;span class="err">0&lt;/span>&lt;span class="nf">x0063&lt;/span> &lt;span class="mi">00099&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">main.go&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">RET&lt;/span>
&lt;span class="nf">......&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/09-15-58-32-2022-01-09-15-58-27-image.png" alt="">&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://guidao.github.io/asm.html">golang汇编基础知识&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://chai2010.cn/advanced-go-programming-book/ch3-asm/ch3-02-arch.html">3.2 计算机结构 · Go语言高级编程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000039753236">汇编是深入理解 Go 的基础&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://go.dev/doc/asm">A Quick Guide to Go's Assembler - The Go Programming Language&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>MassTree</title><link>https://justice.bj.cn/post/12.data_struct/tree/masstree/</link><pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/masstree/</guid><description>&lt;h1 id="masstree">MassTree&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>masstree 来源于 2012 年发表的论文(&lt;a href="https://pdos.csail.mit.edu/papers/masstree:eurosys12.pdf">Cache craftiness for fast multicore key-value storage&lt;/a>)，&lt;strong>可以理解为 B+ Tree 和 Radix Tree 的混合体&lt;/strong>，即将键切分成多个部分，每个部分为一个节点；每个节点内部又是一个 B+ Tree，兼顾空间和性能。&lt;/p>
&lt;h2 id="特点">特点&lt;/h2>
&lt;ul>
&lt;li>Masstree 将变长键划分成多个固长部分，每个固长部分可以通过 int 类型表示，而不是 char 类型。由于处理器处理 int 类型比较操作的速度远远快于 char 数组的比较，因此 Masstree 通过 int 类型的比较进一步加速了查找过程。固定长度可以设置为 CPU 缓存行长度，以增加 CPU 缓存效率。&lt;/li>
&lt;li>每个节点是一个 B+ Tree，因此 CPU 在查询的时候可以将节点所代表的 B+ Tree 加载到 CPU 缓存中，以增加 CPU 缓存命中率。&lt;/li>
&lt;li>其并发控制用到了 Read-Copy-Update(RCU)。读不因任何数据更新而阻塞，但更新数据的时候，需要先复制一份副本，在副本上完成修改，再一次性地替换旧数据。因此读不会造成 CPU 缓存无效。&lt;/li>
&lt;/ul>
&lt;h2 id="结构">结构&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/14-10-57-34-image-20190528102500578-9312132.png" alt="image-20190528102500578">&lt;/p>
&lt;h2 id="mass-tree-算法">&lt;strong>Mass Tree 算法&lt;/strong>&lt;/h2>
&lt;h2 id="并发策略">&lt;strong>并发策略&lt;/strong>&lt;/h2>
&lt;p>Mass Tree 的并发策略和 OLFIT Tree 是相似的：&lt;/p>
&lt;ol>
&lt;li>fine-grained locking，即节点锁，解决 write-write 竞争，同一时刻只有一个线程可以对当前节点进行写操作&lt;/li>
&lt;li>optimistic concurrency control，即节点  &lt;code>version&lt;/code> (uint32_t)，解决 read-write 竞争，读开始前和读结束后都需要获取当前节点的最新 version，来判断在读过程中当前节点是否发生了写操作（插入或分裂），同时对节点的写操作都需要先修改 version，在插入 key 之前需要设置  &lt;code>inserting&lt;/code>  标记，插入完成之后将 insert 的 vinsert + 1；在分裂之前需要设置  &lt;code>splitting&lt;/code>  标记，分裂完成之后将 split 的 vsplit + 1。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/14-11-00-01-2020-11-14-10-59-56-image.png" alt="">&lt;/p>
&lt;p>和  &lt;code>permutation&lt;/code>  一样，&lt;code>version&lt;/code>  也被划分成了多个域，除了带有 insert 和 split 信息之外，还包含一个 lock bit，用于加锁；一个 root bit，用于指示否是根节点；一个 border bit，用于指示是否是 border node；一位 deleted 位，用于指示这个节点是否被标记为删除。&lt;/p>
&lt;h2 id="下降流程">&lt;strong>下降流程&lt;/strong>&lt;/h2>
&lt;p>对于每次插入，获取，删除操作，都需要从 root（可能是整棵树的根节点，也可能是某棵子树的根节点） 下降到对应的叶节点（border node）。&lt;/p>
&lt;p>首先，在开始读取节点之前，必须获得节点的 stable version（图中橙色方块），即  &lt;code>version&lt;/code>  中的  &lt;code>inserting&lt;/code>  和  &lt;code>splitting&lt;/code>  位都为 0。&lt;/p>
&lt;p>其次，在下降之前，需要获取最新的 root，因为在开始下降前，根节点可能分裂了，导致其发生了改变（图中蓝色方块）。&lt;/p>
&lt;p>最后，如果当前节点已经是叶节点，那么可以返回，否则需要进行下降，读取内部结点根据  &lt;code>key[x, x+8)&lt;/code>(8 字节) 获得下降节点之后，分为 3 种情况处理：&lt;/p>
&lt;ol>
&lt;li>case 1 那行伪代码可以这样用 C 语言表示：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">before&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node_get_stable_version&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// read node here
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">after&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node_get_version&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// no need to be stable, just latest version
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">before&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">after&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">LOCK_BIT&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">before&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">after&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">// neither insert nor split happened
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>节点在我们读取期间没有发生任何变化，我们可以安全地进行下降；&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>节点发生了变化，而且是分裂，那么我们需要从根节点重新进行下降（内部节点没有相互连接起来，所以不能像 Blink Tree 那样获取右节点）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>节点发生了变化，但只是插入，只需要重新对当前节点进行下降&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>注意第二个黄色方块，这一行非常关键，如果你细看下的话，它似乎可以挪到 case 1 的 if 语句里面，但实际上不能这样做。因为如果当前节点的孩子节点发生了分裂，但是还没来得及将新节点插入到当前节点，对调这两行代码，可能会导致下降到错误的节点。&lt;/p>
&lt;/blockquote>
&lt;h2 id="插入流程">&lt;strong>插入流程&lt;/strong>&lt;/h2>
&lt;p>作者只给出了读取伪代码，这里给出插入伪代码。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/14-11-02-06-2020-11-14-11-01-59-image.png" alt="">&lt;/p>
&lt;p>当我们通过  &lt;code>findborder&lt;/code>  下降到叶节点后，需要对其加锁（图中蓝色方块），但是此时并不能直接将 key 进行插入，当两个写线程同时下降到同一个叶节点时，只有一个线程可以进行写入，所以加锁后需要查看在加锁前是否有其他线程对这个节点进行了写入，如果有的话需要查看是否需要右移，这里的逻辑和 Blink Tree 是一样的。&lt;/p>
&lt;p>当我们成功加锁并且定位到正确的叶节点之后，可以进行写入，结果有 4 种：&lt;/p>
&lt;ol>
&lt;li>插入 key 成功或 key 已经存在；&lt;/li>
&lt;li>需要下降到下一层，同时需要增加索引的偏移；&lt;/li>
&lt;li>存在索引冲突，比如 &amp;ldquo;12345678AA&amp;rdquo; 和 &amp;ldquo;12345678BB&amp;rdquo;，此时需要创建一棵子树，存放 &amp;ldquo;AA&amp;rdquo; 和 &amp;ldquo;BB&amp;rdquo;，同时需要把原来存放 &amp;ldquo;AA&amp;rdquo; 的地方替换成这棵子树的根节点&lt;/li>
&lt;li>节点已满，需要分裂之后再次插入（见下一小节）&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>橙色方块在下面删除流程中介绍&lt;/p>
&lt;/blockquote>
&lt;h2 id="实现">实现&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://link.zhihu.com/?target=https%3A//github.com/UncP/aili">UncP/aili&lt;/a>，没有实现删除操作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://link.zhihu.com/?target=https%3A//github.com/rmind/masstree">https://github.com/rmind/masstree&lt;/a>，采用了激进生成子树的策略，缺点就是 cache locality 在有些情况下不好。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>论文作者的实现：&lt;a href="https://link.zhihu.com/?target=https%3A//github.com/kohler/masstree-beta">https://github.com/kohler/masstree-beta&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="总结">&lt;strong>总结&lt;/strong>&lt;/h2>
&lt;ol>
&lt;li>Trie 和 B+ 两种索引树的结合，使得在下降过程中的重试不需要从整棵树的根节点开始，同时加快拥有相同前缀的 key 的处理速度&lt;/li>
&lt;li>具体的内部结点与外部节点的结构&lt;/li>
&lt;li>fine-grained locking 写以及 lock-free 读&lt;/li>
&lt;li>比较具体的节点删除机制&lt;/li>
&lt;li>较小的节点减少了线程的竞争&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>需要指出的是这个算法不支持性能线性扩展，不过这并不是问题。&lt;/p>
&lt;/blockquote>
&lt;p>这个算法实现起来很有&lt;strong>挑战性&lt;/strong>，个人认为主要有两个方面，第一个是对于&lt;strong>树结构的把握&lt;/strong>，Mass Tree 是 Trie 和 B+ 树的结合。第二个是对于&lt;strong>并发下可见性的理解&lt;/strong>，”先改哪个域后改哪个域“，”谁先可见谁后可见“，”谁何时可见“，“在哪加以及加不加 memory barrier”等等这样的问题需要花很多时间考虑，而且出现 bug 非常难调试。&lt;/p>
&lt;p>Mass Tree 性能比我预想中要好很多，对于均匀分布的 10 字节 key 随机插入，数据量 1000 万，在我的机器上 4 个线程可以到 500 万以上的 tps；对于分布集中的测试数据，可以到 1000 万以上。其实&lt;strong>对于内存索引来说，cache miss 对性能造成的影响有时候是远远大于线程竞争的&lt;/strong>，所以尽管数据分布非常集中（线程竞争更多），仍然可以获得更高的性能。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://pdos.csail.mit.edu/papers/masstree:eurosys12.pdf">https://pdos.csail.mit.edu/papers/masstree:eurosys12.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kohler/masstree-beta">https://github.com/kohler/masstree-beta&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/52624601">https://zhuanlan.zhihu.com/p/52624601&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>智能指针</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link><pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid><description>&lt;h1 id="智能指针">智能指针&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>智能指针&lt;/strong>(smart pointer)是C++用来自动管理对象生命周期的模板类；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>头文件 &lt;code>#include &amp;lt;memory&amp;gt;&lt;/code>；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="unique_ptr">unique_ptr&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>独占指针，对象所有权只能被一个指针所拥有，无法被两个或两个以上同时拥有；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不能进行拷贝及赋值操作，只能直接初始化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以从函数中返回一个&lt;code>unique_ptr&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>unique_ptr&lt;/code>为数组提供了模板偏特化，因此&lt;code>unique_ptr&lt;/code>也可以指向数组；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>c++14 提供了&lt;code>make_unique&lt;/code>来直接创建；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>作为函数参数使用时，使用引用可避免所有权转移；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实现原理：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>指针成员私有；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>禁用&lt;code>复制构造函数&lt;/code>和&lt;code>赋值函数&lt;/code>；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="定义">定义&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">//定义
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typename&lt;/span> &lt;span class="n">D&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">default_delete&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">unique_ptr&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">explicit&lt;/span> &lt;span class="n">unique_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pointer&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">~&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">unique_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">unique_ptr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//禁用复制构造函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">unique_ptr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//禁用赋值函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">unique_ptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unique_ptr&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unique_ptr&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="n">pointer&lt;/span> &lt;span class="n">__ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//c++14
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typename&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">Ts&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">make_unique&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">Ts&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">params&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">forward&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Ts&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">)...&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="用法">用法&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="c1">// 4种初始化方式
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">up1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// 使用原始指针初始化
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">up2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">up2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">reset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">up1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// 使用reset初始化
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">up3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">up2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 通过move转移所有权
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_unique&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;senlin&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// c++14使用make_unique
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//容器中使用
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">vec&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">vec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">//函数参数及返回
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">fun1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fun1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//必须使用move将所有权转移
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//使用引用，无需转移所有权
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">fun2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">fun2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">//函数返回值为右值，无需使用move转移所有权
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">func3&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//unique_ptr管理数组
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">unique_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="shared_ptr">shared_ptr&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>共享指针，对象所有权可以被多个共享指针同时拥有；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内部使用引用计数自动记录引用次数的多少，当引用次数为0时，对象自动销毁；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;code>make_shared&lt;/code>创建;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以使用一个new表达式返回的指针进行初始化；但是不能将一个new表达式返回的指针赋值给shared_ptr；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一旦将一个指针交由shared_ptr管理之后，就不要再通过普通指针访问这块内存；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以通过reset方法重置指向另一个对象，此时原对象的引用计数减一；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以定制一个deleter函数，用于在shared_ptr释放对象时调用;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在有通过this指针构建shared_ptr的情况下要继承&lt;code>std::enable_shared_from_this&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>shared_ptr的计数操作具有原子性, 多线程操作不同的shared_ptr进行操作是线程安全的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>shared_ptr本身就没有保证线程安全，多线程同时访问同一个shared_ptr对象线程不安全；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;test shared_ptr and new:&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="c1">//shared_ptr&amp;lt;int&amp;gt; p5 = new int(1024); // wrong, no implicit constructor
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;*&lt;/span>&lt;span class="n">p4&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;world&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;*&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;*&lt;/span>&lt;span class="n">p2&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="enable_shared_from_this">enable_shared_from_this&lt;/h2>
&lt;p>如果涉及到将this指针提升为shared_ptr的情况，直接提升会新建一个manager object。&lt;/p>
&lt;p>使用两个manager object管理同一个对象会造成不可预知的后果。为避免这种情况，需要在对象中维护一个weak_ptr。这是通过enable_shared_from_this自动完成的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">void&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thing&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Thing&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//f(shared_ptr&amp;lt;Thing&amp;gt;(this)); //new manager object A
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shared_from_this&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">//use manager object B
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Thing&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">Thing&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">//new manager object B
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">sp&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当需要在object内部使用this指针时，调用shared_from_this()就可以避免新建manager object。需要注意的是，在构造函数中，对象还未构造完毕，并没有交由shared_ptr管理，即manager object还未创建，所以不能使用shared_from_this。&lt;/p>
&lt;h2 id="weak_ptr">weak_ptr&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>weak_ptr一般和shared_ptr配合使用，用于消除shared_ptr循环引用问题；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指向shared_ptr所指向的对象，但是却不增加对象的引用计数；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>weak_ptr有一个lock函数，尝试取回一个指向对象的shared_ptr；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">auto&lt;/span> &lt;span class="n">p10&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">weak_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">wp1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;p10 use_count: &amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">p10&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">use_count&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//p10.reset(new int(1025)); // this will cause wp1.lock() return a false obj
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">shared_ptr&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">p11&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">wp1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;wp1: &amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;*&lt;/span>&lt;span class="n">p11&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34; use count: &amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">p11&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">use_count&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="auto_ptr">auto_ptr&lt;/h2>
&lt;ul>
&lt;li>c++98中使用，c++17中移除，不建议使用；&lt;/li>
&lt;/ul>
&lt;h2 id="最佳实践">最佳实践&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>必须保证所有managed object只有一个manager object；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>能用裸指针解决问题的情况下，就不要使用智能指针；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果决定了用智能指针，那就不要用裸指针管理同一个对象；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>能用&lt;code>unique_ptr&lt;/code>管理的对象，不要使用&lt;code>shared_ptr&lt;/code>/&lt;code>weak_ptr&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="http://senlinzhan.github.io/2015/04/20/%E8%B0%88%E8%B0%88C-%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/">深入 C++ 的 unique_ptr | Senlin&amp;rsquo;s Blog&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/30933682?utm_source=wechat_session&amp;amp;utm_medium=social&amp;amp;utm_oi=28398072102912">https://zhuanlan.zhihu.com/p/30933682?utm_source=wechat_session&amp;amp;utm_medium=social&amp;amp;utm_oi=28398072102912&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>ElasticSearch基础</title><link>https://justice.bj.cn/post/30.architech/elasticsearch/elasticsearch%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/elasticsearch/elasticsearch%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="elasticsearch基础">ElasticSearch基础&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Elasticsearch 是一个基于lucene的分布式可扩展的近实时搜索和分析引擎。&lt;/p>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/07-14-03-48-2022-01-07-14-03-43-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>一个 ES Index 在集群模式下，有多个 Node （节点）组成。每个节点就是 ES 的Instance (实例)。&lt;/li>
&lt;li>每个节点上会有多个 shard （分片）， P1 P2 是主分片, R1 R2 是副本分片&lt;/li>
&lt;li>每个分片上对应着就是一个 Lucene Index（底层索引文件）&lt;/li>
&lt;li>Lucene Index 是一个统称
&lt;ul>
&lt;li>由多个 Segment （段文件，就是倒排索引）组成。每个段文件存储着就是 Doc 文档。&lt;/li>
&lt;li>commit point记录了所有 segments 的信息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Lucene索引结构&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/09-17-11-59-2022-01-09-17-11-56-image.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/09-17-11-19-2022-01-09-17-11-13-image.png" alt="">&lt;/p>
&lt;h3 id="lucene索引处理流程">Lucene索引处理流程&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/09-17-09-44-2022-01-09-17-09-40-image.png" alt="">&lt;/p>
&lt;h2 id="特点">特点&lt;/h2>
&lt;ul>
&lt;li>分布式存储&lt;/li>
&lt;li>近实时检索&lt;/li>
&lt;/ul>
&lt;h2 id="核心概念">核心概念&lt;/h2>
&lt;ul>
&lt;li>索引(index):&lt;/li>
&lt;li>分片(shard):&lt;/li>
&lt;li>分段(segment):&lt;/li>
&lt;li>Translog:&lt;/li>
&lt;/ul>
&lt;h2 id="数据类型">数据类型&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Elasticsearch中每个field都要精确对应一个数据类型；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类型包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>keyword：不需要分词，进行过滤、排序、聚合等操作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>text：分词，用于全文搜索，无法排序，聚合等操作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>integer：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="写流程">写流程&lt;/h3>
&lt;p>创建索引的过程：&lt;/p>
&lt;ul>
&lt;li>准备待索引的原文档，数据来源可能是文件、数据库或网络&lt;/li>
&lt;li>对文档的内容进行分词组件处理，形成一系列的Term&lt;/li>
&lt;li>索引组件对文档和Term处理，形成字典和倒排表&lt;/li>
&lt;/ul>
&lt;p>搜索索引的过程：&lt;/p>
&lt;ul>
&lt;li>对查询语句进行分词处理，形成一系列Term&lt;/li>
&lt;li>根据倒排索引表查找出包含Term的文档，并进行合并形成符合结果的文档集&lt;/li>
&lt;li>比对查询语句与各个文档相关性得分，并按照得分高低返回&lt;/li>
&lt;/ul>
&lt;h2 id="单文档写入流程">单文档写入流程&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/09-17-17-45-2022-01-09-17-17-40-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>客户端向 Node 1 发送新建、索引或者删除请求。&lt;/li>
&lt;li>节点使用文档的 _id 确定文档属于分片 0 。请求会被转发到 Node 3，因为分片 0 的主分片目前被分配在 Node 3 上。&lt;/li>
&lt;li>Node 3 在主分片上面执行请求。如果成功了，它将请求并行转发到 Node 1 和 Node 2 的副本分片上。一旦所有的副本分片都报告成功, Node 3 将向协调节点报告成功，协调节点向客户端报告成功。&lt;/li>
&lt;/ul>
&lt;h2 id="常用操作">常用操作&lt;/h2>
&lt;ul>
&lt;li>清空index数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># create index&lt;/span>
curl -X PUT http://192.168.0.10:20000/test6 --header &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -d index.json
cat index.json
&lt;span class="c1"># delete index&lt;/span>
curl -X DELETE http://192.168.0.10:20000/test6
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://pdai.tech/md/db/nosql-es/elasticsearch-y-th-2.html">ES详解 - 原理：ES原理知识点补充和整体结构 | Java 全栈知识体系&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>ES倒排索引原理</title><link>https://justice.bj.cn/post/30.architech/elasticsearch/es%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/elasticsearch/es%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86/</guid><description>&lt;h1 id="es倒排索引原理">ES倒排索引原理&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Elasticsearch通过Lucene的倒排索引技术实现比关系型数据库更快的过滤。&lt;/p>
&lt;p>它对多条件的过滤支持非常好，比如年龄在18和30之间，性别为女性这样的组合查询。&lt;/p>
&lt;p>倒排索引很多地方都有介绍，但是其比关系型数据库的b-tree索引快在哪里？&lt;/p>
&lt;p>b-tree索引是为写入优化的索引结构。&lt;/p>
&lt;p>可以用预先排序等方式换取更小的存储空间，更快的检索速度等好处，其代价就是更新慢。&lt;/p>
&lt;p>要进一步深入的化，还是要看一下Lucene的倒排索引是怎么构成的。&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-378bc62acf1a493c402291a8f8e99e6a_720w.jpg" alt="">&lt;/p>
&lt;p>这里有好几个概念。我们来看一个实际的例子，假设有如下的数据：&lt;/p>
&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-e6b81003803254b1d11b3384626c93ab_720w.jpg" alt="">&lt;/p>
&lt;p>这里每一行是一个document。&lt;/p>
&lt;p>每个document都有一个docid。那么给这些document建立的倒排索引就是：&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-c1cf40e4c4218fd3e992258c08e4e334_720w.jpg" alt="">&lt;/p>
&lt;p>可以看到，倒排索引是per field的，一个字段由一个自己的倒排索引。&lt;/p>
&lt;p>18,20这些叫做 term，而[1,3]就是posting list。&lt;/p>
&lt;p>Posting list就是一个int的数组，存储了所有符合某个term的文档id。&lt;/p>
&lt;p>那么什么是term dictionary 和 term index？&lt;/p>
&lt;p>假设我们有很多个term，比如：&lt;code>Carla,Sara,Elin,Ada,Patty,Kate,Selena&lt;/code>&lt;/p>
&lt;p>如果按照这样的顺序排列，找出某个特定的term一定很慢，因为term没有排序，需要全部过滤一遍才能找出特定的term。&lt;/p>
&lt;p>排序之后就变成了：&lt;code>Ada,Carla,Elin,Kate,Patty,Sara,Selena&lt;/code>&lt;/p>
&lt;p>这样我们可以用二分查找的方式，比全遍历更快地找出目标的term。&lt;/p>
&lt;p>这个就是 term dictionary。&lt;/p>
&lt;p>有了&lt;code>term dictionary&lt;/code>之后，可以用 &lt;code>logN&lt;/code> 次磁盘查找得到目标。&lt;/p>
&lt;p>但是磁盘的随机读操作仍然是非常昂贵的（一次&lt;code>random access&lt;/code>大概需要10ms的时间）。&lt;/p>
&lt;p>所以尽量少的读磁盘，有必要把一些数据缓存到内存里。&lt;/p>
&lt;p>但是整个&lt;code>term dictionary&lt;/code>本身又太大了，无法完整地放到内存里。&lt;/p>
&lt;p>于是就有了&lt;code>term index&lt;/code>。&lt;/p>
&lt;p>&lt;code>term index&lt;/code>有点像一本字典的大的章节表。&lt;/p>
&lt;p>比如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">A开头的term ……………. Xxx页
C开头的term ……………. Xxx页
E开头的term ……………. Xxx页
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果所有的term都是英文字符的话，可能这个term index就真的是26个英文字符表构成的了。&lt;/p>
&lt;p>但是实际的情况是，term未必都是英文字符，term可以是任意的byte数组。&lt;/p>
&lt;p>而且26个英文字符也未必是每一个字符都有均等的term，比如x字符开头的term可能一个都没有，&lt;/p>
&lt;p>而s开头的term又特别多。实际的term index是一棵trie 树：&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-e4632ac1392b01f7a39d963fddb1a1e0_720w.jpg" alt="">&lt;/p>
&lt;p>例子是一个包含 &amp;ldquo;A&amp;rdquo;, &amp;ldquo;to&amp;rdquo;, &amp;ldquo;tea&amp;rdquo;, &amp;ldquo;ted&amp;rdquo;, &amp;ldquo;ten&amp;rdquo;, &amp;ldquo;i&amp;rdquo;, &amp;ldquo;in&amp;rdquo;, 和 &amp;ldquo;inn&amp;rdquo; 的 trie 树。&lt;/p>
&lt;p>这棵树不会包含所有的term，它包含的是term的一些前缀。&lt;/p>
&lt;p>通过term index可以快速地定位到term dictionary的某个offset，然后从这个位置再往后顺序查找。&lt;/p>
&lt;p>再加上一些压缩技术（搜索 Lucene Finite State Transducers） term index 的尺寸可以只有所有term的尺寸的几十分之一，&lt;/p>
&lt;p>使得用内存缓存整个term index变成可能。整体上来说就是这样的效果。&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-e4599b618e270df9b64a75eb77bfb326_720w.jpg" alt="">&lt;/p>
&lt;p>现在我们可以回答“为什么Elasticsearch/Lucene检索可以比mysql快了。&lt;/p>
&lt;p>Mysql只有term dictionary这一层，是以b-tree排序的方式存储在磁盘上的。&lt;/p>
&lt;p>检索一个term需要若干次的random access的磁盘操作。&lt;/p>
&lt;p>而Lucene在term dictionary的基础上添加了term index来加速检索，term index以树的形式缓存在内存中。&lt;/p>
&lt;p>从term index查到对应的term dictionary的block位置之后，&lt;/p>
&lt;p>再去磁盘上找term，大大减少了磁盘的random access次数。&lt;/p>
&lt;p>额外值得一提的两点是：&lt;/p>
&lt;p>term index在内存中是以FST（finite state transducers）的形式保存的，其特点是非常节省内存。&lt;/p>
&lt;p>Term dictionary在磁盘上是以分block的方式保存的，一个block内部利用公共前缀压缩，&lt;/p>
&lt;p>比如都是Ab开头的单词就可以把Ab省去。这样term dictionary可以比b-tree更节约磁盘空间。&lt;/p>
&lt;h2 id="如何联合索引查询">如何联合索引查询？&lt;/h2>
&lt;p>所以给定查询过滤条件 age=18 的过程就是先从term index找到18在term dictionary的大概位置，&lt;/p>
&lt;p>然后再从term dictionary里精确地找到18这个term，然后得到一个posting list或者一个指向posting list位置的指针。&lt;/p>
&lt;p>然后再查询 gender=女 的过程也是类似的。&lt;/p>
&lt;p>最后得出 age=18 AND gender=女 就是把两个 posting list 做一个“与”的合并。&lt;/p>
&lt;p>这个理论上的“与”合并的操作可不容易。&lt;/p>
&lt;p>对于mysql来说，如果你给age和gender两个字段都建立了索引，&lt;/p>
&lt;p>查询的时候只会选择其中最selective的来用，然后另外一个条件: 是在遍历行的过程中在内存中计算之后过滤掉。&lt;/p>
&lt;p>那么要如何才能联合使用两个索引呢？有两种办法：&lt;/p>
&lt;ul>
&lt;li>使用skip list数据结构。同时遍历gender和age的posting list，互相skip；&lt;/li>
&lt;li>使用bitset数据结构，对gender和age两个filter分别求出bitset，对两个bitset做AN操作。&lt;/li>
&lt;/ul>
&lt;p>PostgreSQL 从 8.4 版本开始支持通过bitmap联合使用两个索引，就是利用了bitset数据结构来做到的。&lt;/p>
&lt;p>当然一些商业的关系型数据库也支持类似的联合索引的功能。&lt;/p>
&lt;p>Elasticsearch支持以上两种的联合索引方式，如果查询的filter缓存到了内存中（以bitset的形式），&lt;/p>
&lt;p>那么合并就是两个bitset的AND。&lt;/p>
&lt;p>如果查询的filter没有缓存，那么就用skip list的方式去遍历两个on disk的posting list。&lt;/p>
&lt;h2 id="利用-skip-list-合并">利用 Skip List 合并&lt;/h2>
&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-eafa46683272ff1b2081edbc8db5469f_720w.jpg" alt="">&lt;/p>
&lt;p>以上是三个posting list。我们现在需要把它们用AND的关系合并，得出posting list的交集。&lt;/p>
&lt;p>首先选择最短的posting list，然后从小到大遍历。&lt;/p>
&lt;p>遍历的过程可以跳过一些元素，比如我们遍历到绿色的13的时候，就可以跳过蓝色的3了，因为3比13要小。&lt;/p>
&lt;p>整个过程如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">Next -&amp;gt; 2
Advance(2) -&amp;gt; 13
Advance(13) -&amp;gt; 13
Already on 13
Advance(13) -&amp;gt; 13 MATCH!!!
Next -&amp;gt; 17
Advance(17) -&amp;gt; 22
Advance(22) -&amp;gt; 98
Advance(98) -&amp;gt; 98
Advance(98) -&amp;gt; 98 MATCH!!!
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后得出的交集是[13,98]，所需的时间比完整遍历三个posting list要快得多。&lt;/p>
&lt;p>但是前提是每个list需要指出Advance这个操作，快速移动指向的位置。&lt;/p>
&lt;p>什么样的list可以这样Advance往前做蛙跳？skip list：&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-a8b78c8e861c34a1afd7891284852b34_720w.jpg" alt="">&lt;/p>
&lt;p>从概念上来说，对于一个很长的posting list，比如：&lt;/p>
&lt;p>&lt;code>[1,3,13,101,105,108,255,256,257]&lt;/code>&lt;/p>
&lt;p>我们可以把这个list分成三个block：&lt;/p>
&lt;p>&lt;code>[1,3,13] [101,105,108] [255,256,257]&lt;/code>&lt;/p>
&lt;p>然后可以构建出skip list的第二层：&lt;/p>
&lt;p>&lt;code>[1,101,255]&lt;/code>&lt;/p>
&lt;p>1,101,255分别指向自己对应的block。这样就可以很快地跨block的移动指向位置了。&lt;/p>
&lt;p>Lucene自然会对这个block再次进行压缩。其压缩方式叫做Frame Of Reference编码。示例如下：&lt;/p>
&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-9c03d3e449e3f8fb8182287048ad6db7_720w.jpg" alt="">&lt;/p>
&lt;p>考虑到频繁出现的term（所谓low cardinality的值），比如gender里的男或者女。&lt;/p>
&lt;p>如果有1百万个文档，那么性别为男的posting list里就会有50万个int值。&lt;/p>
&lt;p>用Frame of Reference编码进行压缩可以极大减少磁盘占用。&lt;/p>
&lt;p>这个优化对于减少索引尺寸有非常重要的意义。&lt;/p>
&lt;p>当然mysql b-tree里也有一个类似的posting list的东西，是未经过这样压缩的。&lt;/p>
&lt;p>因为这个Frame of Reference的编码是有解压缩成本的。&lt;/p>
&lt;p>利用skip list，除了跳过了遍历的成本，也跳过了解压缩这些压缩过的block的过程，从而节省了cpu。&lt;/p>
&lt;h2 id="利用bitset合并">利用bitset合并&lt;/h2>
&lt;p>Bitset是一种很直观的数据结构，对应posting list如：&lt;/p>
&lt;p>&lt;code>[1,3,4,7,10]&lt;/code>&lt;/p>
&lt;p>对应的bitset就是：&lt;/p>
&lt;p>&lt;code>[1,0,1,1,0,0,1,0,0,1]&lt;/code>&lt;/p>
&lt;p>每个文档按照文档id排序对应其中的一个bit。&lt;/p>
&lt;p>Bitset自身就有压缩的特点，其用一个byte就可以代表8个文档。&lt;/p>
&lt;p>所以100万个文档只需要12.5万个byte。&lt;/p>
&lt;p>但是考虑到文档可能有数十亿之多，在内存里保存bitset仍然是很奢侈的事情。&lt;/p>
&lt;p>而且对于个每一个filter都要消耗一个bitset，比如age=18缓存起来的话是一个bitset，18&amp;lt;=age&amp;lt;25是另外一个filter缓存起来也要一个bitset。&lt;/p>
&lt;p>所以秘诀就在于需要有一个数据结构：&lt;/p>
&lt;ul>
&lt;li>可以很压缩地保存上亿个bit代表对应的文档是否匹配filter；&lt;/li>
&lt;li>这个压缩的bitset仍然可以很快地进行AND和 OR的逻辑操作。&lt;/li>
&lt;/ul>
&lt;p>Lucene使用的这个数据结构叫做 &lt;code>Roaring Bitmap&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-9482b84c4aa3fb77a959c1ead553037e_720w.jpg" alt="">&lt;/p>
&lt;p>其压缩的思路其实很简单。与其保存100个0，占用100个bit。&lt;/p>
&lt;p>还不如保存0一次，然后声明这个0重复了100遍。&lt;/p>
&lt;p>这两种合并使用索引的方式都有其用途。&lt;/p>
&lt;p>Elasticsearch对其性能有详细的对比（&lt;a href="https://link.zhihu.com/?target=https%3A//www.elastic.co/blog/frame-of-reference-and-roaring-bitmaps">https://www.elastic.co/blog/frame-of-reference-and-roaring-bitmaps&lt;/a>）。&lt;/p>
&lt;p>简单的结论是：&lt;/p>
&lt;p>因为Frame of Reference编码是如此 高效，对于简单的相等条件的过滤缓存成纯内存的bitset还不如需要访问磁盘的skip list的方式要快。&lt;/p>
&lt;h2 id="如何减少文档数">如何减少文档数？&lt;/h2>
&lt;p>一种常见的压缩存储时间序列的方式是把多个数据点合并成一行。&lt;/p>
&lt;p>Opentsdb支持海量数据的一个绝招就是定期把很多行数据合并成一行，这个过程叫compaction。&lt;/p>
&lt;p>类似的vivdcortext使用mysql存储的时候，也把一分钟的很多数据点合并存储到mysql的一行里以减少行数。&lt;/p>
&lt;p>这个过程可以示例如下：&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-252d8f8ebe62e508f62049e80a9b9468_720w.jpg" alt="">&lt;/p>
&lt;p>可以看到，行变成了列了。&lt;/p>
&lt;p>每一列可以代表这一分钟内一秒的数据。&lt;/p>
&lt;p>Elasticsearch有一个功能可以实现类似的优化效果，那就是Nested Document。&lt;/p>
&lt;p>我们可以把一段时间的很多个数据点打包存储到一个父文档里，变成其嵌套的子文档。&lt;/p>
&lt;p>示例如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">{timestamp:12:05:01, idc:sz, value1:10,value2:11}
{timestamp:12:05:02, idc:sz, value1:9,value2:9}
{timestamp:12:05:02, idc:sz, value1:18,value:17}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以打包成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
    &lt;span class="err">max_timestamp:12:05:02,&lt;/span>
    &lt;span class="err">min_timestamp:&lt;/span> &lt;span class="err">1205:01,&lt;/span>
    &lt;span class="err">idc:sz,&lt;/span>
    &lt;span class="err">records:&lt;/span> &lt;span class="err">[&lt;/span>
&lt;span class="err">{timestamp:12:05:01,&lt;/span> &lt;span class="err">value1:10,value2:11&lt;/span>&lt;span class="p">}&lt;/span>
        &lt;span class="p">{&lt;/span>&lt;span class="err">timestamp:12:05:02,&lt;/span> &lt;span class="err">value1:9,value2:9&lt;/span>&lt;span class="p">}&lt;/span>
        &lt;span class="p">{&lt;/span>&lt;span class="err">timestamp:12:05:02,&lt;/span> &lt;span class="err">value1:18,value:17&lt;/span>&lt;span class="p">}&lt;/span>
    &lt;span class="err">]&lt;/span>
&lt;span class="err">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样可以把数据点公共的维度字段上移到父文档里，而不用在每个子文档里重复存储，从而减少索引的尺寸。&lt;/p>
&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-917578288797efab8f67e7b74d5ec6a3_720w.jpg" alt="">&lt;/p>
&lt;p>在存储的时候，无论父文档还是子文档，对于Lucene来说都是文档，都会有文档Id。&lt;/p>
&lt;p>但是对于嵌套文档来说，可以保存起子文档和父文档的文档id是连续的，而且父文档总是最后一个。&lt;/p>
&lt;p>有这样一个排序性作为保障，那么有一个所有父文档的posting list就可以跟踪所有的父子关系。&lt;/p>
&lt;p>也可以很容易地在父子文档id之间做转换。&lt;/p>
&lt;p>把父子关系也理解为一个filter，那么查询时检索的时候不过是又AND了另外一个filter而已。&lt;/p>
&lt;p>前面我们已经看到了Elasticsearch可以非常高效地处理多filter的情况，充分利用底层的索引。&lt;/p>
&lt;p>使用了嵌套文档之后，对于term的posting list只需要保存父文档的doc id就可以了，&lt;/p>
&lt;p>可以比保存所有的数据点的doc id要少很多。&lt;/p>
&lt;p>如果我们可以在一个父文档里塞入50个嵌套文档，那么posting list可以变成之前的1/50。&lt;/p></description></item><item><title>Golang之mutex</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bmutex/</link><pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bmutex/</guid><description>&lt;h1 id="golang之mutex">Golang之mutex&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>sync.Mutex是一个不可重入的排他锁;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当一个 goroutine 获得了这个锁的拥有权后， 其它请求锁的 goroutine 就会阻塞在 Lock 方法的调用上，直到锁被释放;&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Mutex&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">state&lt;/span> &lt;span class="kt">int32&lt;/span> &lt;span class="c1">//锁的状态
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">sema&lt;/span> &lt;span class="kt">uint32&lt;/span> &lt;span class="c1">//控制锁状态的信号量
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//state
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;span class="cm">32 3 2 1 0
&lt;/span>&lt;span class="cm"> | | | | |
&lt;/span>&lt;span class="cm"> | | | | |
&lt;/span>&lt;span class="cm"> v-----------------------------------------------v-------------v-------------v-------------+
&lt;/span>&lt;span class="cm"> | | | | v
&lt;/span>&lt;span class="cm"> | waitersCount |mutexStarving| mutexWoken | mutexLocked |
&lt;/span>&lt;span class="cm"> | | | | |
&lt;/span>&lt;span class="cm"> +-----------------------------------------------+-------------+-------------+-------------+
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="kd">const&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">mutexLocked&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="kc">iota&lt;/span> &lt;span class="c1">// mutex is locked
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">mutexWoken&lt;/span> &lt;span class="c1">//2
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">mutexStarving&lt;/span> &lt;span class="c1">//4
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">mutexWaiterShift&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">iota&lt;/span> &lt;span class="c1">//3
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mutex一旦使用之后，一定不要做copy操作。&lt;/p>
&lt;p>最低三位分别表示 mutexLocked、mutexWoken 和 mutexStarving，剩下的位置用来表示当前有多少个 Goroutine 等待互斥锁的释放：&lt;/p>
&lt;p>在默认情况下，互斥锁的所有状态位都是 0，int32 中的不同位分别表示了不同的状态：&lt;/p>
&lt;ul>
&lt;li>mutexLocked — 表示互斥锁的锁定状态；&lt;/li>
&lt;li>mutexWoken — 表示从正常模式被从唤醒；&lt;/li>
&lt;li>mutexStarving — 当前的互斥锁进入饥饿状态；&lt;/li>
&lt;li>waitersCount — 当前互斥锁上等待的 goroutine 个数；&lt;/li>
&lt;/ul>
&lt;p>为了保证锁的公平性，设计上互斥锁有两种状态：正常状态和饥饿状态。&lt;/p>
&lt;p>&lt;code>正常模式&lt;/code>下，所有等待锁的goroutine按照FIFO顺序等待。唤醒的goroutine不会直接拥有锁，而是会和新请求锁的goroutine竞争锁的拥有。新请求锁的goroutine具有优势：它正在CPU上执行，而且可能有好几个，所以刚刚唤醒的goroutine有很大可能在锁竞争中失败。在这种情况下，这个被唤醒的goroutine会加入到等待队列的前面。 &lt;code>如果一个等待的goroutine超过1ms没有获取锁，那么它将会把锁转变为饥饿模式&lt;/code>。&lt;/p>
&lt;p>&lt;code>饥饿模式&lt;/code>下，锁的所有权将从unlock的gorutine直接交给交给等待队列中的第一个。新来的goroutine将不会尝试去获得锁，即使锁看起来是unlock状态, 也不会去尝试自旋操作，而是放在等待队列的尾部。&lt;/p>
&lt;p>如果一个等待的goroutine获取了锁，并且满足一以下其中的任何一个条件：(1)它是队列中的最后一个；(2)它等待的时候小于1ms。它会将锁的状态转换为正常状态。&lt;/p>
&lt;p>正常状态有很好的性能表现，饥饿模式也是非常重要的，因为它能阻止尾部延迟的现象。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Mutex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 如果mutex的state没有被锁，也没有等待/唤醒的goroutine, 锁处于正常状态，那么获得锁，返回.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 比如锁第一次被goroutine请求时，就是这种状态。或者锁处于空闲的时候，也是这种状态。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">CompareAndSwapInt32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">mutexLocked&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Slow path (outlined so that the fast path can be inlined)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">lockSlow&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Mutex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">lockSlow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 标记本goroutine的等待时间
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">waitStartTime&lt;/span> &lt;span class="kt">int64&lt;/span>
&lt;span class="c1">// 本goroutine是否已经处于饥饿状态
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">starving&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="c1">// 本goroutine是否已唤醒
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">awoke&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="c1">// 自旋次数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">iter&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">old&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 第一个条件：1.mutex已经被锁了；2.不处于饥饿模式(如果时饥饿状态，自旋时没有用的，锁的拥有权直接交给了等待队列的第一个。)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 尝试自旋的条件：参考runtime_canSpin函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mutexLocked&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">mutexStarving&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">mutexLocked&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nf">runtime_canSpin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">iter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 进入这里肯定是普通模式
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 自旋的过程中如果发现state还没有设置woken标识，则设置它的woken标识， 并标记自己为被唤醒。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">awoke&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">mutexWoken&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="nx">mutexWaiterShift&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">CompareAndSwapInt32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">mutexWoken&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">awoke&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nf">runtime_doSpin&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">iter&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="nx">old&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 到了这一步， state的状态可能是：
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 1. 锁还没有被释放，锁处于正常状态
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 2. 锁还没有被释放， 锁处于饥饿状态
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 3. 锁已经被释放， 锁处于正常状态
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 4. 锁已经被释放， 锁处于饥饿状态
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 并且本gorutine的 awoke可能是true, 也可能是false (其它goutine已经设置了state的woken标识)
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// new 复制 state的当前状态， 用来设置新的状态
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// old 是锁当前的状态
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">new&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">old&lt;/span>
&lt;span class="c1">// 如果old state状态不是饥饿状态, new state 设置锁， 尝试通过CAS获取锁,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 如果old state状态是饥饿状态, 则不设置new state的锁，因为饥饿状态下锁直接转给等待队列的第一个.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">mutexStarving&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">new&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="nx">mutexLocked&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 将等待队列的等待者的数量加1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mutexLocked&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">mutexStarving&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">new&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="nx">mutexWaiterShift&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 如果当前goroutine已经处于饥饿状态， 并且old state的已被加锁,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 将new state的状态标记为饥饿状态, 将锁转变为饥饿状态.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">starving&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">mutexLocked&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">new&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="nx">mutexStarving&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 如果本goroutine已经设置为唤醒状态, 需要清除new state的唤醒标记, 因为本goroutine要么获得了锁，要么进入休眠，
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 总之state的新状态不再是woken状态.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">awoke&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// The goroutine has been woken from sleep,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// so we need to reset the flag in either case.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">new&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">mutexWoken&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">throw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sync: inconsistent mutex state&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">new&lt;/span> &lt;span class="o">&amp;amp;^=&lt;/span> &lt;span class="nx">mutexWoken&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 通过CAS设置new state值.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 注意new的锁标记不一定是true, 也可能只是标记一下锁的state是饥饿状态.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">CompareAndSwapInt32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">new&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 如果old state的状态是未被锁状态，并且锁不处于饥饿状态,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 那么当前goroutine已经获取了锁的拥有权，返回
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mutexLocked&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">mutexStarving&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span> &lt;span class="c1">// locked the mutex with CAS
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1">// If we were already waiting before, queue at the front of the queue.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 设置并计算本goroutine的等待时间
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">queueLifo&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">waitStartTime&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">waitStartTime&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">waitStartTime&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">runtime_nanotime&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 既然未能获取到锁， 那么就使用sleep原语阻塞本goroutine
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 如果是新来的goroutine,queueLifo=false, 加入到等待队列的尾部，耐心等待
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 如果是唤醒的goroutine, queueLifo=true, 加入到等待队列的头部
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nf">runtime_SemacquireMutex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sema&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">queueLifo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// sleep之后，此goroutine被唤醒
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 计算当前goroutine是否已经处于饥饿状态.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">starving&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">starving&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nf">runtime_nanotime&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">waitStartTime&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">starvationThresholdNs&lt;/span>
&lt;span class="c1">// 得到当前的锁状态
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">old&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>
&lt;span class="c1">// 如果当前的state已经是饥饿状态
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 那么锁应该处于Unlock状态，那么应该是锁被直接交给了本goroutine
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">mutexStarving&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// If this goroutine was woken and mutex is in starvation mode,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// ownership was handed off to us but mutex is in somewhat
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// inconsistent state: mutexLocked is not set and we are still
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// accounted as waiter. Fix that.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mutexLocked&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">mutexWoken&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="nx">mutexWaiterShift&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nf">throw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;sync: inconsistent mutex state&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 当前goroutine用来设置锁，并将等待的goroutine数减1.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">delta&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">int32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mutexLocked&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="nx">mutexWaiterShift&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 如果本goroutine是最后一个等待者，或者它并不处于饥饿状态，
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 那么我们需要把锁的state状态设置为正常模式.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">starving&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">old&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="nx">mutexWaiterShift&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 退出饥饿模式
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">delta&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="nx">mutexStarving&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 设置新state, 因为已经获得了锁，退出、返回
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AddInt32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">delta&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">awoke&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="nx">iter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">old&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>整个过程比较复杂，这里总结一下一些重点：&lt;/p>
&lt;ol>
&lt;li>如果锁处于初始状态(unlock, 正常模式)，则通过CAS(0 -&amp;gt; Locked)获取锁；如果获取失败，那么就进入slowLock的流程：&lt;/li>
&lt;/ol>
&lt;p>slowLock的获取锁流程有两种模式： 饥饿模式 和 正常模式。&lt;/p>
&lt;h2 id="1正常模式">(1)正常模式&lt;/h2>
&lt;ol>
&lt;li>mutex已经被locked了，处于正常模式下；&lt;/li>
&lt;li>前 Goroutine 为了获取该锁进入自旋的次数小于四次；&lt;/li>
&lt;li>当前机器CPU核数大于1；&lt;/li>
&lt;li>当前机器上至少存在一个正在运行的处理器 P 并且处理的运行队列为空；&lt;/li>
&lt;/ol>
&lt;p>满足上面四个条件的goroutine才可以做自旋。自旋就会调用sync.runtime_doSpin 和 runtime.procyield 并执行 30 次的 PAUSE 指令，该指令只会占用 CPU 并消耗 CPU 时间。&lt;/p>
&lt;p>处理了自旋相关的特殊逻辑之后，互斥锁会根据上下文计算当前互斥锁最新的状态new。几个不同的条件分别会更新 state 字段中存储的不同信息 — mutexLocked、mutexStarving、mutexWoken 和 mutexWaiterShift：&lt;/p>
&lt;p>计算最新的new之后，CAS更新，如果更新成功且old状态是未被锁状态，并且锁不处于饥饿状态，就代表当前goroutine竞争成功并获取到了锁返回。(这也就是当前goroutine在正常模式下竞争时更容易获得锁的原因)&lt;/p>
&lt;p>如果当前goroutine竞争失败，会调用 &lt;code>sync.runtime_SemacquireMutex&lt;/code> 使用信号量保证资源不会被两个 Goroutine 获取。&lt;code>sync.runtime_SemacquireMutex&lt;/code> 会在方法中不断调用尝试获取锁并休眠当前 Goroutine 等待信号量的释放，一旦当前 Goroutine 可以获取信号量，它就会立刻返回，sync.Mutex.Lock 方法的剩余代码也会继续执行。&lt;/p>
&lt;h2 id="2-饥饿模式">(2) 饥饿模式&lt;/h2>
&lt;p>饥饿模式本身是为了一定程度保证公平性而设计的模式。所以饥饿模式不会有自旋的操作，新的 Goroutine 在该状态下不能获取锁、也不会进入自旋状态，它们只会在队列的末尾等待。&lt;/p>
&lt;p>不管是正常模式还是饥饿模式，获取信号量，它就会从阻塞中立刻返回，并执行剩下代码：&lt;/p>
&lt;ol>
&lt;li>在正常模式下，这段代码会设置唤醒和饥饿标记、重置迭代次数并重新执行获取锁的循环；&lt;/li>
&lt;li>在饥饿模式下，当前 Goroutine 会获得互斥锁，如果等待队列中只存在当前 Goroutine，互斥锁还会从饥饿模式中退出；&lt;/li>
&lt;/ol>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000023874384">【golang】sync.Mutex互斥锁的实现原理&lt;/a>&lt;/li>
&lt;/ol></description></item></channel></rss>