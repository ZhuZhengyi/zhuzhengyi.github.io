<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Justice的小站</title><link>https://justice.bj.cn/</link><description>Recent content on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 22 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>Justice's Blog</title><link>https://justice.bj.cn/homepage/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/about/</guid><description>&lt;h2 id="self-introduction">Self Introduction&lt;/h2>
&lt;p>Cras ex dui, tristique a libero eget, consectetur semper ligula. Nunc augue arcu, malesuada a nisi et, molestie finibus metus. Sed lacus odio, ultricies a nisl vitae, sollicitudin tempor ipsum. Vivamus quis feugiat arcu. Sed mi nunc, efficitur quis tellus vitae, posuere mattis metus. Phasellus in mattis dui. Nullam blandit, augue non ullamcorper dapibus, lacus dui molestie massa, in iaculis purus lectus eu lectus. Duis hendrerit lacinia tellus, sit amet feugiat dolor placerat id. Aenean ac velit massa. Vivamus feugiat dui at magna viverra, ut dictum nunc rutrum. Duis eget sapien finibus, lobortis orci id, vestibulum tellus. Maecenas lobortis urna libero, quis fermentum lectus lobortis nec. Nullam laoreet volutpat libero, ac mattis magna ullamcorper quis. Duis eget ipsum eu nisi mattis cursus et vitae turpis.&lt;/p>
&lt;p>Aliquam pretium diam eget leo feugiat finibus. Donec malesuada commodo ipsum. Aenean a massa in lacus venenatis vestibulum. Duis vel sem quis elit iaculis consectetur et quis dolor. Morbi eu ipsum hendrerit, malesuada ante sed, dapibus est. Suspendisse feugiat nulla ut gravida convallis. Phasellus id massa posuere, rhoncus justo ut, porttitor dolor. Nulla ultrices malesuada egestas. Nunc fermentum tincidunt sem ac vulputate. Donec mollis sollicitudin justo eget varius. Donec ornare velit et felis blandit, id molestie sapien lobortis. Morbi eget tristique justo. Mauris posuere, nibh eu laoreet ultricies, ligula erat iaculis sapien, vel dapibus lacus libero ut diam. Etiam viverra ante felis, et scelerisque nunc pellentesque vitae. Praesent feugiat dictum molestie.&lt;/p>
&lt;h2 id="details">Details&lt;/h2>
&lt;p>Nunc pellentesque vitae:&lt;/p>
&lt;ul>
&lt;li>Morbi accumsan nibh efficitur diam molestie, non dignissim diam facilisis.&lt;/li>
&lt;li>Donec dignissim leo in mollis faucibus.&lt;/li>
&lt;li>Donec blandit lacus a pellentesque fermentum.&lt;/li>
&lt;/ul>
&lt;p>Donec mollis sollicitudin:&lt;/p>
&lt;ul>
&lt;li>Nunc dictum purus ornare purus consectetur, eu pellentesque massa ullamcorper.&lt;/li>
&lt;li>Aliquam eu leo vitae justo aliquam tincidunt.&lt;/li>
&lt;li>Fusce non massa id augue interdum feugiat sed et nulla.&lt;/li>
&lt;li>Vivamus molestie augue in tristique laoreet.&lt;/li>
&lt;/ul></description></item><item><title>Pages</title><link>https://justice.bj.cn/homepage/pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/pages/</guid><description/></item><item><title>Experiences</title><link>https://justice.bj.cn/homepage/experiences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/experiences/</guid><description/></item><item><title>Vintage</title><link>https://justice.bj.cn/homepage/vintage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/vintage/</guid><description/></item><item><title>Blank</title><link>https://justice.bj.cn/homepage/blank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/blank/</guid><description>
&lt;div style="text-align:center">
&lt;p>Write anything you like here!&lt;/p>
&lt;/div></description></item><item><title>Golang测试</title><link>https://justice.bj.cn/post/14.language/golang/golang%E6%B5%8B%E8%AF%95/</link><pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E6%B5%8B%E8%AF%95/</guid><description>&lt;h1 id="golang测试">Golang测试&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h3 id="单元测试">单元测试&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">## 执行所有的单元测试&lt;/span>
$ go &lt;span class="nb">test&lt;/span> -v *.go
&lt;span class="c1">## 执行指定的单元测试用例 &lt;/span>
$ go &lt;span class="nb">test&lt;/span> -v *.go -test.run TestFuncName
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2></description></item><item><title>Rust错误处理</title><link>https://justice.bj.cn/post/14.language/rust/40.rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link><pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/40.rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid><description>&lt;h1 id="rust错误处理">Rust错误处理&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Rust 将错误两个主要类别：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>可恢复错误（recoverable）&lt;/strong> ： 由 &lt;code>Result&amp;lt;T, E&amp;gt;&lt;/code> 表示，代表向用户报告错误和重试操作是合理的情况，比如未找到文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>不可恢复错误（unrecoverable）&lt;/strong>： 由&lt;code>panic！&lt;/code>处理，通常是 bug 的同义词，比如尝试访问超过数组结尾的位置。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Rust 并没有异常。&lt;/p>
&lt;h2 id="optiont">Option&lt;T>&lt;/h2>
&lt;p>&lt;code>Option&amp;lt;T&amp;gt;&lt;/code>是 Rust 的系统类型，用来表示值不存在的可能&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// option
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//选项为空
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//选项不为空，存在一个T
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// unwrap: 当遇到None值时会panic
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">unwrap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Option&lt;/span>::&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Option&lt;/span>::&lt;span class="nb">None&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">panic&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unwrap option None&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">unwrap_or&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">option&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">default&lt;/span>: &lt;span class="nc">T&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">option&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">and_then&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">F&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">option&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>: &lt;span class="nc">F&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">F&lt;/span>: &lt;span class="nb">FnOnce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">option&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">ok_or&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">option&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">err&lt;/span>: &lt;span class="nc">E&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">option&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">None&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Err&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">err&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="resultt-e">Result&amp;lt;T, E&amp;gt;&lt;/h2>
&lt;p>&lt;code>Result&lt;/code>是&lt;code>Option&lt;/code>的更通用的版本，它解释了结果错误的原因.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">enum&lt;/span> &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Err&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Result&lt;/code> 枚举和其成员也被导入到了 prelude 中，所以就不需要 &lt;code>Ok&lt;/code> 和 &lt;code>Err&lt;/code> 之前指定 &lt;code>Result::&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">//unwrap: 如果 Result 值是 Ok，返回 Ok 中的值，如果是 Err会自动调用 panic!。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">File&lt;/span>::&lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello.txt&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//expect: 可以在参数中自定义要显示的错误信息，并在自动调用 panic! 时，显示在错误信息中，有助于追踪 panic 的根源。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">File&lt;/span>::&lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello.txt&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Failed to open hello.txt&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="panic">panic!&lt;/h2>
&lt;ul>
&lt;li>&lt;code>panic!&lt;/code> 宏可用于产生一个 panic （恐慌），并开始回退（unwind）它的栈;&lt;/li>
&lt;/ul>
&lt;h2 id="heading">?&lt;/h2>
&lt;p>&lt;code>?&lt;/code> 运算符用在返回值为 &lt;code>Result&lt;/code> 的表达式后面，它等同于这样一个匹配 表达式：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Err(err)&lt;/code> 分支展开成提前返回的 &lt;code>return Err(err)&lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ok(ok)&lt;/code> 分支展开成 &lt;code>ok&lt;/code> 表达式;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>?&lt;/code> 之后直接使用链式方法调用来进一步缩短代码:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">io&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">io&lt;/span>::&lt;span class="n">Read&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">fs&lt;/span>::&lt;span class="n">File&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">read_username_from_file&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">io&lt;/span>::&lt;span class="n">Error&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">String&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">File&lt;/span>::&lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello.txt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">read_to_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//? 只能用于返回值类型为 Result 的函数。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>文件系统测试</title><link>https://justice.bj.cn/post/40.storage/%E5%AD%98%E5%82%A8%E6%B5%8B%E8%AF%95/</link><pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/%E5%AD%98%E5%82%A8%E6%B5%8B%E8%AF%95/</guid><description>&lt;h1 id="文件系统测试">文件系统测试&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"># 安装mpirun
# wget https://download.open-mpi.org/release/open-mpi/v1.10/openmpi-1.10.7.tar.gz
# ./configure --prefix=/usr/local/openmpi/
# make
# make install
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="openmpi">openmpi&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>安装rsh&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装mpirun&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="mdtest">mdtest&lt;/h3>
&lt;h3 id="fio">fio&lt;/h3>
&lt;h3 id="ior">ior&lt;/h3></description></item><item><title>ChubaoFS 读写分析</title><link>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-%E8%AF%BB%E5%86%99%E5%88%86%E6%9E%90/</link><pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-%E8%AF%BB%E5%86%99%E5%88%86%E6%9E%90/</guid><description>&lt;h1 id="chubaofs-读写分析">ChubaoFS 读写分析&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>ExtentClient&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ExtentHandler&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="sdk">sdk&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">ExtentClient&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">streamers&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">uint64&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Streamer&lt;/span>
&lt;span class="nx">dataWrapper&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Wrapper&lt;/span>
&lt;span class="c1">//...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Streamer&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">extents&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExtentCache&lt;/span>
&lt;span class="nx">handler&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExtentHandler&lt;/span>
&lt;span class="nx">dirtylist&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">DirtyExtentList&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">ExtentHandler&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="write">Write&lt;/h2>
&lt;p>chubaofs 客户端写操作由&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// sdk 写数据入口
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">ec&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExtentClient&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inode&lt;/span> &lt;span class="kt">uint64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">offset&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">direct&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetStreamer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">once&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Do&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">func&lt;/span>&lt;span class="p">(){&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetExtents&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">IssueWriteRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">offset&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">direct&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//streamer处理写请求, 获取一个写请求，然后将请求放入s.request 通道
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Streamer&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">offset&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">size&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">direct&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 准备写请求
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">requests&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">extents&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">PrepareWriteRequests&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">offset&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">req&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">requests&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">doWrite&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// streamer 通过extenthandler 将数据写入到datanode中
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Streamer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">doWrite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">offset&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">size&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">direct&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// set storeMode
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">storeMode&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tailOff&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tinySizeLimit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">tailOff&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">tinySizeLimit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">NormalExtentType&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TinyExtentType&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}(&lt;/span>&lt;span class="nx">offset&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tinySizeLimit&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//重试写入
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">MaxNewHandlerRetry&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">ek&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handler&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">offset&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">direct&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 写成功
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">ek&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 写
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">eh&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExtentHandler&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">write&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">total&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">size&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">eh&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">flushPacket&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// eh.request &amp;lt;- packet
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 发送协程,
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">eh&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExtentHandler&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">sender&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">select&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">packet&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">eh&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 接收协程
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">eh&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ExtentHandler&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">receiver&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">select&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="nx">reply&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="nx">eh&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">re&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Golang BTree</title><link>https://justice.bj.cn/post/14.language/golang/golang-btree.go/</link><pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-btree.go/</guid><description>&lt;h1 id="golang-btree">Golang BTree&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Golang基础</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="golang基础">Golang基础&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="初始化">初始化&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-51-07-image-20190412160342216.png" alt="image-20190412160342216">&lt;/p>
&lt;p>规则：&lt;/p>
&lt;ul>
&lt;li>每个package 只会被初始化一次；&lt;/li>
&lt;li>同一个 package，不同文件是按照文件名的顺序来初始化；&lt;/li>
&lt;li>不能循环 import , 例如：A import B ,然后又 B import A；&lt;/li>
&lt;li>任何 package , 都可以存在一个以上的 init() , 执行顺序由上而下；&lt;/li>
&lt;li>main() 只能存在于 package main；&lt;/li>
&lt;li>属于 package main 的文件 , 都将会初始化；&lt;/li>
&lt;/ul>
&lt;h2 id="变量">变量&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>golang变量声明即初始化；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//声明
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="nx">VAR_TYPE&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="基础语法">基础语法&lt;/h2>
&lt;h3 id="类型别名">类型别名&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>类型别名是go 1.9中增加的语法，用于给已有类型设置一个另外的名称；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>语法：&lt;code>type TypeAllias = OldType&lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类型别名除了名称和原类型不同外，其他完全一样，可以直接用在原类型用的所有属性，无须转换；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类型别名不允许循环定义；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大写字母开头的别名支持导出；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// 类型别名
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">identifier&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">Type&lt;/span>
&lt;span class="c1">// 类型定义
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">newType&lt;/span> &lt;span class="nx">Type&lt;/span>
&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="kt">byte&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kt">uint8&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="kt">rune&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kt">int32&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="类型嵌入">类型嵌入&lt;/h3>
&lt;p>golang中的类型不支持继承，但提供了嵌合机制；&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Wheel&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Size&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Engine&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Power&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">// 功率
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Type&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="c1">// 类型
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Car&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Wheel&lt;/span>
&lt;span class="nx">Engine&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">Car&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Wheel&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">Wheel&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">Engine&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">Engine&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">Type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;1.4T&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">Power&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">143&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%+v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="基本数据结构">基本数据结构&lt;/h2>
&lt;h3 id="数组array">数组(array)&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// 初始化
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">arr1&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="nx">arr2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">arr3&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">arr4&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//指针数组
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">arr5&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="nx">arr5&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="c1">//数组复制: 元素个数和类型相同时才能复制
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//多维数组
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">arr10&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="nx">arr10&lt;/span> &lt;span class="o">:=&lt;/span>
&lt;span class="nx">array&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{{&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">31&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">41&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="切片slice">切片(slice)&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//初始化
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">slice1&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="c1">//nil slice
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">slice2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">slice3&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="c1">//空切片
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">slice4&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="映射map">映射(map)&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">dict1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">dict2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Red&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Yellow&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Blue&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="gc">gc&lt;/h3>
&lt;h3 id="goroutine">goroutine&lt;/h3>
&lt;h3 id="channel">channel&lt;/h3>
&lt;h3 id="interface">Interface&lt;/h3>
&lt;h3 id="sync">sync&lt;/h3>
&lt;ul>
&lt;li>WaitGroup&lt;/li>
&lt;/ul>
&lt;h3 id="defer">defer&lt;/h3>
&lt;p>defer 是后进先出。&lt;/p>
&lt;p>panic 需要等defer 结束后才会向上传递。 出现panic恐慌时候，会先按照defer的后入先出的顺序执行，最后才会执行panic。&lt;/p>
&lt;h3 id="关键字">关键字&lt;/h3>
&lt;ul>
&lt;li>defer&lt;/li>
&lt;/ul>
&lt;h3 id="值语义和引用语义">值语义和引用语义&lt;/h3>
&lt;p>Go语言中的大多数类型都基于值语义，包括：&lt;/p>
&lt;ul>
&lt;li>基本类型，如byte、int、bool、float32、string等；&lt;/li>
&lt;li>复合类型，如arry、struct、pointer等；&lt;/li>
&lt;/ul>
&lt;h3 id="字符类型">字符类型&lt;/h3>
&lt;p>golang中有两种字符类型：&lt;/p>
&lt;ul>
&lt;li>byte：uint8 类型， 代表一个&lt;a href="http://c.biancheng.net/c/ascii/">ASCII&lt;/a> 字符;&lt;/li>
&lt;li>rune： int32 类型，代表一个unicode字符；&lt;/li>
&lt;/ul>
&lt;h2 id="注意事项">注意事项&lt;/h2>
&lt;ol>
&lt;li>for-range 的k,v变量在整个遍历过程中共用，不能直接进行引用传递。&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;h2 id="包管理">包管理&lt;/h2>
&lt;h3 id="gopath">GOPATH&lt;/h3>
&lt;h3 id="go-mod">go-mod&lt;/h3>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://www.jianshu.com/p/2904efc7f1a8">图解golang内存分配&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://colobu.com/2017/06/26/learn-go-type-aliases/">了解 Go 1.9 的类型别名&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>ChubaoFS 基础</title><link>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="chubaofs-基础">ChubaoFS 基础&lt;/h1>
&lt;hr>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>ChubaoFS是一个开源的分布式文件存储系统，同时提供&lt;code>POSIX FS&lt;/code>和&lt;code>S3&lt;/code>两种访问接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2018年由JD TigLab开发，2020年加入CNCF基金会，现为CNCF沙箱项目；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ChubaoFS的设计之初是为大规模容器环境提供分布式的文件存储服务；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="特点">特点&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>高可扩展&lt;/strong>：ChubaoFS的所有组件都是支持分布式部署，数据资源通过分片实现横向扩展；&lt;/li>
&lt;li>&lt;strong>高可靠&lt;/strong>：各个资源节点通过multi-raft协议提供的多副本强一致性来保证数据的高可靠；&lt;/li>
&lt;li>&lt;strong>多协议支持&lt;/strong>：同时支持POSIX FS 和S3 协议；&lt;/li>
&lt;li>&lt;strong>大小文件优化&lt;/strong>：ChubaoFS对于大小文件在底层，使用不同的方式进行优化，同时兼顾了大小文件的性能和存储开销；&lt;/li>
&lt;li>&lt;strong>多写入模式支持&lt;/strong>：同时支持顺序写、随机写2种写入模式；&lt;/li>
&lt;li>&lt;strong>动态资源调度&lt;/strong>：ChubaoFS的资源管理基于负载的动态调度算法，能合理分配资源，调度资源，避免热点；&lt;/li>
&lt;li>&lt;strong>部署简便&lt;/strong>：各组件部署不依赖其他组件，部署方便；同时提供docker，k8s容器部署组件；&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/09/18-11-38-03-2021-09-18-11-37-54-image.png" alt="">&lt;/p>
&lt;hr>
&lt;h2 id="组件">组件&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>资源管理节点&lt;/strong>(&lt;code>Master&lt;/code>)：执行集群资源管理、分配、调度的节点，资源管理节点只参与资源管理和调度，不进行具体的数据读写；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>元数据节点&lt;/strong>(&lt;code>MetaNode&lt;/code>)：提供文件元数据(&lt;code>Meta&lt;/code>)管理、存储服务的节点，文件元数据包括inode、dentry、extend等，通过分片(&lt;code>MetaParitition&lt;/code>)分布到不同的元数据节点，通过multi-raft保证多副本一致性；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据节点&lt;/strong>(&lt;code>DataNode&lt;/code>)：提供文件数据(&lt;code>Data&lt;/code>)管理、存储服务的节点，文件数据通过数据分片(&lt;code>DataPartition&lt;/code>)分布到不同的数据节点，通过多副本保证数据高可用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对象存储节点&lt;/strong>(&lt;code>ObjectNode&lt;/code>): 提供S3访问服务的节点，&lt;code>ObjectNode&lt;/code>节点主要提供S3协议解析及uri映射功能，为无状态节点，可以动态部署；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Fuse客户端&lt;/strong>(&lt;code>Client&lt;/code>): Fuse客户端为用户提供POSIX FS文件访问接口；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="基础概念">基础概念&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>集群&lt;/strong>(&lt;code>Cluster&lt;/code>)：一组建立副本关系的&lt;code>Master&lt;/code>和由其管理的&lt;code>MetaNode&lt;/code>, &lt;code>DataNode&lt;/code>, &lt;code>ObjectNode&lt;/code>节点构成一个集群；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>卷&lt;/strong>（&lt;code>Volume&lt;/code>）：卷是一个逻辑视图，每个卷由一组相关的&lt;code>MetaPartition&lt;/code>, 数据分组&lt;code>DataPartition&lt;/code>组合；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据分片&lt;/strong>（&lt;code>DataPartition&lt;/code>）: 数据分片是文件数据管理的单元，chubaofs在数据分片为单位来实现数据的分布，复制等管理，从而实现数据的扩展和高可用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>元数据分片&lt;/strong>（&lt;code>MetaPartition&lt;/code>）: 元数据分片是文件元数据管理单元；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>副本组&lt;/strong>（&lt;code>Replicas&lt;/code>）：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据集&lt;/strong>（&lt;code>Extent&lt;/code>）:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="资源管理">资源管理&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Master是chubaofs系统中进行资源管理、分配的组件;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Master主要管理chubaofs集群中的所有元数据节点(metanode)，数据节点(datanode)及这些节点上的mp,dp等资源；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Master通过raft来实现多节点部署时的数据同步，以提供master的高可用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Master只有一个Leader节点提供服务，非Leader节点只作为备份节点，只是作为Leader节点的数据副本；当发生Leader切换时，新当选的Leader提供继续提供服务；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Master只参与资源管理和分配，不参与具体的读写流程，轻量化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Master主要管理的资源包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>MetaNode节点管理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DataNode节点管理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Volume资源管理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用户管理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>状态监测；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="元数据管理">元数据管理&lt;/h2>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="数据管理">数据管理&lt;/h2>
&lt;ul>
&lt;li>
&lt;hr>
&lt;/li>
&lt;/ul>
&lt;h3 id="fuseclient">FuseClient&lt;/h3>
&lt;hr>
&lt;h3 id="s3">S3&lt;/h3>
&lt;hr>
&lt;h3 id="加载volume">加载Volume&lt;/h3>
&lt;hr>
&lt;h3 id="数据修复">数据修复&lt;/h3>
&lt;hr>
&lt;h2 id="未来">未来&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>metanode内存优化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>datanode nvme+spdk优化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>网络库优化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>raft 优化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>web console；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>EC node；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="http://chubao.io/">http://chubao.io/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://chubaofs.readthedocs.io/">https://chubaofs.readthedocs.io/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cncf.io/projects/chubaofs/">ChubaoFS | Cloud Native Computing Foundation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/chubaofs/chubaofs">GitHub - chubaofs/chubaofs: ChubaoFS (abbrev. CBFS) is a cloud native distributed file system and object store.&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Etcd Raft</title><link>https://justice.bj.cn/post/40.storage/etcd-raft/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/etcd-raft/</guid><description>&lt;h1 id="etcd-raft">Etcd Raft&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://blog.betacat.io/post/raft-implementation-in-etcd/">Raft 在 etcd 中的实现 - 喵叔没话说&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>ToyDB</title><link>https://justice.bj.cn/post/30.architech/toydb/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/toydb/</guid><description>&lt;h1 id="toydb">ToyDB&lt;/h1>
&lt;hr>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>&lt;code>toydb&lt;/code>是&lt;code>Erik Grinaker &lt;/code>为学习&lt;code>rust&lt;/code>语言而开发的分布式sql数据库，支持分布式事务模型;&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;code>toydb&lt;/code>主要由两部分组成：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>toydb&lt;/code>: 多个节点组成的分布式存储引擎，通过raft保证多节点间数据一致性；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>toysql&lt;/code>: sql客户端，负责sql的解析、生成执行计划、执行；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/10/07-18-54-21-2021-10-07-18-54-16-image.png" alt="">&lt;/p>
&lt;h2 id="分析">分析&lt;/h2>
&lt;p>SQL语句 &amp;ndash;&amp;gt; 词法分析 &amp;mdash;-&amp;gt; 语法分析&amp;mdash;&amp;gt;生成执行计划&amp;mdash;&amp;gt;&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/06/18-16-00-47-2021-06-18-16-00-44-image.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/06/18-15-38-36-2021-06-18-15-38-32-image.png" alt="">&lt;/p>
&lt;h3 id="词法分析lexer">词法分析(Lexer)&lt;/h3>
&lt;p>Lexer 也称为分词，从左向右扫描SQL，将其分割成一个个的toke(不可分割的，具有独立意义的单元，类似英语中的单词)。&lt;/p>
&lt;p>Lexer的实现一般都是构造DFA(确定性有限状态自动机)来实现的。&lt;/p>
&lt;p>状态转移图如下，这是一个能够识别标识符，数字和一般运算符的词法解析器。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/06/18-14-44-04-2021-06-18-14-44-00-image.png" alt="">&lt;/p>
&lt;h3 id="语法分析parser">语法分析(Parser)&lt;/h3>
&lt;p>Parser阶段有两种类型方法来实现，一种是自顶向下分析法，另一种是自底向上分析法，简单介绍一下两种类型分析法的处理思路。&lt;/p>
&lt;h3 id="执行计划">执行计划&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">SQL String ---词法分析&amp;lt;Lexer&amp;gt;--&amp;gt; Token --&amp;lt;语法分析&amp;gt;--&amp;gt; AST Statement
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>SQL String &amp;ndash;&amp;gt;&lt;/p>
&lt;h2 id="sql-engine">Sql Engine&lt;/h2>
&lt;h2 id="mvcc">MVCC&lt;/h2>
&lt;h2 id="raft-engine">Raft Engine&lt;/h2>
&lt;p>&lt;code>toydb&lt;/code> 通过raft来实现各节点间数据的一致性，其自带的raft模块由rust语言提供的一个简单的实现。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/10/08-13-34-25-2021-10-08-13-34-19-image.png" alt="">&lt;/p>
&lt;p>Raft内部有2个状态机：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>复制状态机(): 主要用于日志复制，保证各个副本日志的落盘及一致；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指令状态机(&lt;code>State&lt;/code>): 主要作用是根据日志执行指令；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>由于复制状态机的Raft协议可以保证日志序列的唯一性，所以由日志驱动的不同副本的指令状态机将拥有相同的输入指令序列，在初始状态相同的情况下，指令状态机将会得到相同的输出，以此就保证了各个副本外部最终状态的一致性；&lt;/p>
&lt;ul>
&lt;li>
&lt;p>复制状态机是raft协议的核心；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指令状态机由raft日志驱动来改变外界状态，是raft协议和外界交互的接口；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="evenloop">EvenLoop&lt;/h2>
&lt;p>&lt;code>Raft&lt;/code> 的主驱动是&lt;code>EvenLoop&lt;/code>。节点启动时，会开启一个&lt;code>evenloop&lt;/code>后台异步任务，持续监听&lt;code>tick&lt;/code>, &lt;code>tcp_in_tx&lt;/code>, &lt;code>client_rx&lt;/code>, &lt;code>node_rx&lt;/code>这4个事件源上的消息&lt;code>Msg&lt;/code>，以此来驱动整个状态机的运行：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>tick&lt;/code>事件由定时器产生，转入相应rolenode的&lt;code>tick&lt;/code>处理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>tcp_in_tx&lt;/code>事件由其他节点peer产生，交由&lt;code>raft&lt;/code> 状态机&lt;code>step&lt;/code>处理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>node_rx&lt;/code>事件由节点&lt;RaftNode>内部产生，需根据事件消息的接收对象(&lt;code>to&lt;/code>)分别处理；&lt;/p>
&lt;ul>
&lt;li>发往副本（&lt;code>to&lt;/code>为&lt;code>Address::Peer&lt;/code>, &lt;code>Address::Peers&lt;/code>）的消息，放入&lt;code>tcp_tx&lt;/code>交由&lt;code>TcpSender&lt;/code>进行发送；&lt;/li>
&lt;li>发往&lt;code>Client&lt;/code>（&lt;code>Address::Client&lt;/code>） 且事件类型为&lt;code>Event::ClientResponse&lt;/code>的消息, 根据&lt;code>id&lt;/code>从&lt;code>requests&lt;/code>表中找到该消息响应rx&lt;code>response_tx&lt;/code>，通过&lt;code>response_tx&lt;/code>将消息响应回复给&lt;code>Client&lt;/code>;&lt;/li>
&lt;li>其他消息为非法消息, 报错并退出；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>client_rx&lt;/code>事件由客户端产生，处理如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>先为事件生成uuid作为唯一id；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>以id为key, 将消息响应rx&lt;code>request_rx&lt;/code>放入&lt;code>requests&lt;/code> 哈希表中，该表用于后续消息响应时处理消息返回；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成一个&lt;code>ClientRequest&lt;/code>类型的消息 ，交由&lt;code>Rolenode&lt;/code>的&lt;code>step&lt;/code>处理；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Evenloop&lt;/code>接收到消息后，通过&lt;code>tick()&lt;/code>, &lt;code>step()&lt;/code>来驱动复制状态机执行日志复制操作。&lt;/p>
&lt;p>各节点收到&lt;code>ClientRequest&lt;/code>后处理流程&lt;code>Step()&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Candidate&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>将&lt;code>ClientRequest&lt;/code>消息放入&lt;code>queued_reqs&lt;/code>队列中进行缓存，等待变为&lt;code>Leader&lt;/code>后，再依次处理；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Follower&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果没有&lt;code>Leader&lt;/code>， 则也将消息放入&lt;code>queued_reqs&lt;/code>中缓存；// queud_reqs 后续处理?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果有&lt;code>Leader&lt;/code>, 则将消息(id, from)放入&lt;code>proxied_reqs&lt;/code>中记录下来，然后转发到&lt;code>Leader&lt;/code>，由&lt;code>Leader&lt;/code>处理；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Leader&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Request::Query&lt;/code>消息：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过&lt;code>state_tx&lt;/code>，向状态机发送&lt;code>Instruction::Query&lt;/code>指令，状态机将指令插入到&lt;code>queries&lt;/code>中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过&lt;code>state_tx&lt;/code>, 向状态机发送&lt;code>Instruction::Vote&lt;/code>指令, 统计；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若存在副本，则向副本发送&lt;code>Event::Heartbeat&lt;/code>消息，和&lt;code>Follower&lt;/code>；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Request::Mutate&lt;/code>消息：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>将消息记录到本地log中;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>复制log到各个Follower；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接收到多数&lt;code>Follower&lt;/code>的确认消息后，commit消息；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>给状态机发送&lt;code>Instruction::Notify&lt;/code>指令；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果&lt;code>peers&lt;/code>为空，提交；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Request::Status&lt;/code>消息：&lt;/p>
&lt;ul>
&lt;li>根据当前节点状态，生成&lt;code>Instruction::Status&lt;/code>，通过&lt;code>state_tx&lt;/code>交由状态机执行；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="指令状态机">指令状态机&lt;/h3>
&lt;p>指令状态机由&lt;code>Driver::drive()&lt;/code>驱动。每个Raft Node新建时，会开启一个driver后台任务，该任务从&lt;code>state_rx&lt;/code>接收指令，交由&lt;code>execute&lt;/code>处理，各指令处理流程如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Instruction::Abort&lt;/code>:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Instruction::Apply&lt;/code>:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Instruction::Notify&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果指令&lt;code>index&lt;/code>大于状态机已经&lt;code>applied_index&lt;/code>, 将(index, (address, id))插入到状态机&lt;code>notify&lt;/code>哈希表中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>否则指令已被应用过，通过&lt;code>node_tx&lt;/code>给Raft Node 发送&lt;code>ClientResponse&lt;/code>消息，由Raft Node将错误消息返回给客户端；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Instruction::Query&lt;/code>:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Instruction::Status&lt;/code>:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Instruction::Vote&lt;/code>:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="源码">源码&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Log&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Log&lt;/code>(日志)是Raft状态机&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="sd">/// The replicated Raft log
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Log&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">super&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">store&lt;/span>: &lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">dyn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">log&lt;/span>::&lt;span class="n">Store&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">super&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">last_index&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">super&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">last_term&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">super&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commit_index&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">super&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commit_term&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>Driver&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">//状态机接口
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">State&lt;/span>: &lt;span class="nb">Send&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">applied_index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">u64&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">mutate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">index&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">command&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//修改状态机状态
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">command&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Result&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//查询状态机
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//状态机驱动
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Driver&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">state_rx&lt;/span>: &lt;span class="nc">mpsc&lt;/span>::&lt;span class="n">UnboundedReceiver&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//状态机指令输入口
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">node_tx&lt;/span>: &lt;span class="nc">mpsc&lt;/span>::&lt;span class="n">UnboundedSender&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Message&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//raft协议消息输出口
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">applied_index&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">notify&lt;/span>: &lt;span class="nc">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Address&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//通知客户端更改被采用
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">queries&lt;/span>: &lt;span class="nc">BTreeMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BTreeMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Query&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//等待处理的客户端查询指令，
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// 状态机指令
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="nc">Instruction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Abort&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//取消
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Apply&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">entry&lt;/span>: &lt;span class="nc">Entry&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//应用
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Notify&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">address&lt;/span>: &lt;span class="nc">Address&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">index&lt;/span>: &lt;span class="kt">u64&lt;/span> &lt;span class="p">},&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//通知
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">address&lt;/span>: &lt;span class="nc">Address&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">command&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">term&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">index&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">quorum&lt;/span>: &lt;span class="kt">u64&lt;/span> &lt;span class="p">},&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//查询
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Status&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">address&lt;/span>: &lt;span class="nc">Address&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">status&lt;/span>: &lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Status&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//状态机状态
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Vote&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">term&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">index&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">address&lt;/span>: &lt;span class="nc">Address&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//投票
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="raft角色">Raft角色&lt;/h3>
&lt;h4 id="leader">Leader&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// 节点共有属性
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">RoleNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//节点id
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">peers&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">term&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">log&lt;/span>: &lt;span class="nc">Log&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pre_vote&lt;/span>: &lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">node_tx&lt;/span>: &lt;span class="nc">mpsc&lt;/span>::&lt;span class="n">UnboundedSender&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Message&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//和node之间发送Msg通道
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">state_tx&lt;/span>: &lt;span class="nc">mpsc&lt;/span>::&lt;span class="n">UnboundedSender&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//节点往状态机驱动发送状态机指令通道
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">queued_reqs&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Address&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Event&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">proxied_reqs&lt;/span>: &lt;span class="nc">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Address&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">role&lt;/span>: &lt;span class="nc">R&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// leader专有属性字段
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Leader&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">heartbeat_ticks&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//心跳计数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">peer_next_index&lt;/span>: &lt;span class="nc">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">u64&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//复制到副本的下一个index
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">peer_last_index&lt;/span>: &lt;span class="nc">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">u64&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//已知复制到副本的最后index
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// follower专有字段
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Follower&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">leader&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">leader_seen_ticks&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">leader_seen_timeout&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">voted_for&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// candidate专有字段
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Candidate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">election_ticks&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">election_timeout&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">votes&lt;/span>: &lt;span class="kt">u64&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://github.com/erikgrinaker/toydb">https://github.com/erikgrinaker/toydb&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/erikgrinaker/toydb/blob/master/docs/architecture.md">toydb/architecture.md at master · erikgrinaker/toydb · GitHub&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>AWS常用概念</title><link>https://justice.bj.cn/post/30.architech/aws-s3/aws-%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/aws-s3/aws-%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</guid><description>&lt;h1 id="aws常用概念">AWS常用概念&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>每个&lt;strong>Region&lt;/strong>都是完全独立的。每个&lt;strong>Availability Zone&lt;/strong>都是隔离的，但是Region中的可用区通过低延迟链接连接。&lt;strong>Local Zone&lt;/strong>是一种AWS基础架构部署，可将所选服务放置在更接近最终用户的位置。&lt;strong>Local Zone&lt;/strong>是与您所在区域不同位置的区域的扩展。它为AWS基础架构提供了高带宽主干，非常适合对延迟敏感的应用程序，例如机器学习。下图说明了区域，可用区域和本地区域之间的关系。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/21-08-59-25-2020-03-03-12-48-56-image.png" alt="">&lt;/p>
&lt;p>Amazon EC2资源是以下资源之一：全局，与Region，&lt;strong>Availability Zone&lt;/strong>或&lt;strong>Local Zone&lt;/strong>绑定&lt;/p>
&lt;h2 id="region">Region&lt;/h2>
&lt;p>每个Amazon EC2 &lt;strong>Region&lt;/strong>都旨在与其他Amazon EC2 &lt;strong>Region&lt;/strong>隔离。这样可以实现最大的容错能力和稳定性。&lt;/p>
&lt;p>当您查看您的资源时，您只会看到与您指定的区域相关联的资源。这是因为区域彼此隔离，并且我们不会自动在区域之间复制资源。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>BlobFS</title><link>https://justice.bj.cn/post/40.storage/spdk/blobfs%E6%BA%90%E7%A0%81/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/spdk/blobfs%E6%BA%90%E7%A0%81/</guid><description>&lt;h1 id="blobfs">BlobFS&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>blobfs 是 spdk 中基于 blobstore 块设备实现的一个简易的文件系统。&lt;/p>
&lt;h2 id="编译">编译&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">$ yum install -y libaio libaio-devel ncurses ncureses-devel CUnit fuse3 fuse3-devel jq
$ pip3 install meson
$ wget https://sourceforge.net/projects/cunit/files/latest/download
$ git clone https://github.com/spdk/spdk
$ &lt;span class="nb">cd&lt;/span> spdk
$ git submodule update --init
$ sh scripts/pkgdep.sh
$ wget -O /tmp/ninja-linux.zip https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> unzip /tmp/ninja-linux.zip &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> mv ninja /usr/local/bin/
$ ./configure --with-fuse
$ wget http://mirror.centos.org/centos/8/BaseOS/x86_64/os/Packages/libaio-devel-0.3.112-1.el8.x86_64.rpm -o /tmp/
$ sudo rpm -ivh /tmp/
$ make -j8
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="挂载-blobfs">挂载 blobfs&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">#iommu 设置&lt;/span>
&lt;span class="c1">#/etc/default/grub中，增加&lt;/span>
&lt;span class="nv">GRUB_CMDLINE_LINUX&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xxx default_hugepagesz=1G hugepagesz=1G hugepages=16 hugepagesz=2M hugepages=2048 intel_iommu=on&amp;#34;&lt;/span>
$ grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg &lt;span class="c1">#uefi&lt;/span>
$ grub2-mkconfig -o /boot/grub2/grub.cfg &lt;span class="c1">#no uefi&lt;/span>
$ mkdir -p /mnt/huge1G
$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;nodev /mnt/huge1G hugetlbfs pagesize=1GB 0 0&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/fstab
&lt;span class="c1"># 设置hugepage&lt;/span>
$ &lt;span class="nb">echo&lt;/span> &lt;span class="m">16&lt;/span> &amp;gt; /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages
$ mount -t hugetlbfs none /mnt/huge1G -o &lt;span class="nv">pagesize&lt;/span>&lt;span class="o">=&lt;/span>1G
&lt;span class="c1"># 加载vfio-pci 驱动模块&lt;/span>
$ modprobe vfio-pci
$ modprobe
&lt;span class="c1"># 查看nvme 设备&lt;/span>
$ lspci -nn &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;Non-Volatile&amp;#34;&lt;/span>
&lt;span class="c1">#&amp;gt; 84:00.0 Non-Volatile memory controller [0108]: Intel Corporation NVMe Datacenter SSD [3DNAND, Beta Rock Controller] [8086:0a54]&lt;/span>
&lt;span class="c1"># [[[[&amp;lt;domain&amp;gt;]:]&amp;lt;bus&amp;gt;]:][&amp;lt;device&amp;gt;][.[&amp;lt;func&amp;gt;]]：0000:84:00.0&lt;/span>
&lt;span class="c1"># [&amp;lt;vendor&amp;gt;]:[&amp;lt;device&amp;gt;]： 8086:0a54&lt;/span>
&lt;span class="c1"># 解绑nvme驱动&lt;/span>
$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;0000:84:00.0&amp;#34;&lt;/span> &amp;gt;/sys/bus/pci/devices/0000:84:00.0/driver/unbind
&lt;span class="c1"># 绑定到vfio驱动&lt;/span>
$ &lt;span class="nb">echo&lt;/span> &lt;span class="m">8086&lt;/span> 0a54 &lt;span class="p">|&lt;/span> tee /sys/bus/pci/drivers/vfio-pci/new_id
&lt;span class="c1">#&amp;gt; 绑定成功后，检查&lt;/span>
&lt;span class="c1">#&amp;gt; - lsblk 看不到nvme盘&lt;/span>
&lt;span class="c1">#&amp;gt; - vfio下面多了一个设备文件：ls /dev/vfio/4&lt;/span>
&lt;span class="c1"># 或者绑定到uio&lt;/span>
$ &lt;span class="nb">echo&lt;/span> &lt;span class="m">8086&lt;/span> 0a54 &amp;gt; /sys/bus/pci/drivers/uio_pci_generic/new_id
&lt;span class="c1"># 驱动准备完成&lt;/span>
$ &lt;span class="nb">cd&lt;/span> &amp;lt;SPDK_HOME&amp;gt;
&lt;span class="c1"># 生成nvme配置文件&lt;/span>
$ scripts/gen_nvme.sh --json-with-subsystems &amp;gt; nvme.json
&lt;span class="c1"># 查看状态&lt;/span>
$ sudo scripts/setup.sh status
&lt;span class="c1"># 设置hugepage&lt;/span>
$ &lt;span class="nv">HUGEMEM&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">5120&lt;/span> scripts/setup.sh
&lt;span class="c1"># 生成配置文件&lt;/span>
$ scripts/gen_nvme.sh --json-with-subsystems &amp;gt; nvme.json
&lt;span class="c1"># 初始化blobfs&lt;/span>
$ ./test/blobfs/mkfs/mkfs ./nvme.json Nvme0n1
&lt;span class="c1"># 挂载至/mnt/fuse&lt;/span>
$ ./test/blobfs/fuse/fuse ./nvme.json Nvme0n1 /mnt/fuse
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="源码解读">源码解读&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>lib&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>module/blobfs&lt;/code>目录&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>module&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// spdk/module/blobfs/bdev/blobfs_bdev.c
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 检测bdev设备是否存在blobfs，若存在，则加载blobfs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">spdk_blobfs_bdev_detect&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">spdk_blobfs_bdev_create&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">// 挂载
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">spdk_blobfs_bdev_mount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">bdev_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">mountpoint&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">spdk_blobfs_bdev_op_complete&lt;/span> &lt;span class="n">cb_fn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">cb_arg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// include 目录
&lt;/span>&lt;span class="c1">// spdk/include/blobfs.h
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// lib 目录
&lt;/span>&lt;span class="c1">// spdk/lib/blobfs.c
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// module目录
&lt;/span>&lt;span class="c1">// spdk/module/blobfs/bdev/blobfs_bdev.c
&lt;/span>&lt;span class="c1">// spdk/module/blobfs/bdev/blobfs_bdev_rpc.c
&lt;/span>&lt;span class="c1">// spdk/module/blobfs/bdev/blobfs_fuse.c
&lt;/span>&lt;span class="c1">// spdk/module/blobfs/bdev/blobfs_fuse.h
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// test目录
&lt;/span>&lt;span class="c1">// spdk/test/blobfs/blobfs.sh //blobfs 功能测试启动脚本
&lt;/span>&lt;span class="c1">// spdk/test/blobfs/fuse/fuse.c
&lt;/span>&lt;span class="c1">// spdk/test/blobfs/mkfs/mkfs.c
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// spdk/test/blobfs/rocksdb/
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="blobfs-patch">blobfs patch&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://review.spdk.io/gerrit/c/spdk/spdk/+/5420">https://review.spdk.io/gerrit/c/spdk/spdk/+/5420&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="patch">Patch&lt;/h2>
&lt;h3 id="5420-random-write">5420: random write&lt;/h3>
&lt;p>新 API&lt;code>spdk_file_randomwrite()&lt;/code>用于支持文件随机写。原有代码仅支持追加写，在追加写和随机读之间有一个内存缓存。&lt;/p>
&lt;p>为了支持随机写特性，需要进行如下工作：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>将缓存中的数据刷入到后端 blobstore 中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除所有的缓存&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>BlobStore</title><link>https://justice.bj.cn/post/40.storage/spdk/blobstore/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/spdk/blobstore/</guid><description>&lt;h1 id="blobstore">BlobStore&lt;/h1>
&lt;hr>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>SPDK bdev层类似于内核中的通用块设备层，是对底层不同类型设备（如NVMe bdev、Malloc bdev、AIO bdev等）的统一抽象管理。&lt;/p>
&lt;p>BlobStore是位于SPDK bdev之上，通过不同层级的抽象，实现对磁盘块(LBA)的管理，实现了对Blob的管理，包括Blob的分配、删除、读取、写入、元数据的管理等；&lt;/p>
&lt;p>BlobFS是在Blobstore的基础上进行封装的一个轻量级文件系统，用于提供部分对于文件操作的接口，并将对文件的操作转换为对Blob的操作，&lt;/p>
&lt;p>用于与用户态文件系统Blobstore Filesystem （BlobFS）集成，从而代替传统的文件系统，支持更上层的服务，如数据库MySQL、K-V存储引擎Rocksdb以及分布式存储系统Ceph、Cassandra等。&lt;/p>
&lt;hr>
&lt;h2 id="blobstore-1">BlobStore&lt;/h2>
&lt;h3 id="数据块管理">数据块管理&lt;/h3>
&lt;p>在blobstore中，将SSD中的块划分为多个抽象层：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/09-10-54-17-2020-11-09-10-54-11-image.png" alt="">&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Logical Block&lt;/strong>：与块设备中所提供的逻辑块相对应，通常为512B或4KiB。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Page&lt;/strong>：由多个连续的Logical Block构成，通常一个page的大小为4KiB，因此一个Page由八个或一个Logical Block构成，取决于Logical Block的大小。&lt;/p>
&lt;ul>
&lt;li>在Blobstore中，Page是连续的，即从SSD的LBA 0开始，多个或一个块构成Page 0,接下来是Page 1，依次类推。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cluster&lt;/strong>：由多个连续的Page构成，通常一个Cluster的大小默认为1MiB，因此一个Cluster由256个Page构成。&lt;/p>
&lt;ul>
&lt;li>Cluster与Page一样，是连续的，即从SSD的LBA 0开始的位置依次为Cluster 0到Cluster N。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Blob&lt;/strong>：Blobstore中主要的操作对象为Blob，与BlobFS中的文件相对应，提供read、write、create、delete等操作。&lt;/p>
&lt;ul>
&lt;li>一个Blob由多个Cluster构成，但构成Blob中的Cluster并不一定是连续的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="数据块管理-1">数据块管理&lt;/h2>
&lt;p>在Blobstore中，会将cluster 0作为一个特殊的cluster。&lt;/p>
&lt;p>该cluster用于存放Blobtore的所有信息以及元数据，对每个blob数据块的查找、分配都是依赖cluster 0中所记录的元数据所进行的。&lt;/p>
&lt;p>Cluster 0的结构如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/09-10-54-53-2020-11-09-10-54-48-image.png" alt="">&lt;/p>
&lt;p>Cluster 0中的第一个page作为super block，Blobstore初始化后的一些基本信息都存放在super block中，例如cluster的大小、已使用page的起始位置、已使用page的个数、已使用cluster的起始位置、已使用cluster的个数、Blobstore的大小等信息。&lt;/p>
&lt;hr>
&lt;h3 id="元数据">元数据&lt;/h3>
&lt;p>Cluster 0中的其它page将组成元数据域（metadata region）。元数据域主要由以下几部分组成：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/09-14-10-48-2020-11-09-14-10-36-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Metadata Page Allocation：用于记录所有元数据page的分配情况。在分配或释放元数据页后，将会对metadata page allocation中的数据做相应的修改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Cluster Allocation：用于记录所有cluster的分配情况。在分配新的cluster或释放cluster后会对cluster allocation中的数据做相应的修改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Blob Id Allocation：用于记录blob id的分配情况。对于blobstore中的所有blob，都是通过唯一的标识符blob id将其对应起来。在元数据域中，将会在blob allocation中记录所有的blob id分配情况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Metadata Pages Region：元数据页区域中存放着每个blob的元数据页。每个blob中所分配的cluster都会记录在该blob的元数据页中，在读写blob时，首先会通过blob id定位到该blob的元数据页，其次根据元数据页中所记录的信息，检索到对应的cluster。对于每个blob的元数据页，并不是连续的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>对于一个blob来说，metadata page记录了该blob的所有信息，数据存放于分配给该blob的cluster中。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在创建blob时，首先会为其分配blob id以及metadata page，其次更新metadata region。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当对blob进行写入时，首先会为其分配cluster，其次更新该blob的metadata page，最后将数据写入，并持久化到磁盘中。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>为了实现对磁盘空间的动态分配管理，Blobstore中为每个blob分配的cluster并不是连续的。&lt;/p>
&lt;p>对于每个blob，通过相应的结构维护当前使用的cluster以及metadata page的信息：clusters与pages。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Cluster: 记录了当前该blob所有cluster的LBA起始地址，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>pages: 记录了当前该blob所有metadata page的LBA起始地址。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Blobstore实现了对磁盘空间分配的动态管理，并保证断电不丢失数据，具有persistent特性。&lt;/p>
&lt;p>Blobstore中的配置信息与数据信息均在super block与metadata region中管理，在重启后，若要保持persistent，可以通过Blobstore中所提供的load操作。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：&lt;/p>
&lt;blockquote>
&lt;p>Blob的persistent主要是针对NVMe这类bdev。对于Malloc bdev，由于其本身的性质，是无法保证Blob的persistent，需要重启后进行重新配置。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="blobfs">BlobFS&lt;/h2>
&lt;h3 id="blobfs-文件接口">BlobFS 文件接口&lt;/h3>
&lt;p>blobfs文件系统接口实现了基本的文件操作，&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>同步API&lt;/th>
&lt;th>异步API&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>打开文件&lt;/td>
&lt;td>spdk_fs_open_file&lt;/td>
&lt;td>spdk_fs_open_file_async&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>创建文件&lt;/td>
&lt;td>spdk_fs_create_file&lt;/td>
&lt;td>spdk_fs_create_file_async&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>删除文件&lt;/td>
&lt;td>spdk_fs_delete_file&lt;/td>
&lt;td>spdk_fs_delete_file_async&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>重命名文件&lt;/td>
&lt;td>spdk_fs_rename_file&lt;/td>
&lt;td>spdk_fs_rename_file_async&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>文件状态&lt;/td>
&lt;td>spdk_fs_file_stat&lt;/td>
&lt;td>spdk_fs_file_stat_async&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>写&lt;/td>
&lt;td>spdk_file_write&lt;/td>
&lt;td>spdk_file_write_async/sspdkfile_writev_async&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>读&lt;/td>
&lt;td>spdk_file_read&lt;/td>
&lt;td>spdk_file_read_async/sspdkfile_readv_async&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>truncate&lt;/td>
&lt;td>spdk_file_truncate&lt;/td>
&lt;td>spdk_file_truncate_async&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sync&lt;/td>
&lt;td>spdk_file_sync&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>关闭&lt;/td>
&lt;td>spdk_file_close&lt;/td>
&lt;td>spdk_file_close_async&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="缓存">缓存&lt;/h3>
&lt;p>为了提高文件的读取效率，BlobFS在内存中提供了cache buffer，由多层树结构组成，其结构如下所示：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/09-10-58-02-2020-11-09-10-56-44-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>最底层Level 0叶子节点为buffer node，是用于存放数据的buffer。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Level 0以上的其它层中，均为tree node，用于构建树的索引结构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在文件读写的时候，根据文件结构中的根节点以及读取位置的offset信息，在树结构中通过索引查找buffer node的位置，即从Level N，逐步定位到对应的Level 0的叶子节点。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="写">写&lt;/h3>
&lt;p>BlobFS目前用于支持上层的Rocksdb，在Rocksdb的抽象环境层中提供文件的接口，目前仅支持append类型的写操作。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/09-10-57-32-2020-11-09-10-57-04-image.png" alt="">&lt;/p>
&lt;hr>
&lt;p>在进行文件写入：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>首先会根据文件当前的写入位置检查是否符合cache buffer写入需求，若满足，则直接将数据写入到cache buffer中，同时触发异步的flush操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在flush的过程中，BlobFS触发Blob的写操作，将cache buffer中的数据，写入到文件对应blob的相应位置。若不满足cache buffer的写入需求，BlobFS则直接触发文件对应的blob的写操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Blobstore首先为该blob分配cluster，根据计算得到的写入LBA信息，向SPDK bdev层发送异步的写请求，将数据写入，并更新相应的元数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于元数据的更新，出于性能考虑，当前对元数据的更新都在内存中操作，当用户使用强制同步或卸载Blobstore时，更新后的元数据信息才会同步到磁盘中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>此外，blob结构中维护了两份可变信息（指cluster与metadata page）的元数据，分别为clean与active。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Clean中记录的是当前磁盘的元数据信息，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>而active中记录的是当前在内存中更新后的元数据信息。同步操作会将clean中记录的信息与active记录的信息相匹配。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="读流程">读流程&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/09-10-47-19-2020-11-04-09-45-33-image.png" alt="">&lt;/p>
&lt;hr>
&lt;p>在文件读写时：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>首先会进行read ahead操作，将一部分数据从磁盘预先读取到内存的buffer中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其后，根据cache buffer的大小，对文件的I/O进行切分，使每个I/O的最大长度不超过一个cache buffer的大小；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于拆分后的文件I/O，会根据其offset在cache buffer tree中查找相应的buffer；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若存在，则直接从cache buffer中读取数据，进行memcpy；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>而对于没有缓存到cache buffer中的数据，将会对该文件的读取，转换到该文件对应的Blob进行读取。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对Blob读取时候，根据已打开的blob结构中记录的信息，可以获取该blob所有cluster的LBA起始位置，并根据读取位置的offset信息，计算相应的LBA地址。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后向SPDK bdev层发送异步的读请求，并等待I/O完成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BlobFS所提供的读操作为同步读，I/O完成后会在callback函数中，通过信号量通知BlobFS完成信号，至此文件读取结束。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="blobfs-fuse">BlobFS FUSE&lt;/h3>
&lt;p>BlobFS提供了一个FUSE插件，用于将SPDK BlobFS作为内核文件系统安装，以便进行检查或调试。FUSE插件需要fuse3，并在系统上检测到fuse3时自动构建。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">test/blobfs/fuse/fuse /usr/local/etc/spdk/rocksdb.conf Nvme0n1 /mnt/fuse
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">static&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">fuse_operations&lt;/span> &lt;span class="n">spdk_fuse_oper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">getattr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fuse_getattr&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">readdir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fuse_readdir&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">mknod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fuse_mknod&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">unlink&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fuse_unlink&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">truncate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fuse_truncate&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">utimens&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fuse_utimens&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">open&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fuse_open&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">release&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fuse_release&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">read&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fuse_read&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fuse_write&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">flush&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fuse_flush&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">fsync&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fuse_fsync&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="n">rename&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fuse_rename&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="blobfs当前限制">BlobFS当前限制&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>现有BlobFS只在RocksDB上进行了测试，其他不同于RocksDB的文件系统使用场合可能会有问题，以后会进行更严格的测试；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>现在只支持同步操作API。异步API开发中，未经过严格测试，将于以后版本中完成；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>文件&lt;code>rename&lt;/code>API不是原子操作。将于未来版本修复；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当前不支持目录，只支持扁平的文件命名空间。文件名作为xattrs存储于blob中，文件名&lt;code>lookup&lt;/code>为&lt;code>O(n)&lt;/code>级。&lt;code>btree&lt;/code>版本目录支持实现将于未来版本支持；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当前&lt;code>write&lt;/code>操作仅支持append到文件末尾。任意位置写操作将在未来版本实现；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Blobstore实现对Blob管理，Blob类似与文件的概念，但又不完全等同于文件，Blob没有完全遵循文件的POSIX接口，因此避免与文件混淆，在SPDK中称之为Blob而不是File。&lt;/p>
&lt;p>Blobstore Filesystem （BlobFS）是基于Blobstore实现的轻量级文件系统，对Blobstore进行封装，提供一些文件的常用接口，如read、write、open、sync等，其目的在于作为文件系统支持更上层的应用，例如Rocksdb。但其本质仍然是Blobstore，因此命名为BlobFS。&lt;/p>
&lt;p>目前SPDK基于维护了Rocksdb的一个分支，该分支下的Rocksdb在环境抽象层主要通过BlobFS进行对接，I/O可以经由BlobFS绕过内核I/O栈。&lt;/p>
&lt;hr>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://spdk.io/doc/blobfs.html">SPDK: BlobFS (Blobstore Filesystem)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.sdnlab.com/22880.html">https://www.sdnlab.com/22880.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.atzlinux.com/atzlinux/doc/os2atc2019/SPDK-bytedance-miaoyu.pdf">SPDK在字节跳动存储业务中的应⽤&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>BlueStore</title><link>https://justice.bj.cn/post/40.storage/ceph/ceph-bluestore/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/ceph/ceph-bluestore/</guid><description>&lt;h1 id="bluestore">BlueStore&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Ceph早期的单机对象存储引擎是&lt;code>FileStore&lt;/code>，为了维护数据的一致性，写入之前数据会先写&lt;code>Journal&lt;/code>，然后再写到文件系统，会有一倍的写放大，而同时现在的文件系统一般都是日志型文件系统(ext系列、xfs)，文件系统本身为了数据的一致性，也会写&lt;code>Journal&lt;/code>，此时便相当于维护了两份&lt;code>Journal&lt;/code>；另外&lt;code>FileStore&lt;/code>是针对&lt;code>HDD&lt;/code>的，并没有对&lt;code>SSD&lt;/code>作优化，随着&lt;code>SSD&lt;/code>的普及，针对&lt;code>SSD&lt;/code>优化的单机对象存储也被提上了日程，&lt;code>BlueStore&lt;/code>便由此应运而出。&lt;/p>
&lt;p>&lt;code>BlueStore&lt;/code>最早在&lt;code>Jewel&lt;/code>版本中引入，用于在&lt;code>SSD&lt;/code>上替代传统的&lt;code>FileStore&lt;/code>。作为新一代的高性能对象存储后端，&lt;code>BlueStore&lt;/code>在设计中便充分考虑了对&lt;code>SSD&lt;/code>以及&lt;code>NVME&lt;/code>的适配。针对&lt;code>FileStore&lt;/code>的缺陷，&lt;code>BlueStore&lt;/code>选择绕过文件系统，直接接管裸设备，直接进行对象数据IO操作，同时元数据存放在&lt;code>RocksDB&lt;/code>，大大缩短了整个对象存储的IO路径。&lt;code>BlueStore&lt;/code>可以理解为一个支持&lt;code>ACID&lt;/code>事物型的本地日志文件系统。&lt;/p>
&lt;h2 id="为什么需要bluestore">为什么需要BlueStore&lt;/h2>
&lt;p>ceph是目前业内比较普遍使用的开源分布式存储系统，实现有多种类型的本地存储系统；在较早的版本当中，ceph默认使用FileStore作为后端存储，但是由于FileStore存在一些缺陷，重新设计开发了BlueStore，并在L版本之后作为默认的后端存储。&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-04d2616b034660107a7fadccd7ea4fa0_1440w.jpg" alt="">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>IO放大&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>FileStore底层使用POSIX规范的文件系统接口，例如xfs、ext4、btrfs，然而这类文件系统本身不支持数据或元数据的事务操作接口（btrfs提供事务钩子的接口，但是测试过程中发现会导致系统宕机），而ceph对于数据写入要求十分严格，需要满足事务的特性（ACID）；为此FileStore实现了FileJournal功能，所有的事务都需要先写到FileJournal中，之后才会写入对应的文件中，以此来保证事务的原子性，但是这导致了数据“双写”的问题，造成至少一半磁盘带宽的浪费。&lt;/p>
&lt;p>此外xfs、ext4、btrfs这类文件系统本身存在一定的IO放大（即一次读写请求实际在低层磁盘发生的IO次数），再加上FileStore的日志双写，放大倍数成倍增加。&lt;/p>
&lt;p>下图中的数据表示了以block大小为单位对不同文件系统进行读写，在不同场景下的读写放大及空间放大情况。我们以ext4文件系统说明下个参数的含义。在对文件进行Overwrite时，即将数据覆盖写入到文件中，除了写入数据外，还涉及到日志的写入（其中日志写入两次，一次记录更改的inode，一次为commit记录，具体可参考[5])、文件inode的更改，每次写的最小单位是block，因此最终相当于写入次数以及空间放大了四倍；而在进行Append写入时，由于需要新分配空间，因此相对于Overwrite增加了bitmap的更改以及superblock的更改（superblock记录总的空间分配情况），写放大和空间放大均为六倍。读文件时，在没有命中任何缓存的情况下（cold cache），需要读大量元数据，例如：目录、文件inode、superblock等，最终读放大为六倍；而如果是在顺序读的情况下（warm cache），像superblock、bitmap、目录等这些元数据都缓存在内存中，只需读取文件inode和文件数据。&lt;/p>
&lt;p>同理，其他文件系统由于不同的结构和设计原理，其IO放大和空间放大系数也各不相同。&lt;/p>
&lt;p>&lt;img src="https://pic2.zhimg.com/80/v2-39087a1897ba0faa3597ca786d579471_1440w.jpg" alt="">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>对象遍历&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>ceph的数据被划分为object存放，object以32位的hash值进行标识，ceph在进行scrubbing、backfill或者recovery时都需要根据hash值遍历这些object；POSIX文件系统不提供有序的文件遍历接口，为此FileStore根据文件的数量和hash的前缀将object划分到不同的子目录，其原则如下：&lt;/p>
&lt;ul>
&lt;li>当目录下的文件个数&amp;gt;100个时，拆分子目录；目录名以文件名的hash前缀为依据（拆分一级目录时，以hash第一位为拆分依据，二级目录以第二位hash为拆分依据，依次类推）&lt;/li>
&lt;li>当所有子目录下的文件个数&amp;lt;50个时，将合并到上级目录&lt;/li>
&lt;/ul>
&lt;p>因此FileStore在使用过程中需要不断合并拆分目录结构；这种方式将文件按照前缀放到不同目录，但对于同一目录中的文件依然无法很好排序，因此需要将目录中的所有文件读到内存进行排序，这样在一定程度上增加了CPU开销。&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-3c8f6b97fea136794ccb7cb2a1f3d006_1440w.jpg" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>其他&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>FileStore由于设计的较早，无法支持当前较新的存储技术，例如使用spdk技术读写NVMe盘。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据和元数据分离不彻底。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>流控机制不完整导致IOPS和带宽抖动（FileStore自身无法控制本地文件系统的刷盘行为）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>频繁syncfs系统调用导致CPU利用率居高不下。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="bluestore介绍">&lt;strong>BlueStore介绍&lt;/strong>&lt;/h2>
&lt;h2 id="需求">&lt;strong>需求&lt;/strong>&lt;/h2>
&lt;p>首先看下BlueStore设计之初的一些需求：&lt;/p>
&lt;ul>
&lt;li>对全SSD及全NVMe SSD闪存适配&lt;/li>
&lt;li>绕过本地文件系统层，直接管理裸设备，缩短IO路径&lt;/li>
&lt;li>严格分离元数据和数据，提高索引效率&lt;/li>
&lt;li>使用KV索引，解决文件系统目录结构遍历效率低的问题&lt;/li>
&lt;li>支持多种设备类型&lt;/li>
&lt;li>解决日志“双写”问题&lt;/li>
&lt;li>期望带来至少2倍的写性能提升和同等读性能&lt;/li>
&lt;li>增加数据校验及数据压缩等功能&lt;/li>
&lt;/ul>
&lt;h2 id="逻辑架构">&lt;strong>逻辑架构&lt;/strong>&lt;/h2>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-c3c40bb427a8a562eed3d2040b5f8a5e_1440w.jpg" alt="">&lt;/p>
&lt;p>BlueStore的逻辑架构如上图所示，模块的划分都还比较清晰，我们来看下各模块的作用：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>RocksDB&lt;/strong>：rocksdb是facebook基于leveldb开发的一款kv数据库，BlueStore将元数据全部存放至RocksDB中，这些元数据包括存储预写式日志、数据对象元数据、Ceph的omap数据信息、以及分配器的元数据 。&lt;/li>
&lt;li>&lt;strong>BlueRocksEnv&lt;/strong>：这是RocksDB与BlueFS交互的接口；RocksDB提供了文件操作的接口EnvWrapper，用户可以通过继承实现该接口来自定义底层的读写操作，BlueRocksEnv就是继承自EnvWrapper实现对BlueFS的读写。&lt;/li>
&lt;li>&lt;strong>BlueFS&lt;/strong>：BlueFS是BlueStore针对RocksDB开发的轻量级文件系统，用于存放RocksDB产生的.sst和.log等文件。&lt;/li>
&lt;li>&lt;strong>BlockDecive&lt;/strong>：BlueStore抛弃了传统的ext4、xfs文件系统，使用直接管理裸盘的方式；BlueStore支持同时使用多种不同类型的设备，在逻辑上BlueStore将存储空间划分为三层：慢速（Slow）空间、高速（DB）空间、超高速（WAL）空间，不同的空间可以指定使用不同的设备类型，当然也可使用同一块设备，具体我们会在后面的文章进行说明。&lt;/li>
&lt;li>&lt;strong>Allocator&lt;/strong>：负责裸设备的空间管理，只在内存做标记，目前支持StupidAllocator和BitmapAllocator两种分配器,Stupid基于extent的方式实现 。&lt;/li>
&lt;/ul>
&lt;h2 id="设计思想">&lt;strong>设计思想&lt;/strong>&lt;/h2>
&lt;p>在设计分布式文件系统的本地存储时，我们必须考虑数据的一致性和可靠性。在数据写入的过程中，由于可能存在异常掉电、进程崩溃等突发情况，导致数据还未全部写入成功便结束。虽然硬盘本身可以保证在扇区级别写入的原子性，但是一般文件系统的一个写请求通常包含多个扇区的数据和元数据更新，无法做到原子写。&lt;/p>
&lt;p>常用的解决办法是引入日志系统，数据写入磁盘之前先写到日志系统，然后再将数据落盘；日志写入成功后，即便写数据时出现异常，也可以通过日志回放重新写入这部分数据；如果写日志的过程中出现异常，则直接放弃这部分日志，视为写入失败即可，以此保证原子写入。但是这种方式导致每份数据都需要在磁盘上写入两次，严重降低了数据的写入效率。&lt;/p>
&lt;p>另一种方式则是采用ROW（Redirect on write）的方式，即数据需要覆盖写入时，将数据写到新的位置，然后更新元数据索引，这种方式由于不存在覆盖写，只需保证元数据更新的原子性即可。对于对齐的覆盖写入时，这种方式没有问题，但是如果是非对齐的覆盖写呢？&lt;/p>
&lt;p>我们举个例子：某文件的逻辑空间 [0,4096) 区间的数据在磁盘上的物理映射地址为[0, 4096)，磁盘的块（即磁盘读写的最小单元）大小为4096；如果要覆盖写文件[0,4096)区间的数据，那使用ROW的方式没有问题，重新再磁盘上分配一个新的块写入，然后更新元数据中的映射关系即可；但是如果写文件[512,4096)区域，也就是非对齐的覆盖写时，新分配的块中只有部分数据，旧的物理空间中仍有部分数据有效，这样元数据中需要维护两份索引，而且在读取文件的该块数据时，需要从多块磁盘块中读取数据，如果多次进行非对齐覆盖写，这种问题将更严重。&lt;/p>
&lt;p>解决这种问题办法是使用RMW（Read Modify Write）的方法，即在发生非对齐覆盖写时，先读取旧的数据，更新的数据合并后，对齐写入到磁盘中，从而减少元数据、提高读性能，但这种方式也存在一种缺点，写数据时需要先读数据，存在一定的性能损耗。&lt;/p>
&lt;p>分析完ROW的方式后，读者是否会有疑问，每次写入都放到新的位置，那么文件在磁盘中的物理连续性岂不是无法保证？的确，在传统的文件系统设计时，都是面向HDD盘，这种类型的盘在读写时会有磁头寻道的时间，对于非连续的物理空间读写，性能极差，在设计时会尽可能考虑数据存放的连续性，因此很少会采用ROW的方式。但是随着SSD盘的逐渐普及，随机读写的性能不再成为主要的性能关注点，越来越多的存储系统开始采用全闪存的磁盘阵列，相信ROW的方式会成为更加主流的方式。&lt;/p>
&lt;p>我们再来看下BlueStore是怎么实现的，BlueStore在设计时便考虑了全闪存的磁盘阵列，但是仍要考虑使用HDD盘的场景，因此并未完全采用ROW的方式。&lt;/p>
&lt;p>我们以下图为例进行说明，BlueStore提供了一个最小分配单元min_alloc_size的配置项，一般为磁盘块大小的整数倍，在此例中min_alloc_size为block大小的4倍。&lt;/p>
&lt;p>写入的数据如果与min_alloc_size大小对齐，则使用ROW的方式，将数据写到新的地址空间，然后更改元数据索引，并回收原先占用的空间，元数据更新的原子性由RocksDB的事务特性进行保障。&lt;/p>
&lt;p>而对于非min_alloc_size对齐的区域，则使用RMW的方式进行原地覆盖写（只读取非块大小对齐区域所在块，一般就是写入数据的第一个或最后一个块），写入的这部分数据可能跨多个块（因为min_alloc_size是块大小的整数倍），而磁盘只保证单个块大小的原子写入，对于多个块的原子写需要引入类似日志的功能，BlueStore用RocksDB来实现日志功能，将覆盖的这部分数据记到RocksDB中，完成以后再将数据覆盖写入到实际的数据区域，落盘成功以后再删除日志中的记录。&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-206c24ef8e2e39e070256e2478a8f676_1440w.jpg" alt="">&lt;/p>
&lt;p> bluestore不使用本地文件系统，直接接管裸设备，并且只使用一个原始分区，HDD/SSD所在的物理块设备实现在用户态下使用linux aio直接对裸设备进行I/O操作。由于操作系统支持的aio操作只支持directIO，所以对BlockDevice的写操作直接写入磁盘，并且需要按照page对齐。其内部有一个aio_thread 线程，用来检查aio是否完成。其完成后，通过回调函数aio_callback 通知调用方。&lt;/p>
&lt;h2 id="存储模型">存储模型&lt;/h2>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/03-14-38-09-2020-11-03-14-37-46-image.png?token=AARMIEXD2SMH33GE2RKURI27UD5RA" alt="">&lt;/p>
&lt;h3 id="缓存模块">缓存模块&lt;/h3>
&lt;p>BlueStore抛弃了文件系统，直接管理裸设备，用不了文件系统的Cache机制，自己实现元数据和数据的Cache。&lt;/p>
&lt;p>&lt;code>BlueStore&lt;/code>有两种Cache算法：&lt;code>LRU&lt;/code>和&lt;code>2Q&lt;/code>。元数据使用&lt;code>LRU&lt;/code>Cache策略，数据使用&lt;code>2Q&lt;/code>Cache策略。&lt;/p>
&lt;p>Bluestore实现了自己的缓存机制，定义了structure ：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>OnodeSpace，用来map 到内存中的ONODE；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>BufferSpace，用来map 块信息blob，每个blob都在bufferSpace中缓存了状态数据。&lt;/p>
&lt;p>二者在缓存中依照LRU的方式决定生命周期。 &lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="freelistmanager模块">FreelistManager模块&lt;/h3>
&lt;p>FreelistManager用来映射磁盘的使用信息，最初实现是采用k-v的方式来存储对应的磁盘块的使用情况，但是由于更新数据时需要修改映射，需要线程锁来控制修改，而且这种方式对内存消耗很大；后续修改为bitmap的映射方式，设定一个offset来以bitmap的方式map多个block使用信息，使用XOR计算来更新块的使用情况，这种方式不会出现in-memory 状态。 &lt;/p>
&lt;h3 id="allocator模块">Allocator模块&lt;/h3>
&lt;p>用来委派具体哪个实际存储块用来存储当前的object数据；同样采用bitmap的方式来实现allocator，同时采用层级索引来存储多种状态，这种方式对内存的消耗相对较小，平均1TB磁盘需要大概35M左右的ram空间&lt;/p>
&lt;h2 id="bluestore的元数据管理">&lt;strong>BlueStore的元数据管理&lt;/strong>&lt;/h2>
&lt;p>bluestore自己管理裸盘，因此需要有元数据来管理对象，对应的就是Onode，Onode是常驻内存的数据结构，持久化的时候会以kv的形式存到rocksdb里。&lt;/p>
&lt;p>在onode里又分为lextent，表示逻辑的数据块，用一个map来记录，一个onode里会存在多个lextent，lextent通过blob的id对应到blob（bluestore_blob_t ），blob里通过pextent对应到实际物理盘上的区域（pextent里就是offset和length来定位物理盘的位置区域）。一个onode里的多个lextent可能在同一个blob里，而一个blob也可能对应到多个pextent。&lt;/p>
&lt;p>另外还有Bnode这个元数据，它是用来表示多个object可能共享extent，目前在做了快照后写I/O触发的cow进行clone的时候会用到。&lt;/p>
&lt;p>Onode代表对象，名字大概是从Linux VFS的Inode沿袭过来的。Onode常驻内存，在RocksDB中以KeyValue形式持久化；关于内存Cache的结构，在CDM的Slides中有讲。Onode包含多个lextent，即逻辑extent。Blob通过映射pextent、即物理extent，映射到磁盘上的物理区域。Blob通常包括来自同一个对象的多段数据，但是也可能被其它对象引用。Bnode是对象快照后，被用于多个对象共享数据的。&lt;/p>
&lt;p>&lt;img src="https://justice.bj.cn/Users/zhuzhengyi/code/github/gitnote/img/2020-11-03-13-53-30-image.png" alt="">&lt;/p>
&lt;p>上面仅是关于对象映射的。更进一步，RocksDB中存储有许多类型的元数据，包括块分配、对象集合、快照、延迟写（Deferred Writes）、对象属性（Omap，即一个对象上可以附加一些KeyValue对作为属性，例如给图片加上地点、日期等），等等。在CDM的Slides中有详述。&lt;/p>
&lt;h2 id="bluestore的写路径">&lt;strong>BlueStore的写路径&lt;/strong>&lt;/h2>
&lt;p>写路径包含了对事务的处理，也回答了BlueStore如何解决日志双写问题。&lt;/p>
&lt;p>首先，Ceph的事务只工作于单个OSD内，能够保证多个对象操作被ACID地执行，主要是用于实现自身的高级功能。每个PG（Placement Group，类似Dynamo的vnode，将hash映射到同一个组内的对象组到一起）内有一个OpSequencer，通过它保证PG内的操作按序执行。事务需要处理的写分三种：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>写到新分配的区域。考虑ACID，因为此写不覆盖已有数据，即使中途断电，因为RocksDB中的元数据没有更新，不用担心ACID语义被破坏。后文可见RocksDB的元数据更新是在数据写之后做的。因而，日志是不需要的。在数据写完之后，元数据更新写入RocksDB；RocksDB本身支持事务，元数据更新作为RocksDB的事务提交即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>写到Blob中的新位置。同理，日志是不需要的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Deferred Writes（延迟写），只用于覆写（Overwrite）情况。从上面也可以看到，只有覆写需要考虑日志问题。如果新写比块大小（min_alloc_size）更小，那么会将其数据与元数据合并写入到RocksDB中，之后异步地把数据搬到实际落盘位置；这就是日志了。如果新写比块大小更大，那么分割它，整块的部分写入新分配块中，即按（1）处理，；不足的部分按（3）中上种情况处理。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>上述基本概述了BlueStore的写处理。可以看到其是如何解决FileStore的日志双写问题的。首先，没有Linux文件系统了，也就没有了多余的Journaling of Journal问题。然后，大部分写是写到新位置的，而不是覆写，因此不需要对它们使用日志；写仍然发生了两次，第一次是数据落盘，然后是RocksDB事务提交，但不再需要在日志中包含数据了。最后，小的覆写合并到日志中提交，一次写完即可返回用户，之后异步地把数据搬到实际位置（小数据合并到日志是个常用技巧）；大的覆写被分割，整块部分用Append-only方式处理，也绕开了日志的需要。至此，成为一个自然而正常的处理方式。（P.S.总之，个人感觉日志双写不是一个该存在的问题，不知为何成了一个问题，好在今天终于不是问题了。）&lt;/p>
&lt;p>更深入地，Ceph的开发文档中列出了所有的写策略处理方式。可以看到Inline Compression也是BlueStore的功能点之一；其中也有对Partial-write问题的处理。&lt;/p>
&lt;p>CDM的Slides中有BlueStore写的状态机图。状态机是存储中常用的处理方式，处理写路径，Ceph的PG Peering过程也有相应的状态机。数据落盘，对应的是PREPARE-&amp;gt;AIO_WAIT间的“Initiate some AIO”一步。之后经过多个队列，向RocksDB提交事务，以及完成Deferred Write和Cleanup。直到最终完成。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/03-13-56-33-2020-11-03-13-56-11-image.png?token=AARMIEVN2WIMILBRLCACEIC7UDYU6" alt="">&lt;/p>
&lt;p>另外，BlueStore使用Direct IO提交数据，这样数据会立即落盘，而不是在内核中缓存；从而，存储系统可以完全自主地控制写的持久化。这是一个如今常见的做法。但代价是，不能利用内核缓存，需要自己处理缓存问题；也必须处理好数据对齐，以及写小于一扇区时的Partial-write问题。&lt;/p>
&lt;h2 id="bluefs的架构">BlueFS的架构&lt;/h2>
&lt;p>BlueFS以尽量简单为目的设计，专门用于支持RocksDB；RocksDB总之还是需要一个文件系统来工作的。BlueFS不支持POSIX接口。总的来说，它有这些特点：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>目录结构方面，BlueFS只有扁平的目录结构，没有树形层次关系；用于放置RocksDB的db.wal/，db/，db.slow/文件。这些文件可以被挂载到不同的硬盘上，例如db.wal/放在NVMRAM上；db/包含热SST数据，放在SSD上；db.slow/放在磁盘上。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据写入方面，BlueFS不支持覆写，只支持追加（Append-only）。块分配粒度较粗，越1MB。有垃圾回收机制定期处理被浪费掉的空间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对元数据的操作记录到日志，每次挂载时重放日志，来获得当前的元数据。元数据生存在内存中，并没有持久化在磁盘上，不需要存储诸如空闲块链表之类的。当日志过大时，会进行重写Compact。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Superblock用于存储整个文件系统级别的元数据，日志和数据本着尽量简单的设计，按照追加的方式不断写入。关于写放大的问题，这是Append-only式通有的，在Write Behaviors论文中有详述。&lt;/p>
&lt;h2 id="总结">&lt;strong>总结&lt;/strong>&lt;/h2>
&lt;p>BlueStore的设计考虑了FileStore中存在的一些硬伤，抛弃了传统的文件系统直接管理裸设备，缩短了IO路径，同时采用ROW的方式，避免了日志双写的问题，在写入性能上有了极大的提高。&lt;/p>
&lt;p>通过分析BlueStore的基本结构、考虑的问题以及设计思想，我们对于BlueStore有了大概的了解；BlueStore在设计时有考虑到未来存储的应用环境，是一种比较先进的本地文件系统，但也不可避免存在一些缺陷，例如较为复杂的元数据结构和IO逻辑，在大量小IO下可能存在的double write问题，较大的元数据内存占用等（当然有些问题在ceph的使用场景下可能不存在，但是我们如果希望借鉴BlueStore来设计本地文件系统就不得不考虑这些问题）。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://cloud.tencent.com/developer/news/45599">Ceph BlueStore 和双写问题 - 云+社区 - 腾讯云&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cloud-atlas.readthedocs.io/zh_CN/latest/ceph/bluestore.html">https://cloud-atlas.readthedocs.io/zh_CN/latest/ceph/bluestore.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/fengjian2016/p/9747689.html">Ceph的BlueStore总体介绍 - fengjian1585 - 博客园&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/46362124">https://zhuanlan.zhihu.com/p/46362124&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/91015613">https://zhuanlan.zhihu.com/p/91015613&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.51cto.com/wendashuai/2500499">BlueStore源码分析之对象IO-Darren_Wen-51CTO博客&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.codeleading.com/article/8882498924/">ceph bluestore 磁盘空间管理源码解析 - 代码先锋网&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/68067068">https://zhuanlan.zhihu.com/p/68067068&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/91018497">BlueStore源码分析之BitMap分配器&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://docs.google.com/presentation/d/1_1Otkgv76fbCU2Zogjz748sEAG-1Nfiidbb6mgTON-A/edit#slide=id.p">https://docs.google.com/presentation/d/1_1Otkgv76fbCU2Zogjz748sEAG-1Nfiidbb6mgTON-A/edit#slide=id.p&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.e-learn.cn/topic/3434557">BlueStore源码分析之FreelistManager | 易学教程&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>BookKeeper</title><link>https://justice.bj.cn/post/30.architech/bookkeeper/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/bookkeeper/</guid><description>&lt;h1 id="bookkeeper">BookKeeper&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>BookKeeper是一个可靠的日志流记录系统，用于将系统产生的日志(也可以是其他数据)记录在BookKeeper集群上，由BookKeeper这个第三方Storage保证数据存储的可靠和一致性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>典型场景是系统写write-ahead log，即先把log写到BookKeeper上，BookKeeper诞生于Hadoop2.0的namenode HA，由yahoo于2009年创建，并在2011年开源。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/13-09-49-25-2019-12-10-19-03-10-image.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/13-09-49-44-2019-12-10-18-03-31-image.png" alt="Apache BookKeeper 架构图">&lt;/p>
&lt;h2 id="复制">复制&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>BookKeeper对所有数据都会复制和存储相同的多份拷贝——一般是三份或是五份——到不同的机器上，可以是同一数据中心，也可以是跨数据中心。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不像其他使用主/从或是管道复制算法在副本之间复制数据的分布式系统（例如Apache HDFS、Ceph、Kafka），Apache BookKeeper使用一种多数投票并行复制算法在确保可预测的低延时的基础上复制数据。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>BookKeeper复制基于以下核心思想：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>日志流的原子结构是记录而不是字节。也就是说，数据总是以不可分割的记录形式（包括了元数据）存放的，而不是一个个字节组成的数组。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志流中记录的顺序与实际记录的实际存储是解耦的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>一个 &lt;strong>BookKeeper 集群&lt;/strong>包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Bookies：一组独立的存储服务器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>元数据存储&lt;/strong>系统：用于服务发现和元数据管理&lt;/p>
&lt;p>BookKeeper 客户端可以使用较高级别的 DistributedLog API（也称为&lt;strong>日志流 API&lt;/strong>）或较低级别的** ledger API**。Ledger API 允许用户直接与 bookies 交互。下图即为 BookKeeper 安装的典型示例。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/4ibRRsibIGr0agzRnWA5xz0jmRCKR0arKkHv9TACJCDicQzzDs25hTzvIgQ4axO43jbDOj4pFdicP1dgEhPwmUWnSg/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>典型的 BookKeeper 安装（通过多个 API 连接的应用程序）&lt;/p>
&lt;hr>
&lt;p>&lt;strong>流存储要求&lt;/strong>&lt;/p>
&lt;p>在上篇文章中已经提到，实时存储平台应该&lt;strong>同时&lt;/strong>满足以下要求：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>即使在强持久性条件下&lt;/strong>，客户端也能够以极低的延迟（小于 5 毫秒）读写 entry 流&lt;/p>
&lt;/li>
&lt;li>
&lt;p>能够持久、一致、容错地存储数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在写入时，客户端能够进行流式传输或追尾传输&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有效存储数据，支持访问历史数据与实时数据&lt;/p>
&lt;p>BookKeeper 通过提供以下保证来&lt;strong>同时&lt;/strong>满足上述各项要求：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/4ibRRsibIGr0agzRnWA5xz0jmRCKR0arKkPUekjeqBcL7WaPz8S1zgIcqW2pTDdaG0aOzQfp26Uyo2fJiaZrE2b8A/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;p>&lt;strong>多副本&lt;/strong>&lt;/p>
&lt;p>BookKeeper 在一个数据中心内的多个机器上，或是多个数据中心之间，复制每条数据记录并存储多个副本（通常是 3 个或 5 个副本）。&lt;/p>
&lt;p>一些分布式系统使用主/从或管道复制算法在副本之间复制数据（例如，Apache HDFS、Ceph、Kafka 等），BookKeeper 的不同之处在于使用 &lt;strong>quorum-vote 并行复制算法&lt;/strong>来复制数据，以确保可预测的低延迟。下图即为 BookKeeper 集成中的多副本。&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/4ibRRsibIGr0agzRnWA5xz0jmRCKR0arKkZNRjkWuaYuybA5bYIgbia5IGCScA5TnMYiaRsaWZdIeKwZLia4TOQpGag/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">BookKeeper 多副本中的 ensemble、写入、ack quorum&lt;/p>
&lt;p>在上图中：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>从 BookKeeper 集群中（自动）选择一组 bookies（图例中为 bookies 1-5）。这一组 bookies 即为给定 **ledger **上用于存储数据记录的 &lt;strong>ensemble&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ledger 中的数据分布在 bookies 的 ensemble 中。也就是说，每条记录都存有多个副本。用户可以在客户端级别配置副本数，即&lt;strong>写入 quorum 大小&lt;/strong>。在上图中，写入 quorum 大小为 3，即记录写入到 bookie 2、bookie 3 与 bookie 4。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>客户端向 ensemble 中写入数据记录时，需要等待直至有指定数量的副本发送确认（ack）。副本数即为 &lt;strong>ack quorum 大小&lt;/strong>。接收到指定数量的 ack 后，客户端默认写入成功。在上图中，ack quorum 大小为 2，也就是说，比如 bookie 3 和 bookie 4 存储数据记录，则向客户端发送一条确认。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当 bookie 发生故障时，ensemble 的组成会发生变化。正常的 bookies 会取代终止的 bookies，这种取代可能只是暂时的。例如：如果 &lt;strong>Bookie 5&lt;/strong> 终止，&lt;strong>Bookie x&lt;/strong> 可能会取代它。&lt;/p>
&lt;p>&lt;strong>多副本：核心理念&lt;/strong>&lt;/p>
&lt;p>BookKeeper 多副本基于以下核心理念：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志流面向记录而不是面向字节。这意味着，数据总是存储为不可分割的记录（包括元数据），而不是存储为单个字节数组。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志（流）中记录的顺序与记录副本的实际存储顺序分离。&lt;/p>
&lt;p>这两个核心理念确保 BookKeeper 多副本能够实现以下几项功能：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>为向 bookies 写入记录提供多种选择，从而确保即使集群中多个 bookies 终止或运行缓慢，写入操作仍然可以完成（只要有足够的容量来处理负载）。可以通过改变 ensemble 来实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过增加 ensemble 大小来最大化单个日志（流）的带宽，以使单个日志不受一台或一小组机器的限制。可以通过将 ensemble 大小配置为大于写入 quorum 大小来实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过调整 ack quorum 大小来改善追加时的延迟。这对于确保 BookKeeper 的低延迟十分重要，同时还可以提供一致性与持久性保证。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过多对多副本恢复提供快速&lt;strong>再复制&lt;/strong>（再复制为复制不足的记录创建更多副本，例如：副本数小于写入 quorum 大小）。所有的 bookies 都可以作为记录副本的提供者&lt;em>与&lt;/em>接受者。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="持久性">持久性&lt;/h2>
&lt;p>保证复制每条写入 BookKeeper 的数据记录，并持久化到指定数量的 bookies 中。可以通过使用磁盘 fsync 和写入确认来实现。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在单个 bookie 上，将确认发送给客户端之前，数据记录已明确写入（启用 fsync）磁盘，以便在发生故障时能够持久保存数据。这样可以保证数据写入到持久化存储中不依赖电源，可以被重新读取使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在单个集群内，复制数据记录到多个 bookies，以实现容错。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>仅当客户端收到指定数量（通过 ack quorum 大小指定）的 bookies 响应时，才 ack 数据记录。&lt;/p>
&lt;p>最新的 NoSQL 类型数据库、分布式文件系统和消息系统（例如：Apache Kafka）都假定：保证最佳持久化的有效方式是将数据复制到多个节点的内存中。但问题是，这些系统允许潜在的数据丢失。&lt;/p>
&lt;p>&lt;strong>BookKeeper 旨在提供更强的持久性保证，完全防止数据丢失，从而满足企业的严格要求。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="一致性">一致性&lt;/h3>
&lt;p>保证一致性是分布式系统中的常见问题，尤其是在引入多副本以确保持久性和高可用时。BookKeeper 为存储在日志中的数据提供了简单而强大的一致性保证（可重复读取的一致性）：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果记录已被引用程序 ack，则必须&lt;strong>立即&lt;/strong>可读。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果记录被读取一次，则必须&lt;strong>始终&lt;/strong>可读。如果记录 &lt;strong>R&lt;/strong> 成功写入，则在 &lt;strong>R&lt;/strong> 之前的所有记录都已成功提交/保存，并且将始终可读。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在不同读者之间，存储记录的顺序必须完全相同且可重复。&lt;/p>
&lt;p>这种可重复读取的一致性由 BookKeeper 中的 LastAddConfirmed（LAC）协议实现。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="高可用">高可用&lt;/h3>
&lt;p>在 CAP（Consistency：一致性、Availability：高可用、Partition tolerance：分区容错）条件下，BookKeeper 是一个 CP 系统。&lt;/p>
&lt;p>但实际上，即使存在硬件、网络或其他故障，Apache BookKeeper 仍然可以提供高可用性。为保证写入与读取的高可用性能，BookKeeper 采用了以下机制：&lt;/p>
&lt;p>&lt;img src="https://mmbiz.qpic.cn/mmbiz_png/4ibRRsibIGr0agzRnWA5xz0jmRCKR0arKkkeiauEpNQvI7UticfwQkH4NGerkEJkgLnEIO8Wpd0wEicOLX36SrhVN4Q/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1" alt="">&lt;/p>
&lt;h3 id="低延迟">低延迟&lt;/h3>
&lt;p>强持久性和一致性是分布式系统的复杂问题，特别是当分布式系统还需要满足企业级低延迟时。BookKeeper 通过以下方式满足这些要求：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在单个 bookie 上，bookie 服务器旨在用于不同工作负载（写入、追尾读、追赶读/随机读）之间的I/O 隔离。在 journal 上部署 &lt;strong>group-committing 机制&lt;/strong>以平衡延迟与吞吐量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>采用 &lt;strong>quorum-vote 并行复制 schema&lt;/strong> 缓解由于网络故障、JVM 垃圾回收暂停和磁盘运行缓慢引起的延迟损失。这样不仅可以改善追尾延迟，还能保证可预测的 p99 低延迟。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>采用长轮询机制在 ack 并确认新记录后，立刻向追尾的写入者发出通知并发送记录。&lt;/p>
&lt;p>最后，值得一提的是，明确 fsync 和写入确认的持久性与可重复的读取一致性对于状态处理（尤其是流应用程序的 effectively-once 处理）非常重要。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="http://matt33.com/2019/01/28/bk-store-realize/">http://matt33.com/2019/01/28/bk-store-realize/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cloud.tencent.com/developer/news/339495">为何选择Apache BookKeeper？第一部分：一致性、持久性以及可用性 - 云+社区 - 腾讯云&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Cap'n Proto</title><link>https://justice.bj.cn/post/12.data_struct/capn-proto/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/capn-proto/</guid><description>&lt;h1 id="capn-proto">Cap&amp;rsquo;n Proto&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Cap’n Proto 是非常快速的数据交换格式和基于容量的 RPC 系统， Cap&amp;rsquo;n Proto没有任何encoding/decoding步骤，Cap&amp;rsquo;n Proto编码的数据格式跟在内存里面的布局是一致的，所以可以直接将编码好的structure直接字节存放到硬盘上面。&lt;/p>
&lt;p>Cap&amp;rsquo;n Proto的编码是方案是独立于任何平台的，但在现在的CPU上面（小端序）会有更高的性能。数据的组织类似compiler组织struct：固定宽度，固定偏移，以及合适的内存对齐，对于可变的数组使用pointer嵌入，而pointer也是使用的偏移存放而不是绝对地址。整数使用的是小端序，因为多数现代CPU都是小端序的。&lt;/p>
&lt;p>其实如果熟悉C或者C++的结构体，就可以知道Cap&amp;rsquo;n Proto的编码方式就跟struct的内存布局差不多。&lt;/p>
&lt;h2 id="特性">特性&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>增量读取&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>随机访问&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>mmap&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>内部语言通信&lt;/strong>：C++&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Arena 分配&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>极小的生成代码&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>极小的运行时库&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Time-traveling RPC&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="原理">原理&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/13-09-51-17-2020-07-18-09-58-12-image.png" alt="">&lt;/p>
&lt;h2 id="example">Example&lt;/h2>
&lt;p>跟Protobuf一样，Cap&amp;rsquo;n Proto也需要定义描述文件，然后通过capnp的编译器编译成特定语言的对象使用。一个描述文件的简单例子:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="err">@&lt;/span>&lt;span class="mh">0xdbb9ad1f14bf0b36&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># unique file ID, generated by `capnp id`&lt;/span>
&lt;span class="n">struct&lt;/span> &lt;span class="no">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">name&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">birthdate&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="ss">:Date&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">email&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">phones&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="ss">:List&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">PhoneNumber&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">struct&lt;/span> &lt;span class="no">PhoneNumber&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">number&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">type&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ss">:Type&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">enum&lt;/span> &lt;span class="no">Type&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">mobile&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">home&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">work&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">struct&lt;/span> &lt;span class="no">Date&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">year&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="ss">:Int16&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">month&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ss">:UInt8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">day&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="ss">:UInt8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>几个需要关注的地方:&lt;/p>
&lt;ul>
&lt;li>类型是定义在名字后面的，通常来说，对于一个变量来说，我们可能最关注的是它的名字，一个好的命名，就很容易让大家知道是干啥的。譬如上面的name一看就知道是表示的用户的名字。这点跟c语言是反的，它是先类型，在变量名，不过很多后续的语言，譬如go，rust等都是先名字，再类型了。&lt;/li>
&lt;li>&lt;code>@N&lt;/code>用来给struct里面的field进行编号，编号从0开始，而且必须是连续的（这点跟Protobuf不一样）。上面birthdate虽然看起来在email和phones的前面，但是它的编号较大，实际编码的时候会放到后面。&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;h3 id="注释">注释&lt;/h3>
&lt;p>使用 &lt;code>#&lt;/code>进行注释，注释应该跟在定义的后面，或者新启一行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">struct&lt;/span> &lt;span class="no">Date&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1"># A standard Gregorian calendar date.&lt;/span>
&lt;span class="n">year&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="ss">:Int16&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># The year. Must include the century.&lt;/span>
&lt;span class="c1"># Negative value indicates BC.&lt;/span>
&lt;span class="n">month&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ss">:UInt8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># Month number, 1-12.&lt;/span>
&lt;span class="n">day&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="ss">:UInt8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># Day number, 1-30.&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="内置类型">内置类型&lt;/h3>
&lt;p>原生支持的数据类型如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Void:&lt;/strong> &lt;code>Void&lt;/code>&lt;/li>
&lt;li>&lt;strong>Boolean:&lt;/strong> &lt;code>Bool&lt;/code>&lt;/li>
&lt;li>&lt;strong>Integers:&lt;/strong> &lt;code>Int8&lt;/code>, &lt;code>Int16&lt;/code>, &lt;code>Int32&lt;/code>, &lt;code>Int64&lt;/code>&lt;/li>
&lt;li>&lt;strong>Unsigned integers:&lt;/strong> &lt;code>UInt8&lt;/code>, &lt;code>UInt16&lt;/code>, &lt;code>UInt32&lt;/code>, &lt;code>UInt64&lt;/code>&lt;/li>
&lt;li>&lt;strong>Floating-point:&lt;/strong> &lt;code>Float32&lt;/code>, &lt;code>Float64&lt;/code>&lt;/li>
&lt;li>&lt;strong>Blobs:&lt;/strong> &lt;code>Text&lt;/code>, &lt;code>Data&lt;/code>&lt;/li>
&lt;li>&lt;strong>Lists:&lt;/strong> &lt;code>List(T)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>需要注意:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Void&lt;/code>只有一个可能的值，使用0 bits进行编码，通常很少使用，但是可以作为union的member。&lt;/li>
&lt;li>&lt;code>Text&lt;/code>通常是UTF-8编码的，使用NULL结尾的字符串。&lt;/li>
&lt;li>&lt;code>Data&lt;/code>是任意二进制数据。&lt;/li>
&lt;li>&lt;code>List&lt;/code>是一个泛型类型，我们可以用特定类型去特化实现，譬如&lt;code>List(Int32)&lt;/code>就是一个Int32的List。&lt;/li>
&lt;/ul>
&lt;h3 id="结构体">结构体&lt;/h3>
&lt;p>结构体其实类似于c的struct，field的有名字，有类型定义，同时需要编号：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">struct&lt;/span> &lt;span class="no">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">name&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">email&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Field也可以有默认值:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">foo&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="ss">:Int32&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">bar&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ss">:Text&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;blah&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">baz&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="ss">:List&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">Bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="kp">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kp">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kp">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kp">true&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">qux&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="ss">:Person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;bob@example.com&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">corge&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="ss">:Void&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">grault&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="ss">:Data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="s2">&amp;#34;a1 40 33&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="联合">联合&lt;/h3>
&lt;p>Union是定义在struct里面同一个位置的一组fields，一次只能允许一个field被设置，我们使用不一样的tag来获知当前哪个field被设置了，不同于c里面的union，它不是类型，只是简单的fields聚合。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">struct&lt;/span> &lt;span class="no">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="n">employment&lt;/span> &lt;span class="ss">:union&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">unemployed&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="ss">:Void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">employer&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="ss">:Company&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">school&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">6&lt;/span> &lt;span class="ss">:School&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">selfEmployed&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">7&lt;/span> &lt;span class="ss">:Void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># We assume that a person is only one of these.&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>union可以没有名字，但是一个struct里面最多只能包含一个没名字的union:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">struct&lt;/span> &lt;span class="no">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">area&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="ss">:Float64&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">union&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">circle&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ss">:Float64&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># radius&lt;/span>
&lt;span class="n">square&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="ss">:Float64&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># width&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于union，我们需要注意:&lt;/p>
&lt;ul>
&lt;li>Union里面的field需要跟struct的field一起编号。&lt;/li>
&lt;li>我们在上面的union中使用了&lt;code>Void&lt;/code>类型，这个类型没有任何额外的信息，仅仅是为了跟其他状态区分。&lt;/li>
&lt;li>通常，当一个struct初始化的时候，在union里面具有最小number field会被默认的设置，如果不想默认设置任何field，我们可以用在union里面的最小number定义一个unset的field。&lt;/li>
&lt;li>我们可以将当前存在的field加入一个新的union，并且不会破坏当前数据的兼容性。&lt;/li>
&lt;/ul>
&lt;h3 id="群组">群组&lt;/h3>
&lt;p>我们通过group将一组fields封装到特定的作用域里面：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">struct&lt;/span> &lt;span class="no">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="c1"># Note: This is a terrible way to use groups, and meant&lt;/span>
&lt;span class="c1"># only to demonstrate the syntax.&lt;/span>
&lt;span class="n">address&lt;/span> &lt;span class="ss">:group&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">houseNumber&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">8&lt;/span> &lt;span class="ss">:UInt32&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">street&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">9&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">city&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">country&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">11&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Group并不是struct里面独立的一个对象，它里面的fields仍然是struct的fields，需要跟其他struct的fields一起编号。&lt;/p>
&lt;p>通常在一个struct里面使用group其实没啥大的意思，但是在union里面就比较有趣了:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">struct&lt;/span> &lt;span class="no">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">area&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="ss">:Float64&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">union&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">circle&lt;/span> &lt;span class="ss">:group&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">radius&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ss">:Float64&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">rectangle&lt;/span> &lt;span class="ss">:group&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">width&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="ss">:Float64&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">height&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="ss">:Float64&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在union里面使用group，我们很好的将field进行了自说明，现在看到radius，我们就知道它是circle的变量，而不需要额外的注释了。&lt;/p>
&lt;p>当然，使用group，对于后续协议升级也是很有帮助的，在最开始的时候，我们的shape是square，但是现在想支持rectangle，如果需要额外的加入一个field。如果有group，我们仅仅需要添加一个新的group就可以了。&lt;/p>
&lt;h3 id="动态类型域">动态类型域&lt;/h3>
&lt;p>Struct可以定义field的类型为&lt;code>AnyPointer&lt;/code>，类似于c里面的&lt;code>void*&lt;/code>.&lt;/p>
&lt;h3 id="枚举">枚举&lt;/h3>
&lt;p>Enum就是一组符号值的集合:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">enum&lt;/span> &lt;span class="no">Rfc3092Variable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">foo&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">bar&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">baz&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">qux&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Enum的成员必须从0开始编号，在c语言里面，enum通常都是数字类型的，但是在Cap&amp;rsquo;n Proto里面，它还可以是其他值。&lt;/p>
&lt;h3 id="接口">接口&lt;/h3>
&lt;p>Interface是一组methods的集合，各个method可以有参数，有返回值，methods也必须从0开始编号。Interface支持继承，同样也支持多继承。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">interface&lt;/span> &lt;span class="no">Node&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">isDirectory&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="ss">:Bool&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">interface&lt;/span> &lt;span class="no">Directory&lt;/span> &lt;span class="n">extends&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">Node&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">list&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ss">list&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">List&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">Entry&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">struct&lt;/span> &lt;span class="no">Entry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">name&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">node&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ss">:Node&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">create&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">name&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">file&lt;/span> &lt;span class="ss">:File&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">mkdir&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">name&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">directory&lt;/span> &lt;span class="ss">:Directory&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nb">open&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">name&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span> &lt;span class="ss">:Node&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">delete&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">name&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">link&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">name&lt;/span> &lt;span class="ss">:Text&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="ss">:Node&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">interface&lt;/span> &lt;span class="no">File&lt;/span> &lt;span class="n">extends&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">Node&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">size&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ss">size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">UInt64&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">read&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">startAt&lt;/span> &lt;span class="ss">:UInt64&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span> &lt;span class="ss">:UInt64&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xffffffffffffffff&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ss">data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">Data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1"># Default params = read entire file.&lt;/span>
&lt;span class="n">write&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">startAt&lt;/span> &lt;span class="ss">:UInt64&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="ss">:Data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">truncate&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="ss">:UInt64&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="泛型">泛型&lt;/h3>
&lt;p>我们可以定义泛型的struct或者interface&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="n">struct&lt;/span> &lt;span class="no">Map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">Key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">Value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">entries&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="ss">:List&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">Entry&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">struct&lt;/span> &lt;span class="no">Entry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">key&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="ss">:Key&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ss">:Value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">struct&lt;/span> &lt;span class="no">People&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">byName&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="ss">:Map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">Text&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">Person&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1"># Maps names to Person instances.&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上面的例子中，我们定义了一个泛型的Map，然后在People里面用Text，Person作为参数来特化这个Map，如果我们了解c++的模板，就可以知道他们差不多。&lt;/p>
&lt;h3 id="泛型方法">泛型方法&lt;/h3>
&lt;p>interface也可以提供泛型method：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">interface&lt;/span> &lt;span class="nc">Assignable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="err">#&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="n">generic&lt;/span> &lt;span class="k">interface&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="n">non&lt;/span>&lt;span class="p">-&lt;/span>&lt;span class="n">generic&lt;/span> &lt;span class="n">methods&lt;/span>&lt;span class="p">.&lt;/span>
&lt;span class="k">get&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="m">0&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">set&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">interface&lt;/span> &lt;span class="nc">AssignableFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">newAssignable&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="m">0&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">initialValue&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">assignable&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="n">Assignable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="err">#&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="n">generic&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="p">.&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们首先定义了一个泛型的interface，然后在对应的factory里面，创建这个interface的method就是泛型的method。&lt;/p>
&lt;h3 id="常量">常量&lt;/h3>
&lt;p>我们可以用const来定义常量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">const&lt;/span> &lt;span class="nl">pi&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="n">Float32&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">3.14159&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="nl">bob&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="n">Person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;bob@example.com&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="nl">secret&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="n">Data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="s">&amp;#34;9f98739c2b53835e 6720a00907abd42f&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们可以直接引用这些常量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-objectivec" data-lang="objectivec">&lt;span class="k">const&lt;/span> &lt;span class="nl">foo&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="n">Int32&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="nl">bar&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="n">Text&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">const&lt;/span> &lt;span class="nl">baz&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="n">SomeStruct&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通常常量都都定义在全局scope里面，我们通过&lt;code>.&lt;/code>来进行引用获取。&lt;/p>
&lt;h3 id="嵌套作用域以及别名">嵌套，作用域以及别名&lt;/h3>
&lt;p>我们可以在struct或者interface里面嵌套常量，别名或者新的类型定义。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Foo&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="nc">Bar&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cp">#...
&lt;/span>&lt;span class="cp">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">bar&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="n">Bar&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="nc">Baz&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">bar&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="n">Foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Bar&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面Baz里面我们通过&lt;code>Foo.Bar&lt;/code>来进行类型的获取。&lt;/p>
&lt;p>我们可以使用using对一个类型设置别名。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Qux&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">Foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Bar&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">bar&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="n">Bar&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="nc">Corge&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">using&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Bar&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">bar&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="导入">导入&lt;/h3>
&lt;p>我们通过import导入其他文件的类型定义&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Foo&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cp"># Use type &amp;#34;Baz&amp;#34; defined in bar.capnp.
&lt;/span>&lt;span class="cp">&lt;/span> &lt;span class="n">baz&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="n">import&lt;/span> &lt;span class="s">&amp;#34;bar.capnp&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Baz&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以直接使用using来设置别名&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">using&lt;/span> &lt;span class="n">Bar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">import&lt;/span> &lt;span class="s">&amp;#34;bar.capnp&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="nc">Foo&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cp"># Use type &amp;#34;Baz&amp;#34; defined in bar.capnp.
&lt;/span>&lt;span class="cp">&lt;/span> &lt;span class="n">baz&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="n">Bar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Baz&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者这样&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">using&lt;/span> &lt;span class="n">import&lt;/span> &lt;span class="s">&amp;#34;bar.capnp&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Baz&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="nc">Foo&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">baz&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="n">Baz&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="注解">注解&lt;/h3>
&lt;p>有时候我们需要在Cap&amp;rsquo;n Proto上面附加一些不属于Cap&amp;rsquo;n Proto的自有协议。这就是Annotation，不过话说真有必要吗？这里还是先忽略吧。&lt;/p>
&lt;h3 id="唯一id">唯一ID&lt;/h3>
&lt;p>每个Cap&amp;rsquo;n Proto文件都必须有唯一的一个64bit ID，使用&lt;code>capnp id&lt;/code>生成。譬如最开始例子里面的file ID&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="err">#&lt;/span> &lt;span class="nt">file&lt;/span> &lt;span class="nt">ID&lt;/span>
&lt;span class="p">@&lt;/span>&lt;span class="k">0xdbb9ad1f14bf0b36&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其实struct，enum这些的也需要定义ID，但默认情况下面，我们都是自动生成的。&lt;/p>
&lt;p>64位的ID还是很可能冲突的，但是实际不用考虑这样的情况，反而是错误的使用（譬如copy了一个example但没有更改file ID）更可能导致冲突。&lt;/p>
&lt;h2 id="升级协议">升级协议&lt;/h2>
&lt;p>如果我们要升级定义的协议，需要注意：&lt;/p>
&lt;ul>
&lt;li>新的类型，常量或者别名可以添加到任何地方，他们不会影响现有的类型。&lt;/li>
&lt;li>新的fields，enumerants以及methods需要使用比之前都要大的编号。&lt;/li>
&lt;li>新加入到method里面的参数必须添加到参数列表的最后，并且有默认值。&lt;/li>
&lt;li>成员可以随意在文件里面变换位置，只要number不变。&lt;/li>
&lt;li>符号名字可以任意更改，只要ID和number别换就行了。但要注意默认生成的ID是根据父ID以及name来生成的，所以我们需要通过&lt;code>capnp compile -ocapnp myschema.capnp&lt;/code>找到这个名字关联的ID并且在改名后显示的定义。&lt;/li>
&lt;li>类型定义可以移动到任意的作用域，只要ID显示声明。&lt;/li>
&lt;li>一个field可以被移入union或者group里面，就像在struct里面替换了以前的field，新加入了一个group或者union。&lt;/li>
&lt;li>一个非泛型的类型可以变成泛型。（话说对于泛型的研究后续在考虑吧，总觉得没必要弄得这么复杂）&lt;/li>
&lt;/ul>
&lt;p>有一些操作是不安全的：&lt;/p>
&lt;ul>
&lt;li>别更改field，method或者enum的number号。&lt;/li>
&lt;li>别更改field，method参数的类型或者默认值。&lt;/li>
&lt;li>别更改type的ID。&lt;/li>
&lt;li>别随便更改没有显示ID的类型名字。&lt;/li>
&lt;li>不能将没有显示ID的类型随便移到其他的作用域里面。&lt;/li>
&lt;li>不能将一个已经存在的field移入/移除到一个已经存在的union里面。&lt;/li>
&lt;/ul>
&lt;h2 id="参考-1">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://capnproto.org/otherlang.html">Cap&amp;rsquo;n Proto: Other Languages&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item></channel></rss>