<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Justice的小站</title><link>https://justice.bj.cn/</link><description>Recent content on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 05 Jan 2024 22:16:21 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>Justice's Blog</title><link>https://justice.bj.cn/homepage/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/about/</guid><description>&lt;h2 id="self-introduction">Self Introduction&lt;/h2>
&lt;p>Cras ex dui, tristique a libero eget, consectetur semper ligula. Nunc augue arcu, malesuada a nisi et, molestie finibus metus. Sed lacus odio, ultricies a nisl vitae, sollicitudin tempor ipsum. Vivamus quis feugiat arcu. Sed mi nunc, efficitur quis tellus vitae, posuere mattis metus. Phasellus in mattis dui. Nullam blandit, augue non ullamcorper dapibus, lacus dui molestie massa, in iaculis purus lectus eu lectus. Duis hendrerit lacinia tellus, sit amet feugiat dolor placerat id. Aenean ac velit massa. Vivamus feugiat dui at magna viverra, ut dictum nunc rutrum. Duis eget sapien finibus, lobortis orci id, vestibulum tellus. Maecenas lobortis urna libero, quis fermentum lectus lobortis nec. Nullam laoreet volutpat libero, ac mattis magna ullamcorper quis. Duis eget ipsum eu nisi mattis cursus et vitae turpis.&lt;/p>
&lt;p>Aliquam pretium diam eget leo feugiat finibus. Donec malesuada commodo ipsum. Aenean a massa in lacus venenatis vestibulum. Duis vel sem quis elit iaculis consectetur et quis dolor. Morbi eu ipsum hendrerit, malesuada ante sed, dapibus est. Suspendisse feugiat nulla ut gravida convallis. Phasellus id massa posuere, rhoncus justo ut, porttitor dolor. Nulla ultrices malesuada egestas. Nunc fermentum tincidunt sem ac vulputate. Donec mollis sollicitudin justo eget varius. Donec ornare velit et felis blandit, id molestie sapien lobortis. Morbi eget tristique justo. Mauris posuere, nibh eu laoreet ultricies, ligula erat iaculis sapien, vel dapibus lacus libero ut diam. Etiam viverra ante felis, et scelerisque nunc pellentesque vitae. Praesent feugiat dictum molestie.&lt;/p>
&lt;h2 id="details">Details&lt;/h2>
&lt;p>Nunc pellentesque vitae:&lt;/p>
&lt;ul>
&lt;li>Morbi accumsan nibh efficitur diam molestie, non dignissim diam facilisis.&lt;/li>
&lt;li>Donec dignissim leo in mollis faucibus.&lt;/li>
&lt;li>Donec blandit lacus a pellentesque fermentum.&lt;/li>
&lt;/ul>
&lt;p>Donec mollis sollicitudin:&lt;/p>
&lt;ul>
&lt;li>Nunc dictum purus ornare purus consectetur, eu pellentesque massa ullamcorper.&lt;/li>
&lt;li>Aliquam eu leo vitae justo aliquam tincidunt.&lt;/li>
&lt;li>Fusce non massa id augue interdum feugiat sed et nulla.&lt;/li>
&lt;li>Vivamus molestie augue in tristique laoreet.&lt;/li>
&lt;/ul></description></item><item><title>Pages</title><link>https://justice.bj.cn/homepage/pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/pages/</guid><description/></item><item><title>Experiences</title><link>https://justice.bj.cn/homepage/experiences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/experiences/</guid><description/></item><item><title>Vintage</title><link>https://justice.bj.cn/homepage/vintage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/vintage/</guid><description/></item><item><title>Blank</title><link>https://justice.bj.cn/homepage/blank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/blank/</guid><description>
&lt;div style="text-align:center">
&lt;p>Write anything you like here!&lt;/p>
&lt;/div></description></item><item><title>06.先解决段寄存器的历史包袱问题</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/06.%E5%85%88%E8%A7%A3%E5%86%B3%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%8E%86%E5%8F%B2%E5%8C%85%E8%A2%B1%E9%97%AE%E9%A2%98/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/06.%E5%85%88%E8%A7%A3%E5%86%B3%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%8E%86%E5%8F%B2%E5%8C%85%E8%A2%B1%E9%97%AE%E9%A2%98/</guid><description>&lt;h1 id="06先解决段寄存器的历史包袱问题">06.先解决段寄存器的历史包袱问题&lt;/h1>
&lt;p>上回书咱们说到，操作系统又折腾了一下内存，之后的很长一段时间内存布局就不会变了，终于稳定下来了，目前它长这个样子。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-37-17-d345b3fc056f120897aba11e13f8e2eb.png" alt="图片">&lt;/p>
&lt;p>0 地址开始处存放着操作系统的全部代码吗，也就是 system 模块，0x90000 位置处往后的几十个字节存放着一些设备的信息，方便以后使用。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>内存地址&lt;/th>
&lt;th>长度(字节)&lt;/th>
&lt;th>名称&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0x90000&lt;/td>
&lt;td>2&lt;/td>
&lt;td>光标位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90002&lt;/td>
&lt;td>2&lt;br>&lt;/td>
&lt;td>扩展内存数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90004&lt;/td>
&lt;td>2&lt;/td>
&lt;td>显示页面&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90006&lt;/td>
&lt;td>1&lt;br>&lt;/td>
&lt;td>显示模式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90007&lt;/td>
&lt;td>1&lt;/td>
&lt;td>字符列数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90008&lt;/td>
&lt;td>2&lt;/td>
&lt;td>未知&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000A&lt;/td>
&lt;td>1&lt;br>&lt;/td>
&lt;td>显示内存&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000B&lt;/td>
&lt;td>1&lt;br>&lt;/td>
&lt;td>显示状态&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000C&lt;/td>
&lt;td>2&lt;/td>
&lt;td>显卡特性参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000E&lt;/td>
&lt;td>1&lt;br>&lt;/td>
&lt;td>屏幕行数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000F&lt;/td>
&lt;td>1&lt;/td>
&lt;td>屏幕列数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90080&lt;/td>
&lt;td>16&lt;br>&lt;/td>
&lt;td>硬盘1参数表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90090&lt;/td>
&lt;td>16&lt;/td>
&lt;td>硬盘2参数表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x901FC&lt;/td>
&lt;td>2&lt;br>&lt;/td>
&lt;td>根设备号&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>是不是十分清晰？不过别高兴得太早，清爽的内存布局，是方便后续操作系统的大显身手！&lt;/p>
&lt;p>接下来就要进行真正的第一项大工程了，那就是&lt;strong>模式的转换&lt;/strong>，需要从现在的 16 位的&lt;strong>实模式&lt;/strong>转变为之后 32 位的&lt;strong>保护模式&lt;/strong>。&lt;/p>
&lt;p>当然，虽说是一项非常难啃的大工程，但从代码量看，却是少得可怜，所以不必太过担心。&lt;/p>
&lt;p>每次讲这里都十分的麻烦，因为这是 &lt;strong>x86 的历史包袱&lt;/strong>问题，现在的 CPU 几乎都是支持 32 位模式甚至 64 位模式了，很少有还仅仅停留在 16 位的实模式下的 CPU。所以我们要为了这个历史包袱，&lt;strong>写一段模式转换的代码&lt;/strong>，如果 Intel CPU 被重新设计而不用考虑兼容性，那么今天的代码将会减少很多甚至不复存在。&lt;/p>
&lt;p>所以不用担心，听懂就听懂，听不懂就拉倒，放宽心。&lt;/p>
&lt;p>我不打算直接说实模式和保护模式的区别，我们还是跟着代码慢慢品味，来。&lt;/p>
&lt;p>这里仍然是 setup.s 文件中的代码咯。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="err">    &lt;/span>&lt;span class="nf">lidt&lt;/span> &lt;span class="nv">idt_48&lt;/span> &lt;span class="c1">; load idt with 0,0&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">lgdt&lt;/span> &lt;span class="nv">gdt_48&lt;/span> &lt;span class="c1">; load gdt with whatever appropriate&lt;/span>
&lt;span class="nl">idt_48:&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">.word&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1">; idt limit=0 &lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">.word&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="c1">; idt base=0L&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上来就是两行看不懂的指令，别急。&lt;/p>
&lt;p>要理解这两条指令，就涉及到实模式和保护模式的第一个区别了。我们现在还处于实模式下，这个模式的 CPU 计算物理地址的方式还记得么？不记得的话看一下 &lt;a href="http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247499226&amp;amp;idx=1&amp;amp;sn=1ff3d54a3608423b7781142ae3ac62ca&amp;amp;chksm=c2c58777f5b20e61664a51d31ab779bbe68c317c3459218c7cd4b9530887dbb33470628c3248&amp;amp;scene=21#wechat_redirect">第一回 最开始的两行代码&lt;/a>&lt;/p>
&lt;p>就是段基址左移四位，再加上偏移地址。比如：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-37-28-d089322cf665638a49e4d8b4a1980468.png" alt="图片">&lt;/p>
&lt;p>是不是觉得很别扭，那更别扭的地方就要来了。当 CPU 切换到&lt;strong>保护模式&lt;/strong>后，同样的代码，内存地址的计算方式还不一样，你说气不气人？&lt;/p>
&lt;p>变成啥样了呢？刚刚那个 ds 寄存器里存储的值，在实模式下叫做&lt;strong>段基址&lt;/strong>，在保护模式下叫&lt;strong>段选择子&lt;/strong>。段选择子里存储着&lt;strong>段描述符&lt;/strong>的索引。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-37-40-b20e37ee621c59421c5bb3f61c7565bd.png" alt="图片">&lt;/p>
&lt;p>通过段描述符索引，可以从&lt;strong>全局描述符表 gdt&lt;/strong> 中找到一个段描述符，段描述符里存储着段基址。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-37-52-c85d99cfcc463fe47d7b6bccd14c0f1e.png" alt="图片">&lt;/p>
&lt;p>段基址取出来，再和偏移地址相加，就得到了物理地址，整个过程如下。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-38-00-64c6b4e89cb80433bd848c1a9ec1c6ee.png" alt="图片">&lt;/p>
&lt;p>你就说烦不烦吧？同样一段代码，实模式下和保护模式下的结果还不同，但没办法，x86 的历史包袱我们不得不考虑，谁让我们没其他 CPU 可选呢。&lt;/p>
&lt;p>总结一下就是，&lt;strong>段寄存器（比如 ds、ss、cs）里存储的是段选择子，段选择子去全局描述符表中寻找段描述符，从中取出段基址&lt;/strong>。&lt;/p>
&lt;p>好了，那问题自然就出来了，&lt;strong>全局描述符表&lt;/strong>(gdt)长什么样？它在哪？怎么让 CPU 知道它在哪？&lt;/p>
&lt;p>长什么样先别管，一定又是一个令人头疼的数据结构，先说说它在哪？在内存中呗，那么怎么告诉 CPU 全局描述符表（gdt）在内存中的什么位置呢？答案是由操作系统把这个位置信息存储在一个叫 &lt;strong>gdtr&lt;/strong> 的寄存器中。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-38-08-cfdec78ae8ffc687a2de0e2f379ad06a.png" alt="图片">&lt;/p>
&lt;p>怎么存呢？就是刚刚那条指令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nf">lgdt&lt;/span> &lt;span class="nv">gdt_48&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 &lt;strong>lgdt&lt;/strong> 就表示把后面的值(gdt_48)放在 gdtr寄存器中，gdt_48 标签，我们看看它长什么样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nl">gdt_48:&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">.word&lt;/span> &lt;span class="mh">0x800&lt;/span> &lt;span class="c1">; gdt limit=2048, 256 GDT entries &lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">.word&lt;/span> &lt;span class="mi">512&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nv">gdt&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x9&lt;/span> &lt;span class="c1">; gdt base = 0X9xxxx&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到这个标签位置处表示一个48位的数据，其中高 32 位存储着的正是全局描述符表 gdt 的内存地址&lt;/p>
&lt;p>&lt;strong>0x90200 + gdt&lt;/strong>&lt;/p>
&lt;p>&lt;strong>gdt&lt;/strong> 是个标签，表示在本文件内的偏移量，而本文件是 &lt;strong>setup.s&lt;/strong>，编译后是放在 &lt;strong>0x90200&lt;/strong> 这个内存地址的，还记得吧？所以要加上 0x90200 这个值。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-38-17-52475622dc23017ba52cc7535b534c88.png" alt="图片">&lt;/p>
&lt;p>那 gdt 这个标签处，就是全局描述符表在内存中的真正数据了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">gdt:
    .word 0,0,0,0 ; dummy
    .word 0x07FF ; 8Mb - limit=2047 (2048*4096=8Mb)
    .word 0x0000 ; base address=0
    .word 0x9A00 ; code read/exec
    .word 0x00C0 ; granularity=4096, 386
    .word 0x07FF ; 8Mb - limit=2047 (2048*4096=8Mb)
    .word 0x0000 ; base address=0
    .word 0x9200 ; data read/write
    .word 0x00C0 ; granularity=4096, 386
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>具体细节不用关心，跟我看重点。&lt;/p>
&lt;p>根据刚刚的段描述符格式。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-38-27-c85d99cfcc463fe47d7b6bccd14c0f1e.png" alt="图片">&lt;/p>
&lt;p>可以看出目前全局描述符表有三个段描述符，第一个为&lt;strong>空&lt;/strong>，第二个是&lt;strong>代码段描述符（type=code）&lt;/strong>，第三个是&lt;strong>数据段描述符（type=data）&lt;/strong>，第二个和第三个段描述符的段基址都是 0，也就是之后在逻辑地址转换物理地址的时候，通过段选择子查找到无论是代码段还是数据段，取出的段基址都是 0，那么物理地址将直接等于程序员给出的逻辑地址（准确说是逻辑地址中的偏移地址）。先记住这点就好。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-38-41-588c4850dfaa3b60e5109a68d5f7c777.png" alt="图片">&lt;/p>
&lt;p>具体段描述符的细节还有很多，就不展开了，比如这里的高 22 位就表示它是代码段还是数据段。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-38-49-c85d99cfcc463fe47d7b6bccd14c0f1e.png" alt="图片">&lt;/p>
&lt;p>接下来我们看看目前的内存布局，还是别管比例。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-38-58-6c49f0dea2d622c3c637015fb6554ecd.png" alt="图片">&lt;/p>
&lt;p>这里我把 &lt;strong>idtr&lt;/strong> 寄存器也画出来了，这个是&lt;strong>中断描述符表&lt;/strong>，其原理和全局描述符表一样。全局描述符表是让段选择子去里面寻找段描述符用的，而中断描述符表是用来在发生中断时，CPU 拿着中断号去中断描述符表中寻找中断处理程序的地址，找到后就跳到相应的中断程序中去执行，具体我们后面遇到了再说。&lt;/p>
&lt;p>好了，今天我们就讲，操作系统设置了个&lt;strong>全局描述符表 gdt&lt;/strong>，为后面切换到&lt;strong>保护模式&lt;/strong>后，能去那里寻找到段描述符，然后拼凑成最终的物理地址，就这个作用。当然，还有很多段描述符，作用不仅仅是转换成最终的物理地址，不过这是后话了。&lt;/p>
&lt;p>这仅仅是进入保护模式前准备工作的其中一个，后面的路还长着呢。欲知后事如何，且听下回分解。&lt;/p>
&lt;p>&lt;strong>&amp;mdash;&amp;mdash;- 本回扩展资料 &amp;mdash;&amp;mdash;-&lt;/strong>&lt;/p>
&lt;p>保护模式下逻辑地址到线性地址（不开启分页时就是物理地址）的转化，看 Intel 手册：&lt;/p>
&lt;p>Volume 3 Chapter 3.4 Logical And Linear Addresses&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-39-07-a9bf11644fe6d8be6569420ee4ab3d90.png" alt="图片">&lt;/p>
&lt;p>段描述符结构和详细说明，看 Intel 手册：&lt;/p>
&lt;p>Volume 3 Chapter 3.4.5 Segment Descriptors&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-39-18-d5a69a8c76451deb6fc08390f1d1aa88.png" alt="图片">&lt;/p>
&lt;p>比如文中说的数据段与代码段的划分，其实还有更细分的权限控制。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-39-26-d76ff193ff7fdb6dbdbe181ccd5615a8.png" alt="图片">&lt;/p></description></item><item><title>07.六行代码就进入了保护模式</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/07.%E5%85%AD%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%B0%B1%E8%BF%9B%E5%85%A5%E4%BA%86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/07.%E5%85%AD%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%B0%B1%E8%BF%9B%E5%85%A5%E4%BA%86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/</guid><description>&lt;h1 id="07六行代码就进入了保护模式">07.六行代码就进入了保护模式&lt;/h1>
&lt;p>上回书咱们说到，操作系统设置了个全局描述符表 gdt。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-39-37-cdc976147f46b0bf4b8d2900097d82b7.png" alt="图片">&lt;/p>
&lt;p>为后面切换到保护模式后，能去那里寻找到段描述符，然后拼凑成最终的物理地址。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-39-46-28110b9eb6f6bcf717ca099228b013c3.png" alt="图片">&lt;/p>
&lt;p>而此时我们的内存布局变成了这个样子。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-39-54-21771f2ecc69315804a907b9965d7135.png" alt="图片">&lt;/p>
&lt;p>这仅仅是进入保护模式前准备工作的其中一个，我们接着往下看。代码仍然是 setup.s 中的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">mov al,#0xD1 ; command write
out #0x64,al
mov al,#0xDF ; A20 on
out #0x60,al
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码的意思是，&lt;strong>打开 A20 地址线&lt;/strong>。&lt;/p>
&lt;p>说人话就是，打开 A20 地址线。哈哈，开玩笑，到底什么是 A20 地址线呢？&lt;/p>
&lt;p>简单理解，这一步就是为了突破地址信号线 20 位的宽度，变成 32 位可用。这是由于 8086 CPU 只有 20 位的地址线，所以如果程序给出 21 位的内存地址数据，那多出的一位就被忽略了，比如如果经过计算得出一个内存地址为&lt;/p>
&lt;p>1 0000 00000000 00000000&lt;/p>
&lt;p>那实际上内存地址相当于 0，因为高位的那个 1 被忽略了，地方不够。&lt;/p>
&lt;p>当 CPU 到了 32 位时代之后，由于要考虑&lt;strong>兼容性&lt;/strong>，还必须保持一个只能用 20 位地址线的模式，所以如果你不手动开启的话，即使地址线已经有 32 位了，仍然会限制只能使用其中的 20 位。&lt;/p>
&lt;p>简单吧？我们继续。&lt;/p>
&lt;p>接下来的一段代码，你完全完全不用看，但为了防止你一直记挂在心上，我给你截出来说道说道，这样以后我说完全不用看的代码时，你就真的可以放宽心完全不看了。&lt;/p>
&lt;p>就是这一大坨，还有 Linus 自己的注释。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="c1">; well, that went ok, I hope. Now we have to reprogram the interrupts :-(&lt;/span>
&lt;span class="c1">; we put them right after the intel-reserved hardware interrupts, at&lt;/span>
&lt;span class="c1">; int 0x20-0x2F. There they won&amp;#39;t mess up anything. Sadly IBM really&lt;/span>
&lt;span class="c1">; messed this up with the original PC, and they haven&amp;#39;t been able to&lt;/span>
&lt;span class="c1">; rectify it afterwards. Thus the bios puts interrupts at 0x08-0x0f,&lt;/span>
&lt;span class="c1">; which is used for the internal hardware interrupts as well. We just&lt;/span>
&lt;span class="c1">; have to reprogram the 8259&amp;#39;s, and it isn&amp;#39;t fun. &lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="mh">0x11&lt;/span> &lt;span class="c1">; initialization sequence &lt;/span>
&lt;span class="nf">out&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0x20&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">al&lt;/span> &lt;span class="c1">; send it to 8259A-1 &lt;/span>
&lt;span class="nf">.word&lt;/span> &lt;span class="mh">0x00eb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x00eb&lt;/span> &lt;span class="c1">; jmp $+2, jmp $+2 &lt;/span>
&lt;span class="nf">out&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0xA0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">al&lt;/span> &lt;span class="c1">; and to 8259A-2 &lt;/span>
&lt;span class="nf">.word&lt;/span> &lt;span class="mh">0x00eb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x00eb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="mh">0x20&lt;/span> &lt;span class="c1">; start of hardware int&amp;#39;s (0x20) &lt;/span>
&lt;span class="nf">out&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0x21&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">al&lt;/span>
&lt;span class="nf">.word&lt;/span> &lt;span class="mh">0x00eb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x00eb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="mh">0x28&lt;/span> &lt;span class="c1">; start of hardware int&amp;#39;s 2 (0x28) &lt;/span>
&lt;span class="nf">out&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0xA1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">al&lt;/span>
&lt;span class="nf">.word&lt;/span> &lt;span class="mh">0x00eb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x00eb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="mh">0x04&lt;/span> &lt;span class="c1">; 8259-1 is master &lt;/span>
&lt;span class="nf">out&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0x21&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">al&lt;/span>
&lt;span class="nf">.word&lt;/span> &lt;span class="mh">0x00eb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x00eb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="mh">0x02&lt;/span> &lt;span class="c1">; 8259-2 is slave &lt;/span>
&lt;span class="nf">out&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0xA1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">al&lt;/span>
&lt;span class="nf">.word&lt;/span> &lt;span class="mh">0x00eb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x00eb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="mh">0x01&lt;/span> &lt;span class="c1">; 8086 mode for both &lt;/span>
&lt;span class="nf">out&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0x21&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">al&lt;/span>
&lt;span class="nf">.word&lt;/span> &lt;span class="mh">0x00eb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x00eb&lt;/span>
&lt;span class="nf">out&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0xA1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">al&lt;/span>
&lt;span class="nf">.word&lt;/span> &lt;span class="mh">0x00eb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x00eb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="mh">0xFF&lt;/span> &lt;span class="c1">; mask off all interrupts for now &lt;/span>
&lt;span class="nf">out&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0x21&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">al&lt;/span>
&lt;span class="nf">.word&lt;/span> &lt;span class="mh">0x00eb&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x00eb&lt;/span>
&lt;span class="nf">out&lt;/span> &lt;span class="err">#&lt;/span>&lt;span class="mh">0xA1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">al&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里是对&lt;strong>可编程中断控制器 8259 芯片&lt;/strong>进行的编程。&lt;/p>
&lt;p>因为中断号是不能冲突的， Intel 把 0 到 0x19 号中断都作为&lt;strong>保留中断&lt;/strong>，比如 0 号中断就规定为&lt;strong>除零异常&lt;/strong>，软件自定义的中断都应该放在这之后，但是 IBM 在原 PC 机中搞砸了，跟保留中断号发生了冲突，以后也没有纠正过来，所以我们得重新对其进行编程，不得不做，却又一点意思也没有。这是 Linus 在上面注释上的原话。&lt;/p>
&lt;p>所以我们也不必在意，只要知道重新编程之后，8259 这个芯片的引脚与中断号的对应关系，变成了如下的样子就好。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>PIC 请求号&lt;/th>
&lt;th>中断号&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>IRQ0&lt;/td>
&lt;td>0x20&lt;/td>
&lt;td>时钟中断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ1&lt;/td>
&lt;td>0x21&lt;/td>
&lt;td>键盘中断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ2&lt;/td>
&lt;td>0x22&lt;/td>
&lt;td>接连从芯片&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ3&lt;/td>
&lt;td>0x23&lt;/td>
&lt;td>串口2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ4&lt;/td>
&lt;td>0x24&lt;/td>
&lt;td>串口1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ5&lt;/td>
&lt;td>0x25&lt;/td>
&lt;td>并口2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ6&lt;/td>
&lt;td>0x26&lt;/td>
&lt;td>软盘驱动器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ7&lt;/td>
&lt;td>0x27&lt;/td>
&lt;td>并口1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ8&lt;/td>
&lt;td>0x28&lt;/td>
&lt;td>实时钟中断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ9&lt;/td>
&lt;td>0x29&lt;/td>
&lt;td>保留&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ10&lt;/td>
&lt;td>0x2a&lt;/td>
&lt;td>保留&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ11&lt;/td>
&lt;td>0x2b&lt;/td>
&lt;td>保留&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ12&lt;/td>
&lt;td>0x2c&lt;/td>
&lt;td>鼠标中断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ13&lt;/td>
&lt;td>0x2d&lt;/td>
&lt;td>数学协处理器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ14&lt;/td>
&lt;td>0x2e&lt;/td>
&lt;td>硬盘中断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IRQ15&lt;/td>
&lt;td>0x2f&lt;/td>
&lt;td>保留&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>好了，接下来的一步，就是真正切换模式的一步了，从代码上看就两行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nf">mov&lt;/span> &lt;span class="nb">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="mh">0x0001&lt;/span> &lt;span class="c1">; protected mode (PE) &lt;/span>
&lt;span class="nf">bitlmsw&lt;/span> &lt;span class="nb">ax&lt;/span> &lt;span class="c1">; This is it;&lt;/span>
&lt;span class="nf">jmpi&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span> &lt;span class="c1">; jmp offset 0 of segment 8 (cs)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前两行，将 cr0 这个寄存器的位 0 置 1，模式就从实模式切换到保护模式了。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-40-07-90cd058fb59f2f081e01e9bf6e384da9.png" alt="图片">&lt;/p>
&lt;p>所以真正的模式切换十分简单，重要的是之前做的准备工作。&lt;/p>
&lt;p>再往后，又是一个段间跳转指令 &lt;strong>jmpi&lt;/strong>，后面的 8 表示 cs（代码段寄存器）的值，0 表示偏移地址。请注意，此时已经是保护模式了，之前也说过，保护模式下内存寻址方式变了，段寄存器里的值被当做段选择子。&lt;/p>
&lt;p>回顾下段选择子的模样。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-40-15-66aee41ab36fa9ac638333ef7baf6ad1.png" alt="图片">&lt;/p>
&lt;p>8 用二进制表示就是&lt;/p>
&lt;p>00000,0000,0000,1000&lt;/p>
&lt;p>对照上面段选择子的结构，可以知道&lt;strong>描述符索引值是 1&lt;/strong>，也就是要去&lt;strong>全局描述符表gdt&lt;/strong>中找第一项段描述符。&lt;/p>
&lt;p>还记得上一讲中的全局描述符的具体内容么？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">gdt:
    .word 0,0,0,0 ; dummy
    .word 0x07FF ; 8Mb - limit=2047 (2048*4096=8Mb)
    .word 0x0000 ; base address=0
    .word 0x9A00 ; code read/exec
    .word 0x00C0 ; granularity=4096, 386
    .word 0x07FF ; 8Mb - limit=2047 (2048*4096=8Mb)
    .word 0x0000 ; base address=0
    .word 0x9200 ; data read/write
    .word 0x00C0 ; granularity=4096, 386
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们说了，第 0 项是空值，第一项被表示为&lt;strong>代码段描述符&lt;/strong>，是个可读可执行的段，第二项为&lt;strong>数据段描述符&lt;/strong>，是个可读可写段，不过他们的段基址都是 0。&lt;/p>
&lt;p>所以，这里取的就是这个代码段描述符，&lt;strong>段基址是 0&lt;/strong>，偏移也是 0，那加一块就还是 0 咯，所以最终这个跳转指令，就是跳转到内存地址的 0 地址处，开始执行。&lt;/p>
&lt;p>零地址处是什么呢？还是回顾之前的内存布局图。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-40-28-650b3b41130054acc3545c65c42ca1a1.png" alt="图片">&lt;/p>
&lt;p>就是操作系统全部代码的 system 这个大模块，system 模块怎么生成的呢？&lt;/p>
&lt;p>由 Makefile 文件可知，是由 head.s 和 main.c 以及其余各模块的操作系统代码合并来的，可以理解为操作系统的全部核心代码编译后的结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="nf">tools/system&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">boot&lt;/span>/&lt;span class="n">head&lt;/span>.&lt;span class="n">o&lt;/span> &lt;span class="n">init&lt;/span>/&lt;span class="n">main&lt;/span>.&lt;span class="n">o&lt;/span> \
&lt;span class="k">$(&lt;/span>ARCHIVES&lt;span class="k">)&lt;/span> &lt;span class="k">$(&lt;/span>DRIVERS&lt;span class="k">)&lt;/span> &lt;span class="k">$(&lt;/span>MATH&lt;span class="k">)&lt;/span> &lt;span class="k">$(&lt;/span>LIBS&lt;span class="k">)&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="k">$(&lt;/span>LD&lt;span class="k">)&lt;/span> &lt;span class="k">$(&lt;/span>LDFLAGS&lt;span class="k">)&lt;/span> boot/head.o init/main.o &lt;span class="se">\ &lt;/span>
&lt;span class="k">$(&lt;/span>ARCHIVES&lt;span class="k">)&lt;/span> &lt;span class="se">\ &lt;/span>
&lt;span class="k">$(&lt;/span>DRIVERS&lt;span class="k">)&lt;/span> &lt;span class="se">\ &lt;/span>
    &lt;span class="k">$(&lt;/span>&lt;span class="nv">MATH&lt;/span>&lt;span class="k">)&lt;/span> &lt;span class="err">\&lt;/span>
    &lt;span class="k">$(&lt;/span>&lt;span class="nv">LIBS&lt;/span>&lt;span class="k">)&lt;/span> &lt;span class="err">\&lt;/span>
    &lt;span class="err">-o&lt;/span> &lt;span class="err">tools/system&lt;/span> &lt;span class="err">&amp;gt;&lt;/span> &lt;span class="err">System.map&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以，接下来，我们就要重点阅读 &lt;strong>head.s&lt;/strong> 了。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-40-38-07b0d2f083ae4f23d14a616f565e8b51.png" alt="图片">&lt;/p>
&lt;p>这也是 boot 文件夹下的最后一个由汇编写就的源代码文件，哎呀，不知不觉就把两个操作系统源码文件（&lt;strong>bootsect.s&lt;/strong> 和 &lt;strong>setup.s&lt;/strong>）讲完了，而且是汇编写的令人头疼的代码。&lt;/p>
&lt;p>&lt;strong>head.s&lt;/strong> 这个文件仅仅是为了顺利进入由后面的 c 语言写就的 main.c 做的准备，所以咬咬牙看完这个之后，我们就终于可以进入 c 语言的世界了！也终于可以看到我们熟悉的 main 函数了！&lt;/p>
&lt;p>&lt;strong>&amp;mdash;&amp;mdash;- 本回扩展资料 &amp;mdash;&amp;mdash;-&lt;/strong>&lt;/p>
&lt;p>保护模式下逻辑地址到线性地址（不开启分页时就是物理地址）的转化，看 Intel 手册：&lt;/p>
&lt;p>Volume 3 Chapter 3.4 Logical And Linear Addresses&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-40-48-a9bf11644fe6d8be6569420ee4ab3d90.png" alt="图片">&lt;/p>
&lt;p>段描述符结构和详细说明，看 Intel 手册：&lt;/p>
&lt;p>Volume 3 Chapter 3.4.5 Segment Descriptors&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-40-56-d5a69a8c76451deb6fc08390f1d1aa88.png" alt="图片">&lt;/p>
&lt;p>对操作系统如何编译的，比如好奇那个 system 是怎么来的，可以尝试理解一下 Linux 0.11 源码中的 Makefile，这个我就不展开讲了，我们把更多经历，放在操作系统是怎么一步一步构建起来的这个过程。&lt;/p></description></item><item><title>09.Intel 内存管理两板斧：分段与分页</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/09.intel%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%A4%E6%9D%BF%E6%96%A7_%E5%88%86%E6%AE%B5%E4%B8%8E%E5%88%86%E9%A1%B5/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/09.intel%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%A4%E6%9D%BF%E6%96%A7_%E5%88%86%E6%AE%B5%E4%B8%8E%E5%88%86%E9%A1%B5/</guid><description>&lt;h1 id="09intel-内存管理两板斧分段与分页">09.Intel 内存管理两板斧：分段与分页&lt;/h1>
&lt;p>head.s 代码在重新设置了 gdt 与 idt 后。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-03-43-e5a3467caa9f51f269e0f1c3fbadbe21.png" alt="图片">&lt;/p>
&lt;p>来到了这样一段代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nf">jmp&lt;/span> &lt;span class="nv">after_page_tables&lt;/span>
&lt;span class="nf">...&lt;/span>
&lt;span class="nl">after_page_tables:&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="nv">L6&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="nv">_main&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">jmp&lt;/span> &lt;span class="nv">setup_paging&lt;/span>
&lt;span class="nl">L6:&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">jmp&lt;/span> &lt;span class="nv">L6&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>那就是开启分页机制，并且跳转到 main 函数。&lt;/p>
&lt;p>如何跳转到之后用 c 语言写的 main.c 里的 main 函数，是个有趣的事，也包含在这段代码里。不过我们先瞧瞧这&lt;strong>分页机制&lt;/strong>是如何开启的，也就是 &lt;strong>setup_paging&lt;/strong> 这个标签处的代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nl">setup_paging:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">ecx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">5&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">eax&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="nb">edi&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">edi&lt;/span>
&lt;span class="nf">pushf&lt;/span>
&lt;span class="nf">cld&lt;/span>
&lt;span class="nf">rep&lt;/span> &lt;span class="nv">stosd&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">_pg_dir&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">eax&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="nv">pg0&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">7&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">eax&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="nv">pg1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">7&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">eax&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="nv">pg2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">7&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">eax&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="nv">pg3&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">7&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="nb">edi&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">pg3&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">4092&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">00fff007h&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">std&lt;/span>
&lt;span class="nl">L3:&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">stosd&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">sub&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">00001000h&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">jge&lt;/span> &lt;span class="nv">L3&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">popf&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">xor&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">eax&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="nb">cr3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">eax&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">cr0&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">or&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">80000000h&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="nb">cr0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">eax&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>别怕，我们一点点来分析。&lt;/p>
&lt;p>首先要了解的就是，啥是分页机制？&lt;/p>
&lt;p>还记不记得之前我们在代码中给出一个内存地址，在保护模式下要先经过分段机制的转换，才能最终变成物理地址，就是这样。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-03-50-e39b50ee2c579ffaf8b34f18f4237a42.png" alt="图片">&lt;/p>
&lt;p>这是在没有开启分页机制的时候，只需要经过这一步转换即可得到最终的物理地址了，但是在开启了分页机制后，又会&lt;strong>多一步转换&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-03-55-5e94c299d3d3667016e9b63e44abc0d2.png" alt="图片">&lt;/p>
&lt;p>也就是说，在没有开启分页机制时，由程序员给出的&lt;strong>逻辑地址&lt;/strong>，需要先通过分段机制转换成物理地址。但在开启分页机制后，逻辑地址仍然要先通过分段机制进行转换，只不过转换后不再是最终的物理地址，而是&lt;strong>线性地址&lt;/strong>，然后再通过一次分页机制转换，得到最终的物理地址。&lt;/p>
&lt;p>分段机制我们已经清楚如何对地址进行变换了，那分页机制又是如何变换的呢？我们直接以一个例子来学习过程。&lt;/p>
&lt;p>比如我们的线性地址（已经经过了分段机制的转换）是&lt;/p>
&lt;p>15M&lt;/p>
&lt;p>二进制表示就是&lt;/p>
&lt;p>0000000011_0100000000_000000000000&lt;/p>
&lt;p>我们看一下它的转换过程&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-04-00-1dedd0086f3c1636e423c07d1489c107.png" alt="图片">&lt;/p>
&lt;p>也就是说，CPU 在看到我们给出的内存地址后，首先把线性地址被拆分成&lt;/p>
&lt;p>高 10 位：中间 10 位：后 12 位&lt;/p>
&lt;p>高 10 位负责在&lt;strong>页目录表&lt;/strong>中找到一个&lt;strong>页目录项&lt;/strong>，这个页目录项的值加上中间 10 位拼接后的地址去&lt;strong>页表&lt;/strong>中去寻找一个&lt;strong>页表项&lt;/strong>，这个页表项的值，再加上后 12 位偏移地址，就是最终的物理地址。&lt;/p>
&lt;p>而这一切的操作，都由计算机的一个硬件叫 &lt;strong>MMU&lt;/strong>，中文名字叫&lt;strong>内存管理单元&lt;/strong>，有时也叫 PMMU，分页内存管理单元。由这个部件来负责将虚拟地址转换为物理地址。&lt;/p>
&lt;p>所以整个过程我们不用操心，作为操作系统这个软件层，只需要提供好页目录表和页表即可，这种页表方案叫做&lt;strong>二级页表&lt;/strong>，第一级叫&lt;strong>页目录表 PDE&lt;/strong>，第二级叫&lt;strong>页表 PTE&lt;/strong>。他们的结构如下。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-04-05-9d10c38f804b5f9a1bb86bb9ab143699.png" alt="图片">&lt;/p>
&lt;p>之后再开启分页机制的开关。其实就是更改 &lt;strong>cr0&lt;/strong> 寄存器中的一位即可（31 位），还记得我们开启保护模式么，也是改这个寄存器中的一位的值。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-04-11-11728d8426c69ca78cb1920b3f86f533.png" alt="图片">&lt;/p>
&lt;p>然后，MMU 就可以帮我们进行分页的转换了。此后指令中的内存地址（就是程序员提供的逻辑地址），就统统要先经过分段机制的转换，再通过分页机制的转换，才能最终变成物理地址。&lt;/p>
&lt;p>所以这段代码，就是帮我们把页表和页目录表在内存中写好，之后开启 cr0 寄存器的分页开关，仅此而已，我们再把代码贴上来。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nl">setup_paging:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">ecx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">5&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">eax&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="nb">edi&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">edi&lt;/span>
&lt;span class="nf">pushf&lt;/span>
&lt;span class="nf">cld&lt;/span>
&lt;span class="nf">rep&lt;/span> &lt;span class="nv">stosd&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">_pg_dir&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">eax&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="nv">pg0&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">7&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">eax&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="nv">pg1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">7&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">eax&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="nv">pg2&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">7&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">eax&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="nv">pg3&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">7&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">edi&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nv">pg3&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">4092&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">00fff007h&lt;/span>
&lt;span class="nf">std&lt;/span>
&lt;span class="nl">L3:&lt;/span> &lt;span class="nf">stosd&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">00001000h&lt;/span>
&lt;span class="nf">jge&lt;/span> &lt;span class="nv">L3&lt;/span>
&lt;span class="nf">popf&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">eax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">cr3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">eax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">cr0&lt;/span>
&lt;span class="nf">or&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">80000000h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">cr0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">eax&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们先说这段代码最终产生的效果吧。&lt;/p>
&lt;p>当时 linux-0.11 认为，总共可以使用的内存不会超过 &lt;strong>16M&lt;/strong>，也即最大地址空间为 &lt;strong>0xFFFFFF&lt;/strong>。&lt;/p>
&lt;p>而按照当前的页目录表和页表这种机制，1 个页目录表最多包含 1024 个页目录项（也就是 1024 个页表），1 个页表最多包含 1024 个页表项（也就是 1024 个页），1 页为 4KB（因为有 12 位偏移地址），因此，16M 的地址空间可以用 1 个页目录表 + 4 个页表搞定。&lt;/p>
&lt;p>4（页表数）* 1024（页表项数） * 4KB（一页大小）= 16MB&lt;/p>
&lt;p>所以，上面这段代码就是，&lt;strong>将页目录表放在内存地址的最开头&lt;/strong>，还记得上一讲开头让你留意的 _pg_dir 这个标签吧？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">_pg_dir:
_startup_32:
    mov eax,0x10
    mov ds,ax
    ...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>之后紧挨着这个页目录表，放置 4 个页表&lt;/strong>，代码里也有这四个页表的标签项。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">.org 0x1000 pg0:
.org 0x2000 pg1:
.org 0x3000 pg2:
.org 0x4000 pg3:
.org 0x5000
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最终将页目录表和页表填写好数值，来覆盖整个 16MB 的内存。随后，开启分页机制。此时内存中的页表相关的布局如下。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-04-17-d8c5ccab8f627ac9f184d268dd6e42bf.png" alt="图片">&lt;/p>
&lt;p>这些页目录表和页表放到了整个内存布局中最开头的位置，就是覆盖了开头的 system 代码了，不过被覆盖的 system 代码已经执行过了，所以无所谓。&lt;/p>
&lt;p>同时，如 idt 和 gdt 一样，我们也需要通过一个寄存器告诉 CPU 我们把这些页表放在了哪里，就是这段代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nf">xor&lt;/span> &lt;span class="nb">eax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">eax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="nb">cr3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">eax&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你看，我们相当于告诉 cr3 寄存器，&lt;strong>0 地址处就是页目录表，再通过页目录表可以找到所有的页表&lt;/strong>，也就相当于 CPU 知道了分页机制的全貌了。&lt;/p>
&lt;p>至此后，整个内存布局如下。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-04-22-38240f8404e640c9770f44bdd3cd6507.png" alt="图片">&lt;/p>
&lt;p>那么具体页表设置好后，映射的内存是怎样的情况呢？那就要看页表的具体数据了，就是这一坨代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">setup_paging:
    ...
    mov eax,_pg_dir
    mov [eax],pg0+7
    mov [eax+4],pg1+7
    mov [eax+8],pg2+7
    mov [eax+12],pg3+7
    mov edi,pg3+4092
    mov eax,00fff007h
    stdL3: stosd    
    sub eax, 1000h    
    jpe L3
    ...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>很简单，对照刚刚的页目录表与页表结构看。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-04-27-9d10c38f804b5f9a1bb86bb9ab143699.png" alt="图片">&lt;/p>
&lt;p>前五行表示，页目录表的前 4 个页目录项，分别指向 4 个页表。比如页目录项中的第一项 &lt;strong>[eax]&lt;/strong> 被赋值为 &lt;strong>pg0+7&lt;/strong>，也就是 &lt;strong>0x00001007&lt;/strong>，根据页目录项的格式，表示页表地址为 &lt;strong>0x1000&lt;/strong>，页属性为 &lt;strong>0x07&lt;/strong> 表示改页存在、用户可读写。&lt;/p>
&lt;p>后面几行表示，填充 4 个页表的每一项，一共 &lt;strong>4*1024=4096&lt;/strong> 项，依次映射到内存的前 16MB 空间。&lt;/p>
&lt;p>画出图就是这个样子，其实刚刚的图就是。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-04-34-1dedd0086f3c1636e423c07d1489c107.png" alt="图片">&lt;/p>
&lt;p>看，最终的效果就是，经过这套分页机制，&lt;strong>线性地址将恰好和最终转换的物理地址一样&lt;/strong>。&lt;/p>
&lt;p>现在只有四个页目录项，也就是将前 16M 的线性地址空间，与 16M 的物理地址空间一一对应起来了。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-04-39-dd889ce71a3449d8d38c336e5a2bbdc3.png" alt="图片">&lt;/p>
&lt;p>好了，我知道你目前可能有点晕头转向，关于地址，我们已经出现了好多词了，包括&lt;strong>逻辑地址&lt;/strong>、&lt;strong>线性地址&lt;/strong>、&lt;strong>物理地址&lt;/strong>，以及本文中没出现的，你可能在很多地方看到过的&lt;strong>虚拟地址&lt;/strong>。&lt;/p>
&lt;p>而这些地址后面加上空间两个字，似乎又成为了一个新词，比如&lt;strong>线性地址空间&lt;/strong>、&lt;strong>物理地址空间&lt;/strong>、&lt;strong>虚拟地址空间&lt;/strong>等。&lt;/p>
&lt;p>那就是时候展开一波讨论，将这块的内容梳理一番了，且听我说。&lt;/p>
&lt;p>Intel 体系结构的&lt;strong>内存管理&lt;/strong>可以分成两大部分，也就是标题中的两板斧，&lt;strong>分段&lt;/strong>和&lt;strong>分页&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>分段机制&lt;/strong>在之前几回已经讨论过多次了，其目的是为了为每个程序或任务提供单独的代码段（cs）、数据段（ds）、栈段（ss），使其不会相互干扰。&lt;/p>
&lt;p>&lt;strong>分页机制&lt;/strong>是本回讲的内容，开机后分页机制默认是关闭状态，需要我们手动开启，并且设置好页目录表（PDE）和页表（PTE）。其目的在于可以按需使用物理内存，同时也可以在多任务时起到隔离的作用，这个在后面将多任务时将会有所体会。&lt;/p>
&lt;p>在 Intel 的保护模式下，分段机制是没有开启和关闭一说的，它必须存在，而分页机制是可以选择开启或关闭的。所以如果有人和你说，它实现了一个没有分段机制的操作系统，那一定是个外行。&lt;/p>
&lt;p>再说说那些地址：&lt;/p>
&lt;p>&lt;strong>逻辑地址&lt;/strong>：我们程序员写代码时给出的地址叫逻辑地址，其中包含段选择子和偏移地址两部分。&lt;/p>
&lt;p>&lt;strong>线性地址&lt;/strong>：通过分段机制，将逻辑地址转换后的地址，叫做线性地址。而这个线性地址是有个范围的，这个范围就叫做线性地址空间，32 位模式下，线性地址空间就是 4G。&lt;/p>
&lt;p>&lt;strong>物理地址&lt;/strong>：就是真正在内存中的地址，它也是有范围的，叫做物理地址空间。那这个范围的大小，就取决于你的内存有多大了。&lt;/p>
&lt;p>&lt;strong>虚拟地址&lt;/strong>：如果没有开启分页机制，那么线性地址就和物理地址是一一对应的，可以理解为相等。如果开启了分页机制，那么线性地址将被视为虚拟地址，这个虚拟地址将会通过分页机制的转换，最终转换成物理地址。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-04-44-5e94c299d3d3667016e9b63e44abc0d2.png" alt="图片">&lt;/p>
&lt;p>但实际上，我本人是不喜欢虚拟地址这个叫法的，因为它在 Intel 标准手册上出现的次数很少，我觉得知道逻辑地址、线性地址、物理地址这三个概念就够了，逻辑地址是程序员给出的，经过分段机制转换后变成线性地址，然后再经过分页机制转换后变成物理地址，就这么简单。&lt;/p>
&lt;p>好了，我们终于把这些杂七杂八的，idt、gdt、页表都设置好了，并且也开启了保护模式，之后我们就要做好进入 main.c 的准备了，那里是个新世界！&lt;/p>
&lt;p>不过进入 main.c 之前还差最后一哆嗦，就是 head.s 最后的代码，也就是本文开头的那段代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="err">    &lt;/span>&lt;span class="nf">jmp&lt;/span> &lt;span class="nv">after_page_tables&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">...&lt;/span>
&lt;span class="nl">after_page_tables:&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="nv">L6&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="nv">_main&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">jmp&lt;/span> &lt;span class="nv">setup_paging&lt;/span>
&lt;span class="nl">L6:&lt;/span>
&lt;span class="err">    &lt;/span>&lt;span class="nf">jmp&lt;/span> &lt;span class="nv">L6&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看到没，这里有个 push _main，把 main 函数的地址压栈了，那最终跳转到这个 main.c 里的 main 函数，一定和这个压栈有关。&lt;/p>
&lt;p>压栈为什么和跳转到这里还能联系上呢？留作本文思考题，下一篇将揭秘这个过程，你会发现仍然简单得要死。&lt;/p>
&lt;p>欲知后事如何，且听下回分解。&lt;/p>
&lt;p>&lt;strong>&amp;mdash;&amp;mdash;- 本回扩展资料 &amp;mdash;&amp;mdash;-&lt;/strong>&lt;/p>
&lt;p>关于逻辑地址-线性地址-物理地址的转换，可以参考 Intel 手册：&lt;/p>
&lt;p>Intel 3A Chapter 3 Protected-Mode Memory Management&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-04-50-6173d7b155edf1163656a92accadfd50.png" alt="图片">&lt;/p>
&lt;p>而有关这些地址的定义和说明，在本小节中也做了详细的说明，看这里的介绍是最权威也是最透彻的。相信我，它很简单。&lt;/p>
&lt;p>页目录表和页表的具体结构，可以看&lt;/p>
&lt;p>Intel 3A Chapter 4.3 32-bit paging&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-04-55-7ce1ce0354904b2535f1293057c855e7.png" alt="图片">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-19-05-00-dc74426a214fda8f1885299cfb8d4dbc.png" alt="图片">&lt;/p></description></item><item><title>11.整个操作系统就 20 几行代码</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/11.%E6%95%B4%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B0%B120%E5%87%A0%E8%A1%8C%E4%BB%A3%E7%A0%81/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/11.%E6%95%B4%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B0%B120%E5%87%A0%E8%A1%8C%E4%BB%A3%E7%A0%81/</guid><description>&lt;h1 id="11整个操作系统就-20-几行代码">11.整个操作系统就 20 几行代码&lt;/h1>
&lt;p>在第一部分，用了总共十回的篇章，把进入 main 方法前的苦力工作都完成了，我们的程序终于跳到第一个由 c 语言写的，也是操作系统的全部代码骨架的地方，就是 main.c 文件里的 main 方法。&lt;/p>
&lt;p>数一数看，总共也就 20 几行代码。&lt;/p>
&lt;p>但这的确是操作系统启动流程的全部秘密了，我用空格将这个代码分成了几个部分。&lt;/p>
&lt;p>第一部分是一些参数的取值和计算。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="n">ROOT_DEV&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ORIG_ROOT_DEV&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">drive_info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DRIVE_INFO&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">EXT_MEM_K&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;amp;=&lt;/span> &lt;span class="mh">0xfffff000&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="n">memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>         
        &lt;span class="n">buffer_memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="n">buffer_memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">else&lt;/span>        
        &lt;span class="n">buffer_memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">main_memory_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">buffer_memory_end&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>包括&lt;strong>根设备 ROOT_DEV&lt;/strong>，之前在汇编语言中获取的各个设备的&lt;strong>参数信息 drive_info&lt;/strong>，以及通过计算得到的&lt;strong>内存边界&lt;/strong>&lt;/p>
&lt;p>main_memory_start&lt;/p>
&lt;p>main_memory_end&lt;/p>
&lt;p>buffer_memory_start&lt;/p>
&lt;p>buffer_memory_end&lt;/p>
&lt;p>从哪获得之前的设备参数信息呢？如果你前面看了，那一定还记得这个表，都是由 setup.s 这个汇编程序调用 BIOS 中断获取的各个设备的信息，并保存在约定好的内存地址 0x90000 处，现在这不就来取了么，我就不赘述了。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>内存地址&lt;/th>
&lt;th>长度(字节)&lt;/th>
&lt;th>名称&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0x90000&lt;/td>
&lt;td>2&lt;/td>
&lt;td>光标位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90002&lt;/td>
&lt;td>2&lt;/td>
&lt;td>扩展内存数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90004&lt;/td>
&lt;td>2&lt;/td>
&lt;td>显示页面&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90006&lt;/td>
&lt;td>1&lt;/td>
&lt;td>显示模式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90007&lt;/td>
&lt;td>1&lt;/td>
&lt;td>字符列数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90008&lt;/td>
&lt;td>2&lt;/td>
&lt;td>未知&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000A&lt;/td>
&lt;td>1&lt;/td>
&lt;td>显示内存&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000B&lt;/td>
&lt;td>1&lt;/td>
&lt;td>显示状态&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000C&lt;/td>
&lt;td>2&lt;/td>
&lt;td>显卡特性参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000E&lt;/td>
&lt;td>1&lt;/td>
&lt;td>屏幕行数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000F&lt;/td>
&lt;td>1&lt;/td>
&lt;td>屏幕列数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90080&lt;/td>
&lt;td>16&lt;/td>
&lt;td>硬盘1参数表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90090&lt;/td>
&lt;td>16&lt;/td>
&lt;td>硬盘2参数表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x901FC&lt;/td>
&lt;td>2&lt;/td>
&lt;td>根设备号&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>第二部分是各种初始化 &lt;strong>init&lt;/strong> 操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
    &lt;span class="p">...&lt;/span>
    &lt;span class="n">mem_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main_memory_start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">memory_end&lt;/span>&lt;span class="p">);&lt;/span>
    &lt;span class="n">trap_init&lt;/span>&lt;span class="p">();&lt;/span>
    &lt;span class="n">blk_dev_init&lt;/span>&lt;span class="p">();&lt;/span>
    &lt;span class="n">chr_dev_init&lt;/span>&lt;span class="p">();&lt;/span>
    &lt;span class="n">tty_init&lt;/span>&lt;span class="p">();&lt;/span>
    &lt;span class="n">time_init&lt;/span>&lt;span class="p">();&lt;/span>
    &lt;span class="n">sched_init&lt;/span>&lt;span class="p">();&lt;/span>
    &lt;span class="n">buffer_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer_memory_end&lt;/span>&lt;span class="p">);&lt;/span>
    &lt;span class="n">hd_init&lt;/span>&lt;span class="p">();&lt;/span>
    &lt;span class="n">floppy_init&lt;/span>&lt;span class="p">();&lt;/span>
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>包括&lt;strong>内存初始化 mem_init&lt;/strong>，&lt;strong>中断初始化 trap_init&lt;/strong>、&lt;strong>进程调度初始化 sched_init&lt;/strong> 等等。&lt;/p>
&lt;p>我们知道学操作系统知识的时候，其实就分成这么几块来学的，看来在操作系统源码上看，也确实是这么划分的，那我们之后照着源码慢慢品，就好了。&lt;/p>
&lt;p>第三部分是&lt;strong>切换到用户态模式&lt;/strong>，并在一个新的进程中做一个最终的初始化 init。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
    &lt;span class="p">...&lt;/span>
    &lt;span class="n">sti&lt;/span>&lt;span class="p">();&lt;/span>
    &lt;span class="n">move_to_user_mode&lt;/span>&lt;span class="p">();&lt;/span>
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
        &lt;span class="n">init&lt;/span>&lt;span class="p">();&lt;/span>
    &lt;span class="p">}&lt;/span>
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个 init 函数里会创建出一个进程，设置终端的标准 IO，并且再创建出一个执行 shell 程序的进程用来接受用户的命令，到这里其实就出现了我们熟悉的画面（下面是 bochs 启动 Linux 0.11 后的画面）。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-51-46-0657cf01aa84e1e8b41e2bbb5fdd34e2.png" alt="图片">&lt;/p>
&lt;p>第四部分是个&lt;strong>死循环&lt;/strong>，如果没有任何任务可以运行，操作系统会一直陷入这个死循环无法自拔。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="k">for&lt;/span>&lt;span class="p">(;;)&lt;/span> &lt;span class="n">pause&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>OK，不要细品每一句话，我们本回就是要你有个整体印象，之后会细细讲这里的每一个部分。&lt;/p>
&lt;p>这里再放上目前的内存布局图。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-51-54-577c7164fbe2af172d3e6a6ad2156a92.png" alt="图片">&lt;/p>
&lt;p>这个图大家一定要牢记在心，操作系统说白了就是在内存中放置各种的数据结构，来实现“管理”的功能。&lt;/p>
&lt;p>所以之后我们的学习过程，主心骨其实就是看看，操作系统在经过一番折腾后，又在内存中建立了什么数据结构，而这些数据结构后面又是如何用到的。&lt;/p>
&lt;p>比如进程管理，就是在内存中建立好多复杂的数据结构用来记录进程的信息，再配合上进程调度的小算法，完成了进程这个强大的功能。&lt;/p>
&lt;p>为了让大家目前心里有个底，我们把前面的工作再再再再在这里做一个回顾，用一张图表示就是：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-52-02-b132907e3383fd6714732ab52a2c7920.png" alt="图片">&lt;/p>
&lt;p> &lt;/p>
&lt;p>看到了吧，我们已经把 boot 文件夹下的三个汇编文件的全部代码都一行一行品读过了，其主要功能就是三张表的设置：全局描述符表、中断描述符表、页表。同时还设置了各种段寄存器，栈顶指针。并且，还为后续的程序提供了设备信息，保存在 0x90000 处往后的几个位置上。&lt;/p>
&lt;p>最后，一个华丽的跳转，将程序跳转到了 main.c 文件里的 main 函数中。&lt;/p>
&lt;p>所以，本讲就是让大家深呼吸，把之前的准备工作再消化消化。如果第一部分全部认真看过的同学，必定觉得这一回是废话。&lt;/p>
&lt;p>如果你不这样觉得，那就得再回去重新梳理一边咯，如果有不会的，赶紧查资料搞懂它，因为之后要打一系列的硬仗了！根基不稳，地动山摇！&lt;/p></description></item><item><title>12.管理内存前先划分出三个边界值</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/12.%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98%E5%89%8D%E5%85%88%E5%88%92%E5%88%86%E5%87%BA%E4%B8%89%E4%B8%AA%E8%BE%B9%E7%95%8C%E5%80%BC/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/12.%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98%E5%89%8D%E5%85%88%E5%88%92%E5%88%86%E5%87%BA%E4%B8%89%E4%B8%AA%E8%BE%B9%E7%95%8C%E5%80%BC/</guid><description>&lt;h1 id="12管理内存前先划分出三个边界值">12.管理内存前先划分出三个边界值&lt;/h1>
&lt;p>上回书咱们回顾了一下 main.c 函数之前我们做的全部工作，给进入 main 函数做了一个充分的准备。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-52-14-b132907e3383fd6714732ab52a2c7920.png" alt="图片">&lt;/p>
&lt;p>那今天我们就话不多说，从 main 函数的第一行代码开始读。&lt;/p>
&lt;p>还是把 main 的全部代码都先写出来，很少。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="n">ROOT_DEV&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ORIG_ROOT_DEV&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">drive_info&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DRIVE_INFO&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">EXT_MEM_K&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;amp;=&lt;/span> &lt;span class="mh">0xfffff000&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="n">memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>         
        &lt;span class="n">buffer_memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="n">buffer_memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">else&lt;/span>        
        &lt;span class="n">buffer_memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">main_memory_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">buffer_memory_end&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">mem_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main_memory_start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">memory_end&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">trap_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">blk_dev_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">chr_dev_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">tty_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">time_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">sched_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">buffer_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer_memory_end&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">hd_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">floppy_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">sti&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">move_to_user_mode&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>      
        &lt;span class="cm">/* we count on this going ok */&lt;/span>        
        &lt;span class="n">init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="p">}&lt;/span>    
    &lt;span class="k">for&lt;/span>&lt;span class="p">(;;)&lt;/span> 
        &lt;span class="n">pause&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们今天就看这第一小段。&lt;/p>
&lt;p>首先，ROOT_DEV 为系统的根文件设备号，drive_info 为之前 setup.s 程序获取并存储在内存 0x90000 处的设备信息，我们先不管这俩，等之后用到了再说。&lt;/p>
&lt;p>我们看后面这一坨很影响整体画风的一段代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">EXT_MEM_K&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;amp;=&lt;/span> &lt;span class="mh">0xfffff000&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="n">memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>         
        &lt;span class="n">buffer_memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="n">buffer_memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">else&lt;/span>        
        &lt;span class="n">buffer_memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">main_memory_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">buffer_memory_end&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这一坨代码和后面规规整整的 xxx_init 平级的位置，要是我们这么写代码，肯定被老板批评，被同事鄙视了。但 Linus 写的，就是经典，学就完事了。&lt;/p>
&lt;p>这一坨代码虽然很乱，但仔细看就知道它只是为了计算出三个变量罢了。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>main_memory_start&lt;/p>
&lt;/li>
&lt;li>
&lt;p>memory_end&lt;/p>
&lt;/li>
&lt;li>
&lt;p>buffer_memory_end&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>而观察最后一行代码发现，其实两个变量是相等的，所以其实仅仅计算出了两个变量。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>main_memory_start&lt;/p>
&lt;/li>
&lt;li>
&lt;p>memory_end&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>然后再具体分析这个逻辑，其实就是一堆 if else 判断而已，判断的标准都是 memory_end 也就是内存最大值的大小，而这个内存最大值由第一行代码可以看出，是等于 1M + 扩展内存大小。&lt;/p>
&lt;p>那 ok 了，&lt;strong>其实就只是针对不同的内存大小，设置不同的边界值罢了&lt;/strong>，为了理解它，我们完全没必要考虑这么周全，就假设总内存一共就 &lt;strong>8M&lt;/strong> 大小吧。&lt;/p>
&lt;p>那么如果内存为 8M 大小，&lt;strong>memory_end&lt;/strong> 就是: 8 * 1024 * 1024&lt;/p>
&lt;p>也就只会走倒数第二个分支，那么 &lt;strong>buffer_memory_end&lt;/strong> 就为: 2 * 1024 * 1024&lt;/p>
&lt;p>那么 &lt;strong>main_memory_start&lt;/strong> 也为: 2 * 1024 * 1024&lt;/p>
&lt;p>那这些值有什么用呢？一张图就给你说明白了。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-52-25-971226124a833d3dbe81d79fd19880a1.png" alt="图片">&lt;/p>
&lt;p>你看，其实就是定了三个箭头所指向的地址的三个边界变量，具体主内存区是如何管理和分配的，要看下面代码的功劳。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">mem_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main_memory_start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">memory_end&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而缓冲区是如何管理和分配的，就要看&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">buffer_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer_memory_end&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>是如何折腾的了。&lt;/p>
&lt;p>那我们今天就不背着这两个负担了，仅仅需要知道这三个参数的计算，以及后面是为谁效力的，就好啦，是不是很轻松？后面我们再讲，如何利用这三个参数，来做到内存的管理。&lt;/p></description></item><item><title>13.主内存初始化mem_init</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/13.%E4%B8%BB%E5%86%85%E5%AD%98%E5%88%9D%E5%A7%8B%E5%8C%96mem_init/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/13.%E4%B8%BB%E5%86%85%E5%AD%98%E5%88%9D%E5%A7%8B%E5%8C%96mem_init/</guid><description>&lt;h1 id="13主内存初始化mem_init">13.主内存初始化mem_init&lt;/h1>
&lt;p>今天我们不聊具体内存管理的算法，我们就来看看，操作系统用什么样的一张表，达到了管理内存的效果。&lt;/p>
&lt;p>我们以 Linux 0.11 源码为例，发现进入内核的 main 函数后不久，有这样一坨代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">EXT_MEM_K&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;amp;=&lt;/span> &lt;span class="mh">0xfffff000&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="n">memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>         
        &lt;span class="n">buffer_memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">memory_end&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="n">buffer_memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">else&lt;/span>        
        &lt;span class="n">buffer_memory_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">main_memory_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">buffer_memory_end&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">mem_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main_memory_start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">memory_end&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>除了最后一行外，前面的那一大坨的作用很简单。&lt;/p>
&lt;p>&lt;strong>其实就只是针对不同的内存大小，设置不同的边界值罢了&lt;/strong>，为了理解它，我们完全没必要考虑这么周全，就假设总内存一共就 &lt;strong>8M&lt;/strong> 大小吧。&lt;/p>
&lt;p>那么如果内存为 8M 大小，&lt;strong>memory_end&lt;/strong> 就是: 8 * 1024 * 1024&lt;/p>
&lt;p>也就只会走倒数第二个分支，那么 &lt;strong>buffer_memory_end&lt;/strong> 就为: 2 * 1024 * 1024&lt;/p>
&lt;p>那么 &lt;strong>main_memory_start&lt;/strong> 也为: 2 * 1024 * 1024&lt;/p>
&lt;p>你仔细看看代码逻辑，看是不是这样？&lt;/p>
&lt;p>当然，你不愿意细想也没关系，上述代码执行后，就是如下效果而已。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-52-38-e0cc100badd0bbd46572c76e476884aa.png" alt="图片">&lt;/p>
&lt;p>你看，其实就是定了三个箭头所指向的地址的三个边界变量。具体主内存区是如何管理和分配的，要看 mem_init 里做了什么。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
    &lt;span class="p">...&lt;/span>
    &lt;span class="n">mem_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main_memory_start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">memory_end&lt;/span>&lt;span class="p">);&lt;/span>
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而缓冲区是如何管理和分配的，就要看再后面的 buffer_init 里干了什么。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
    &lt;span class="p">...&lt;/span>
    &lt;span class="n">buffer_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer_memory_end&lt;/span>&lt;span class="p">);&lt;/span>
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不过我们今天只看，主内存是如何管理的，很简单，放轻松。&lt;/p>
&lt;p>进入 mem_init 函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define LOW_MEM 0x100000#define PAGING_MEMORY (15*1024*1024)
&lt;/span>&lt;span class="cp">#define PAGING_PAGES (PAGING_MEMORY&amp;gt;&amp;gt;12)
&lt;/span>&lt;span class="cp">#define MAP_NR(addr) (((addr)-LOW_MEM)&amp;gt;&amp;gt;12)
&lt;/span>&lt;span class="cp">#define USED 100
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">HIGH_MEMORY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">mem_map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">PAGING_PAGES&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="c1">// start_mem = 2 * 1024 * 1024
&lt;/span>&lt;span class="c1">// end_mem = 8 * 1024 * 1024
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">mem_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">start_mem&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">end_mem&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">HIGH_MEMORY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">end_mem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PAGING_PAGES&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">mem_map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">USED&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MAP_NR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start_mem&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">end_mem&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">start_mem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">end_mem&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;=&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">end_mem&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">mem_map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>发现也没几行，而且并没有更深的方法调用，看来是个好欺负的方法。&lt;/p>
&lt;p>仔细一看这个方法，其实折腾来折腾去，就是给一个 &lt;strong>mem_map&lt;/strong> 数组的各个位置上赋了值，而且显示全部赋值为 USED 也就是 100，然后对其中一部分又赋值为了 0。&lt;/p>
&lt;p>赋值为 100 的部分就是 USED，也就表示内存被占用，如果再具体说是占用了 100 次，这个之后再说。剩下赋值为 0 的部分就表示未被使用，也即使用次数为零。&lt;/p>
&lt;p>是不是很简单？&lt;strong>就是准备了一个表，记录了哪些内存被占用了，哪些内存没被占用&lt;/strong>。这就是所谓的“管理”，并没有那么神乎其神。&lt;/p>
&lt;p>那接下来自然有两个问题，每个元素表示占用和未占用，这个表示的范围是多大？初始化时哪些地方是占用的，哪些地方又是未占用的？&lt;/p>
&lt;p>还是一张图就看明白了，我们仍然假设内存总共只有 8M。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-52-47-510fa98ab0ed6f2c146d433185eaccb8.png" alt="图片">&lt;/p>
&lt;p>可以看出，初始化完成后，其实就是 mem_map 这个数组的每个元素都代表一个 4K 内存是否空闲（准确说是使用次数）。&lt;/p>
&lt;p>4K 内存通常叫做 1 页内存，而这种管理方式叫&lt;strong>分页管理&lt;/strong>，就是把内存分成一页一页（4K）的单位去管理。&lt;/p>
&lt;p>1M 以下的内存这个数组干脆没有记录，这里的内存是无需管理的，或者换个说法是无权管理的，也就是没有权利申请和释放，因为这个区域是内核代码所在的地方，不能被“污染”。&lt;/p>
&lt;p>1M 到 2M 这个区间是&lt;strong>缓冲区&lt;/strong>，2M 是缓冲区的末端，缓冲区的开始在哪里之后再说，这些地方不是主内存区域，因此直接标记为 USED，产生的效果就是无法再被分配了。&lt;/p>
&lt;p>2M 以上的空间是&lt;strong>主内存区域&lt;/strong>，而主内存目前没有任何程序申请，所以初始化时统统都是零，未来等着应用程序去申请和释放这里的内存资源。&lt;/p>
&lt;p>那应用程序如何申请内存呢？我们本讲不展开，不过我们简单展望一下，看看申请内存的过程中，是如何使用 mem_map 这个结构的。&lt;/p>
&lt;p>在 &lt;strong>memory.c&lt;/strong> 文件中有个函数 &lt;strong>get_free_page()&lt;/strong>，用于在主内存区中申请一页空闲内存页，并返回物理内存页的起始地址。&lt;/p>
&lt;p>比如我们在 fork 子进程的时候，会调用 &lt;strong>copy_process&lt;/strong> 函数来复制进程的结构信息，其中有一个步骤就是要&lt;strong>申请一页内存&lt;/strong>，用于存放进程结构信息 task_struct。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">copy_process&lt;/span>&lt;span class="p">(...)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="k">struct&lt;/span> &lt;span class="n">task_struct&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">task_struct&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">get_free_page&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们看 get_free_page 的具体实现，是内联汇编代码，看不懂不要紧，注意它里面就有 &lt;strong>mem_map&lt;/strong> 结构的使用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="nf">get_free_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="k">register&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">__res&lt;/span> &lt;span class="k">asm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ax&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">__asm__&lt;/span>&lt;span class="p">(&lt;/span>        
        &lt;span class="s">&amp;#34;std ; repne ; scasb&lt;/span>&lt;span class="se">\n\t&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>        
        &lt;span class="s">&amp;#34;jne 1f&lt;/span>&lt;span class="se">\n\t&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>        
        &lt;span class="s">&amp;#34;movb $1,1(%%edi)&lt;/span>&lt;span class="se">\n\t&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>        
        &lt;span class="s">&amp;#34;sall $12,%%ecx&lt;/span>&lt;span class="se">\n\t&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>        
        &lt;span class="s">&amp;#34;addl %2,%%ecx&lt;/span>&lt;span class="se">\n\t&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>        
        &lt;span class="s">&amp;#34;movl %%ecx,%%edx&lt;/span>&lt;span class="se">\n\t&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>        
        &lt;span class="s">&amp;#34;movl $1024,%%ecx&lt;/span>&lt;span class="se">\n\t&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>        
        &lt;span class="s">&amp;#34;leal 4092(%%edx),%%edi&lt;/span>&lt;span class="se">\n\t&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>        
        &lt;span class="s">&amp;#34;rep ; stosl&lt;/span>&lt;span class="se">\n\t&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>        
        &lt;span class="s">&amp;#34;movl %%edx,%%eax&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>        
        &lt;span class="s">&amp;#34;1:&amp;#34;&lt;/span>        
        &lt;span class="o">:&lt;/span>&lt;span class="s">&amp;#34;=a&amp;#34;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">__res&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="o">:&lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="s">&amp;#34;i&amp;#34;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">LOW_MEM&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="s">&amp;#34;c&amp;#34;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">PAGING_PAGES&lt;/span>&lt;span class="p">),&lt;/span>        
        &lt;span class="s">&amp;#34;D&amp;#34;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mem_map&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">PAGING_PAGES&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="o">:&lt;/span>&lt;span class="s">&amp;#34;di&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;cx&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;dx&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="k">return&lt;/span> &lt;span class="n">__res&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就是选择 mem_map 中首个空闲页面，并标记为已使用。&lt;/p>
&lt;p>好了，本讲就这么多，只是填写了一张大表而已，简单吧？之后的内存申请与释放等骚操作，统统是跟着张大表 &lt;strong>mem_map&lt;/strong> 打交道而已，你一定要记住它哦。&lt;/p></description></item><item><title>14.中断初始化trap_init</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/14.%E4%B8%AD%E6%96%AD%E5%88%9D%E5%A7%8B%E5%8C%96trap_init/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/14.%E4%B8%AD%E6%96%AD%E5%88%9D%E5%A7%8B%E5%8C%96trap_init/</guid><description>&lt;h1 id="14中断初始化trap_init">14.中断初始化trap_init&lt;/h1>
&lt;p>当你的计算机刚刚启动时，你按下键盘是不生效的，但是过了一段时间后，再按下键盘就有效果了。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-18-42-52-2fa9c71755d09a9f049d11155f425500.gif" alt="图片">&lt;/p>
&lt;p>那我们今天就来刨根问底一下，&lt;strong>到底过了多久之后，按下键盘才有效果呢？&lt;/strong>&lt;/p>
&lt;p>当然首先你得知道，按下键盘后会触发中断，CPU 收到你的键盘中断后，根据中断号，寻找由操作系统写好的键盘中断处理程序。&lt;/p>
&lt;p>中断的原理和过程不了解的，可以看我的文章，&lt;a href="http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247498208&amp;amp;idx=1&amp;amp;sn=b784f8b4e627ebd1bfb9810d194fdb80&amp;amp;chksm=c2c5834df5b20a5bdee331002bfc61c90eb468da325bf67abeef780c303a9f51c8543e1a5981&amp;amp;scene=21#wechat_redirect">认认真真的聊聊中断&lt;/a>&lt;/p>
&lt;p>这个中断处理程序会把你的键盘码放入一个队列中，由相应的用户程序或内核程序读取，并显示在控制台，或者其他用途，这就代表你的键盘生效了。&lt;/p>
&lt;p>不过放宽心，我们不展开讲这个中断处理程序以及用户程序读取键盘码后的处理细节，我们把关注点放在，究竟是**“什么时候”**，按下键盘才会有这个效果。&lt;/p>
&lt;p>我们以 &lt;strong>Linux 0.11&lt;/strong> 源码为例，发现进入内核的 main 函数后不久，有这样一行代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">trap_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看到这个方法的全部代码后，你可能会会心一笑，也可能一脸懵逼。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">trap_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">divide_error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">debug&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">nmi&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_system_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">int3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/* int3-5 can be called from all */&lt;/span>
&lt;span class="n">set_system_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">overflow&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_system_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">bounds&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">invalid_op&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">device_not_available&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">double_fault&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">coprocessor_segment_overrun&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">invalid_TSS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">segment_not_present&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">stack_segment&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">general_protection&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">page_fault&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">reserved&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">coprocessor_error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">17&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">48&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">reserved&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">45&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">irq13&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">39&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">¶&lt;/span>&lt;span class="n">llel_interrupt&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这啥玩意？这么多 &lt;strong>set_xxx_gate&lt;/strong>。&lt;/p>
&lt;p>有密集恐惧症的话，绝对看不下去这个代码，所以我就给他简化一下。&lt;/p>
&lt;p>把相同功能的去掉。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">trap_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// set 了一堆 trap_gate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">÷&lt;/span>&lt;span class="n">_error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="c1">// 又 set 了一堆 system_gate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">set_system_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">bounds&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="c1">// 又又批量 set 了一堆 trap_gate
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">17&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">48&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">reserved&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就简单多了，我们一块一块看。&lt;/p>
&lt;p>首先我们看 &lt;strong>set_trap_gate&lt;/strong> 和 &lt;strong>set_system_gate&lt;/strong> 这俩货，发现了这么几个宏定义。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define _set_gate(gate_addr,type,dpl,addr) \
&lt;/span>&lt;span class="cp"> __asm__ (&amp;#34;movw %%dx,%%ax\n\t&amp;#34; \    
&lt;/span>&lt;span class="cp">&lt;/span> &lt;span class="s">&amp;#34;movw %0,%%dx&lt;/span>&lt;span class="se">\n\t&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="err">\&lt;/span>    
&lt;span class="s">&amp;#34;movl %%eax,%1&lt;/span>&lt;span class="se">\n\t&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="err">\&lt;/span>    
&lt;span class="s">&amp;#34;movl %%edx,%2&amp;#34;&lt;/span> &lt;span class="err">\&lt;/span>    
&lt;span class="o">:&lt;/span> &lt;span class="err">\&lt;/span>    
&lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;i&amp;#34;&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="kt">short&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x8000&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dpl&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">))),&lt;/span> &lt;span class="err">\&lt;/span>    
&lt;span class="s">&amp;#34;o&amp;#34;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">gate_addr&lt;/span>&lt;span class="p">))),&lt;/span> &lt;span class="err">\&lt;/span>    
&lt;span class="s">&amp;#34;o&amp;#34;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">gate_addr&lt;/span>&lt;span class="p">))),&lt;/span> &lt;span class="err">\&lt;/span>    
&lt;span class="s">&amp;#34;d&amp;#34;&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">)),&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mh">0x00080000&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="cp">#define set_trap_gate(n,addr) \    
&lt;/span>&lt;span class="cp">&lt;/span> &lt;span class="n">_set_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">idt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="cp">#define set_system_gate(n,addr) \    
&lt;/span>&lt;span class="cp">&lt;/span> &lt;span class="n">_set_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">idt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>别怕，我也看不懂。&lt;/p>
&lt;p>不过这俩都是最终指向了相同的另一个宏定义 &lt;strong>_set_gate&lt;/strong>，说明是有共性的。&lt;/p>
&lt;p>啥共性呢？我直接说吧，那段你完全看不懂的代码，是将汇编语言嵌入到 c 语言了，这种内联汇编的格式非常恶心，所以我也不想搞懂它，最终的效果就是&lt;strong>在中断描述符表中插入了一个中断描述符&lt;/strong>。&lt;/p>
&lt;p>中断描述符表还记得吧，英文叫 idt。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-18-41-46-980a6ab69c8cc1c112cf57a8aaa4be6b.png" alt="图片">&lt;/p>
&lt;p>这段代码就是往这个 idt 表里一项一项地写东西，其对应的中断号就是第一个参数，中断处理程序就是第二个参数。&lt;/p>
&lt;p>产生的效果就是，之后如果来一个中断后，CPU 根据其中断号，就可以到这个中断描述符表 idt 中找到对应的中断处理程序了。&lt;/p>
&lt;p>比如这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">divide_error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就是设置 &lt;strong>0 号中断&lt;/strong>，对应的中断处理程序是 &lt;strong>divide_error&lt;/strong>。&lt;/p>
&lt;p>等 CPU 执行了一条除零指令的时候，会从硬件层面发起一个 0 号异常中断，然后执行由我们操作系统定义的 divide_error 也就是除法异常处理程序，执行完之后再返回。&lt;/p>
&lt;p>再比如这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">set_system_gate(5,&amp;amp;overflow);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就是设置 5 号中断，对应的中断处理程序是 overflow，是边界出错中断。&lt;/p>
&lt;p>TIPS：这个 trap 与 system 的区别仅仅在于，设置的中断描述符的特权级不同，前者是 0（内核态），后者是 3（用户态），这块展开将会是非常严谨的、绕口的、复杂的特权级相关的知识，不明白的话先不用管，就理解为都是设置一个中断号和中断处理程序的对应关系就好了。&lt;/p>
&lt;p>再往后看，批量操作这里。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">trap_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">17&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">48&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">reserved&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>17 到 48 号中断都批量设置为了 &lt;strong>reserved&lt;/strong> 函数，这是暂时的，后面各个硬件初始化时要重新设置好这些中断，把暂时的这个给覆盖掉，此时你留个印象。&lt;/p>
&lt;p>所以整段代码执行下来，内存中那个 idt 的位置会变成如下的样子。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-18-41-56-d55bc92607d5761f34d490c8c549d8b0.png" alt="图片">&lt;/p>
&lt;p>好了，我们看到了设置中断号与中断处理程序对应的地方，那这行代码过去后，键盘好使了么？&lt;/p>
&lt;p>&lt;strong>NO&lt;/strong>&lt;/p>
&lt;p>键盘产生的中断的中断号是 &lt;strong>0x21&lt;/strong>，此时这个中断号还仅仅对应着一个临时的中断处理程序 &amp;amp;reserved，我们接着往后看。&lt;/p>
&lt;p>在这行代码往后几行，还有这么一行代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">trap_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">tty_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">tty_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="n">rs_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">con_init&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">con_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x21&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">keyboard_interrupt&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我省略了大量的代码，只保留了我们关心的。&lt;/p>
&lt;p>注意到 trap_init 后有个 &lt;strong>tty_init&lt;/strong>，最后根据调用链，会调用到一行添加 0x21 号中断处理程序的代码，就是刚刚熟悉的 &lt;strong>set_trap_gate&lt;/strong>。&lt;/p>
&lt;p>而后面的 &lt;strong>keyboard_interrupt&lt;/strong> 根据名字也可以猜出，就是键盘的中断处理程序嘛！&lt;/p>
&lt;p>好了，那我们终于找到大案了，就是从这一行代码开始，我们的键盘生效了！&lt;/p>
&lt;p>没错，不过还有点小问题，不过不重要，就是我们现在的中断处于&lt;strong>禁用状态&lt;/strong>，不论是键盘中断还是其他中断，通通都不好使。&lt;/p>
&lt;p>而 main 方法继续往下读，还有一行这个东西。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">trap_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">tty_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">sti&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>sti 最终会对应一个同名的汇编指令 sti，表示&lt;strong>允许中断&lt;/strong>。所以这行代码之后，键盘才真正开始生效！&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-18-43-14-65419d0147dd0e8d398089f6338cb138.gif" alt="图片">&lt;/p>
&lt;p>动画酷不酷？好啦，今天的文章就到这里了，中断的原理和细节，就看我之前的文章，&lt;a href="http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247498208&amp;amp;idx=1&amp;amp;sn=b784f8b4e627ebd1bfb9810d194fdb80&amp;amp;chksm=c2c5834df5b20a5bdee331002bfc61c90eb468da325bf67abeef780c303a9f51c8543e1a5981&amp;amp;scene=21#wechat_redirect">认认真真的聊聊中断&lt;/a>。&lt;/p>
&lt;p>键盘处理的具体流程，可以跟着我今天的代码深入进去看看哟，Linux 0.11 里还是很简单的。&lt;/p></description></item><item><title>15.块设备初始化blk_dev_init</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/15.%E5%9D%97%E8%AE%BE%E5%A4%87%E8%AF%B7%E6%B1%82%E9%A1%B9%E5%88%9D%E5%A7%8B%E5%8C%96blk_dev_init/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/15.%E5%9D%97%E8%AE%BE%E5%A4%87%E8%AF%B7%E6%B1%82%E9%A1%B9%E5%88%9D%E5%A7%8B%E5%8C%96blk_dev_init/</guid><description>&lt;h1 id="15块设备初始化blk_dev_init">15.块设备初始化blk_dev_init&lt;/h1>
&lt;p>读取硬盘数据到内存中，是操作系统的一个基础功能。&lt;/p>
&lt;p>读取硬盘需要有块设备驱动程序，而以文件的方式来读取则还有要再上面包一层文件系统。&lt;/p>
&lt;p>把读出来的数据放到内存，就涉及到内存中缓冲区的管理。&lt;/p>
&lt;p>上面说的每一件事，都是一个十分庞大的体系，我们今天的文章一个都不展开讲，哈哈。&lt;/p>
&lt;p>我们就讲讲，读取块设备与内存缓冲区之间的桥梁，&lt;strong>块设备请求项&lt;/strong>的初始化工作。&lt;/p>
&lt;p>我们以 Linux 0.11 源码为例，发现进入内核的 main 函数后不久，有这样一行代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">blk_dev_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看到这个方法的全部代码后，你可能会会心一笑，也可能一脸懵逼。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">blk_dev_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>        
        &lt;span class="n">request&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">dev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>        
        &lt;span class="n">request&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这也太简单了吧？&lt;/p>
&lt;p>就是给 request 这个数组的前 32 个元素的两个变量 &lt;strong>dev&lt;/strong> 和 &lt;strong>next&lt;/strong> 附上值，看这俩值 &lt;strong>-1&lt;/strong> 和 &lt;strong>NULL&lt;/strong> 也可以大概猜出，这是没有任何作用时的初始化值。&lt;/p>
&lt;p>我们看下 request 结构体。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cm">/* 
&lt;/span>&lt;span class="cm">* Ok, this is an expanded form so that we can use the same 
&lt;/span>&lt;span class="cm">* request for paging requests when that is implemented. In 
&lt;/span>&lt;span class="cm">* paging, &amp;#39;bh&amp;#39; is NULL, and &amp;#39;waiting&amp;#39; is used to wait for 
&lt;/span>&lt;span class="cm">* read/write completion. 
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="kt">int&lt;/span> &lt;span class="n">dev&lt;/span>&lt;span class="p">;&lt;/span>        &lt;span class="cm">/* -1 if no request */&lt;/span>    
    &lt;span class="kt">int&lt;/span> &lt;span class="n">cmd&lt;/span>&lt;span class="p">;&lt;/span>        &lt;span class="cm">/* READ or WRITE */&lt;/span>    
    &lt;span class="kt">int&lt;/span> &lt;span class="n">errors&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">sector&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">nr_sectors&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">struct&lt;/span> &lt;span class="n">task_struct&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">waiting&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">struct&lt;/span> &lt;span class="n">buffer_head&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">struct&lt;/span> &lt;span class="n">request&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注释也附上了。&lt;/p>
&lt;p>哎哟，这就有点头大了，刚刚的函数虽然很短，但看到这个结构体我们知道了，重点在这呢。&lt;/p>
&lt;p>这也侧面说明了，学习操作系统，其实把遇到的重要数据结构牢记心中，就已经成功一半了。比如主内存管理结构 mem_map，知道它的数据结构是什么样子，其功能也基本就懂了。&lt;/p>
&lt;p>收，继续说这个 request 结构，这个结构就代表了一次读盘请求，其中：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>dev&lt;/strong> 表示设备号，-1 就表示空闲。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>cmd&lt;/strong> 表示命令，其实就是 READ 还是 WRITE，也就表示本次操作是读还是写。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>errors&lt;/strong> 表示操作时产生的错误次数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>sector&lt;/strong> 表示起始扇区。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>nr_sectors&lt;/strong> 表示扇区数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>buffer&lt;/strong> 表示数据缓冲区，也就是读盘之后的数据放在内存中的什么位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>waiting&lt;/strong> 是个 task_struct 结构，这可以表示一个进程，也就表示是哪个进程发起了这个请求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>bh&lt;/strong> 是缓冲区头指针，这个后面讲完缓冲区就懂了，因为这个 request 是需要与缓冲区挂钩的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>next&lt;/strong> 指向了下一个请求项。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这里有的变量看不懂没关系。&lt;/p>
&lt;p>不过我们倒是可以基于现有的重点参数猜测一下，比如读请求时，&lt;strong>cmd&lt;/strong> 就是 READ，&lt;strong>sector&lt;/strong> 和 &lt;strong>nr_sectors&lt;/strong> 这俩就定位了所要读取的块设备（可以简单先理解为硬盘）的哪几个扇区，&lt;strong>buffer&lt;/strong> 就定位了这些数据读完之后放在内存的什么位置。&lt;/p>
&lt;p>这就够啦，想想看，这四个参数是不是就能完整描述了一个读取硬盘的需求了？而且完全没有歧义，就像下面这样。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-53-50-690924a1e773076ec2cd20e01c2b1744.png" alt="图片">&lt;/p>
&lt;p>而其他的参数，肯定是为了更好地配合操作系统进行读写块设备操作嘛，为了把多个读写块设备请求很好地组织起来。这个组织不但要有这个数据结构中 hb 和 next 等变量的配合，还要有后面的电梯调度算法的配合，仅此而已，先点到为止。&lt;/p>
&lt;p>总之，我们这里就先明白，这个 request 结构可以完整描述一个读盘操作。然后那个 request 数组就是把它们都放在一起，并且它们又通过 next 指针串成链表。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-54-00-b1018be55a35904adb67f587207d81fd.png" alt="图片">&lt;/p>
&lt;p>好，本文讲述的两行代码，其实就完成了上图所示的工作而已。&lt;/p>
&lt;p>但讲到这就结束的话，很多同学可能会不太甘心，那我就简单展望一下，后面读盘的全流程中，是怎么用到刚刚初始化的这个 request[32] 结构的。&lt;/p>
&lt;p>读操作的系统调用函数是 &lt;strong>sys_read&lt;/strong>，源代码很长，我给简化一下，仅仅保留读取普通文件的分支，就是如下的样子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">sys_read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="k">struct&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">filp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">];&lt;/span>    
    &lt;span class="k">struct&lt;/span> &lt;span class="n">m_inode&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">inode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">f_inode&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="c1">// 校验 buf 区域的内存限制    
&lt;/span>&lt;span class="c1">&lt;/span>    &lt;span class="n">verify_area&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="c1">// 仅关注目录文件或普通文件    
&lt;/span>&lt;span class="c1">&lt;/span>    &lt;span class="k">return&lt;/span> &lt;span class="n">file_read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inode&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看，入参 &lt;strong>fd&lt;/strong> 是文件描述符，通过它可以找到一个文件的 inode，进而找到这个文件在硬盘中的位置。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-54-09-d4c54b58b06bc4c83250ef5e1c57d323.png" alt="图片">&lt;/p>
&lt;p>另两个入参 &lt;strong>buf&lt;/strong> 就是要复制到的内存中的位置，&lt;strong>count&lt;/strong> 就是要复制多少个字节，很好理解。&lt;/p>
&lt;p>钻到 file_read 函数里继续看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">file_read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">m_inode&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">inode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">filp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="kt">int&lt;/span> &lt;span class="n">left&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">nr&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">struct&lt;/span> &lt;span class="n">buffer_head&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>        
        &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inode&lt;/span>&lt;span class="p">,(&lt;/span>&lt;span class="n">filp&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">f_pos&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">BLOCK_SIZE&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>            
            &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">bread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inode&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">i_dev&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">nr&lt;/span>&lt;span class="p">)))&lt;/span>                
                &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>        
        &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>            
            &lt;span class="n">bh&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>        
        &lt;span class="n">nr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">filp&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">f_pos&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">BLOCK_SIZE&lt;/span>&lt;span class="p">;&lt;/span>        
        &lt;span class="n">chars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MIN&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">BLOCK_SIZE&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">nr&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">left&lt;/span> &lt;span class="p">);&lt;/span>        
        &lt;span class="n">filp&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">f_pos&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">chars&lt;/span>&lt;span class="p">;&lt;/span>        
        &lt;span class="n">left&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">chars&lt;/span>&lt;span class="p">;&lt;/span>        
        &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>            
            &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">b_data&lt;/span>&lt;span class="p">;&lt;/span>            
            &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="o">--&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>                
                &lt;span class="n">put_fs_byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);&lt;/span>            
            &lt;span class="n">brelse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="p">);&lt;/span>        
        &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>            
            &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="o">--&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>                
                &lt;span class="n">put_fs_byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);&lt;/span>        
        &lt;span class="p">}&lt;/span>    
    &lt;span class="p">}&lt;/span>    
    &lt;span class="n">inode&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">i_atime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CURRENT_TIME&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:-&lt;/span>&lt;span class="n">ERROR&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>整体看，就是一个 while 循环，每次读入一个块的数据，直到入参所要求的大小全部读完为止。&lt;/p>
&lt;p>直接看 bread 那一行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">file_read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">m_inode&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">inode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">file&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">filp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>        
        &lt;span class="p">...&lt;/span>        
        &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">bread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inode&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">i_dev&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">nr&lt;/span>&lt;span class="p">)))&lt;/span>    
    &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个函数就是去读某一个设备的某一个数据块号的内容，展开进去看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">struct&lt;/span> &lt;span class="n">buffer_head&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nf">bread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">dev&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">block&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="k">struct&lt;/span> &lt;span class="n">buffer_head&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">bh&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getblk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dev&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">b_uptodate&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="k">return&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">ll_rw_block&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">READ&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">wait_on_buffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">b_uptodate&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="k">return&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">brelse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 getblk 先申请了一个内存中的缓冲块，然后 ll_rw_block 负责把数据读入这个缓冲块，进去继续看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">ll_rw_block&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">rw&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">buffer_head&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">make_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">major&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">rw&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">bh&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">make_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">major&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">rw&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">buffer_head&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">rw&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">READ&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="n">req&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">NR_REQUEST&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">else&lt;/span>        
        &lt;span class="n">req&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">NR_REQUEST&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
    &lt;span class="cm">/* find an empty request */&lt;/span>    
    &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">req&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span>        
        &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">dev&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>            
            &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>    
        &lt;span class="p">...&lt;/span>
    &lt;span class="cm">/* fill up the request-info, and add it to the queue */&lt;/span>    
    &lt;span class="n">req&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">dev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">b_dev&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">req&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rw&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">req&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">errors&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">req&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">sector&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">b_blocknr&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">req&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">nr_sectors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">req&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">b_data&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">req&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">waiting&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">req&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">bh&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bh&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">req&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">add_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">major&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">blk_dev&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看，这里就用到了刚刚说的结构咯。&lt;/p>
&lt;p>具体说来，就是该函数会往刚刚的设备的请求项链表 request[32] 中添加一个请求项，只要 request[32] 中有未处理的请求项存在，都会陆续地被处理，直到设备的请求项链表是空为止。&lt;/p>
&lt;p>具体怎么读盘，就是与硬盘 IO 端口进行交互的过程了，可以继续往里跟，直到看到一个 hd_out 函数为止，本讲不展开了。&lt;/p>
&lt;p>具体读盘操作，后面会有详细的章节展开讲解，本讲你只需要知道，我们在 main 函数的 init 系列函数中，通过 blk_dev_init 为后面的块设备访问，提前建立了一个数据结构，作为访问块设备和内存缓冲区之间的桥梁，就可以了。&lt;/p></description></item><item><title>16.控制台初始化tty_init</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/16.%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%88%9D%E5%A7%8B%E5%8C%96tty_init/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/16.%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%88%9D%E5%A7%8B%E5%8C%96tty_init/</guid><description>&lt;h1 id="16控制台初始化tty_init">16.控制台初始化tty_init&lt;/h1>
&lt;p>继内存管理结构 mem_map 和中断描述符表 &lt;strong>idt&lt;/strong> 建立好之后，我们又在内存中倒腾出一个新的数据结构 request。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-54-29-0cd1b1507c1b3a1def8e8ae2318cc454.png" alt="图片">&lt;/p>
&lt;p>并且把它们都放在了一个数组中。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-54-35-67de5d8590db81f3635813a587755d0d.png" alt="图片">&lt;/p>
&lt;p>这是&lt;strong>块设备驱动程序&lt;/strong>与&lt;strong>内存缓冲区&lt;/strong>的桥梁，通过它可以完整地表示一个块设备读写操作要做的事。&lt;/p>
&lt;p>我们继续往下看，tty_init。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">mem_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main_memory_start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">memory_end&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">trap_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">blk_dev_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">chr_dev_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">tty_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">time_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">sched_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">buffer_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer_memory_end&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">hd_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">floppy_init&lt;/span>&lt;span class="p">();&lt;/span>        
    &lt;span class="n">sti&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">move_to_user_mode&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
        &lt;span class="n">init&lt;/span>&lt;span class="p">();&lt;/span>
    &lt;span class="p">}&lt;/span>    
    &lt;span class="k">for&lt;/span>&lt;span class="p">(;;)&lt;/span> 
        &lt;span class="n">pause&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个方法执行完成之后，我们将会具备键盘输入到显示器输出字符这个最常用的功能。&lt;/p>
&lt;p>打开这个函数后我有点慌。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">tty_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">){&lt;/span>    
    &lt;span class="n">rs_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">con_init&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看来这个方法已经多到需要拆成两个子方法了。&lt;/p>
&lt;p>打开第一个方法，还好。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">rs_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">){&lt;/span>    
    &lt;span class="n">set_intr_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x24&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">rs1_interrupt&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">set_intr_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x23&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">rs2_interrupt&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tty_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">read_q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tty_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">read_q&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">outb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inb_p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x21&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="mh">0xE7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x21&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个方法是串口中断的开启，以及设置对应的中断处理程序，串口在我们现在的 PC 机上已经很少用到了，所以这个直接忽略，要讲我也不懂。&lt;/p>
&lt;p>看第二个方法，这是重点。代码非常长，有点吓人，我先把大体框架写出。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">con_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ORIG_VIDEO_MODE&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">ORIG_VIDEO_EGA_BX&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xff&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mh">0x10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">ORIG_VIDEO_EGA_BX&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xff&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mh">0x10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
            &lt;span class="p">...&lt;/span>
        &lt;span class="p">}&lt;/span>
    &lt;span class="p">}&lt;/span>
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看出，非常多的 if else。&lt;/p>
&lt;p>这是为了应对不同的显示模式，来分配不同的变量值，那如果我们仅仅找出一个显示模式，这些分支就可以只看一个了。&lt;/p>
&lt;p>啥是显示模式呢？那我们得简单说说显示，&lt;strong>一个字符是如何显示在屏幕上的呢&lt;/strong>？换句话说，如果你可以随意操作内存和 CPU 等设备，你如何操作才能使得你的显示器上，显示一个字符‘a’呢？&lt;/p>
&lt;p>我们先看一张图。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-54-44-e0114d9f3618a7346926003c3b291a67.png" alt="图片">&lt;/p>
&lt;p>内存中有这样一部分区域，是和显存映射的。啥意思，就是你往上图的这些内存区域中写数据，相当于写在了显存中。而往显存中写数据，就相当于在屏幕上输出文本了。&lt;/p>
&lt;p>没错，就是这么简单。&lt;/p>
&lt;p>如果我们写这一行汇编语句。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nf">mov&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0xB8000&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s">&amp;#39;h&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>后面那个 h 相当于汇编编辑器帮我们转换成 ASCII 码的二进制数值，当然我们也可以直接写。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nf">mov&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0xB8000&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mh">0x68&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其实就是往内存中 &lt;strong>0xB8000&lt;/strong> 这个位置写了一个值，只要一写，屏幕上就会是这样。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-54-52-02dc025a09c12d800b8a9eeac411d1eb.png" alt="图片">&lt;/p>
&lt;p>简单吧，具体说来，这片内存是每两个字节表示一个显示在屏幕上的字符，&lt;strong>第一个是字符的编码，第二个是字符的颜色&lt;/strong>，那我们先不管颜色，如果多写几个字符就像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nf">mov&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0xB8000&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s">&amp;#39;h&amp;#39;&lt;/span>
&lt;span class="nf">mov&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0xB8002&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s">&amp;#39;e&amp;#39;&lt;/span>
&lt;span class="nf">mov&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0xB8004&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s">&amp;#39;l&amp;#39;&lt;/span>
&lt;span class="nf">mov&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0xB8006&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s">&amp;#39;l&amp;#39;&lt;/span>
&lt;span class="nf">mov&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0xB8008&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s">&amp;#39;o&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此时屏幕上就会是这样。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-54-58-7c963e70e140abbc4f8657661d009382.png" alt="图片">&lt;/p>
&lt;p>是不是贼简单？那我们回过头看刚刚的代码，我们就假设显示模式是我们现在的这种文本模式，那条件分支就可以去掉好多。&lt;/p>
&lt;p>代码可以简化成这个样子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define ORIG_X          (*(unsigned char *)0x90000)
&lt;/span>&lt;span class="cp">#define ORIG_Y          (*(unsigned char *)0x90001)
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">con_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="k">register&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="c1">// 第一部分 获取显示模式相关信息    
&lt;/span>&lt;span class="c1">&lt;/span>    &lt;span class="n">video_num_columns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(((&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">short&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="mh">0x90006&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xff00&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">video_size_row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">video_num_columns&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">video_num_lines&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">25&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">video_page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">short&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="mh">0x90004&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">video_erase_char&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0720&lt;/span>&lt;span class="p">;&lt;/span>    
    
    &lt;span class="c1">// 第二部分 显存映射的内存区域     
&lt;/span>&lt;span class="c1">&lt;/span>    &lt;span class="n">video_mem_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xb8000&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">video_port_reg&lt;/span>  &lt;span class="o">=&lt;/span> &lt;span class="mh">0x3d4&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">video_port_val&lt;/span>  &lt;span class="o">=&lt;/span> &lt;span class="mh">0x3d5&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">video_mem_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xba000&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="c1">// 第三部分 滚动屏幕操作时的信息    
&lt;/span>&lt;span class="c1">&lt;/span>    &lt;span class="n">origin&lt;/span>  &lt;span class="o">=&lt;/span> &lt;span class="n">video_mem_start&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">scr_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">video_mem_start&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">video_num_lines&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">video_size_row&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">top&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">bottom&lt;/span>  &lt;span class="o">=&lt;/span> &lt;span class="n">video_num_lines&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="c1">// 第四部分 定位光标并开启键盘中断    
&lt;/span>&lt;span class="c1">&lt;/span>    &lt;span class="n">gotoxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ORIG_X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ORIG_Y&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">set_trap_gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x21&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">keyboard_interrupt&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">outb_p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inb_p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x21&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="mh">0xfd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x21&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">inb_p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x61&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">outb_p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="mh">0x80&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x61&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">outb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x61&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>别看这么多，一点都不难。&lt;/p>
&lt;p>首先还记不记得之前汇编语言的时候做的工作，存了好多以后要用的数据在内存中。就在 &lt;a href="http://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;amp;mid=2247499558&amp;amp;idx=1&amp;amp;sn=d5d057fae2fb835d38f82804c2649463&amp;amp;chksm=c2c5858bf5b20c9de2db5c31dd34fbe766f6c46cda17f54f4518a75fc1838f2ada6fe5717aad&amp;amp;scene=21#wechat_redirect">第五回 | 进入保护模式前的最后一次折腾内存&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>内存地址&lt;/th>
&lt;th>长度(字节)&lt;/th>
&lt;th>名称&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0x90000&lt;/td>
&lt;td>2&lt;/td>
&lt;td>光标位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90002&lt;/td>
&lt;td>2&lt;/td>
&lt;td>扩展内存数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90004&lt;/td>
&lt;td>2&lt;/td>
&lt;td>显示页面&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90006&lt;/td>
&lt;td>1&lt;/td>
&lt;td>显示模式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90007&lt;/td>
&lt;td>1&lt;/td>
&lt;td>字符列数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90008&lt;/td>
&lt;td>2&lt;/td>
&lt;td>未知&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000A&lt;/td>
&lt;td>1&lt;/td>
&lt;td>显示内存&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000B&lt;/td>
&lt;td>1&lt;/td>
&lt;td>显示状态&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000C&lt;/td>
&lt;td>2&lt;/td>
&lt;td>显卡特性参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000E&lt;/td>
&lt;td>1&lt;/td>
&lt;td>屏幕行数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x9000F&lt;/td>
&lt;td>1&lt;/td>
&lt;td>屏幕列数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90080&lt;/td>
&lt;td>16&lt;/td>
&lt;td>硬盘1参数表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x90090&lt;/td>
&lt;td>16&lt;/td>
&lt;td>硬盘2参数表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x901FC&lt;/td>
&lt;td>2&lt;/td>
&lt;td>根设备号&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>所以，&lt;strong>第一部分&lt;/strong>获取 0x90006 地址处的数据，就是获取显示模式等相关信息。&lt;/p>
&lt;p>&lt;strong>第二部分&lt;/strong>就是显存映射的内存地址范围，我们现在假设是 CGA 类型的文本模式，所以映射的内存是从 0xB8000 到 0xBA000。&lt;/p>
&lt;p>&lt;strong>第三部分&lt;/strong>是设置一些滚动屏幕时需要的参数，定义顶行和底行是哪里，这里顶行就是第一行，底行就是最后一行，很合理。&lt;/p>
&lt;p>&lt;strong>第四部分&lt;/strong>是把光标定位到之前保存的光标位置处（取内存地址 0x90000 处的数据），然后设置并开启键盘中断。&lt;/p>
&lt;p>开启键盘中断后，键盘上敲击一个按键后就会触发中断，中断程序就会读键盘码转换成 ASCII 码，然后写到光标处的内存地址，也就相当于往显存写，于是这个键盘敲击的字符就显示在了屏幕上。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-18-26-00-16aa8fd06abcb45912d37ffdc64487f2.gif" alt="图片">&lt;/p>
&lt;p>这一切具体是怎么做到的呢？我们先看看我们干了什么。&lt;/p>
&lt;p>&lt;strong>1.&lt;/strong> 我们现在根据已有信息已经可以实现往屏幕上的任意位置写字符了，而且还能指定颜色。&lt;/p>
&lt;p>&lt;strong>2.&lt;/strong> 并且，我们也能接受键盘中断，根据键盘码中断处理程序就可以得知哪个键按下了。&lt;/p>
&lt;p>有了这俩功能，那我们想干嘛还不是为所欲为？&lt;/p>
&lt;p>好，接下来我们看看代码是怎么处理的，很简单。一切的起点，就是第四步的 &lt;strong>gotoxy&lt;/strong> 函数，定位当前光标。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define ORIG_X          (*(unsigned char *)0x90000)
&lt;/span>&lt;span class="cp">#define ORIG_Y          (*(unsigned char *)0x90001)
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">con_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="c1">// 第四部分 定位光标并开启键盘中断    
&lt;/span>&lt;span class="c1">&lt;/span>    &lt;span class="n">gotoxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ORIG_X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ORIG_Y&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里面干嘛了呢？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">gotoxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">new_x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">new_y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> 
    &lt;span class="p">...&lt;/span> 
    &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_x&lt;/span>&lt;span class="p">;&lt;/span> 
    &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_y&lt;/span>&lt;span class="p">;&lt;/span> 
    &lt;span class="n">pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">origin&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">video_size_row&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就是给 &lt;strong>x y pos&lt;/strong> 这三个参数附上了值。&lt;/p>
&lt;p>其中 &lt;strong>x&lt;/strong> 表示光标在哪一列，&lt;strong>y&lt;/strong> 表示光标在哪一行，&lt;strong>pos&lt;/strong> 表示根据列号和行号计算出来的内存指针，也就是往这个 pos 指向的地址处写数据，就相当于往控制台的 x 列 y 行处写入字符了，简单吧？&lt;/p>
&lt;p>然后，当你按下键盘后，触发键盘中断，之后的程序调用链是这样的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="nl">_keyboard_interrupt&lt;/span>&lt;span class="p">:&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">call&lt;/span> &lt;span class="n">_do_tty_interrupt&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="kt">void&lt;/span> &lt;span class="n">do_tty_interrupt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">tty&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>   
        &lt;span class="n">copy_to_cooked&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tty_table&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">tty&lt;/span>&lt;span class="p">);&lt;/span>
    &lt;span class="p">}&lt;/span>
    &lt;span class="kt">void&lt;/span> &lt;span class="n">copy_to_cooked&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">tty_struct&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">tty&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
        &lt;span class="p">...&lt;/span>    
        &lt;span class="n">tty&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tty&lt;/span>&lt;span class="p">);&lt;/span>    
        &lt;span class="p">...&lt;/span>
    &lt;span class="p">}&lt;/span>
    &lt;span class="c1">// 控制台时 tty 的 write 为 con_write 函数
&lt;/span>&lt;span class="c1">&lt;/span>    &lt;span class="kt">void&lt;/span> &lt;span class="n">con_write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">tty_struct&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">tty&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
        &lt;span class="p">...&lt;/span>    
        &lt;span class="n">__asm__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;movb _attr,%%ah&lt;/span>&lt;span class="se">\n\t&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>      
                &lt;span class="s">&amp;#34;movw %%ax,%1&lt;/span>&lt;span class="se">\n\t&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>      
                &lt;span class="o">::&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="s">&amp;#34;m&amp;#34;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">short&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">)&lt;/span>      
                &lt;span class="o">:&lt;/span>&lt;span class="s">&amp;#34;ax&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>     
        &lt;span class="n">pos&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>     
        &lt;span class="n">x&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>    
        &lt;span class="p">...&lt;/span>
    &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前面的过程不用管，我们看最后一个函数 con_write 中的关键代码。&lt;/p>
&lt;p>&lt;strong>asm&lt;/strong> 内联汇编，就是把键盘输入的字符 &lt;strong>c&lt;/strong> 写入 &lt;strong>pos&lt;/strong> 指针指向的内存，相当于往屏幕输出了。&lt;/p>
&lt;p>之后两行 pos+=2 和 x++，就是调整所谓的&lt;strong>光标&lt;/strong>。&lt;/p>
&lt;p>你看，写入一个字符，最底层，&lt;strong>其实就是往内存的某处写个数据，然后顺便调整一下光标&lt;/strong>。&lt;/p>
&lt;p>由此我们也可以看出，光标的本质，其实就是这里的 x y pos 这仨变量而已。&lt;/p>
&lt;p>我们还可以做&lt;strong>换行效果&lt;/strong>，当发现光标位置处于某一行的结尾时（这个应该很好算吧，我们都知道屏幕上一共有几行几列了），就把光标计算出一个新值，让其处于下一行的开头。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-18-25-50-51defc61554d51be3a436dfb5e15b217.gif" alt="图片">&lt;/p>
&lt;p>就一个小计算公式即可搞定，仍然在 con_write 源码处有体现，就是判断列号 x 是否大于了总列数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">con_write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">tty_struct&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">tty&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">&amp;gt;=&lt;/span>&lt;span class="n">video_num_columns&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>        
        &lt;span class="n">x&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">video_num_columns&lt;/span>&lt;span class="p">;&lt;/span>        
        &lt;span class="n">pos&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">video_size_row&lt;/span>&lt;span class="p">;&lt;/span>        
        &lt;span class="n">lf&lt;/span>&lt;span class="p">();&lt;/span>  
    &lt;span class="p">}&lt;/span>  
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">lf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>   
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">bottom&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>      
        &lt;span class="n">y&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>      
        &lt;span class="n">pos&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">video_size_row&lt;/span>&lt;span class="p">;&lt;/span>      
        &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>   
    &lt;span class="p">}&lt;/span> 
    &lt;span class="p">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相似的，我们还可以实现&lt;strong>滚屏&lt;/strong>的效果，无非就是当检测到光标已经出现在最后一行最后一列了，那就把每一行的字符，都复制到它上一行，其实就是算好哪些内存地址上的值，拷贝到哪些内存地址，就好了。&lt;/p>
&lt;p>这里大家自己看源码寻找。&lt;/p>
&lt;p>所以，有了这个初始化工作，我们就可以利用这些信息，弄几个小算法，实现各种我们常见控制台的操作。&lt;/p>
&lt;p>或者换句话说，我们见惯不怪的控制台，&lt;strong>回车&lt;/strong>、&lt;strong>换行&lt;/strong>、&lt;strong>删除&lt;/strong>、&lt;strong>滚屏&lt;/strong>、&lt;strong>清屏&lt;/strong>等操作，其实底层都要实现相应的代码的。&lt;/p>
&lt;p>所以 console.c 中的其他方法就是做这个事的，我们就不展开每一个功能的方法体了，简单看看有哪些方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// 定位光标的
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">gotoxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">new_x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">new_y&lt;/span>&lt;span class="p">){}&lt;/span>
&lt;span class="c1">// 滚屏，即内容向上滚动一行
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">scrup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">){}&lt;/span>
&lt;span class="c1">// 光标同列位置下移一行
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">lf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">currcons&lt;/span>&lt;span class="p">){}&lt;/span>
&lt;span class="c1">// 光标回到第一列
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">cr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">){}...&lt;/span>
&lt;span class="c1">// 删除一行
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">delete_line&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">){}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>内容繁多，但没什么难度，只要理解了基本原理即可了。&lt;/p>
&lt;p>OK，整个 &lt;strong>console.c&lt;/strong> 就讲完了，要知道这个文件可是整个内核中代码量最大的文件，可是功能特别单一，也都很简单，主要是处理键盘各种不同的按键，需要写好多 switch case 等语句，十分麻烦，我们这里就完全没必要去展开了，就是个苦力活。&lt;/p>
&lt;p>到这里，我们就正式讲完了 &lt;strong>tty_init&lt;/strong> 的作用。&lt;/p>
&lt;p>在此之后，内核代码就可以用它来方便地在控制台输出字符啦！这在之后内核想要在启动过程中告诉用户一些信息，以及后面内核完全建立起来之后，由用户用 shell 进行操作时手动输入命令，都是可以用到这里的代码的！&lt;/p>
&lt;p>让我们继续向前进发，看下一个被初始化的倒霉鬼是什么东东。&lt;/p>
&lt;p>欲知后事如何，且听下回分解。&lt;/p></description></item><item><title>17.时间初始化time_init</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/17.%E6%97%B6%E9%97%B4%E5%88%9D%E5%A7%8B%E5%8C%96time_init/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/17.%E6%97%B6%E9%97%B4%E5%88%9D%E5%A7%8B%E5%8C%96time_init/</guid><description>&lt;h1 id="17时间初始化time_init">17.时间初始化time_init&lt;/h1>
&lt;p>书接上回，上回书咱们说到，通过初始化控制台的 tty_init 操作，内核代码可以很方便地在控制台输出字符啦！&lt;/p>
&lt;p>作为用户也可以通过敲击键盘，或调用诸如 printf 这样的库函数，在屏幕上输出信息，同时支持换行和滚屏等友好设计，这些都是 tty_init 初始化，以及其对外封装的小功能函数，来实现的。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-17-12-15-55ce05e563c97e43db49cc53dab22aaf.gif" alt="图片">&lt;/p>
&lt;p>我们继续往下看下一个初始化的倒霉鬼&lt;strong>time_init&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="p">...&lt;/span>    
    &lt;span class="n">mem_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main_memory_start&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">memory_end&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">trap_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">blk_dev_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">chr_dev_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">tty_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">time_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">sched_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">buffer_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer_memory_end&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">hd_init&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">floppy_init&lt;/span>&lt;span class="p">();&lt;/span>        
    &lt;span class="n">sti&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="n">move_to_user_mode&lt;/span>&lt;span class="p">();&lt;/span>    
    &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
        &lt;span class="n">init&lt;/span>&lt;span class="p">();&lt;/span>
    &lt;span class="p">}&lt;/span>    
    &lt;span class="k">for&lt;/span>&lt;span class="p">(;;)&lt;/span> 
        &lt;span class="n">pause&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>曾经我很好奇，&lt;strong>操作系统是怎么获取到当前时间的呢&lt;/strong>？&lt;/p>
&lt;p>当然，现在都联网了，可以从网络上实时同步。那当没有网络时，为什么操作系统在启动之后，可以显示出当前时间呢？难道操作系统在电脑关机后，依然不停地在某处运行着，勤勤恳恳数着秒表么？&lt;/p>
&lt;p>当然不是，那我们今天就打开这个 &lt;strong>time_init&lt;/strong> 函数一探究竟。&lt;/p>
&lt;p>打开这个函数后我又是很开心，因为很短，且没有更深入的方法调用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define CMOS_READ(addr) ({ \    
&lt;/span>&lt;span class="cp">&lt;/span>    &lt;span class="n">outb_p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x80&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x70&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="err">\&lt;/span>    
    &lt;span class="n">inb_p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x71&lt;/span>&lt;span class="p">);&lt;/span> \
&lt;span class="p">})&lt;/span>
&lt;span class="cp">#define BCD_TO_BIN(val) ((val)=((val)&amp;amp;15) + ((val)&amp;gt;&amp;gt;4)*10)
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">time_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="k">struct&lt;/span> &lt;span class="n">tm&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>        
        &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_sec&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>        
        &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_min&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>        
        &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_hour&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>        
        &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_mday&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">);&lt;/span>        
        &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_mon&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span>        
        &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_year&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_sec&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>    
    &lt;span class="n">BCD_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_sec&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">BCD_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_min&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">BCD_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_hour&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">BCD_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_mday&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">BCD_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_mon&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">BCD_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_year&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_mon&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">startup_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kernel_mktime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>梦想的代码呀！&lt;/p>
&lt;p>那主要就是对 &lt;strong>CMOS_READ&lt;/strong> 和 &lt;strong>BCD_TO_BIN&lt;/strong> 都是啥意思展开讲一下就明白了了。&lt;/p>
&lt;p>首先是 &lt;strong>CMOS_READ&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define CMOS_READ(addr) ({ \    
&lt;/span>&lt;span class="cp">&lt;/span>    &lt;span class="n">outb_p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x80&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x70&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="err">\&lt;/span>    
    &lt;span class="n">inb_p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x71&lt;/span>&lt;span class="p">);&lt;/span> \
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就是对一个端口先 &lt;strong>out&lt;/strong> 写一下，再 &lt;strong>in&lt;/strong> 读一下。&lt;/p>
&lt;p>这是 CPU 与外设交互的一个基本玩法，CPU 与外设打交道基本是通过端口，往某些端口写值来表示要这个外设干嘛，然后从另一些端口读值来接受外设的反馈。&lt;/p>
&lt;p>至于这个外设内部是怎么实现的，对使用它的操作系统而言，是个黑盒，无需关心。那对于我们程序员来说，就更不用关心了。&lt;/p>
&lt;p>对 CMOS 这个外设的交互讲起来可能没感觉，我们看看与硬盘的交互。&lt;/p>
&lt;p>最常见的就是读硬盘了，我们看硬盘的端口表。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>端口&lt;/th>
&lt;th>读&lt;/th>
&lt;th>写&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0x1F0&lt;/td>
&lt;td>数据寄存器&lt;/td>
&lt;td>数据寄存器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x1F1&lt;/td>
&lt;td>错误寄存器&lt;/td>
&lt;td>特征寄存器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x1F2&lt;/td>
&lt;td>扇区计数寄存器&lt;/td>
&lt;td>扇区计数寄存器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x1F3&lt;/td>
&lt;td>扇区号寄存器或 LBA 块地址 0~7&lt;/td>
&lt;td>扇区号或 LBA 块地址 0~7&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x1F4&lt;/td>
&lt;td>磁道数低 8 位或 LBA 块地址 8~15&lt;/td>
&lt;td>磁道数低 8 位或 LBA 块地址 8~15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x1F5&lt;/td>
&lt;td>磁道数高 8 位或 LBA 块地址 16~23&lt;/td>
&lt;td>磁道数高 8 位或 LBA 块地址 16~23&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x1F6&lt;/td>
&lt;td>驱动器/磁头或 LBA 块地址 24~27&lt;/td>
&lt;td>驱动器/磁头或 LBA 块地址 24~27&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0x1F7&lt;/td>
&lt;td>命令寄存器或状态寄存器&lt;/td>
&lt;td>命令寄存器&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>那读硬盘就是，往除了第一个以外的后面几个端口写数据，告诉要读硬盘的哪个扇区，读多少。然后再从 0x1F0 端口一个字节一个字节的读数据。这就完成了一次硬盘读操作。&lt;/p>
&lt;p>如果觉得不够具体，那来个具体的版本。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在 0x1F2 写入要读取的扇区数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 0x1F3 ~ 0x1F6 这四个端口写入计算好的起始 LBA 地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 0x1F7 处写入读命令的指令号&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不断检测 0x1F7 （此时已成为状态寄存器的含义）的忙位&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果第四步骤为不忙，则开始不断从 0x1F0 处读取数据到内存指定位置，直到读完&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>看，是不是对 CPU 最底层是如何与外设打交道有点感觉了？是不是也不难？就是按照人家的操作手册，然后无脑按照要求读写端口就行了。&lt;/p>
&lt;p>当然，读取硬盘的这个无脑循环，可以 &lt;strong>CPU&lt;/strong> 直接读取并做写入内存的操作，这样就会占用 CPU 的计算资源。&lt;/p>
&lt;p>也可以交给 &lt;strong>DMA&lt;/strong> 设备去读，解放 CPU，但和硬盘的交互，通通都是按照硬件手册上的端口说明，来操作的，实际上也是做了一层封装。&lt;/p>
&lt;p>好了，我们已经学会了和一个外设打交道的基本玩法了。&lt;/p>
&lt;p>那我们代码中要打交道的是哪个外设呢？就是 &lt;strong>CMOS&lt;/strong>。&lt;/p>
&lt;p>它是主板上的一个可读写的 RAM 芯片，你在开机时长按某个键就可以进入设置它的页面。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-55-18-411d42b688bc0d18c019381141d979ed.jpg" alt="图片">&lt;/p>
&lt;p>那我们的代码，其实就是与它打交道，获取它的一些数据而已。&lt;/p>
&lt;p>我们回过头看代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">time_init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>    
    &lt;span class="k">struct&lt;/span> &lt;span class="n">tm&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>        
        &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_sec&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>        
        &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_min&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>        
        &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_hour&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>        
        &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_mday&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">);&lt;/span>        
        &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_mon&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span>        
        &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_year&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_sec&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">CMOS_READ&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>    
    &lt;span class="n">BCD_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_sec&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">BCD_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_min&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">BCD_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_hour&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">BCD_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_mday&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">BCD_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_mon&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">BCD_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_year&lt;/span>&lt;span class="p">);&lt;/span>    
    &lt;span class="n">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tm_mon&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">;&lt;/span>    
    &lt;span class="n">startup_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kernel_mktime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前面几个赋值语句 &lt;strong>CMOS_READ&lt;/strong> 就是通过读写 CMOS 上的指定端口，依次获取&lt;strong>年月日时分秒&lt;/strong>等信息。具体咋操作代码上也写了，也是按照 CMOS 手册要求的读写指定端口就行了，我们就不展开了。&lt;/p>
&lt;p>所以你看，其实操作系统程序，也是要依靠与一个外部设备打交道，来获取这些信息的，并不是它自己有什么魔力。操作系统最大的魅力，就在于它借力完成了一项伟大的事，借 CPU 的力，借硬盘的力，借内存的力，以及现在借 CMOS 的力。&lt;/p>
&lt;p>至于 CMOS 又是如何知道时间的，这个就不在我们讨论范围了。&lt;/p>
&lt;p>接下来 &lt;strong>BCD_TO_BIN&lt;/strong> 就是 BCD 转换成 BIN，因为从 CMOS 上获取的这些年月日都是 BCD 码值，需要转换成存储在我们变量上的二进制数值，所以需要一个小算法来转换一下，没什么意思。&lt;/p>
&lt;p>最后一步 &lt;strong>kernel_mktime&lt;/strong> 也很简单，就是根据刚刚的那些时分秒数据，计算从 &lt;strong>1970 年 1 月 1 日 0 时&lt;/strong>起到开机当时经过的秒数，作为开机时间，存储在 &lt;strong>startup_time&lt;/strong> 这个变量里。&lt;/p>
&lt;p>想研究可以仔细看看这段代码，不过我觉得这种细节不必看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">startup_time = kernel_mktime(&amp;amp;time);
// kernel/mktime.clong 
kernel_mktime(struct tm * tm){    
    long res;    
    int year;    
    year = tm-&amp;gt;tm_year - 70;    
    res = YEAR*year + DAY*((year+1)/4);    
    res += month[tm-&amp;gt;tm_mon];    
    if (tm-&amp;gt;tm_mon&amp;gt;1 &amp;amp;&amp;amp; ((year+2)%4))        
        res -= DAY;    
    res += DAY*(tm-&amp;gt;tm_mday-1);    
    res += HOUR*tm-&amp;gt;tm_hour;    
    res += MINUTE*tm-&amp;gt;tm_min;    
    res += tm-&amp;gt;tm_sec;    
    return res;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就这。&lt;/p>
&lt;p>所以今天其实就是，计算出了一个 &lt;strong>startup_time&lt;/strong> 变量而已，至于这个变量今后会被谁用，怎么用，那就是后话了。&lt;/p>
&lt;p>相信你逐渐也体会到了，此时操作系统好多地方都是用外设要求的方式去询问，比如硬盘信息、显示模式，以及今天的开机时间的获取等。&lt;/p>
&lt;p>所以至少到目前来说，你还不应该感觉操作系统有多么的“高端”，很多时候都是繁琐地，读人家的硬件手册，获取到想要的的信息，拿来给自己用，或者对其进行各种设置。&lt;/p></description></item><item><title>ASM汇编语言基础</title><link>https://justice.bj.cn/post/14.language/asm/asm/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/asm/asm/</guid><description>&lt;h1 id="asm汇编语言基础">ASM汇编语言基础&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>计算机最底层的语言是机器语言；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>机器语言由一系列机器指令组成，现代二进制计算机的机器指令都是一系列01串，对应硬件中的高低电平；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>汇编语言是计算机机器语言的一种助记表示；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>汇编语言的主体是汇编指令，每条汇编指令对应一条机器指令；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>汇编语言可直接访问CPU内部的各个部件，CPU安装汇编语言生成的机器码按序执行；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>汇编语言和具体的机器体系架构直接相关；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="cpu架构">CPU架构&lt;/h2>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2023/03/01-20-21-18-2023-03-01-20-21-04-image.png" alt="">&lt;/p>
&lt;h2 id="寄存器">寄存器&lt;/h2>
&lt;p>寄存器按照其用途可分为以下4类:&lt;/p>
&lt;ul>
&lt;li>数据寄存器&lt;/li>
&lt;li>指针及变址寄存器&lt;/li>
&lt;li>段寄存器&lt;/li>
&lt;li>控制寄存器&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>寄存器名称&lt;/th>
&lt;th>8位&lt;/th>
&lt;th>16位&lt;/th>
&lt;th>32位&lt;/th>
&lt;th>64位&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>通用数据寄存器&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>用来存放操作数，运算结果或者其他信息。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>累加寄存器&lt;/td>
&lt;td>AH|AL&lt;/td>
&lt;td>AX&lt;/td>
&lt;td>EAX&lt;/td>
&lt;td>RAX&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>基址寄存器&lt;/td>
&lt;td>BH|BL&lt;/td>
&lt;td>BX&lt;/td>
&lt;td>EBX&lt;/td>
&lt;td>RBX&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>计数寄存器&lt;/td>
&lt;td>CH|CL&lt;/td>
&lt;td>CX&lt;/td>
&lt;td>ECX&lt;/td>
&lt;td>RCX&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>数据寄存器&lt;/td>
&lt;td>DH|DL&lt;/td>
&lt;td>DX&lt;/td>
&lt;td>EDX&lt;/td>
&lt;td>RDX&lt;/td>
&lt;td>在某些IO指令中,DX被用来存放端口地址;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指针及变址寄存器&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>基址寄存器&lt;br>(BasePoint)&lt;/td>
&lt;td>&lt;/td>
&lt;td>BP&lt;/td>
&lt;td>EBP&lt;/td>
&lt;td>RBP&lt;/td>
&lt;td>栈桢(Frame)底指针&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>栈顶指针寄存器&lt;br>(StackPoint)&lt;/td>
&lt;td>&lt;/td>
&lt;td>SP&lt;/td>
&lt;td>ESP&lt;/td>
&lt;td>RSP&lt;/td>
&lt;td>栈栈顶指针&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>源变址寄存器&lt;br>(SourceIndex)&lt;/td>
&lt;td>&lt;/td>
&lt;td>SI&lt;/td>
&lt;td>ESI&lt;/td>
&lt;td>RSI&lt;/td>
&lt;td>DS:SI一般表示源地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>目的变址寄存器&lt;br>(DestIndex)&lt;/td>
&lt;td>&lt;/td>
&lt;td>DI&lt;/td>
&lt;td>EDI&lt;/td>
&lt;td>RDI&lt;/td>
&lt;td>ES:DI一般表示目的地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>指令及状态寄存器&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>指令指针寄存器&lt;br>(InstructPointer)&lt;/td>
&lt;td>&lt;/td>
&lt;td>IP&lt;/td>
&lt;td>EIP&lt;/td>
&lt;td>RIP&lt;/td>
&lt;td>CS:IP表示了当前执行指令在内存中的地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>状态寄存器&lt;/td>
&lt;td>&lt;/td>
&lt;td>FLAGS&lt;/td>
&lt;td>EFLAGS&lt;/td>
&lt;td>RFLAGS&lt;/td>
&lt;td>存放条件标志码、控制标志和系统标志等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>段寄存器&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>代码段寄存器&lt;br>(CodeSegment)&lt;/td>
&lt;td>&lt;/td>
&lt;td>CS&lt;/td>
&lt;td>ECS&lt;/td>
&lt;td>&lt;/td>
&lt;td>代码段起始地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>数据段寄存器&lt;br>(DataSegment)&lt;/td>
&lt;td>&lt;/td>
&lt;td>DS&lt;/td>
&lt;td>EDS&lt;/td>
&lt;td>&lt;/td>
&lt;td>数据段起始地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>栈寄存器&lt;br>(StackSegment)&lt;/td>
&lt;td>&lt;/td>
&lt;td>SS&lt;/td>
&lt;td>ESS&lt;/td>
&lt;td>&lt;/td>
&lt;td>栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>附加段寄存器&lt;br>(ExtentSegment)&lt;/td>
&lt;td>&lt;/td>
&lt;td>ES&lt;/td>
&lt;td>EES&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>FS&lt;/td>
&lt;td>EFS&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>GS&lt;/td>
&lt;td>EGS&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>TSS寄存器&lt;/td>
&lt;td>&lt;/td>
&lt;td>TR&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>指向当前任务的TSS段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>中断描述符表寄存器&lt;/td>
&lt;td>&lt;/td>
&lt;td>IDTR&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>指向中断表述符表在内存中的起始位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>全局描述符表寄存器&lt;/td>
&lt;td>&lt;/td>
&lt;td>GDTR&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>局部描述符表寄存器&lt;/td>
&lt;td>&lt;/td>
&lt;td>LDTR&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/05-12-37-52-2024-01-05-12-37-45-image.png" alt="">&lt;/p>
&lt;h4 id="寄存器使用约定">寄存器使用约定&lt;/h4>
&lt;p>x86 调用约定（不同编译器可能不遵守）：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>%rax&lt;/code>：用作返回值寄存器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>%rip&lt;/code>：指令指针寄存器，存放下条指令的地址&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>函数调用时：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果参数数量 &amp;lt;= 6，就通过 &lt;code>%rdi&lt;/code>、&lt;code>%rsi&lt;/code>、&lt;code>%rdx&lt;/code>、&lt;code>%rcx&lt;/code>、&lt;code>%r8&lt;/code>、&lt;code>%r9&lt;/code> 的寄存器来传递参数，分别对应函数的第 1 ~ 6 个参数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果参数数量 &amp;gt; 6，需要通过栈来传递。传递时对齐 8 字节。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>调用者保存寄存器和被调用者保存寄存器&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>调用者(Caller)保存: &lt;code>%rdi, %rsi, %rdx, %rcx, %r8, %r9, %r10, %r11&lt;/code> &lt;/p>
&lt;/li>
&lt;li>
&lt;p>被调用者(Callee)保存: &lt;code>%rbx, %rbp, %rsp, %r12, %r13, %r14&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="栈桢">栈桢&lt;/h3>
&lt;p>&lt;code>%rsp&lt;/code> 和 &lt;code>%rbp&lt;/code> 都可以被称为栈指针（stack pointer）。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>%rsp&lt;/code> 是栈顶指针，它指示栈顶的位置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>%rbp&lt;/code> 是栈基址指针，它指向当前栈底的位置，它是历史栈顶的快照，因此也充当各栈帧的分隔符。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>通过 &lt;code>%rbp&lt;/code>，内存中串起一个栈帧链表。只要不断对其解引用就可以回溯到最前面的栈帧。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/03-19-48-11-2024-01-03-19-48-03-image.png" alt="">&lt;/p>
&lt;h2 id="x86汇编语言格式">x86汇编语言格式&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>x86汇编语言是基于intel x86系列处理器所用的汇编语言标准；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>常用的x86汇编语言格式主要分为2种：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>intel x86汇编语言格式&lt;/p>
&lt;ul>
&lt;li>由intel自己主导设计；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>AT&amp;amp;T x86汇编语言格式&lt;/p>
&lt;ul>
&lt;li>
&lt;p>由发明unix的AT&amp;amp;T实验室设计；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>unix, linux, gcc相关的工具链都是使用该汇编语言格式；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>go语言的汇编是AT&amp;amp;T汇编的一个变种；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="intel-和-att-汇编区别">Intel 和 AT&amp;amp;T 汇编区别&lt;/h3>
&lt;p>intel和AT&amp;amp;T汇编的主要区别如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Intel Code&lt;/th>
&lt;th>AT&amp;amp;T Code&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>mov eax,1&lt;/td>
&lt;td>movl $1,%eax&lt;/td>
&lt;td>将eax设为1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov ebx, 0ffh&lt;/td>
&lt;td>movl $0xff,%ebx&lt;/td>
&lt;td>将ebx设置为0xff&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int 80h&lt;/td>
&lt;td>int $0x80&lt;/td>
&lt;td>调用0x80中断处理程序&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov ebx, eax&lt;/td>
&lt;td>movl %eax, %ebx&lt;/td>
&lt;td>将eax中的值复制到ebx中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov eax,[ecx]&lt;/td>
&lt;td>movl (%ecx),%eax&lt;/td>
&lt;td>将eax中的值作为偏移，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov eax,[ebx+3]&lt;/td>
&lt;td>movl 3(%ebx),%eax&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov eax,[ebx+20h]&lt;/td>
&lt;td>movl 0x20(%ebx),%eax&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>add eax,[ebx+ecx*2h]&lt;/td>
&lt;td>addl (%ebx,%ecx,0x2),%eax&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lea eax,[ebx+ecx]&lt;/td>
&lt;td>leal (%ebx,%ecx),%eax&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sub eax,[ebx+ecx*4h-20h]&lt;/td>
&lt;td>subl -0x20(%ebx,%ecx,0x4),%eax&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Intel&lt;/th>
&lt;th>AT&amp;amp;T&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>寄存器命名&lt;/td>
&lt;td>eax&lt;/td>
&lt;td>%eax&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>操作数顺序&lt;/td>
&lt;td>&lt;op> &lt;dst>, &lt;src>&lt;/td>
&lt;td>&lt;op> &lt;src>,&lt;dst>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>立即数&lt;/td>
&lt;td>_value&lt;/td>
&lt;td>$_value&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>mov ebx,0xd00d&lt;/td>
&lt;td>movl $0xd00d,%ebx&lt;/td>
&lt;td>将0xd00d地址存入ebx寄存器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>操作数长度标识&lt;/td>
&lt;td>mov bx,ax&lt;/td>
&lt;td>movw %ax,%bx&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>间接寻址方式&lt;/td>
&lt;td>immed32(basepointer,&lt;br>indexpointer,indexscale)&lt;/td>
&lt;td>[basepointer + &lt;br>indexpointer*indexscale + immed32]&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="汇编语言组成">汇编语言组成&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>汇编语言由一系列汇编指令和伪指令组成；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每条汇编指令对应一条机器码，可由机器直接执行生成的机器码；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>伪指令用于汇编程序提供附加信息，用于控制汇编程序生成机器码，本身没有机器码对应，无法由机器执行；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="指令">指令()&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>指令由字母开头；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指令格式为：&lt;code>&amp;lt;OP&amp;gt; []&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每条指令至少包含一个操作码；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每条指令对应一条机器码；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指令生成机器码后，可由硬件执行；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="伪指令pseudo-instruction">伪指令(Pseudo Instruction)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>伪指令(Pseudo Instruction)是用于对汇编过程进行控制的指令；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>伪指令只用于汇编过程中为汇编程序提供汇编信息，不可执行指令，没有机器代码。例如：哪些是指令、哪些是数据及数据的字长、程序的起始地址和结束地址等；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>伪指令都由句号（'.'）开头，其余是字母,通常使用小写;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类别&lt;/th>
&lt;th>伪指令&lt;/th>
&lt;th>格式&lt;/th>
&lt;th>说明&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>.code16&lt;/td>
&lt;td>.code16&lt;/td>
&lt;td>生成16位的指令&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>.globl&lt;/td>
&lt;td>.globl &amp;lt;label_name&amp;gt;&lt;/td>
&lt;td>将符号定义为全局可链接的，&lt;br>使符号可跨文件访问&lt;/td>
&lt;td>&lt;code>.globl SYMBOL_NAME(idt)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>.extern&lt;/td>
&lt;td>.extern &amp;lt;label_name&amp;gt;&lt;/td>
&lt;td>定义外部符号&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>.text&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据定义&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>.byte&lt;/td>
&lt;td>.byte &lt;b1>[,&lt;b2>,..]&lt;/td>
&lt;td>定义字节&lt;/td>
&lt;td>&lt;code>.byte 0x80,0xca&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>.word&lt;/td>
&lt;td>.word &lt;w1>[,&lt;w2>,..]&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;code>.word 0x800,&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>.file&lt;/td>
&lt;td>.file &amp;ldquo;&lt;string>&amp;rdquo;&lt;/td>
&lt;td>开启一个逻辑文件&lt;/td>
&lt;td>&lt;code>.file ”stage1.s”&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>.fill&lt;/td>
&lt;td>.fill &lt;rep>,&lt;size>,&lt;val>&lt;/td>
&lt;td>填充&lt;rep>*&lt;size>个val&lt;/td>
&lt;td>.fill NR_CPUS*4,8,0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>符号定义&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>.equ&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>伪指令分为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>数据定义伪指令&lt;/p>
&lt;ul>
&lt;li>
&lt;p>格式：&lt;code>[&amp;lt;变量名&amp;gt;] &amp;lt;类型&amp;gt; &amp;lt;初值表&amp;gt;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>符号定义伪指令&lt;/p>
&lt;ul>
&lt;li>
&lt;p>EQU（等值伪指令）：&lt;code>&amp;lt;符号名&amp;gt; EQU &amp;lt;表达式&amp;gt;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nf">.code16&lt;/span> &lt;span class="c1">; 生成16位的指令&lt;/span>
&lt;span class="nf">.section&lt;/span> &lt;span class="nv">.data&lt;/span> &lt;span class="c1">; 数据段&lt;/span>
&lt;span class="nf">.section&lt;/span> &lt;span class="nv">.text&lt;/span> &lt;span class="c1">; 代码段&lt;/span>
&lt;span class="nf">.file&lt;/span> &lt;span class="err">”&lt;/span>&lt;span class="nv">stage1.s&lt;/span>&lt;span class="err">”&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="内存寻址">内存寻址&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>intel&lt;/th>
&lt;th>AT&amp;amp;T&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>立即数寻址&lt;/td>
&lt;td>&lt;code>MOV EBX, 2&lt;/code>&lt;/td>
&lt;td>&lt;code>movl $2, %ebx&lt;/code>&lt;/td>
&lt;td>将32bit的立即数2存入寄存器ebx中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>直接寻址&lt;/td>
&lt;td>&lt;code>MOV EAX, 8000h&lt;/code>&lt;/td>
&lt;td>&lt;code>movl 0x8000, %eax&lt;/code>&lt;/td>
&lt;td>将内存地址0x8000上的32位数据放到eax中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>间接寻址&lt;/td>
&lt;td>&lt;code>MOV EBX, [EAX]&lt;/code>&lt;/td>
&lt;td>&lt;code>movl (%eax), %ebx&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>基址寻址&lt;/td>
&lt;td>&lt;code>MOV EBX, [EAX-4]&lt;/code>&lt;/td>
&lt;td>&lt;code>movl -4(%eax), %ebx&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>变址寻址&lt;/td>
&lt;td>&lt;code>MOV ECX, [EAX+EBX+4]&lt;/code>&lt;/td>
&lt;td>&lt;code>movl 4(%eax，%ebx), %ecx&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="att汇编">AT&amp;amp;T汇编&lt;/h2>
&lt;h3 id="att伪指令">AT&amp;amp;T伪指令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">.byte 0x80,0xca //.byte 伪指令
.word 0x800
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="变量">变量&lt;/h3>
&lt;ul>
&lt;li>寄存器前被冠以“%”&lt;/li>
&lt;li>立即数前被冠以“$”&lt;/li>
&lt;li>十六进制数前被冠以“0x”&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm"> &lt;span class="nf">.globl&lt;/span> &lt;span class="nv">var&lt;/span>
&lt;span class="nf">.data&lt;/span>
&lt;span class="nf">.align&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="nf">.type&lt;/span> &lt;span class="nv">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="nv">object&lt;/span>
&lt;span class="nf">.size&lt;/span> &lt;span class="nv">var&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="nl">var:&lt;/span>
&lt;span class="nf">.long&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>应该放在&lt;code>.data&lt;/code>之后，使用“&lt;code>.类型 值&lt;/code>”的形式定义，基本类型有byte、short、long 3种，分别占用1/2/4个字节。&lt;/p>
&lt;p>然后在之前加上标签。标签不是必须的，标签是当前数据的地址，在其它地方可以使用标签。还有其它定义形式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> .long 1,2,3
.zero 10
.string &amp;#34;hello&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一行，类似指定一个数组。&lt;/p>
&lt;p>第二行，10个字节的数据，全部为0。&lt;/p>
&lt;p>第三行，一个字符串。当然，需要.globl声明这个符号，以及指定对齐、类型、大小等。&lt;/p>
&lt;h3 id="定义函数">定义函数&lt;/h3>
&lt;p>和变量定义类似&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm"> &lt;span class="nf">.text&lt;/span>
&lt;span class="nf">.globl&lt;/span> &lt;span class="nv">func&lt;/span>
&lt;span class="nf">.type&lt;/span> &lt;span class="nv">func&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="nv">function&lt;/span>
&lt;span class="nl">func:&lt;/span>
&lt;span class="err">汇编指令&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="操作数">操作数&lt;/h3>
&lt;p>有3类操作数，立即数、寄存器和存储器引用。下面是3种操作数的AT&amp;amp;T语法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>立即数，使用$加一个数字，如$1, $-20, $0x12等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>寄存器，使用%加上寄存器的名字，如%ebp, %ah等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>存储器引用，格式为Imm(Ea,Ei,s)，存储器的值为Imm + Ea + Ei * s，s必须为1,2,4,8。可以省略Imm, Ei和s。如下合法的存储器引用：(%ebp), -1(%ebp), 7(%edx,%edx,4)。甚至可以直接是数字表示的内存地址，如0x100.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="标签作操作数">标签作操作数&lt;/h3>
&lt;p>如果标签var是变量，则var表示的变量的内存地址，$var表示的内存地址的立即数。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>mov var, %eax，把var地址处内存的值拷贝到eax。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>mov $var, %eax，把var值拷贝到寄存器eax。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>mov var+1, %eax，把var+1地址处内存的值拷贝到eax。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>mov $var+1, %eax，把var+1值拷贝到寄存器eax。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="指令后缀">指令后缀&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>C声明&lt;/th>
&lt;th>Intel数据类型&lt;/th>
&lt;th>后缀&lt;/th>
&lt;th>大小&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>char&lt;/td>
&lt;td>字节&lt;/td>
&lt;td>b&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>short&lt;/td>
&lt;td>字&lt;/td>
&lt;td>w&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int&lt;/td>
&lt;td>双字&lt;/td>
&lt;td>l&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>long&lt;/td>
&lt;td>四字&lt;/td>
&lt;td>q&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char*&lt;/td>
&lt;td>四字&lt;/td>
&lt;td>q&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>float&lt;/td>
&lt;td>单精度&lt;/td>
&lt;td>s&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double&lt;/td>
&lt;td>双精度&lt;/td>
&lt;td>l&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="重要的指令">重要的指令&lt;/h3>
&lt;h4 id="call">call&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>负责将被调指令地址写入 &lt;code>rip&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>还要负责将返回地址压入栈中&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="pushpop">push/pop&lt;/h4>
&lt;p>&lt;code>push&lt;/code>把数据压入栈。等价于：先减去栈指针的值，然后将压入数据的值写入栈顶。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">pushl&lt;/span> &lt;span class="no">$0x1234&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">等价于&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">$0x4&lt;/span>&lt;span class="err">，&lt;/span> &lt;span class="nv">%rsp&lt;/span>
&lt;span class="nf">movl&lt;/span> &lt;span class="no">$0x1234&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">%rsp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>pop&lt;/code> 把数据弹出栈，是 &lt;code>push&lt;/code> 的逆变换。等价于：把栈顶数据写入操作数，然后增加栈指针的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">popq&lt;/span> &lt;span class="nv">%rax&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="att汇编示例">AT&amp;amp;T汇编示例&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="c1">// square.c
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="nf">square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对应的AT&amp;amp;T汇编代码为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="c1">; square.s&lt;/span>
&lt;span class="nl">square:&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">注意，此时&lt;/span> &lt;span class="nf">create_obj&lt;/span> &lt;span class="err">的栈帧还未构建完毕&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">因此&lt;/span> &lt;span class="nf">rsp&lt;/span> &lt;span class="err">虽然是栈顶指针，但起始指向的是上一个汉奸的栈顶&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">同时&lt;/span> &lt;span class="nf">rbp&lt;/span> &lt;span class="err">也是指向上一个函数的栈底&lt;/span>
&lt;span class="nf">pushq&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">rbp&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">保存前一个栈帧栈底到当前栈顶。&lt;/span>
&lt;span class="err">//&lt;/span> &lt;span class="err">这是为了让上一个函数调用后能恢复它栈底的值到&lt;/span> &lt;span class="err">%&lt;/span>&lt;span class="nf">rbp&lt;/span>&lt;span class="err">。&lt;/span>
&lt;span class="nf">movq&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">rsp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">rbp&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">保存当前栈顶的值到&lt;/span> &lt;span class="s">`%rbp`&lt;/span>&lt;span class="err">，作为当前函数的栈底指针的值。&lt;/span>
&lt;span class="nf">movl&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">edi&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="nb">rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">将函数的第一个参数&lt;/span> &lt;span class="nv">num&lt;/span> &lt;span class="err">保存到当前函数的栈底&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">20&lt;/span> &lt;span class="err">处。&lt;/span>
&lt;span class="nf">movl&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="nb">rbp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">将函数的第一个局部变量&lt;/span> &lt;span class="nv">k&lt;/span> &lt;span class="err">保存到当前函数的栈底&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="err">处。&lt;/span>
&lt;span class="nf">movl&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="nb">rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">edx&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">将变量&lt;/span> &lt;span class="nv">num&lt;/span> &lt;span class="err">保存到&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">edx&lt;/span> &lt;span class="err">中。&lt;/span>
&lt;span class="nf">movl&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">将变量&lt;/span> &lt;span class="nv">num&lt;/span> &lt;span class="err">保存到&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span> &lt;span class="err">中。&lt;/span>
&lt;span class="nf">sall&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">将变量&lt;/span> &lt;span class="nv">num&lt;/span> &lt;span class="err">乘以&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="err">。&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">左移&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="err">相当于乘以&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="err">得到&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="nv">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="err">。&lt;/span>
&lt;span class="nf">addl&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">edx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">将变量&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span> &lt;span class="err">加上&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">edx&lt;/span> &lt;span class="err">，即&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="nv">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nv">num&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="nv">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="err">。&lt;/span>
&lt;span class="nf">addl&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">将变量&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span> &lt;span class="err">加上&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="err">，即&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="nv">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="c1">;&lt;/span>
&lt;span class="nf">subl&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="nb">rbp&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">将变量&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span> &lt;span class="err">减去&lt;/span> &lt;span class="nv">k&lt;/span> &lt;span class="err">，即&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="nv">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nv">k&lt;/span>&lt;span class="c1">; &lt;/span>
&lt;span class="nf">popq&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">rbp&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">将栈顶保存到&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">rbp&lt;/span> &lt;span class="err">中，并释放栈帧。&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编译&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="c1">; demo.s&lt;/span>
&lt;span class="nf">.section&lt;/span> &lt;span class="nv">.data&lt;/span>
&lt;span class="nf">.section&lt;/span> &lt;span class="nv">.text&lt;/span>
&lt;span class="nf">.globl&lt;/span> &lt;span class="nv">_start&lt;/span>
&lt;span class="nl">_start:&lt;/span>
&lt;span class="nf">movl&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">eax&lt;/span>
&lt;span class="nf">movl&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">%&lt;/span>&lt;span class="nb">ebx&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="kc">$&lt;/span>&lt;span class="mh">0x80&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">// 汇编
[]$ as demo.s -o demo.o
// 链接
[]$ ld demo.o -o demo
//
[]$ ./demo
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="intel汇编">Intel汇编&lt;/h2>
&lt;h3 id="通用数据传送指令">通用数据传送指令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">MOV 传送字或字节
MOVSX 先符号扩展,再传送.
MOVZX 先零扩展,再传送.
PUSH 把字压入堆栈.
POP 把字弹出堆栈.
PUSHA 把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈.
POPA 把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈.
PUSHAD 把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈.
POPAD 把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈.
BSWAP 交换32位寄存器里字节的顺序
XCHG 交换字或字节.(至少有一个操作数为寄存器,段寄存器不可作为操作数)
CMPXCHG 比较并交换操作数.(第二个操作数必须为累加器AL/AX/EAX)
XADD 先交换再累加.(结果在第一个操作数里)
XLAT 字节查表转换.----BX指向一张256字节的表的起点,AL为表的索引值(0-255,即0-FFH);返回AL为查表结果.([BX+AL]-&amp;gt;AL)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="输入输出指令">输入输出指令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">IN I/O端口输入. ( 语法: IN 累加器, {端口号│DX} )
OUT I/O端口输出. ( 语法: OUT {端口号│DX},累加器 )输入输出端口由立即方式指定时, 其范围是 0-255; 由寄存器 DX 指定时,其范围是 0-65535.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="目的地址传送指令">目的地址传送指令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">LEA &amp;lt;DST&amp;gt;, &amp;lt;SRC&amp;gt; ;将&amp;lt;SRC&amp;gt;的偏移量OA装载到&amp;lt;DST&amp;gt;中.例: LEA DX,string ; 把偏移地址存到DX.
LDS &amp;lt;DST&amp;gt;, &amp;lt;SRC&amp;gt; ;将当前数据段中的一个双字数据装入到一个通用寄存器SI(双字数据的低字)和数据段寄存器DS(双字数据的高字)中;
传送目标指针,把指针内容装入DS.例: LDS SI,string ; 把段地址:偏移地址存到DS:SI.
LES 传送目标指针,把指针内容装入ES.例: LES DI,string ;把段地址:偏移地址存到ES:DI.
LFS 传送目标指针,把指针内容装入FS.例: LFS DI,string ;把段地址:偏移地址存到FS:DI.
LGS 传送目标指针,把指针内容装入GS.例: LGS DI,string ;把段地址:偏移地址存到GS:DI.
LSS 传送目标指针,把指针内容装入SS.例: LSS DI,string ;把段地址:偏移地址存到SS:DI.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="标志传送指令">标志传送指令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">LAHF 标志寄存器传送,把标志装入AH.
SAHF 标志寄存器传送,把AH内容装入标志寄存器.
PUSHF 标志入栈.
POPF 标志出栈.
PUSHD 32位标志入栈.
POPD 32位标志出栈.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="eflags寄存器">EFLAGS寄存器&lt;/h3>
&lt;ul>
&lt;li>FR(控制标志位):
&lt;ul>
&lt;li>CF(进位标识位): 进行加减运算时, 如果最高二进制位产生进位或错位, CF则为1, 否则为0. 程序设计中, 常用条件转移指令JC, JNC指令据此标志位实现转移&lt;/li>
&lt;li>PF(奇偶标志位): 操作结果中二进制位1的个数为偶数是, PF为1, 某则为0&lt;/li>
&lt;li>AF(辅助进位标志位):运算时半字节产生进位或借位时, AF为1, 某则为0. 主要用于BCD码的调整&lt;/li>
&lt;li>ZF(零标志位): 运算结果为0时, ZF为1, 否则为0&lt;/li>
&lt;li>SF(符号标志位): 当运算结果的最高位为1时, SF为1, 否则为0. 最高位表示符号数的正和负&lt;/li>
&lt;li>TF(跟踪标志位): 用于调试程序时进入单步方式工作. TF=1时, 每条指令执行完后产生一个内部中断, 让用户检查指令运行后寄存器, 存储器和各标志位的内容. TF=0时, CPU工作正常, 不产生内部中断&lt;/li>
&lt;li>IF(中断允许标志位): IF=1同时中断屏蔽寄存器的相应位为0, 允许系统响应可屏蔽中断, 反之, 不接收外部发出的中断请求&lt;/li>
&lt;li>DF(方向位标志位): 用于控制串操作时地址指针位移方向. 当DF=1时, 指针向高地址方向移动&lt;/li>
&lt;li>OF(溢出标志位): 算术运算时结果超出系统所能表示的数的范围. 溢出时, OF=1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="跳转指令">跳转指令&lt;/h3>
&lt;h3 id="c语言程序的堆栈图">C语言程序的堆栈图&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//仅仅调用此函数而已
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>堆栈图如下（过程）&lt;/p>
&lt;p>&lt;img src="https://img-blog.csdnimg.cn/20200726183129316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbGxfbWVfNDA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&lt;br>
&lt;img src="https://img-blog.csdnimg.cn/20200726183221566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbGxfbWVfNDA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&lt;br>
&lt;img src="https://img-blog.csdnimg.cn/20200726183326281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RlbGxfbWVfNDA0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&lt;/p>
&lt;p>不同的编译器生成的堆栈图可能不同，要视情况而定&lt;/p>
&lt;h3 id="intel汇编示例">intel汇编示例&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="c1">;; 1. 函数调用过程&lt;/span>
&lt;span class="c1">; 提升堆栈&lt;/span>
&lt;span class="nf">PUSH&lt;/span> &lt;span class="nb">EBP&lt;/span> &lt;span class="c1">; 将旧EBP入栈，保存旧栈桢基址&lt;/span>
&lt;span class="nf">MOV&lt;/span> &lt;span class="nb">EBP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">ESP&lt;/span> &lt;span class="c1">; 将旧栈顶指针ESP设为新的栈桢基址，即新的栈桢紧接父调用的栈桢&lt;/span>
&lt;span class="nf">SUB&lt;/span> &lt;span class="nb">ESP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">40&lt;/span> &lt;span class="c1">; ESP减少移动40个字节，即开辟40字节大小的函数栈桢空间&lt;/span>
&lt;span class="c1">; 保留调用现场&lt;/span>
&lt;span class="nf">PUSH&lt;/span> &lt;span class="nb">EBX&lt;/span> &lt;span class="c1">; 将EBX入栈&lt;/span>
&lt;span class="nf">PUSH&lt;/span> &lt;span class="nb">ESI&lt;/span>
&lt;span class="nf">PUSH&lt;/span> &lt;span class="nb">EDI&lt;/span>
&lt;span class="c1">; 向分配的空间填充数据&lt;/span>
&lt;span class="nf">LEA&lt;/span> &lt;span class="nb">EDI&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">DWORD&lt;/span> &lt;span class="nv">PTR&lt;/span> &lt;span class="nb">SS&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="nb">EBP&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">;&lt;/span>
&lt;span class="nf">MOV&lt;/span> &lt;span class="nb">ECX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="nf">MOV&lt;/span> &lt;span class="nb">EAX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">CCCCCCCC&lt;/span>
&lt;span class="nf">REP&lt;/span> &lt;span class="nv">STOS&lt;/span> &lt;span class="kt">DWORD&lt;/span> &lt;span class="nv">PTR&lt;/span> &lt;span class="nb">ES&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="nb">EDI&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1">; 函数功能&lt;/span>
&lt;span class="nf">MOV&lt;/span> &lt;span class="nb">EAX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">DWORD&lt;/span> &lt;span class="nv">PTR&lt;/span> &lt;span class="nb">SS&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="nb">EBP&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">ADD&lt;/span> &lt;span class="nb">EAX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">DWORD&lt;/span> &lt;span class="nv">PTR&lt;/span> &lt;span class="nb">SS&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="nb">EBP&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nv">C&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1">; 恢复现场&lt;/span>
&lt;span class="nf">POP&lt;/span> &lt;span class="nb">EDI&lt;/span>
&lt;span class="nf">POP&lt;/span> &lt;span class="nb">ESI&lt;/span>
&lt;span class="nf">POP&lt;/span> &lt;span class="nb">EBX&lt;/span>
&lt;span class="c1">; 恢复栈桢&lt;/span>
&lt;span class="nf">MOV&lt;/span> &lt;span class="nb">ESP&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">EBP&lt;/span>
&lt;span class="nf">POP&lt;/span> &lt;span class="nb">EBP&lt;/span>
&lt;span class="nf">RETN&lt;/span> &lt;span class="c1">; 返回&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="c1">; 函数入口&lt;/span>
&lt;span class="nf">PUSH&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="c1">; 将函数参数压入栈中&lt;/span>
&lt;span class="nf">PUSH&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="nf">CALL&lt;/span> &lt;span class="mi">0040100&lt;/span>&lt;span class="nv">A&lt;/span> &lt;span class="c1">; 调用函数&lt;/span>
&lt;span class="c1">; 函数出口&lt;/span>
&lt;span class="nf">MOV&lt;/span> &lt;span class="nb">EAX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">DWORD&lt;/span> &lt;span class="nv">PTR&lt;/span> &lt;span class="nb">SS&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="nb">EBP&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">ADD&lt;/span> &lt;span class="nb">EAX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">DWORD&lt;/span> &lt;span class="nv">PTR&lt;/span> &lt;span class="nb">SS&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="nb">EBP&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nv">C&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.jianshu.com/p/1782e14a0766">GCC内联汇编基础 - 简书&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/27339191">https://zhuanlan.zhihu.com/p/27339191&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://chai2010.cn/advanced-go-programming-book/ch3-asm/ch3-02-arch.html">https://chai2010.cn/advanced-go-programming-book/ch3-asm/ch3-02-arch.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://langzi989.github.io/2017/10/06/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%8E%E7%AE%80%E5%8D%95%E6%8C%87%E4%BB%A4%E5%88%86%E6%9E%90/">https://langzi989.github.io/2017/10/06/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%8E%E7%AE%80%E5%8D%95%E6%8C%87%E4%BB%A4%E5%88%86%E6%9E%90/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/54821702">https://zhuanlan.zhihu.com/p/54821702&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.less-bug.com/posts/how-to-read-x86-assembly-att-version/">如何看懂 x86 汇编（AT&amp;amp;T 版）&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://insidelinuxdev.net/article/a00eij.html">i386汇编指令初学&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://150.158.21.50/2022/12/01/AT-T%E6%B1%87%E7%BC%96/">AT&amp;amp;T汇编 | Today is the present&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://ref.x86asm.net/geek32-abc.html">http://ref.x86asm.net/geek32-abc.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/139785404">汇编语言程序设计第二篇——80X86汇编语言伪指令&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://code64.cn/blog1/2009/10-08/BF629617CAE2B0FF08CB38DCE94AA184/">AT&amp;amp;T 汇编伪指令说明 - 正弦公仔的知识库&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>ELF文件格式</title><link>https://justice.bj.cn/post/21.linux/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/elf%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</guid><description>&lt;h1 id="elf文件格式">ELF文件格式&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>ELF (Executable and Linkable Format)是Linux的可执行文件格式(Windows下的可执行文件格式为PE(Portable Executable)格式), 是 &lt;strong>COFF（Common File Format）&lt;/strong> 格式的变种;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ELF格式文件包括：可执行文件，目标文件(.o)，共享链接库(.so)，静态连接库(.a)和内核转储(core dumps)文件;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="组成">组成&lt;/h2>
&lt;p>一个ELF文件由以下三部分组成：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ELF头(ELF header)：描述文件的主要特性：类型，CPU架构，入口地址，现有部分的大小和偏移等等；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>程序头表(Program header table):&lt;/p>
&lt;ul>
&lt;li>
&lt;p>列举了所有有效的段(segments)和他们的属性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>程序头表需要加载器将文件中的节加载到虚拟内存段中；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Segment和Section：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>段(Segment)由若干区(Section)组成；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>段在运行时被加载到进程地址空间中，包含在可执行文件中；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>区是段的组成单元，包含在可执行文件和可重定位文件中；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>节头表(Section header table): 包含对节(sections)的描述；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/04-10-48-36-elf-file-format.png" alt="loading-ag-11966">&lt;/p>
&lt;h2 id="文件头header">文件头(Header)&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ readelf -h hello.o
ELF Header:
Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
Class: ELF64
Data: 2&amp;#39;s complement, little endian
Version: 1 (current)
OS/ABI: UNIX - System V
ABI Version: 0
Type: REL (Relocatable file)
Machine: Advanced Micro Devices X86-64
Version: 0x1
Entry point address: 0x0
Start of program headers: 0 (bytes into file)
Start of section headers: 672 (bytes into file)
Flags: 0x0
Size of this header: 64 (bytes)
Size of program headers: 0 (bytes)
Number of program headers: 0
Size of section headers: 64 (bytes)
Number of section headers: 13
Section header string table index: 10
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="魔数magic">魔数(Magic)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>每种可执行文件的格式的开头几个字节都是很特殊的，特别是开头4个字节，通常被称为&lt;strong>魔数（Magic Number）&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过对魔数的判断可以确定文件的格式和类型。如：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ELF的可执行文件格式的头4个字节为&lt;code>0x7F&lt;/code>、&lt;code>e&lt;/code>、&lt;code>l&lt;/code>、&lt;code>f&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Java的可执行文件格式的头4个字节为&lt;code>c&lt;/code>、&lt;code>a&lt;/code>、&lt;code>f&lt;/code>、&lt;code>e&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果被执行的是Shell脚本或perl、python等解释型语言的脚本，那么它的第一行往往是&lt;code>#!/bin/sh&lt;/code>或&lt;code>#!/usr/bin/perl&lt;/code>或&lt;code>#!/usr/bin/python&lt;/code>，此时前两个字节&lt;code>#&lt;/code>和&lt;code>!&lt;/code>就构成了魔数，系统一旦判断到这两个字节，就对后面的字符串进行解析，以确定具体的解释程序路径。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="elf文件类型">ELF文件类型&lt;/h3>
&lt;p>ELF文件主要有三种类型，可以通过ELF Header中的&lt;code>e_type&lt;/code>成员进行区分。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>可重定位文件（Relocatable File）&lt;/strong>：&lt;code>ETL_REL&lt;/code>。一般为&lt;code>.o&lt;/code>文件。可以被链接成可执行文件或共享目标文件。静态链接库属于可重定位文件。&lt;/li>
&lt;li>&lt;strong>可执行文件（Executable File）&lt;/strong>：&lt;code>ET_EXEC&lt;/code>。可以直接执行的程序。&lt;/li>
&lt;li>&lt;strong>共享目标文件（Shared Object File）&lt;/strong>：&lt;code>ET_DYN&lt;/code>。一般为&lt;code>.so&lt;/code>文件。有两种情况可以使用。
&lt;ul>
&lt;li>链接器将其与其他可重定位文件、共享目标文件链接成新的目标文件；&lt;/li>
&lt;li>动态链接器将其与其他共享目标文件、结合一个可执行文件，创建进程映像。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/04-10-54-21-different-elf-type.png" alt="">&lt;/p>
&lt;h2 id="程序头表program-header-table">程序头表(Program Header Table)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>在可执行文件或者共享链接库中所有的节(sections)都被分为多个段(segments)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>程序头是一个结构的数组，每一个结构都表示一个段(segments)。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ readelf -l vmlinux
Elf file type is EXEC (Executable file)
Entry point 0x1000000
There are 5 program headers, starting at offset 64
Program Headers:
Type Offset VirtAddr PhysAddr
FileSiz MemSiz Flags Align
LOAD 0x0000000000200000 0xffffffff81000000 0x0000000001000000
0x0000000000cfd000 0x0000000000cfd000 R E 200000
LOAD 0x0000000001000000 0xffffffff81e00000 0x0000000001e00000
0x0000000000100000 0x0000000000100000 RW 200000
LOAD 0x0000000001200000 0x0000000000000000 0x0000000001f00000
0x0000000000014d98 0x0000000000014d98 RW 200000
LOAD 0x0000000001315000 0xffffffff81f15000 0x0000000001f15000
0x000000000011d000 0x0000000000279000 RWE 200000
NOTE 0x0000000000b17284 0xffffffff81917284 0x0000000001917284
0x0000000000000024 0x0000000000000024 4
Section to Segment mapping:
Segment Sections...
00 .text .notes __ex_table .rodata __bug_table .pci_fixup .builtin_fw
.tracedata __ksymtab __ksymtab_gpl __kcrctab __kcrctab_gpl
__ksymtab_strings __param __modver
01 .data .vvar
02 .data..percpu
03 .init.text .init.data .x86_cpu_dev.init .altinstructions
.altinstr_replacement .iommu_table .apicdrivers .exit.text
.smp_locks .data_nosave .bss .brk
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="段头表section-header-table">段头表(Section Header Table)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>ELF 节头表是一个节头数组;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每一个节头都描述了其所对应的节的信息，如节名、节大小、在文件中的偏移、读写权限等;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编译器、链接器、装载器都是通过节头表来定位和访问各个节的属性的;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ readelf -S hello.o
There are 13 section headers, starting at offset 0x2a0:
Section Headers:
[Nr] Name Type Address Offset
Size EntSize Flags Link Info Align
[ 0] NULL 0000000000000000 00000000
0000000000000000 0000000000000000 0 0 0
[ 1] .text PROGBITS 0000000000000000 00000040
0000000000000015 0000000000000000 AX 0 0 1
[ 2] .rela.text RELA 0000000000000000 000001f0
0000000000000030 0000000000000018 I 11 1 8
[ 3] .data PROGBITS 0000000000000000 00000055
0000000000000000 0000000000000000 WA 0 0 1
[ 4] .bss NOBITS 0000000000000000 00000055
0000000000000000 0000000000000000 WA 0 0 1
[ 5] .rodata PROGBITS 0000000000000000 00000055
000000000000000d 0000000000000000 A 0 0 1
[ 6] .comment PROGBITS 0000000000000000 00000062
0000000000000035 0000000000000001 MS 0 0 1
[ 7] .note.GNU-stack PROGBITS 0000000000000000 00000097
0000000000000000 0000000000000000 0 0 1
[ 8] .eh_frame PROGBITS 0000000000000000 00000098
0000000000000038 0000000000000000 A 0 0 8
[ 9] .rela.eh_frame RELA 0000000000000000 00000220
0000000000000018 0000000000000018 I 11 8 8
[10] .shstrtab STRTAB 0000000000000000 00000238
0000000000000061 0000000000000000 0 0 1
[11] .symtab SYMTAB 0000000000000000 000000d0
0000000000000108 0000000000000018 12 9 8
[12] .strtab STRTAB 0000000000000000 000001d8
0000000000000013 0000000000000000 0 0 1
Key to Flags:
W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
O (extra OS processing required) o (OS specific), p (processor specific)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="elf-sections">ELF Sections&lt;/h2>
&lt;h3 id="节的分类">节的分类&lt;/h3>
&lt;p>上述ELF Section Header Table部分已经简单介绍了节类型。接下来我们来介绍详细一些比较重要的节。&lt;/p>
&lt;h4 id="text节">.text节&lt;/h4>
&lt;p>&lt;code>.text&lt;/code>节是保存了程序代码指令的&lt;strong>代码节&lt;/strong>。&lt;strong>一段可执行程序，如果存在Phdr，则&lt;code>.text&lt;/code>节就会存在于&lt;code>text&lt;/code>段中&lt;/strong>。由于&lt;code>.text&lt;/code>节保存了程序代码，所以节类型为&lt;code>SHT_PROGBITS&lt;/code>。&lt;/p>
&lt;h4 id="rodata节">.rodata节&lt;/h4>
&lt;p>&lt;code>rodata&lt;/code>节保存了只读的数据，如一行C语言代码中的字符串。由于&lt;code>.rodata&lt;/code>节是只读的，所以只能存在于一个可执行文件的&lt;strong>只读段&lt;/strong>中。因此，只能在&lt;code>text&lt;/code>段（不是&lt;code>data&lt;/code>段）中找到&lt;code>.rodata&lt;/code>节。由于&lt;code>.rodata&lt;/code>节是只读的，所以节类型为&lt;code>SHT_PROGBITS&lt;/code>。&lt;/p>
&lt;h4 id="plt节过程链接表">.plt节（过程链接表）&lt;/h4>
&lt;p>&lt;code>.plt&lt;/code>节也称为&lt;strong>过程链接表（Procedure Linkage Table）&lt;/strong>，&lt;strong>其包含了动态链接器调用从共享库导入的函数所必需的相关代码&lt;/strong>。由于&lt;code>.plt&lt;/code>节保存了代码，所以节类型为&lt;code>SHT_PROGBITS&lt;/code>。&lt;/p>
&lt;h4 id="data节">.data节&lt;/h4>
&lt;p>&lt;code>.data&lt;/code>节存在于&lt;code>data&lt;/code>段中，&lt;strong>其保存了初始化的全局变量等数据&lt;/strong>。由于&lt;code>.data&lt;/code>节保存了程序的变量数据，所以节类型为&lt;code>SHT_PROGBITS&lt;/code>。&lt;/p>
&lt;h4 id="bss节">.bss节&lt;/h4>
&lt;p>&lt;code>.bss&lt;/code>节存在于&lt;code>data&lt;/code>段中，占用空间不超过4字节，仅表示这个节本省的空间。&lt;strong>&lt;code>.bss&lt;/code>节保存了未进行初始化的全局数据&lt;/strong>。程序加载时数据被初始化为0，在程序执行期间可以进行赋值。由于&lt;code>.bss&lt;/code>节未保存实际的数据，所以节类型为&lt;code>SHT_NOBITS&lt;/code>。&lt;/p>
&lt;h4 id="gotplt节全局偏移表-过程链接表">.got.plt节（全局偏移表-过程链接表）&lt;/h4>
&lt;p>&lt;code>.got&lt;/code>节保存了&lt;strong>全局偏移表&lt;/strong>。&lt;strong>&lt;code>.got&lt;/code>节和&lt;code>.plt&lt;/code>节一起提供了对导入的共享库函数的访问入口，由动态链接器在运行时进行修改&lt;/strong>。由于&lt;code>.got.plt&lt;/code>节与程序执行有关，所以节类型为&lt;code>SHT_PROGBITS&lt;/code>。&lt;/p>
&lt;h4 id="dynsym节动态链接符号表">.dynsym节（动态链接符号表）&lt;/h4>
&lt;p>&lt;code>.dynsym&lt;/code>节保存在&lt;code>text&lt;/code>段中。&lt;strong>其保存了从共享库导入的动态符号表&lt;/strong>。节类型为&lt;code>SHT_DYNSYM&lt;/code>。&lt;/p>
&lt;h4 id="dynstr节动态链接字符串表">.dynstr节（动态链接字符串表）&lt;/h4>
&lt;p>&lt;code>.dynstr&lt;/code>保存了动态链接字符串表，表中存放了一系列字符串，这些字符串代表了符号名称，以空字符作为终止符。&lt;/p>
&lt;h4 id="rel节重定位表">.rel.*节（重定位表）&lt;/h4>
&lt;p>重定位表保存了重定位相关的信息，&lt;strong>这些信息描述了如何在链接或运行时，对ELF目标文件的某部分或者进程镜像进行补充或修改&lt;/strong>。由于重定位表保存了重定位相关的数据，所以节类型为&lt;code>SHT_REL&lt;/code>。&lt;/p>
&lt;h4 id="hash节">.hash节&lt;/h4>
&lt;p>&lt;code>.hash&lt;/code>节也称为&lt;code>.gnu.hash&lt;/code>，其保存了一个用于查找符号的散列表。&lt;/p>
&lt;h4 id="symtab节符号表">.symtab节（符号表）&lt;/h4>
&lt;p>&lt;code>.symtab&lt;/code>节是一个&lt;code>ElfN_Sym&lt;/code>的数组，保存了符号信息。节类型为&lt;code>SHT_SYMTAB&lt;/code>。&lt;/p>
&lt;h4 id="strtab节字符串表">.strtab节（字符串表）&lt;/h4>
&lt;p>&lt;code>.strtab&lt;/code>节保存的是符号字符串表，表中的内容会被&lt;code>.symtab&lt;/code>的&lt;code>ElfN_Sym&lt;/code>结构中的&lt;code>st_name&lt;/code>引用。节类型为&lt;code>SHT_STRTAB&lt;/code>。&lt;/p>
&lt;h4 id="ctors节和dtors节">.ctors节和.dtors节&lt;/h4>
&lt;p>&lt;code>.ctors&lt;/code>（&lt;strong>构造器&lt;/strong>）节和&lt;code>.dtors&lt;/code>（&lt;strong>析构器&lt;/strong>）节分别保存了指向构造函数和析构函数的函数指针，&lt;strong>构造函数是在main函数执行之前需要执行的代码；析构函数是在main函数之后需要执行的代码&lt;/strong>。&lt;/p>
&lt;h3 id="符号表">符号表&lt;/h3>
&lt;p>节的分类中我们介绍了&lt;code>.dynsym&lt;/code>节和&lt;code>.symtab&lt;/code>节，两者都是符号表。那么它们到底有什么区别呢？存在什么关系呢？&lt;/p>
&lt;p>&lt;strong>符号是对某些类型的数据或代码（如全局变量或函数）的符号引用，函数名或变量名就是符号名&lt;/strong>。例如，&lt;code>printf()&lt;/code>函数会在动态链接符号表&lt;code>.dynsym&lt;/code>中存有一个指向该函数的符号项（以&lt;code>Elf_Sym&lt;/code>数据结构表示）。在大多数共享库和动态链接可执行文件中，存在两个符号表。即&lt;code>.dynsym&lt;/code>和&lt;code>.symtab&lt;/code>。&lt;/p>
&lt;p>&lt;strong>&lt;code>.dynsym&lt;/code>保存了引用来自外部文件符号的全局符号&lt;/strong>。如&lt;code>printf&lt;/code>库函数。&lt;strong>&lt;code>.dynsym&lt;/code>保存的符号是&lt;code>.symtab&lt;/code>所保存符合的子集，&lt;code>.symtab&lt;/code>中还保存了可执行文件的本地符号&lt;/strong>。如全局变量，代码中定义的本地函数等。&lt;/p>
&lt;p>既然&lt;code>.dynsym&lt;/code>是&lt;code>.symtab&lt;/code>的子集，那为何要同时存在两个符号表呢？&lt;/p>
&lt;p>通过&lt;code>readelf -S&lt;/code>命令可以查看可执行文件的输出，一部分节标志位（&lt;code>sh_flags&lt;/code>）被标记为了&lt;strong>A（ALLOC）、WA（WRITE/ALLOC）、AX（ALLOC/EXEC）&lt;/strong>。其中，&lt;code>.dynsym&lt;/code>被标记为ALLOC，而&lt;code>.symtab&lt;/code>则没有标记。&lt;/p>
&lt;p>ALLOC表示有该标记的节会在运行时分配并装载进入内存，而&lt;code>.symtab&lt;/code>不是在运行时必需的，因此不会被装载到内存中。&lt;strong>&lt;code>.dynsym&lt;/code>保存的符号只能在运行时被解析，因此是运行时动态链接器所需的唯一符号&lt;/strong>。&lt;code>.dynsym&lt;/code>对于动态链接可执行文件的执行是必需的，而&lt;code>.symtab&lt;/code>只是用来进行调试和链接的。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/04-11-00-25-elf-symtab-strtab.png" alt="loading-ag-12284">&lt;/p>
&lt;p>上图所示为通过符号表索引字符串表的示意图。符号表中的每一项都是一个&lt;code>Elf_Sym&lt;/code>结构，对应可以在字符串表中索引得到一个字符串。该数据结构中成员的含义如下表所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>成员&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>st_name&lt;/td>
&lt;td>符号名。该值为该符号名在字符串表中的偏移地址。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>st_value&lt;/td>
&lt;td>符号对应的值。存放符号的值（可能是地址或位置偏移量）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>st_size&lt;/td>
&lt;td>符号的大小。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>st_other&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>st_shndx&lt;/td>
&lt;td>符号所在的节&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>st_info&lt;/td>
&lt;td>符号类型及绑定属性&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>使用readelf工具我们也能够看到符号表的相关信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ readelf -s hello.o
Symbol table &amp;#39;.symtab&amp;#39; contains 11 entries:
Num: Value Size Type Bind Vis Ndx Name
0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND
1: 0000000000000000 0 FILE LOCAL DEFAULT ABS hello.c
2: 0000000000000000 0 SECTION LOCAL DEFAULT 1
3: 0000000000000000 0 SECTION LOCAL DEFAULT 3
4: 0000000000000000 0 SECTION LOCAL DEFAULT 4
5: 0000000000000000 0 SECTION LOCAL DEFAULT 5
6: 0000000000000000 0 SECTION LOCAL DEFAULT 7
7: 0000000000000000 0 SECTION LOCAL DEFAULT 8
8: 0000000000000000 0 SECTION LOCAL DEFAULT 6
9: 0000000000000000 21 FUNC GLOBAL DEFAULT 1 main
10: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND puts
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="字符串表">字符串表&lt;/h3>
&lt;p>类似于符号表，在大多数共享库和动态链接可执行文件中，也存在两个字符串表。即&lt;code>.dynstr&lt;/code>和&lt;code>.strtab&lt;/code>，分别对应于&lt;code>.dynsym&lt;/code>和&lt;code>symtab&lt;/code>。此外，还有一个&lt;code>.shstrtab&lt;/code>的节头字符串表，用于保存节头表中用到的字符串，可通过&lt;code>sh_name&lt;/code>进行索引。&lt;/p>
&lt;p>ELF文件中所有字符表的结构基本一致，如上图所示。&lt;/p>
&lt;h3 id="重定位表">重定位表&lt;/h3>
&lt;p>&lt;strong>重定位就是将符号定义和符号引用进行连接的过程&lt;/strong>。可重定位文件需要包含描述如何修改节内容的相关信息，从而使可执行文件和共享目标文件能够保存进程的程序镜像所需要的正确信息。&lt;/p>
&lt;p>重定位表是进行重定位的重要依据。我们可以使用objdump工具查看目标文件的重定位表：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ objdump -r hello.o
hello.o: file format elf64-x86-64
RELOCATION RECORDS FOR [.text]:
OFFSET TYPE VALUE
0000000000000005 R_X86_64_32 .rodata
000000000000000a R_X86_64_PC32 puts-0x0000000000000004
RELOCATION RECORDS FOR [.eh_frame]:
OFFSET TYPE VALUE
0000000000000020 R_X86_64_PC32 .text
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>重定位表是一个&lt;code>Elf_Rel&lt;/code>类型的数组结构，每一项对应一个需要进行重定位的项。 其成员含义如下表所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>成员&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>r_offset&lt;/td>
&lt;td>重定位入口的偏移。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>对于&lt;strong>可重定位文件&lt;/strong>来说，这个值是该重定位入口所要修正的位置的第一个字节相对于节起始的偏移&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>对于&lt;strong>可执行文件或共享对象文件&lt;/strong>来说，这个值是该重定位入口所要修正的位置的第一个字节的虚拟地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>r_info&lt;/td>
&lt;td>重定位入口的类型和符号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>因为不同处理器的指令系统不一样，所以重定位所要修正的指令地址格式也不一样。每种处理器都有自己的一套重定位入口的类型。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>对于&lt;strong>可执行文件和共享目标文件&lt;/strong>来说，它们的重定位入口是动态链接类型的。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>重定位是目标文件链接成为可执行文件的关键。我们将在后面的进行介绍。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="http://chuquan.me/2018/05/21/elf-introduce/">计算机那些事(4)——ELF文件结构 | 楚权的世界&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://xinqiu.gitbooks.io/linux-inside-zh/content/Theory/linux-theory-2.html">ELF文件格式&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.openeuler.org/zh/blog/lijiajie128/2020-11-03-ELF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90.html">ELF文件格式解析&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>x86指令编码</title><link>https://justice.bj.cn/post/14.language/asm/x86%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/asm/x86%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81/</guid><description>&lt;h1 id="x86指令编码">x86指令编码&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/05-11-38-01-2024-01-05-11-37-53-image.png" alt="">&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.xianwaizhiyin.net/?p=1085">X86汇编入门-机器码 - 弦外之音&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/464774687">https://zhuanlan.zhihu.com/p/464774687&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>汇编基础</title><link>https://justice.bj.cn/post/14.language/asm/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/asm/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="汇编基础">汇编基础&lt;/h1>
&lt;h2 id="基础知识">基础知识&lt;/h2>
&lt;h2 id="11-机器语言">1.1 机器语言&lt;/h2>
&lt;ul>
&lt;li>机器语言是机器指令的集合。&lt;/li>
&lt;li>机器指令是一系列二进制数字，计算机将之转换为一系列高低电平脉冲信号来驱动硬件工作的。&lt;/li>
&lt;/ul>
&lt;h2 id="12-汇编语言的产生">1.2 汇编语言的产生&lt;/h2>
&lt;ul>
&lt;li>由于机器语言指令都是由01组成,难以编写,记忆和维护程序.所以汇编语言为了解决这一问题产生。&lt;/li>
&lt;li>汇编语言的主体是汇编指令，汇编指令是机器指令的助记符。&lt;/li>
&lt;li>&lt;strong>寄存器：&lt;/strong> CPU中存储数据的器件，一个CPU中有多个寄存器。&lt;/li>
&lt;/ul>
&lt;h2 id="13-汇编语言的组成">1.3 汇编语言的组成&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>1、汇编指令&lt;/strong>(机器码的助记符，有对应的机器码)；&lt;/li>
&lt;li>&lt;strong>2、伪指令&lt;/strong>(由编译器执行)和&lt;strong>其他符号&lt;/strong>(由编译器识别)。&lt;/li>
&lt;/ul>
&lt;h2 id="14-存储器">1.4 存储器&lt;/h2>
&lt;ul>
&lt;li>CPU工作需要指令和数据，指令和数据存储在存储器中。&lt;/li>
&lt;/ul>
&lt;h2 id="15-指令和数据">1.5 指令和数据&lt;/h2>
&lt;ul>
&lt;li>在内存或者磁盘中存储的都是为二进制信息，&lt;strong>指令和数据由我们设定(走的总线)&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h2 id="16-存储单元">1.6 存储单元&lt;/h2>
&lt;ul>
&lt;li>存储器被划分为若干个存储单元，每个存储单元从0开始顺序编号。&lt;/li>
&lt;li>B、KB、MB、GB、TB等单位。&lt;/li>
&lt;/ul>
&lt;h2 id="17-cpu对存储器的读写">1.7 CPU对存储器的读写&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>CPU要对数据进行读写，必须和外部器件进行以下三类信息的交互：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1、存储单元的地址&lt;/strong>(地址信息)；&lt;/li>
&lt;li>&lt;strong>2、器件的选择、读或写命令&lt;/strong>(控制信息)；&lt;/li>
&lt;li>&lt;strong>3、读或写的数据&lt;/strong>(数据信息) 。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>总线是连接CPU和其他芯片的导线，逻辑上分为&lt;strong>地址总线&lt;/strong>、&lt;strong>数据总线&lt;/strong>、&lt;strong>控制总线&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-53052317c79589f5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1069/format/webp" alt="">&lt;/p>
&lt;p>逻辑上总线的分类&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CPU从内存单元中读写数据的过程：&lt;/p>
&lt;ul>
&lt;li>1、CPU通过地址线将地址信息发出；&lt;/li>
&lt;li>2、CPU通过控制线发出内存读命令，选中存储器芯片，并通知它将要从中读或写数据；&lt;/li>
&lt;li>3、存储器将相应的地址单元中的数据通过数据线送入CPU或CPU通过数据线将数据送入相应的内存单元。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="18-地址总线">1.8 地址总线&lt;/h2>
&lt;ul>
&lt;li>CPU是通过地址总线指定存储单元，地址总线传送的能力决定了CPU对存储单元的寻址能力。(一般32位CPU，寻址能力为2^32=4G)&lt;/li>
&lt;/ul>
&lt;h2 id="19-数据总线">1.9 数据总线&lt;/h2>
&lt;ul>
&lt;li>CPU通过数据总线来与内存等器件进行数据传送，数据总线的宽度决定了CPU和外界的数据传送速度。&lt;/li>
&lt;/ul>
&lt;h2 id="110-控制总线">1.10 控制总线&lt;/h2>
&lt;ul>
&lt;li>控制总线是一些不同控制的集合，CPU通过控制总线对外部器件的控制。控制总线的宽度决定了CPU对外部器件的控制能力。&lt;/li>
&lt;/ul>
&lt;h2 id="小结">小结&lt;/h2>
&lt;ul>
&lt;li>1、汇编指令时机器指令的助记符，与机器指令一一对应。&lt;/li>
&lt;li>2、每一种CPU都有自己的汇编指令集。&lt;/li>
&lt;li>3、CPU可以直接使用的信息在存储器中存放。&lt;/li>
&lt;li>4、在存储器中指令和数据都是二进制信息。&lt;/li>
&lt;li>5、存储单元从0开始顺序编号。&lt;/li>
&lt;li>6、一个存储单元可以存储8个bit。&lt;/li>
&lt;li>7、B、KB、MB、GB等单位之间的转换。&lt;/li>
&lt;li>8、CPU管脚和总线相连。总线的宽度表示CPU不同方面的性能：
&lt;ul>
&lt;li>地址总线的宽度决定了CPU的寻址能力；&lt;/li>
&lt;li>数据总线的宽度决定了CPU与其他器件进行一次数据传送的量；&lt;/li>
&lt;li>控制总线宽度决定了CPU对系统中其他器件的控制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-11">检测点 1.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-49b9c21cffa7dddd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点1.1&lt;/p>
&lt;h2 id="111-内存地址空间概述">1.11 内存地址空间(概述)&lt;/h2>
&lt;ul>
&lt;li>CPU可寻的内存单元构成这个CPU的内存地址空间。例如一个CPU的地址总线宽度为10，那么可以寻址的1024个内存单元构成了这个CPU的内存空间。&lt;/li>
&lt;/ul>
&lt;h2 id="112-主板">1.12 主板&lt;/h2>
&lt;ul>
&lt;li>主板主板，主要的电路板 :laughing:&lt;/li>
&lt;/ul>
&lt;h2 id="113-接口卡">1.13 接口卡&lt;/h2>
&lt;ul>
&lt;li>CPU通过接口卡间接控制外部设备。&lt;/li>
&lt;/ul>
&lt;h2 id="114-各类存储器">1.14 各类存储器&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>随机存储器RAM(主板上的RAM、拓展插槽上的RAM和接口卡上的RAM)和只读存储器器ROM(装有BIOS的ROM)。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-e732472a2884d7ce?imageMogr2/auto-orient/strip%7CimageView2/2/w/1092/format/webp" alt="">&lt;/p>
&lt;p>PC集中各类存储器的逻辑连接&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="115-内存地址空间">1.15 内存地址空间&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>各类存储器在物理上是独立的，但是：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1、都和CPU的总线相连；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>2、 CPU对他们进行读或写的时候都通过控制线发出的内存读写命令。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-3bd8fe8536434790?imageMogr2/auto-orient/strip%7CimageView2/2/w/1086/format/webp" alt="">&lt;/p>
&lt;p>将各类存储器看作一个逻辑存储器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不同的计算机系统的内存地址空间分配情况是不同的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="寄存器cpu的工作原理">寄存器(CPU的工作原理)&lt;/h2>
&lt;ul>
&lt;li>CPU由运算器、控制器、寄存器 等器件组成，靠内部总线相连。&lt;/li>
&lt;li>内部总线实现CPU内部各器件之间的联系；外部总线实现CPU和主板上其他器件的联系。&lt;/li>
&lt;li>在CPU中：
&lt;ul>
&lt;li>运算器进行信息处理；&lt;/li>
&lt;li>寄存器进行信息存储；&lt;/li>
&lt;li>控制器控制各种器件进行工作；&lt;/li>
&lt;li>内部总线连接各种器件在它们之间进行数据的传送。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="通用寄存器">通用寄存器&lt;/h3>
&lt;ul>
&lt;li>8086有14个寄存器：
&lt;ul>
&lt;li>&lt;strong>AX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、CS、ES、PSW&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>AX、BX、CX、DX通常用来存放一般性数据，被称为通用寄存器。&lt;/li>
&lt;li>16位寄存器所能存储的数据最大值为216-1 。&lt;/li>
&lt;li>为保证兼容性，8086 CPU的通用寄存器可以分为两个独立的8位寄存器使用。&lt;strong>例：&lt;/strong> AX可分为AH和AL。&lt;/li>
&lt;/ul>
&lt;h3 id="字在寄存器中的存储">字在寄存器中的存储&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>8086 CPU所有的寄存器是16位，可以存放2个字节(一个字)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一字节由8 bit 组成，可以存在8位寄存器中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>字(word)是两字节，16位。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-ead3e9daffcbe850?imageMogr2/auto-orient/strip%7CimageView2/2/w/716/format/webp" alt="">&lt;/p>
&lt;p>一个字由两个字节组成&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="几条汇编指令">几条汇编指令&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>汇编指令对大小写不敏感&lt;/p>
&lt;p>汇编指令举例&lt;/p>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>汇编指令&lt;/th>
&lt;th>控制CPU完成的操作&lt;/th>
&lt;th>用高级语言的语法描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>mov ax，18&lt;/td>
&lt;td>将8送入AX&lt;/td>
&lt;td>AX=18&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov ah，78&lt;/td>
&lt;td>将78送入AH&lt;/td>
&lt;td>AH=78&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>add ax，8&lt;/td>
&lt;td>将寄存器AX中的数值加上8结果存入AX中&lt;/td>
&lt;td>AX=AX+8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov ax，bx&lt;/td>
&lt;td>将寄存器BX中的数据送入寄存器AX&lt;/td>
&lt;td>AX=BX&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>add ax，bx&lt;/td>
&lt;td>将AX，BX中的内容相加结果存入AX中&lt;/td>
&lt;td>AX=AX+BX&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="24-物理地址">2.4 物理地址&lt;/h2>
&lt;ul>
&lt;li>所有的内存单元构成一个一维的线性存储空间。&lt;/li>
&lt;li>CPU访问内存单元时要给出内存单元的唯一地址就是物理地址。&lt;/li>
&lt;/ul>
&lt;h2 id="25-16位结构的cpu">2.5 16位结构的CPU&lt;/h2>
&lt;ul>
&lt;li>1、运算器一次最多可以处理16位数据。&lt;/li>
&lt;li>2、 寄存器的最大宽度为16位。&lt;/li>
&lt;li>3、寄存器和运算器之间的通路是16位。&lt;/li>
&lt;/ul>
&lt;h2 id="26-8086-cpu给出物理地址的方法">2.6 8086 CPU给出物理地址的方法&lt;/h2>
&lt;ul>
&lt;li>8086有20位的地址总线，可以传送20位地址，寻址能力为1M；但8086内部为16位结构，只能传送16位的地址。&lt;/li>
&lt;li>&lt;strong>8086CPU采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-9824e3b568988f7e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1132/format/webp" alt="">&lt;/p>
&lt;p>8086CPU相关部件的逻辑结构&lt;/p>
&lt;ul>
&lt;li>8086CPU读写内存的步骤：
&lt;ul>
&lt;li>1、CPU中的相关部件提供段子和偏移地址这两个16位的地址；&lt;/li>
&lt;li>2、段地址和偏移地址通过内部总线送入到一个称为地址加法器的部件；&lt;/li>
&lt;li>3、地址加法器将两个16位地址合并成一个20位的地址；&lt;/li>
&lt;li>4、地址加法器通过内部总线将20位物理地址送送入输入输出地址；&lt;/li>
&lt;li>5、输入输出控制电路将20位物理地址送上地址总线；&lt;/li>
&lt;li>6、20位物理地址被地址总线传送到存储器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>地址加法器工作原理：&lt;font color="red">物理地址=段地址*16+偏移地址&lt;/font>。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-4b4bb1b2b669a6eb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>地址加法器的过程&lt;/p>
&lt;ul>
&lt;li>段地址*16就是数据左移4位(二进制)&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>移位位数&lt;/th>
&lt;th>二进制&lt;/th>
&lt;th>十六进制&lt;/th>
&lt;th>十进制&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>10B&lt;/td>
&lt;td>2H&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>100B&lt;/td>
&lt;td>4H&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>1000B&lt;/td>
&lt;td>8H&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>10000B&lt;/td>
&lt;td>10H&lt;/td>
&lt;td>16&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>100000B&lt;/td>
&lt;td>20H&lt;/td>
&lt;td>32&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>一个数据的二进制形式左移N位，相当于该数据乘以2的N次方。一个数据X进制形式左移N位，相当乘以NX。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="27-段地址16偏移地址物理地址">2.7 段地址*16+偏移地址=物理地址&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>CPU可以通过不同的段地址和偏移地址形成一个相同的物理地址。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-560c96803af9fea7?imageMogr2/auto-orient/strip%7CimageView2/2/w/752/format/webp" alt="">&lt;/p>
&lt;p>CPU可以通过不同的段地址和偏移地址形成相同的物理地址&lt;/p>
&lt;blockquote>
&lt;p>段地址*16是移位&lt;/p>
&lt;/blockquote>
&lt;h2 id="28-段的概念">2.8 段的概念&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>人为定义的，将若干地址连续的内存单元看作一个段。用段地址*16定位段的起始地址(基址)，用偏移地址定位段中的内存单元。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-6597616350aa5f22?imageMogr2/auto-orient/strip%7CimageView2/2/w/1193/format/webp" alt="">&lt;/p>
&lt;p>段的概念&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>一个段的起始地址是16的倍数。偏移地址为16位，寻址能力为64K，所以段的最大长度也是64K。&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-22">检测点 2.2&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-e8aacd40f8697825?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点2.2&lt;/p>
&lt;h2 id="29-段寄存器">2.9 段寄存器&lt;/h2>
&lt;ul>
&lt;li>8086 CPU有4个段寄存器:&lt;strong>CS(代码段)、DS(数据段)、SS(堆栈段)、ES(附加段)&lt;/strong>，这4个段提供给8086CPU内存单元的段地址。&lt;/li>
&lt;/ul>
&lt;h2 id="210-cs和ip">2.10 CS和IP&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>CS(代码段寄存器)&lt;/strong> 和&lt;strong>IP(指令指针寄存器)&lt;/strong> 是8086CPU中最关键的寄存器，它们指示了CPU当前要读取指令的地址。在任意时刻CPU将CS:IP指向的内容当作指令执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8086CPU工作过程的简要概述：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>1、从CS:IP指向内存单元读取指令，读取的指令进入指令缓冲器；&lt;/p>
&lt;blockquote>
&lt;p>8086PC机刚开始启动时，CPU从内存FFFF0h单元中读取指令执行，FFFF0h单元中的指令时8086PC机开机后执行的第一条指令。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>2、 IP=IP+所读取指令的长度，从而正确的指向下一条指令；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>3、执行指令。转到步骤1，周而复始。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="211-修改csip的指令">2.11 修改CS、IP的指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>mov指令(传送指令)&lt;/strong> 可以改变8086CPU大部分寄存器的值，但不能用于设置CS、IP的值。&lt;/li>
&lt;li>&lt;strong>jmp指令(转移指令)&lt;/strong> 可以用来同时修改CS和IP的值，格式为&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">jmp&lt;/span> &lt;span class="err">段地址&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="err">偏移地址&lt;/span>&lt;span class="c">;同时修改CS和IP
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">jmp&lt;/span> &lt;span class="err">某一合法寄存器&lt;/span>&lt;span class="c">;则是仅修改IP
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="212-代码段">2.12 代码段&lt;/h2>
&lt;ul>
&lt;li>对于8086PC机，在编程时可以将长度为N(N小于等于64KB)的一组代码存在一组地址连续、起始地址为16的倍数的内存单元中，这段内存是用来存放代码的，从而定义了一个代码段。&lt;/li>
&lt;li>利用CS:IP来指向内存单元从而让CPU执行其中的内容。&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-23">检测点 2.3&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-711ba804eb6c1227?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点2.3&lt;/p>
&lt;h2 id="使用debug">使用Debug&lt;/h2>
&lt;blockquote>
&lt;p>&lt;font color="red">windows xp系统自带debug，请使用xp以上系统的读者执行自行下载debug.exe和dosbox，使用方法笔者不再赘述，在dosbox中可以使用debug。&lt;/font >&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-18b59a388c90a05b?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>debug in dosbox&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>可以使用汇编金手指查阅指令。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>R&lt;/strong>命令查看、改变CPU寄存器的内容；&lt;/li>
&lt;li>&lt;strong>D&lt;/strong>命令查看内存中的内容；&lt;/li>
&lt;li>&lt;strong>E&lt;/strong>命令改写内存中的内容；&lt;/li>
&lt;li>&lt;strong>U&lt;/strong>命令将内存中的机器指令翻译成汇编指令；&lt;/li>
&lt;li>&lt;strong>T&lt;/strong>命令执行一条机器指令；&lt;/li>
&lt;li>&lt;strong>G&lt;/strong>命令跳转到偏移地址；&lt;/li>
&lt;li>&lt;strong>P&lt;/strong>命令结束循环或者是int 21H时是退出程序；&lt;/li>
&lt;li>&lt;strong>A&lt;/strong>命令是以汇编指令的格式在内存中写入一条机器指令。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="三寄存器内存访问">三、寄存器(内存访问)&lt;/h1>
&lt;h2 id="31-内存中字的存储">3.1 内存中字的存储&lt;/h2>
&lt;ul>
&lt;li>字是两个字节，要用两个地址连续的内存来存放，字的低位字节存在低地址中，高位字节存放在高地址单元中。&lt;/li>
&lt;/ul>
&lt;h2 id="32-ds和address">3.2 DS和[address]&lt;/h2>
&lt;ul>
&lt;li>DS通常存放要访问的数据的段地址。&lt;/li>
&lt;li>&lt;strong>8086 CPU由于硬件的设计不支持将数据直接送入段寄存器的操作。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>数据 -&amp;gt; 通用寄存器 -&amp;gt; 段寄存器&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 里边的数据代表偏移地址值&lt;/li>
&lt;li>&lt;strong>mov指令：&lt;/strong>
&lt;ul>
&lt;li>将数据直接送入寄存器；&lt;/li>
&lt;li>将一个寄存器或内存单元中的内容送入另一个寄存器；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>mov指令格式:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="err">寄存器名&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">内存单元&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="33-字型的传送">3.3 字型的传送&lt;/h2>
&lt;ul>
&lt;li>高地址单元和高8位寄存器，低地址单元和低8位寄存器相对应。&lt;/li>
&lt;/ul>
&lt;h2 id="34-movaddsub指令">3.4 mov、add、sub指令&lt;/h2>
&lt;ul>
&lt;li>有两个操作对象，jmp只有一个操作对象。&lt;/li>
&lt;li>&lt;strong>使用汇编金手指查阅指令&lt;/strong>&lt;/li>
&lt;li>&lt;strong>mov指令的几种形式&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="err">寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">数据&lt;/span>&lt;span class="c">;mov ax,8
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="err">寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">寄存器&lt;/span>&lt;span class="c">;mov ax,bx
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="err">寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">内存单元&lt;/span>&lt;span class="c">;mov ax,[0]
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="err">内存单元&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">寄存器&lt;/span>&lt;span class="c">;mov [0],ax
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="err">段寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">寄存器&lt;/span>&lt;span class="c">;mov ds,ax
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="err">寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">段寄存器&lt;/span>&lt;span class="c">;mov ax,ds
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="err">……&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>add指令的几种形式&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">add&lt;/span> &lt;span class="err">通用寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">数据&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="err">通用寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">通用寄存器&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="err">通用寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">内存单元&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="err">内存单元&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">寄存器&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>sub指令的几种形式&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">sub&lt;/span> &lt;span class="err">通用寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">数据&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="err">通用寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">通用寄存器&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="err">通用寄存器&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">内存单元&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="err">内存单元&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">通用寄存器&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="35-数据段">3.5 数据段&lt;/h2>
&lt;ul>
&lt;li>对于8086PC机，在编程时可以将长度为N(N小于等于64KB)的一组代码存在一组地址连续、起始地址为16的倍数的内存单元中，这段内存是用来存放数据的，从而定义了一个数据段。&lt;/li>
&lt;li>可以通过在DS中存放数据段的段地址，用相关的指令访问数据段中的具体单元来访问数据段中的数据。&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-31">检测点 3.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-e239cbea7e2391a7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点3.1&lt;/p>
&lt;h2 id="36-栈">3.6 栈&lt;/h2>
&lt;ul>
&lt;li>具有特殊的访问方式的存储空间，也是内存空间的一部分，数据&lt;strong>先进后出。&lt;/strong>&lt;/li>
&lt;li>有两个基本操作:
&lt;ul>
&lt;li>入栈：将一个新的元素放到栈顶；&lt;/li>
&lt;li>出栈：从栈顶取出一个元素。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>栈顶元素最后入栈最先出栈。&lt;/li>
&lt;/ul>
&lt;h2 id="37-8086-cpu提供的栈机制">3.7 8086 CPU提供的栈机制&lt;/h2>
&lt;ul>
&lt;li>现今的CPU都有栈的设计，基于8086CPU编程可以将一段内存当作栈来使用。&lt;/li>
&lt;li>8086CPU的&lt;strong>入栈(PUSH)&lt;strong>和&lt;/strong>POP(出栈)&lt;/strong>，以字为单位。
&lt;ul>
&lt;li>push ax 将寄存器ax中的数据送入栈&lt;/li>
&lt;li>pop ax 从栈顶取出数据送入ax&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>段寄存器SS存放栈顶的段地址，寄存器SP存放栈顶的偏移地址。任意时刻SS:SP指向栈顶元素。push时SP先自减法后写内存，pop先读内存sp后自加。&lt;/strong>&lt;/li>
&lt;li>pop之后数据还是存在内存中，push时覆盖。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;font color="red">CS和IP存放当前指令的段地址和偏移地址。&lt;/font>&lt;/p>
&lt;/blockquote>
&lt;h2 id="38-栈顶越界的问题">3.8 栈顶越界的问题&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>栈是空的，则SP指向栈底+1的内存。&lt;/strong>&lt;/li>
&lt;li>8086 CPU只纪录栈顶，栈空间由自己控制。栈顶越界问题导致溢出漏洞。&lt;/li>
&lt;li>8086CPU只考虑当前的情况：
&lt;ul>
&lt;li>当前栈顶在何处；&lt;/li>
&lt;li>当前要执行的指令时哪一条。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="39-pushpop指令">3.9 push、pop指令&lt;/h2>
&lt;ul>
&lt;li>可以直接对段寄存器使用。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;push和pop格式
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="err">寄存器&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="err">寄存器&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="err">段寄存器&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="err">段寄存器&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="err">内存单元&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="err">内存单元&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>通用寄存器命名是x结尾的，段寄存器是以s结尾。&lt;/strong>&lt;/li>
&lt;li>CPU在执行指令时，数据的段地址是从DS中获得，代码是在CS中获得，栈地址是从SS获得。&lt;/li>
&lt;/ul>
&lt;h2 id="310-栈段">3.10 栈段&lt;/h2>
&lt;ul>
&lt;li>对于8086PC机，在编程时可以将长度为N(N小于等于64KB)的一组代码存在一组地址连续、起始地址为16的倍数的内存单元中，这段内存是当作栈来用，从而定义了一个栈段。&lt;/li>
&lt;li>&lt;strong>寄存器清零可用sub ax,ax或者直接赋值0，&lt;/strong>&lt;font color="red">常见的也有使用xor&lt;/font>。&lt;/li>
&lt;li>当栈空间定义为最大时，栈为空时SP=0。&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-32">检测点 3.2&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-09698a94092b3921?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点3.2&lt;/p>
&lt;hr>
&lt;h1 id="四第一个程序">四、第一个程序&lt;/h1>
&lt;h2 id="引言">引言&lt;/h2>
&lt;p>编写完成的汇编语言程序，用编译器编译成可执行文件并在操作系统中运行。&lt;/p>
&lt;h2 id="41-一个源程序从写出到执行的过程">4.1 一个源程序从写出到执行的过程&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>编写&lt;/p>
&lt;ul>
&lt;li>用编辑器(Sublime Text、Nodepad++、UltraEdit)编写，文件后缀为.asm。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>编译链接&lt;/p>
&lt;ul>
&lt;li>使用MASM.EXE编译生产obj(目标文件)。masm也请读者自行搜索下载。&lt;/li>
&lt;li>LINKE.EXE对目标文件进行连接生产可在操作系统中直接运行的可执行文件。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>可执行文件包含程序(机器码)、数据(源程序中定义的数据)和相关的描述信息。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>执行&lt;/p>
&lt;ul>
&lt;li>操作系统中依照可执行文件中的描述信息将可执行文件中的机器码和数据加载入内存并进行相关的初始化，然后CPU执行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="42-源程序">4.2 源程序&lt;/h2>
&lt;ul>
&lt;li>汇编指令：有对应的机器码的指令，编译为机器码被CPU执行&lt;/li>
&lt;li>伪指令：没有对应的机器码，不被CPU所执行，由编译器执行来进行相关的编译工作。
&lt;ul>
&lt;li>segment和ends是用来定义一个段的，是成对使用的伪指令，再写可被编译器编译的汇编程序是必须要用的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span> &lt;span class="c">;假设代码段的名称为codesg
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">codesg&lt;/span> &lt;span class="no">segment&lt;/span> &lt;span class="c">;定义一个codesg段
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0456&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span> &lt;span class="c">;codesg段结束
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">end&lt;/span> &lt;span class="c">;是个伪指令，程序的结束标记
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>assume用来加上某一段寄存器和程序中的某一用segment……ends定义的段相关联。通过assume说明这种关联，在需要的情况下编译程序可以将段寄存器和某一个具体的段相联系。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>一个汇编程序是由多个段组成。一个有意义的汇编程序中至少要用一个段来存放代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>程序与源程序&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-8ab4e87dd9bbde24?imageMogr2/auto-orient/strip%7CimageView2/2/w/1064/format/webp" alt="">&lt;/p>
&lt;p>程序与源程序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标号:指代地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>程序的结构&lt;/p>
&lt;/li>
&lt;li>
&lt;p>小练习：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">;编程运算2^3
assume cs:abc ;段与寄存器关联
abc segment ;定义一个段，名称为abc
mov ax,2;写入汇编指令
add ax,ax
add ax,ax
abd ends
end ;程序结束处
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>程序的返回:一个程序结束后将CPU的控制权交还给使它得以运行的程序的过程。应该在程序的末尾添加返回的程序段。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>codesg：放在segment前面，作为一个段的名称，这个段的名称最终将被编译、连接程序，称为一个段的段地址 。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span> &lt;span class="c">;第21号中断
&lt;/span>&lt;span class="c">;这两条指令说实现的功能就是程序返回。
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>语法错误和逻辑错误&lt;/li>
&lt;/ul>
&lt;h2 id="43-编辑源程序">4.3 编辑源程序&lt;/h2>
&lt;ul>
&lt;li>使用编辑器编辑，扩展名为.asm&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">ABC&lt;/span>
&lt;span class="nf">ABC&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">ABC&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="44-编译">4.4 编译&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>masn和 1.asm在同一目录中，dos下使用masm 1.asm命令即可生产1.obj文件。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-f8fcce1ff248f598?imageMogr2/auto-orient/strip%7CimageView2/2/w/734/format/webp" alt="">&lt;/p>
&lt;p>源程序文件和masm文件在同一目录下&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-b748f628ebd542f0?imageMogr2/auto-orient/strip%7CimageView2/2/w/638/format/webp" alt="">&lt;/p>
&lt;p>编译源程序&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="45-连接">4.5 连接&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>link 1.obj，生成exe文件，摁enter忽略编译程序提示输入的信息。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-14277059d9a747c8?imageMogr2/auto-orient/strip%7CimageView2/2/w/684/format/webp" alt="">&lt;/p>
&lt;p>连接程序&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-bed4f2755e48ef24?imageMogr2/auto-orient/strip%7CimageView2/2/w/398/format/webp" alt="">&lt;/p>
&lt;p>连接生成exe&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当源程序很大时，可以将它分成多个源程序文件编译，每个源程序编译成目标文件后再用连接程序将他们连接到一起，生成一个可执行文件。或者程序中调用了某个库文件中的子程序，需要将这个库文件和该目标文件连接到一起，生成一个可执行文件。或者一个源程序编译后得到存有机器码的目标文件，目标文件中的有些内容还不能直接生成可执行文件，连接程序将此内容处理为最终的可执行文件信息。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="46-简化编译和连接">4.6 简化编译和连接&lt;/h2>
&lt;ul>
&lt;li>使用ml命令，ml 1.asm&lt;/li>
&lt;/ul>
&lt;h2 id="47-exe的执行">4.7 exe的执行&lt;/h2>
&lt;ul>
&lt;li>为兼容16位的程序，使用dosbox运行。&lt;/li>
&lt;/ul>
&lt;h2 id="48-可执行文件中的程序转入内存并运行的原理">4.8 可执行文件中的程序转入内存并运行的原理&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>在dos中可执行文件中的程序p1若要运行吗必须有一个正在运行的程序p2将p1从可执行文件中加载如内存，将CPU的控制权交给它，p1才能得以运行；当p1运行完毕后，应该将CPU的控制权交还给使它de&amp;rsquo;yi 运行的程序p2。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>汇编程序从写出到执行的过程：编程 -&amp;gt; 编译 -&amp;gt; 连接 -&amp;gt; 加载 -&amp;gt; 内存中的程序 -&amp;gt; 运行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在dos系统中.exe文件中的加载过程&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-9c1fe0ce667bd8fa?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>exe文件中程序的加载过程&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-8791de91608948fb?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>psp的内容&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="49-程序执行过程的跟踪">4.9 程序执行过程的跟踪&lt;/h2>
&lt;ul>
&lt;li>使用debug(xp以上的系统在dosbox中使用)来跟踪一个程序的运行过程。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-5c58ee6940b92d46?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>使用debug来跟踪程序运行&lt;/p>
&lt;hr>
&lt;h1 id="五bx和loop指令">五、[BX]和loop指令&lt;/h1>
&lt;h2 id="引言-1">引言&lt;/h2>
&lt;ul>
&lt;li>约定符号()来表示一个寄存器或者一个内存单元中的内容。&lt;strong>例如&lt;/strong>(ax)=0010H表示ax中的内容为0010H；(21000H)=0010H，表示2000:1000处的内容为0010H。&lt;/li>
&lt;li>约定符号idata表示常量。&lt;/li>
&lt;/ul>
&lt;h2 id="51-bx">5.1 [BX]&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>inc指令是自增1的意思&lt;/strong>&lt;/li>
&lt;li>和[0]有些类似，[0]表示内存单元，它的偏移地址是0。[bx]也是表示一个内存单元，它的内存偏移地址在bx中。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>用以下两种信息描述一个内存单元：
&lt;ul>
&lt;li>1、内存单元的地址；&lt;/li>
&lt;li>2、内训单元的长度(类型)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>我们用[0]表示一个内训单元时，0表示单元的偏移地址，段地址默认在DS中，单元的长度(类型)可以由具体指令中的其他的操作对象(比如说寄存器)指出。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;0对应的字单元，主要单位要看操作对象(寄存器)
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;字节
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="52-loop指令">5.2 loop指令&lt;/h2>
&lt;ul>
&lt;li>指令的格式是loop 标号。CUP执行loop指令时要进两步操作：
&lt;ul>
&lt;li>&lt;strong>CX中存放循环的次数，执行时CX中的内容自减1。相当于C的do while&lt;/strong>&lt;/li>
&lt;li>&lt;strong>判断CX中的值，不为0则转至标号处执行程序，为0则向下执行。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>通常loop指令来实现循坏功能CX中存放循环的次数。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;计算2^3
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">add&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;计算2^12
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>
&lt;span class="nl">p:&lt;/span>&lt;span class="nf">add&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="no">loop&lt;/span> &lt;span class="no">p&lt;/span>&lt;span class="c">;p是标号
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>&lt;span class="c">;masm默认数字是十进制
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;编程计算123*236，结果放在ax中
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">236&lt;/span>
&lt;span class="nl">an:&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">123&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">an&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">123&lt;/span>
&lt;span class="nl">pa:&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">236&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">pa&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="53-在debug中跟踪用loop指令实现的循环程序">5.3 在Debug中跟踪用loop指令实现的循环程序&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>注意：在汇编源程序中数据不能以字母开头，有字母的在前面加0处理。&lt;/strong>&lt;/li>
&lt;li>t命令单步执行、G命令和P命令。&lt;/li>
&lt;li>&lt;strong>使用汇编金手指查阅指令。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="54-debug和汇编编译器masm对指令的不同处理">5.4 Debug和汇编编译器Masm对指令的不同处理&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Degug中mov ax,[0]，表示将ds:0处的数据存入al中。ah=0，因为一个内存单元是8位的，ax是16位的，同位存储。而编译器[0]会被当作0处理&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将内存2000:0、2000:1、2000:2、2000:3单元中的数据(字节)送入阿al、bl、cl、dl中。&lt;/p>
&lt;ul>
&lt;li>debug中：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-8230644591c4ec15?imageMogr2/auto-orient/strip%7CimageView2/2/w/643/format/webp" alt="">&lt;/p>
&lt;p>debug 1&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-ee9dc6b8a6d84aa7?imageMogr2/auto-orient/strip%7CimageView2/2/w/643/format/webp" alt="">&lt;/p>
&lt;p>debug 3&lt;/p>
&lt;ul>
&lt;li>在MASM中：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-c7ec6af22c58c409?imageMogr2/auto-orient/strip%7CimageView2/2/w/644/format/webp" alt="">&lt;/p>
&lt;p>1masmtest&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-409db2af5cec6107?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>masmtest2&lt;/p>
&lt;ul>
&lt;li>&lt;strong>要在编译器中实现用偏移地址[]中的内容传送先bx来代替，mov 偏移地址,bx 再 mov al,[bx]。如要直接使用&lt;input disabled="" type="checkbox"> 则要加上段地址ds:[偏移地址]&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>在MASM中：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;将al赋值0
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;将al赋值段地址为ds，偏移地址为0的内存单元中的内容
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;默认段地址为ds，将al赋值偏移地址为bx
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;将al赋值段地址为ds，偏移地址为bx
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="55-loop和bx的联合应用">5.5 loop和[BX]的联合应用&lt;/h2>
&lt;ul>
&lt;li>可以用循环来解决处理地址连续的内存单元中的数据的问题，用变量来给出内存单元的地址。&lt;/li>
&lt;/ul>
&lt;h2 id="56-段前缀">5.6 段前缀&lt;/h2>
&lt;ul>
&lt;li>出现在访问内存单元的指令中用显式地指明内存单元的段地址的ds、cs、ss、es称为段前缀。&lt;strong>没有显式地给出内存单元的段地址则默认在ds中。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="57-一段安全的空间">5.7 一段安全的空间&lt;/h2>
&lt;blockquote>
&lt;p>在8086模式中，随意向一段内存空间写入数据是危险的，因为这段空间中可能存放着重要的系统数据或代码。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">26&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>但笔者在练习的时候出现dosbox下debug卡死&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-48c43e1beb6c28e3?imageMogr2/auto-orient/strip%7CimageView2/2/w/643/format/webp" alt="">&lt;/p>
&lt;p>dangeroustest&lt;/p>
&lt;/li>
&lt;li>
&lt;p>dos下0:200H0:2FFH的256个字节的空间是安全的，dos和其他合法程序一般都不会使用这段空间。内存0000:00000000:03FF大小为1kb的空间是系统存放中断处理程序入口地址的中断向量表。一般情况下0:200H~0:2FFH的256个字节的空间所对应的中断向量表都是空的，操作系统和其他应用程序都不占用。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-01c01c58fe55a1f4?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>dos安全空间&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="58-段前缀的使用">5.8 段前缀的使用&lt;/h2>
&lt;ul>
&lt;li>将内存ffff:0~ffff:b段单元中的数据拷贝到0:200 ~ 0:20b单元中&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="c">;(bx)=0，偏移地址从0开始
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">12&lt;/span> &lt;span class="c">;(cx)=12，循环12次
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offffh&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span> &lt;span class="c">;(ds)=0ffffh
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;(ds)=((ds)*16+(bx))，将ffff:bx中的数据送入dl
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0020&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span> &lt;span class="c">;(ds)=0020h
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">dl&lt;/span> &lt;span class="c">;((ds)*16+(bx))=dl，将数据送入0020:bx
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">bx&lt;/span> &lt;span class="c">;(bx)=(bx)+1
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>两个内存单元相差64KB则不再同一个段里，需要设置ds的值两次，效率不高。&lt;/li>
&lt;li>使用 es(附加段)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;优化后的代码，优化了两次设置ds
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offffh&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span> &lt;span class="c">;(ds)=0ffffh
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0020&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span> &lt;span class="c">;(es)=0020H
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="c">;(bx)=0，此时ds:bx指向ffff:0，es:bx指向0020:0
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">12&lt;/span> &lt;span class="c">;(cx)=12，循环12次
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;(ds)=((ds)*16+(bx))，将ffff:bx中的数据送入dl
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">dl&lt;/span> &lt;span class="c">;((es)*16+(bx))=dl，将数据送入0020:bx
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">bx&lt;/span> &lt;span class="c">;(bx)=(bx)+1
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h1 id="六包含多个段的程序">六、包含多个段的程序&lt;/h1>
&lt;h2 id="61在代码段中使用数据">6.1在代码段中使用数据&lt;/h2>
&lt;ul>
&lt;li>编程计算0123H、0456H，0abxH、0defH、0fesH、0cbaH、0987H这8个数据的和，结果存放在ax中：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0564&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0789&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">abcH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">defH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">fedH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">cbaH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0987&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="c">;dw，define word，定义字型数据，db定义字节型数据
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;由于数据在代码段中，所以段地址是CS
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;dw定义的数据在最开始的地方，所以偏移地址是0开始
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="c">;第一条指令
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span> &lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span> &lt;span class="c">;入口找end
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-06aeb88b9f7d8104?imageMogr2/auto-orient/strip%7CimageView2/2/w/879/format/webp" alt="">&lt;/p>
&lt;p>定义字型数据&lt;/p>
&lt;ul>
&lt;li>&lt;strong>end的作用除了通知编译器结束之外还有告诉编译器程序的入口在什么地方。&lt;/strong>&lt;/li>
&lt;li>可执行文件中的程序执行过程&lt;/li>
&lt;/ul>
&lt;h2 id="62-在代码段中使用栈">6.2 在代码段中使用栈&lt;/h2>
&lt;ul>
&lt;li>利用栈编程将定义的数据逆序(联想栈的特性)存放：dw 0123H,0564H,0789H,0abcH,0defH,0fedH,0cbaH,0987H&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0564&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0789&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">abcH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">defH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">fedH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">cbaH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0987&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="c">;地址0~15
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;定义8个字型空数据，后面当作栈来使用，地址是16~31
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="c">;设置栈底ss:sp指向cs:32，十进制的32
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">; 以上代码段0~15个单元中的8个字型数据一次入栈
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">pop&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s0&lt;/span>&lt;span class="c">;依次出栈8个执行数据到代码段0~15单元中
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>&lt;span class="c">;指明程序入口在start处
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果对此程序的栈有疑惑，跳转到 3.6 栈和3.10 栈段&lt;/li>
&lt;/ul>
&lt;h2 id="63-将数据代码栈放入不同的段">6.3 将数据、代码、栈放入不同的段&lt;/h2>
&lt;ul>
&lt;li>在8086CPU中数据、栈和代码存储空间不能大于64KB。&lt;strong>可以用像定义代码段一样的方法来定义多个段并在其中定义需要的数据，或者通过定义数据来取得栈空间。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ss&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">stack&lt;/span>&lt;span class="c">;在源程序中为三个段进行有意义的名称
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0564&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0789&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">abcH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">defH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">fedH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">cbaH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0987&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;定义8个字型空数据，后面当作栈来使用
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;设置栈底ss:sp指向stack:16，
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;ds指向data段
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;ds:bx指向data段中的第一个单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">push&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">; 以上代码段0~16个单元中的8个字型数据一次入栈
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">pop&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s0&lt;/span>&lt;span class="c">;依次出栈8个执行数据到代码段0~16单元中
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>&lt;span class="c">;指明程序入口在start处
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>程序中指令决定了断中的内容是作为数据处理还是作为指令执行还是作为栈空间使用。&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-61">检测点 6.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-d3131de04dfab5c0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点6.1&lt;/p>
&lt;h2 id="实验五">实验五&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ss&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0564&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0789&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">abcH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">defH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">fedH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">cbaH&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0987&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h1 id="七更灵活的定位内存地址的方法">七、更灵活的定位内存地址的方法&lt;/h1>
&lt;h2 id="71-and和or指令">7.1 and和or指令&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>and指令：逻辑与指令，按位进行与运算。&lt;/p>
&lt;blockquote>
&lt;p>and两个同时为真的结果才为真。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01100011&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00111011&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="c">;执行后 al=00100011B
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>可用and指令将操作对象的相应位设为0，其他位不变&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10111111&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;将al第六位设为0
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01111111&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;将al第七位设为0
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11111110&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;将al第0位设为0
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>or指令：逻辑或指令，按位进行或运算。&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>or两个同时为假的结果才为假&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01100011&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00111011&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="c">;执行后 al=01111011B
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>可用or指令将操作对象的相应位设为1，其他位不变&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01000000&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;将al第六位设为1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10000000&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;将al第七位设为1
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00000001&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;将al第0位设为1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="72-关于ascii码">7.2 关于ASCII码&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-138632216e5c2fc0?imageMogr2/auto-orient/strip%7CimageView2/2/w/660/format/webp" alt="">&lt;/p>
&lt;p>ASCII码表&lt;/p>
&lt;ul>
&lt;li>将字符的ascii码写入显存屏幕就显示出相关的字符。&lt;/li>
&lt;/ul>
&lt;h2 id="73-以字符形式给出数据">7.3 以字符形式给出数据&lt;/h2>
&lt;ul>
&lt;li>用‘’的方式指明数据是以字符的形式给出的。&lt;strong>例如&amp;rsquo;A'&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">unIx&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">foRK&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">b&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-f7a7a0d141472ce7?imageMogr2/auto-orient/strip%7CimageView2/2/w/846/format/webp" alt="">&lt;/p>
&lt;p>73 ascii&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-d93063afda2a95fe?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>以字符形式给出数据&lt;/p>
&lt;h2 id="74-大小写转换的问题">7.4 大小写转换的问题&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>大写字母比小写字母ASCII大32(20H)。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>大写&lt;/th>
&lt;th>二进制&lt;/th>
&lt;th>小写&lt;/th>
&lt;th>二进制&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>A&lt;/td>
&lt;td>01000001&lt;/td>
&lt;td>a&lt;/td>
&lt;td>01100001&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>01000010&lt;/td>
&lt;td>b&lt;/td>
&lt;td>01100010&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C&lt;/td>
&lt;td>01000011&lt;/td>
&lt;td>c&lt;/td>
&lt;td>01100011&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>D&lt;/td>
&lt;td>01000100&lt;/td>
&lt;td>d&lt;/td>
&lt;td>01100100&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>从第0位开始计算，大写字母ASCII码第五位为0，小写字母ASCII码第五位为1。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;大小写转换
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">BaSiC&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">iNfOfMaTiOn&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;设置ds执行datasg段
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;设置(bx)=0，ds:bx指向&amp;#39;BaSiC&amp;#39;的第一个字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="c">;设置循环次数，因为BaSiC有5个字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;将ASCII码从ds:bx所指向的单元中取出
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;口岸al中ASCII码的第5个位置变为0，变为大写字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;转变后将ASCII码写回单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="c">;(bx)加1，ds:bx指向下一个字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">x&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="c">;设置(bx)=5，ds:bx指向&amp;#39;iNfOfMaTiOn&amp;#39;的第一个字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">or&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00100000&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="75-bxidata">7.5 [bx+idata]&lt;/h2>
&lt;ul>
&lt;li>[bx+idata]表示的是一个内存单元，它的偏移地址为bx+idata&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;[bx+idata]可以写成以下格式
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="mi">200&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;使用debug查看内存
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="76-用bxidata的方式进行数组的处理">7.6 用[bx+idata]的方式进行数组的处理&lt;/h2>
&lt;ul>
&lt;li>用[bx+idata]的方式进行数组处理&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;改进大小写转换程序
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">BaSiC&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">iNfOfMaTiOn&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;设置ds执行datasg段
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;设置(bx)=0，ds:bx指向&amp;#39;BaSiC&amp;#39;的第一个字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="c">;设置循环次数，因为BaSiC有5个字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;将ASCII码从ds:bx所指向的单元中取出
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>&lt;span class="c">;口岸al中ASCII码的第5个位置变为0，变为大写字母
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;转变后将ASCII码写回单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;定位第二个字符串的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">or&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00100000&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>C语言的形式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="n">include&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">stdio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;BaSiC&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;iNfOfMaTiOn&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">do&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="mh">0xDF&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="mh">0x20&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="77-si和di">7.7 SI和DI&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>SI和DI在8086CPU中和bx功能相近，充当BX的扩充，但是不能分成两个8位寄存器来使用。[SI]段地址默认也是在DS中。&lt;/strong>&lt;/li>
&lt;li>下面的指令实现了相同的功能&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;-------------
&lt;/span>&lt;span class="c">;下面的三组指令也实现了另一个组相同的功能
&lt;/span>&lt;span class="c">;-------------
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">123&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">123&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">123&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>一般ds:si指向要复制的原始空间，ds:di指向复制的目的空间。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;用DI和SI实现复制到它后面的数据区中
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">welcome&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">asm&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">................&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">start&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="c">;------
&lt;/span>&lt;span class="c">;用数组的思维[bx(si或di)+idata]的方式优化程序
&lt;/span>&lt;span class="c">;------
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">welcome&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">asm&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">................&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">start&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;第一个字符串的的第一个元素
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;目标字符串的第二个元素
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="78-bxsi和bxdi">7.8 [bx+si]和[bx+di]&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="79-bxsiidata和bxdiidata">7.9 [bx+si+idata]和[bx+di+idata]&lt;/h2>
&lt;ul>
&lt;li>常数后要加.&lt;strong>例如&lt;/strong>[bx+si].idata或者[bx].idata[si]&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="710-不同的寻址方式的灵活应用">7.10 不同的寻址方式的灵活应用&lt;/h2>
&lt;ul>
&lt;li>编程将数据段中每一个单词的头一个字母改为大写字母。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-a4b13c9597741ed0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1010/format/webp" alt="">&lt;/p>
&lt;p>数据段中的数据存储结构_2&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">file&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="c">;长度刚好都是16个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">edit&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">search&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">view&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">options&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">help&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程将数据段中每个单词改为大写字母&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-c318e4955e46fc3c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1077/format/webp" alt="">&lt;/p>
&lt;p>数据段中的数据存储结构2&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;有bug，问题在于cx的使用，进行二重循环，只用一个循环计数器，造成在进行内层的时候覆盖了外层循环的循环计数值。
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">ibm&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dec&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dos&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">vax&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用bx来定位行
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用si来定位列
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>程序没有返回到cmd&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-7f0b7862c49bc46a?imageMogr2/auto-orient/strip%7CimageView2/2/w/884/format/webp" alt="">&lt;/p>
&lt;p>712bug&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-ee6b91b4b76cdcd3?imageMogr2/auto-orient/strip%7CimageView2/2/w/994/format/webp" alt="">&lt;/p>
&lt;p>712bug1&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-482870fe7368d7e7?imageMogr2/auto-orient/strip%7CimageView2/2/w/643/format/webp" alt="">&lt;/p>
&lt;p>712bug2&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;三次循环后cx等于0了
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s0&lt;/span>&lt;span class="c">;先是cx=cx-1再判断时候等于0，此时cx=FFFF不为0再循环，变成死循环了
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>因为loop是和cx一起使用的，不能多用个寄存器来解决loop循环次数的问题。解决的方法是在每次开始内层循环时用dx将外层循环cx的值保存起来，在执行外层循环的loop指令前再回复外层循环的cx的数值。&lt;/li>
&lt;li>改进后程序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">ibm&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dec&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dos&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">vax&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用bx来定会行
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s0:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cx&lt;/span>&lt;span class="c">;用dx寄存器来临时存放外层cx的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用si来定位列
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">dx&lt;/span>&lt;span class="c">;在进行外层循环的时候回复cx的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">s0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>在上面的程序中，8086 CPU si、cx、ax、bx这些寄存器经常要使用到；cs、ip、ds也不能用，因为cs:ip时刻指向当前指令，ds指向datasg段；那么可用的寄存器就只用dx、di、es、ss、sp、bp等寄存器了。&lt;strong>内存可以解决经常性的数据暂存问题。为了使程序结构清晰便于阅读，应该使用栈&lt;/strong>&lt;/li>
&lt;li>再次被改进的程序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">ibm&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dec&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dos&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">vax&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="c">;定义一个字用来保存cx的值
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用bx来定位行
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">cx&lt;/span>&lt;span class="c">;datasg:40h单元存放外层cx的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用si来定位列
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;在进行外层循环的时候回复cx的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">s0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>再次使用栈改进程序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ss&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">stacksg&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">ibm&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dec&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">dos&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">vax&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">stacksg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;定义一个段，用作栈段，容量为16个字节
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">stacksg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stacksg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用bx来定位行
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="c">;datasg:40h单元存放外层cx的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用si来定位列
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="c">;在进行外层循环的时候回复cx的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">s0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程将数据段中的每个单词的前四个字母改为大写字母&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-9c38139d376d6905?imageMogr2/auto-orient/strip%7CimageView2/2/w/1115/format/webp" alt="">&lt;/p>
&lt;p>数据段中的数据存储结构3&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">datasg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ss&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">stacksg&lt;/span>
&lt;span class="nf">stacksg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">stacksg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">display&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">brows&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">replace&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="no">modify&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">datasg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stacksg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">datasg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h1 id="八数据处理的两个基本问题">八、数据处理的两个基本问题&lt;/h1>
&lt;h2 id="引言-2">引言&lt;/h2>
&lt;ul>
&lt;li>本章是总结性的内容，数据处理的两个基本问题是
&lt;ul>
&lt;li>处理的数据在哪？&lt;/li>
&lt;li>要处理的数据有多长？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>自定义得描述符：
&lt;ul>
&lt;li>reg寄存器
&lt;ul>
&lt;li>ax、bx、cx、dx、ah、al、bh、bl、ch、cl、dh、dl、sp、bp、si、di；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>sreg段寄存器
&lt;ul>
&lt;li>ds、ss、cs、es。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="81-bxsidibp">8.1 bx、si、di、bp&lt;/h2>
&lt;ul>
&lt;li>在8086 CPU中只有bx、si、di、bp这四个寄存器用在&lt;input disabled="" type="checkbox"> 中进行内存单元寻址。&lt;strong>在[]中，组合只能以这四种形式：bx和si、bx和di、bp和si、bp和di&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;以下指令是错误的
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">cx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">dx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">bp&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>正确的指令&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bp&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bp&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>[bp]的段地址默认在ss中。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="82-机器指令处理的数据所在的位置">8.2 机器指令处理的数据所在的位置&lt;/h2>
&lt;ul>
&lt;li>绝大部分机器指令时进行数据处理的，大致可以分为3类：读、写、运算。指令在处理前可以在三个地方：CPU内部、内存、端口。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>机器码&lt;/th>
&lt;th>汇编指令&lt;/th>
&lt;th>指令执行前数据的位置&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>89C3&lt;/td>
&lt;td>mov bx,[0]&lt;/td>
&lt;td>内存，ds:0单元&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>89C3&lt;/td>
&lt;td>mov bx,ax&lt;/td>
&lt;td>CPU内部，ax寄存器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BB0100&lt;/td>
&lt;td>mov bx,1&lt;/td>
&lt;td>CPU内部，指令缓冲器&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="83-汇编语言中数据位置的表达">8.3 汇编语言中数据位置的表达&lt;/h2>
&lt;ul>
&lt;li>汇编语言中用三个概念来表达数据的位置。
&lt;ul>
&lt;li>1、立即数(idata)&lt;/li>
&lt;li>2、寄存器&lt;/li>
&lt;li>3、段地址(SA)和偏移地址(EA)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="84-寻址方式总小结">8.4 寻址方式总小结&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-9e48c0050ca927fb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>寻址方式总结_1&lt;/p>
&lt;h2 id="85-指令要处理的数据有多长">8.5 指令要处理的数据有多长&lt;/h2>
&lt;ul>
&lt;li>8086 CPU可以处理byte和word两种数据尺寸。&lt;/li>
&lt;li>&lt;strong>通过寄存器指明要处理的数据尺寸；push指令只进行字操作，若没有寄存器名存在的情况下，用操作符word ptr或者byte ptr指明内存单元的长度。&lt;/strong> 例如&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;假设内存2000:1000 FF FF FF FF FF FF ……
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;如果用以下指令
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="c">;那么内存中的内容变为
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;2000:1000 01 FF FF FF FF FF ……
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="err">如果是用以下指令&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="c">;那么内存中的内容变为
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;2000:1000 01 00 FF FF FF ……
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="86-寻址方式的综合应用">8.6 寻址方式的综合应用&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-af564d5dc3eeca77?imageMogr2/auto-orient/strip%7CimageView2/2/w/513/format/webp" alt="">&lt;/p>
&lt;p>86题目_1&lt;/p>
&lt;ul>
&lt;li>初步汇编代码&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">seg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;确定记录物理地址：ds:bx
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">38&lt;/span>&lt;span class="c">;寄存器相对寻址 排名字段改为38
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">eh&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">70&lt;/span>&lt;span class="c">;收入字段增加70
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;用si来定位产品字符串中的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">V&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="c">;相对基址变址寻址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">A&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">X&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>c语言描述&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="k">struct&lt;/span> &lt;span class="n">company&lt;/span> &lt;span class="cm">/*定义一个公司记录的结构体*/&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">cn&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="cm">/*公司名称*/&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">hn&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="cm">/*总裁姓名*/&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pm&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/*排名*/&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">sr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/*收入*/&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">cp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="cm">/*著名产品*/&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">compant&lt;/span> &lt;span class="n">dec&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;DEC&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;Ken Olsen&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">137&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;PDF&amp;#34;&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="cm">/*定义一个公司记录的变量，内存中将存有一条公司的记录*/&lt;/span>
&lt;span class="n">mian&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pm&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">38&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sr&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">70&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sc">&amp;#39;V&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">dec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cp&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sc">&amp;#39;X&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>按照c语言的风格用汇编写&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">seg&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;记录首地址送入bx
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="no">och&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">38&lt;/span>&lt;span class="c">;排名字段改为38
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">eh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">70&lt;/span>&lt;span class="c">;收入字段增加70
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="c">;产品名字段改为字符串&amp;#39;VAX&amp;#39;
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">V&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">A&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">X&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>多种寻址方式为结构化数据的处理提供了方便。&lt;/li>
&lt;li>&lt;strong>一般用[bx+idata+si]的方式来访问结构体，用idata定位结构体中的某一数据项，用si定位数组项中的每个元素。&lt;/strong> 例如：[bx].idata、[bx].idata[si]。&lt;/li>
&lt;/ul>
&lt;h2 id="87-div指令">8.7 div指令&lt;/h2>
&lt;ul>
&lt;li>div(divide)是除法指令，可用乘法模拟，格式为：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">div&lt;/span> &lt;span class="no">reg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">寄存器&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="err">内存单元。&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>除数：8位或16位，在寄存器或内存单元中；被除数：默认放在AX或DX和AX中。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">div&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;al放商，ah放余数
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;ax放商，dx放余数
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>除数&lt;/th>
&lt;th>被除数&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>8位&lt;/td>
&lt;td>16为(AX)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16位&lt;/td>
&lt;td>32位(DX高16位+AX低16位)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>8位或16位看的是除数。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算&lt;/th>
&lt;th>8位&lt;/th>
&lt;th>16位&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>商&lt;/td>
&lt;td>AL&lt;/td>
&lt;td>AX&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>余数&lt;/td>
&lt;td>AH&lt;/td>
&lt;td>DX&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>利用除法指令计算10001/100编程&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;被除数1001可用ax寄存器存放，除数100可用8位寄存器存放，要进行8位除法。
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1001&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">bl&lt;/span>
&lt;span class="c">;执行后al的值等于0AH(10)，ah的值等于1(余数为1)。
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>利用除法指令计算100001/100编程&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;被除数100001大于2^16=65535(FFFF)，不能用ax来存放，要用dx和ax两个寄存器联合存放。除数小于255，可用一个8位寄存器存放，但是被除数是32位的，除数应为16位，所以要用一个16位寄存器来存放除数。
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;100001的十六进制为186A1H，100001的高16位(1)存放在dx，低16位(86AH)存放在ax中。
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">86&lt;/span>&lt;span class="no">A1H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="c">;执行后ax内容等于03E8H(即1000)，dx的值等于1(余数)。
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="88-伪指令dd">8.8 伪指令dd&lt;/h2>
&lt;ul>
&lt;li>db定义字节型数据，dw定于字型数据，&lt;strong>dd 定于 dword(double word双字型数据)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="c">;第一个数据为01h，在data:0处，占1个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="c">;第二个数据为0001h，在data:1处，占1个字
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="c">;第三个数据为00000001h，在data:3处，占2个字
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>利用除法指令计算 dd 100001H 除以 dw 100，商放在 dw 0中&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dd&lt;/span> &lt;span class="mi">100001&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="c">;低16位存储在ax中，高16位存储在dx中
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;低16位存储在ax中
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;高16位存储在dx中
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">div&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="89-伪指令dup">8.9 伪指令dup&lt;/h2>
&lt;ul>
&lt;li>和db、dw、dd等数据定义伪指令配合使用，用来进行数据的重复。格式 db或者dw或者dd 重复的次数 dup (重复的数据)&lt;/li>
&lt;li>例如：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">db&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c">;定义了3个字节，它们的值都是0，等同于db 0,0,0。
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">db&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c">;定义了9个直接，它们是0、1、2、0、1、2、0、1、2，相当于db 0、1、2、0、1、2、0、1、2
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">db&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">abc&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">ABC&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c">;定义了18个直接，它们是&amp;#39;abcABCabcABCabcABC&amp;#39;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="实验七-寻址方式在结构化数据访问中的应用">实验七 寻址方式在结构化数据访问中的应用&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-141307bb9108dacb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>实验7&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-34fb4b5b6b1f9590?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>实验7数据&lt;/p>
&lt;ul>
&lt;li>ds已经和data段联系了，数据段不够用时用扩展段ES&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;初始化阶段
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">table&lt;/span>&lt;span class="c">;data已经被占用
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">21&lt;/span>
&lt;span class="c">;存放年份,每一个bx就是一个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="c">;存放公司的总收入
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">54&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;第一个年收入是dd数据类型，段地址为54H
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">54&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">dx&lt;/span>
&lt;span class="c">;存放公司的人数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A8H&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;第一个人数的数据段地址为0A8H
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A8H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="c">;计算人均收入并存放
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">54&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;这两句诗初始化被除数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">div&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A8H&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;除以人数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">dH&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;将商放入指定位置
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="c">;为下一次循环时存放数据做准备
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="c">;bx确定年份和收入
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;si确定人数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;di确定的是每行的列数
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>完整的程序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">es&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">table&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">1975&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">1976&lt;/span>&lt;span class="err">&amp;#39;&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">1977&lt;/span>&lt;span class="err">&amp;#39;&lt;/span> &lt;span class="err">……&lt;/span>
&lt;span class="nf">dd&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="mi">22&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="mi">382&lt;/span> &lt;span class="err">……&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span> &lt;span class="err">……&lt;/span>
&lt;span class="c">;数据在题目中
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">table&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">21&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">year&lt;/span> &lt;span class="no">summ&lt;/span> &lt;span class="no">ne&lt;/span> &lt;span class="err">??&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">table&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">table&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">21&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">54&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">56&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">dx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A8H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">AH&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">54&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A8H&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">dH&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="转移指令的原理">转移指令的原理&lt;/h2>
&lt;h2 id="引言-3">引言&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>可以修改IP，或者同时修改CS和IP的指令统称为转移指令。&lt;/strong> 简单的来说可以控制CPU执行内存中某处代码的指令就是转移指令。&lt;/li>
&lt;li>8086&lt;/li>
&lt;li>CPU的转移行为有&lt;strong>只修改的段内转移&lt;/strong>(如jmp ax) 和&lt;strong>同时修改该CS和IP的段间转移&lt;/strong>(如jmp 1000:0)。其中段内转移分为&lt;strong>短转移&lt;/strong>(IP的修改范围为-128~127)和&lt;strong>近转移&lt;/strong> (IP的修改范围为-32768~32767)。&lt;/li>
&lt;li>8086 CPU的转移指令分为以下几类：
&lt;ul>
&lt;li>无条件转移指令(如：jmp)&lt;/li>
&lt;li>条件转移指令&lt;/li>
&lt;li>循环指令(如：loop)&lt;/li>
&lt;li>过程&lt;/li>
&lt;li>中断&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="91-操作符offset">9.1 操作符offset&lt;/h2>
&lt;ul>
&lt;li>offset是伪指令，由编译器处理，它的功能是取得标号的偏移地址。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">start&lt;/span>&lt;span class="c">;相当于 mov ax,偏移地址0，段地址是从0开始
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;相当于 mov ax,3，标记的是代码段中的第二条指令，第一条指令长度为3个字节，则s的偏移地址为3
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="92-jmp指令">9.2 jmp指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>jmp为无条件转移，可以只修改IP，也可以同时修改CS和IP。&lt;/strong>&lt;/li>
&lt;li>jmp需要两种信息
&lt;ul>
&lt;li>1、转移的目的地址；&lt;/li>
&lt;li>2、转移的距离(段间转移、段内转移、段内近转移)。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="93-依据位移进行转移的jmp指令">9.3 依据位移进行转移的jmp指令&lt;/h2>
&lt;ul>
&lt;li>段内短转移，&lt;strong>jmp short 标号&lt;/strong> ，对IP的修改范围是-128~127，一个字节的空间，即向前转移最多128字节，向后最多127字节。short 表明指令进行的是短转移，标号指明了指令要转移的目的地，转移指令结束后&lt;strong>CS:IP指向标号处的指令&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">inc&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>一般汇编指令中的立即数(idata)会出现在对应的机器指令中。而jmp指令的机器指令并不包含目的地址，包含的是相对于当前IP的转移位移，CPU并不需要目的地址就可以实现对IP的修改。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-6eb8927cab108247?imageMogr2/auto-orient/strip%7CimageView2/2/w/767/format/webp" alt="">&lt;/p>
&lt;p>92debug_1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CPU执行指令的过程 在 2.10 CS和IP&lt;/p>
&lt;/li>
&lt;li>
&lt;p>jmp short s 指令的读取和执行过程：&lt;/p>
&lt;ul>
&lt;li>1、CS:IP指向jmp short s 的机器码；&lt;/li>
&lt;li>2、读取指令码进入指令缓冲器&lt;/li>
&lt;li>3、 改变IP，(IP)=(IP)+所读取指令的长度，IP指向下一个指令；&lt;/li>
&lt;li>4、CPU执行指令缓冲器中的指令；&lt;/li>
&lt;li>5、执行后CS:IP继续指向下一个指令&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>jmp short 标号的功能为(IP)=(IP)+8位位移。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>1、8位为=标号处的地址-jmp指令后的第一个字节的地址；&lt;/li>
&lt;li>2、short 指明此处的位移为8位；&lt;/li>
&lt;li>3、8位位移的范围为-128~127，用补码表示。&lt;/li>
&lt;li>4、8位位移由编译程序在编译时算出的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>jmp near ptr 标号 指令实现段内近转移，功能为(IP)=(IP)+16位位移。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>1、16位为=标号处的地址-jmp指令后的第一个字节的地址；&lt;/li>
&lt;li>2、nearptr 指明此处的位移为16位；&lt;/li>
&lt;li>3、16位位移的范围为-32769~32767，用补码表示。&lt;/li>
&lt;li>4、16位位移由编译程序在编译时算出的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-e6d760bd296c0a36?imageMogr2/auto-orient/strip%7CimageView2/2/w/1093/format/webp" alt="">&lt;/p>
&lt;p>转移位移的计算方法&lt;/p>
&lt;h2 id="94-转移的目的地址在指令中的jmp指令">9.4 转移的目的地址在指令中的jmp指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>jmp far ptr 段间转移，又称为远转移&lt;/strong>&lt;/li>
&lt;li>jmp far ptr 标号的功能：
&lt;ul>
&lt;li>(CS)=标号所在段的段地址；&lt;/li>
&lt;li>(IP)=标号所在段总的偏移地址；&lt;/li>
&lt;li>far ptr 指明了指令用标号的段地址和偏移地址修改CS和IP。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">far&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">256&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>机器码中包含了转移的目的地址。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-11dc198f29be97d8?imageMogr2/auto-orient/strip%7CimageView2/2/w/770/format/webp" alt="">&lt;/p>
&lt;p>94debug&lt;/p>
&lt;h2 id="附注3-汇编编译器masmexe对jmp的相关处理">附注3 汇编编译器(masm.exe)对jmp的相关处理&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-6ea437f414f45563?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>这里写图片描述&lt;/p>
&lt;h2 id="95-转移地址在寄存器中的jmp指令">9.5 转移地址在寄存器中的jmp指令&lt;/h2>
&lt;ul>
&lt;li>jmp 16位寄存器，功能是16位寄存器赋值给IP，实现段内的近(短)转移。&lt;/li>
&lt;li>参考 2.11 修改CS、IP的指令&lt;/li>
&lt;/ul>
&lt;h2 id="96-转移地址在内存中的jmp指令">9.6 转移地址在内存中的jmp指令&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>转移地址在内存中的jmp指令有两种格式：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>1、jmp word ptr内存单元地址(16位只能实现段内转移)。&lt;/strong> 功能是从内存单元地址处开始存放一个字(转移的目的偏移地址)，内存单元地址可用寻址方式的格式给出。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;相当于 jmp ax，执行后(IP)=0123h
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;执行后(IP)=0123h
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>2、jmp dword ptr 内存单元地址(段间转移)。&lt;/strong> 功能：从内存单元地址处开始存放两个字型数据，高地址是转移的目的段地址，低地址处是转移的目的偏移地址。(CS)=(内存单元地址+2),(IP)=(内存单元地址)，内存单元地址可用寻址方式的任一格式给出。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">dx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;执行后 (CS)=0,(IP)=0123H CS:IP指向0000:0123
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-91">检测点 9.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-ca902f4043f8894c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点 9.1&lt;/p>
&lt;h2 id="97-jcxz指令">9.7 jcxz指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>指令格式为jcxz 标号，如果cx的值为0，则转移到标号处执行，不为0则向下执行。&lt;/strong>
&lt;ul>
&lt;li>当cx的值为0时，(IP)=(IP)+8位位移，8位位移=标号处的地址-jcxz指令后的第一个字节的地址。&lt;/li>
&lt;li>8位位移的范围是-128~127，用补码表。&lt;/li>
&lt;li>8位位移由编译器在编译时算出。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>jcxz指令是有条件转移指令，所有的条件转移指令都是短指令，在对应的机器码中包含转移的位移而不包含目的地址，对IP的修改范围都为-128-127。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-92">检测点 9.2&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-956e0d3482f3fbb2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1042/format/webp" alt="">&lt;/p>
&lt;p>检测点9.2_1&lt;/p>
&lt;h2 id="98-loop指令">9.8 loop指令&lt;/h2>
&lt;ul>
&lt;li>**loop指令为循环指令，所有的循环指令都是短转移，在对应的机器码中包含转移的位移而不包含目的地址。**操作i：
&lt;ul>
&lt;li>&lt;strong>cx先自减1；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>当cx的值不为0时，(IP)=(IP)+8位位移，8位位移=标号处的地址-loop指令后的第一个字节的地址。&lt;/strong>&lt;/li>
&lt;li>8位位移的范围是-128~127，用补码表。&lt;/li>
&lt;li>8位位移由编译器在编译时算出。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="检测点-93">检测点 9.3&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-bfe3635e8b3f60f3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点 9.3&lt;/p>
&lt;h2 id="99-根据位移进行转移的意义">9.9 根据位移进行转移的意义&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="err">标号&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">near&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="err">标号&lt;/span>
&lt;span class="nf">jcxz&lt;/span> &lt;span class="err">标号&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="err">标号&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>它们对IP的修改时根据转移目的地址和转移起始地址自检的位移来进行的。在它们对应的机器码中不包含转移的目的地址，而包含的是目的地址的位移距离。方便了程序段在内存中的浮动分配，没有固定目的地址的限制，更灵活。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="910-编译器对转移位移超界的检测">9.10 编译器对转移位移超界的检测&lt;/h2>
&lt;ul>
&lt;li>根据位移进行转移的指令，它们的转移范围受到了转移位移的限制，如果在源程序中出现了转移范围超界的问题，在编译时编译器会报错。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span> &lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">128&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">FFFFH&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-df672c24ab0ef975?imageMogr2/auto-orient/strip%7CimageView2/2/w/729/format/webp" alt="">&lt;/p>
&lt;p>910err&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-fd423526c0df25ba?imageMogr2/auto-orient/strip%7CimageView2/2/w/737/format/webp" alt="">&lt;/p>
&lt;p>910err2&lt;/p>
&lt;h1 id="实验8">实验8&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>实验八可以正常退出&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-5aa8478221dda3aa?imageMogr2/auto-orient/strip%7CimageView2/2/w/842/format/webp" alt="">&lt;/p>
&lt;p>test8&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">start:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s:&lt;/span>&lt;span class="nf">nop&lt;/span>
&lt;span class="nf">nop&lt;/span>&lt;span class="c">;nop占用两个字节，不执行任何操作
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">s2&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;jmp short s1的机器码给了ax
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;覆盖到指令 s:nop nop那
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">s0:&lt;/span>&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;s那已经被jmp short s1机器码覆盖
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s2:&lt;/span>&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s1&lt;/span>&lt;span class="c">;jmp -8h，向上跳到s1，s1又向上跳-10字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">nop&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-cda0538dc883dda1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>test8debug&lt;/p>
&lt;h1 id="实验9">实验9&lt;/h1>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-c2282a11b29e1ebc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>实验9&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ss&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">welcome&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">masm&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="c">;定义要显示的字符串(共16字节)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="mi">02&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">71&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="c">;定义字符的属性
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">xor&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="c">;bx清零，用来索引颜色
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b872H&lt;/span>&lt;span class="c">;算出屏幕第12行中间的显存的段起始位置放入ax中
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="c">;s3循环控制行数，要显示三个字符串外循环为3次
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="c">;三个进栈操作为外循环s3保存相关寄存器的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="c">;以防止它们的值在内循环中被破坏
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;此时es为屏幕第12行中间的显存的段起始位置
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;si用来索引代码列的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;di用来定位目标列
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="c">;s1循环控制存放的字符，一个字符串中含有10H个字节内循环为10H次
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nl">s1:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s1&lt;/span>&lt;span class="c">;吃循环实现偶地址中存放字符
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="c">;设置di的值为1，为在显存奇数地址中存放字符的颜色属性做准备
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al.ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;取消颜色属性
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="c">;第二个内循环也为10H
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">di&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s2&lt;/span>&lt;span class="c">;此循环实现奇数地址存放字符的颜色属性
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="c">;以下4句为下一趟外循环做准备
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">AH&lt;/span>&lt;span class="c">;将显存的段地址起始地址设置为当前行的下一行
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;[在段地址中甲0aH，相当于在偏移地址中加了0a0h(=160d)]
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s3&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">C00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>welcome to masm&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-9328763b459045db?imageMogr2/auto-orient/strip%7CimageView2/2/w/644/format/webp" alt="">&lt;/p>
&lt;p>welcome to masm&lt;/p>
&lt;h1 id="十call和ret指令">十、CALL和RET指令&lt;/h1>
&lt;h2 id="引言-4">引言&lt;/h2>
&lt;ul>
&lt;li>回想程序之间的加载返回过程。&lt;/li>
&lt;li>call和ret指令都是转移指令，它们都修改IP或者同时修改CS和IP，经常被共用来实现程序的设计。&lt;/li>
&lt;li>这一章讲解call和ret指令的原理。&lt;/li>
&lt;/ul>
&lt;h2 id="101-ret和retf指令">10.1 ret和retf指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>ret指令用栈中的数据来修改IP的内容，从而实现近转移。&lt;/strong>&lt;/li>
&lt;li>CPU执行ret指令时：
&lt;ul>
&lt;li>1、(IP)=((SS)*16+(SP))，指向栈顶&lt;/li>
&lt;li>2、(SP)=(SP)+2&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>retf指令用栈中的数据，修改CS和IP的内容，从而实现远转移。&lt;/strong>&lt;/li>
&lt;li>CPU执行retf指令时，进行下面两步操作：
&lt;ul>
&lt;li>1、(IP)=((SS)*16+(SP))&lt;/li>
&lt;li>2、(SP)=(SP)+2&lt;/li>
&lt;li>3、(CS)=((SS)*16+(SP))&lt;/li>
&lt;li>4、(SP)=(SP)+2&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用汇编的语法来解释ret和retf指令：
&lt;ul>
&lt;li>CPU执行ret指令相当于进行 POP IP&lt;/li>
&lt;li>CPU执行retf指令相当于进行 POP IP和POP CS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-0be8eabb3a8f4aca?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>1012debug_1&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cs&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">retf&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-101">检测点 10.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-1cc00b307b779d19?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点10.1&lt;/p>
&lt;h2 id="102-call指令">10.2 call指令&lt;/h2>
&lt;ul>
&lt;li>call指令经常跟ret指令配合使用，CPU执行call指令时：
&lt;ul>
&lt;li>&lt;strong>1、将当前的IP或者CS和IP压入栈；&lt;/strong>&lt;/li>
&lt;li>&lt;strong>2、转移(jmp)。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>call指令除了不能实现短转移之外，call指令实现转移的方法和jmp指令的原理相同。call指令实现段间的转移(远转移)或近转移。&lt;/li>
&lt;/ul>
&lt;h2 id="103-依据位移进行转移的call指令">10.3 依据位移进行转移的call指令&lt;/h2>
&lt;ul>
&lt;li>call标号(将当前的IP压入栈后转到目标处执行指令)，执行时进行以下操作：
&lt;ul>
&lt;li>1、(SP)=(SP)-2&lt;br>
((SS)*16+(SP))=(IP)&lt;/li>
&lt;li>2、(IP)=(IP)+16位位移；&lt;/li>
&lt;li>3、16位位移=标号处的地址减去call指令后的第一个字节的地址。16位位移的范围是-32768~32767，用补码表示。16位位移由编译器编译时算出。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用汇编语法解释call指令：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">push&lt;/span> &lt;span class="no">IP&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">near&lt;/span> &lt;span class="err">标号&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-102">检测点 10.2&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-19fb464bd0f63b53?imageMogr2/auto-orient/strip%7CimageView2/2/w/1198/format/webp" alt="">&lt;/p>
&lt;p>检测点10.2&lt;/p>
&lt;h2 id="104-转移的目的地址在指令中的call指令">10.4 转移的目的地址在指令中的call指令&lt;/h2>
&lt;ul>
&lt;li>call far ptr 标号 实现的是段间转移，执行时：
&lt;ul>
&lt;li>1、CS先自减2；&lt;/li>
&lt;li>2、CS的值等于SS的值乘以16加上SP的值，SP自减2，IP的值等于SS的值*16加上SP的值；&lt;/li>
&lt;li>3、CS的值等于标号所在的段地址，IP的值等于标号所在的偏移地址.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用汇编语法解释call指令：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">push&lt;/span> &lt;span class="no">CS&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">IP&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">far&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="err">标号&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-103">检测点 10.3&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-c393ece2c79a0562?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点 10.3&lt;/p>
&lt;h2 id="105-转移地址在寄存器中的call指令">10.5 转移地址在寄存器中的call指令&lt;/h2>
&lt;ul>
&lt;li>指令格式是：call 16位寄存器，功能是：
&lt;ul>
&lt;li>1、SP的值先自减2；&lt;/li>
&lt;li>2、IP的值SS的值乘以16再加上SP的值；&lt;/li>
&lt;li>3、 IP的值等于16位寄存器的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用汇编语法解释此种call指令，CPU执行call 16位reg时，相当于：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">push&lt;/span> &lt;span class="no">IP&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="err">位寄存器&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-104">检测点 10.4&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-063fe7056be0dae2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点 10.4&lt;/p>
&lt;h2 id="106-转移地址在内存中的call指令">10.6 转移地址在内存中的call指令&lt;/h2>
&lt;ul>
&lt;li>转移地址在内存中的call指令有两种格式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">call&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="err">内存单元地址&lt;/span>&lt;span class="c">;段内跳转
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="err">内存单元地址&lt;/span>&lt;span class="c">;段间跳转
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>用汇编语法解释call word ptr 内存单元地址&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">push&lt;/span> &lt;span class="no">IP&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="err">内存单元地址&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>例子：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;执行后IP的值等于0123H，SP的值等于0EH
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>用汇编语法解释call dword ptr 内存单元地址&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">push&lt;/span> &lt;span class="no">CS&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">IP&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="err">内存单元地址&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>例子：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0123&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;执行后IP的值等于0123H，SP的值等于0CH，CS的值等于0
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-105">检测点 10.5&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-f832aec987833d5b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点10.5&lt;/p>
&lt;h2 id="107-call和ret的配合使用">10.7 call和ret的配合使用&lt;/h2>
&lt;ul>
&lt;li>下面的程序返回前，bx中的值是多少？&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>具有一定功能的程序段称为子程序，&lt;strong>用call转去执行，在子程序后面使用ret实现返回。&lt;/strong>&lt;/li>
&lt;li>具有子程序的源程序的框架如下&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-00d707a08b70a26d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1067/format/webp" alt="">&lt;/p>
&lt;p>107call&lt;/p>
&lt;h2 id="108-mull指令">10.8 mull指令&lt;/h2>
&lt;ul>
&lt;li>mull指令时乘法指令，&lt;strong>相乘的两个数要么都是8位的，要么都是16位的&lt;/strong>
&lt;ul>
&lt;li>8位：在AL中和8位寄存器中或内存字节单元中；&lt;/li>
&lt;li>16位：在AX中和16位寄存器或内存字单元中。&lt;/li>
&lt;li>结果
&lt;ul>
&lt;li>8位的存放在AX中；&lt;/li>
&lt;li>16位：DX(高位)和AX(低位)中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mull&lt;/span> &lt;span class="no">reg&lt;/span>
&lt;span class="nf">mull&lt;/span> &lt;span class="err">内存单元&lt;/span>
&lt;span class="nf">mull&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mull&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">idata&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">;(ax)=(ax)*((ds)*16+(bx)+(si)+idata)
&lt;/span>&lt;span class="c">;(dx)=(ax)*((ds)*16+(bx)+(si)+idata)
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;计算100*10，两个数都小于255，可以做8位乘法
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>
&lt;span class="nf">mull&lt;/span> &lt;span class="no">bl&lt;/span>
&lt;span class="c">;结果(ax)=1000(03E8H)
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="c">;计算100*1000，1000都大于255，要做16位乘法
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="c">;高位自动补零
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10000&lt;/span>
&lt;span class="nf">mull&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="c">;结果(ax)=4240H，(dx)=000FH，F4240H=1000000
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="109-模块化程序设计">10.9 模块化程序设计&lt;/h2>
&lt;ul>
&lt;li>cal和ret指令共同支持汇编语言编程中的模块化设计。&lt;/li>
&lt;/ul>
&lt;h2 id="1010-参数和结果传递的问题">10.10 参数和结果传递的问题&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>用寄存器来存储参数和结果是最常用的方法。对于存放参数的寄存器和存放结果的寄存器，调用者和子程序的读写操作恰恰相反：&lt;/p>
&lt;ul>
&lt;li>调用者将参数送入参数寄存器，从结果寄存器中取到返回值；&lt;/li>
&lt;li>子程序 从参数寄存器中取到参数，将返回值送入结果寄存器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>编程：根据提供的N来计算N^3&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nl">cube:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">mul&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">mul&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程：计算data段中第一组数据的3次方，结果保存在后面一组dword单元中&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nf">dd&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="no">dup&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;ds:si指向第一组word单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;ds:di指向第二组dword单元
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">cube&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">dx&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;ds:di指向下一个word单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="c">;ds:di指向下一个dword单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">cube:&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">mul&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">mul&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="1011-批量数据的传递">10.11 批量数据的传递&lt;/h2>
&lt;ul>
&lt;li>将批量数据放在内存中，然后将他们呢所在内存空间的首地址放在寄存器中，传递给需要的子程序，批量数据的返回结果也是采用同样的方法。除此之外还可以用栈来传递参数。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">conversation&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;ds:si指向字符串(批量数据)所在空间的首地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="c">;cx存放字符串的长度
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">call&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">capital:&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="1012-寄存器冲突的问题">10.12 寄存器冲突的问题&lt;/h2>
&lt;ul>
&lt;li>编程：将一个全是字母，以0结尾的字符串转化为大写&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nl">capital:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;低8位
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ch&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;高8位设置为0
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jcxz&lt;/span> &lt;span class="no">ok&lt;/span>&lt;span class="c">;如果(cx)=0则结束，如果不是0则处理
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nl">ok:&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程将data段中的字符串全部转化为大写&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">word&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">unix&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">wind&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">good&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;此程序有bug，cx有问题
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">word&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">unix&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">wind&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">good&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">capital:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ch&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jcxz&lt;/span> &lt;span class="no">ok&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nl">ok:&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="实验十">实验十&lt;/h1>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-96127f8d658020be?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>test10_1_1&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-5db082ab094e3ebd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>test10_1_2&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-d3292727d44a40f9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>test10_1_3&lt;/p>
&lt;ul>
&lt;li>实验10.1 显示字符串&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">welcome&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">masm&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="c">;行号
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="c">;列号
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;颜色属性
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">show_str&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">show_str:&lt;/span>&lt;span class="c">;子程序
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A0h&lt;/span>&lt;span class="c">;每行有80*2=160个字节=0a0h
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dec&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="c">;行号在显存中下标从0开始，所以减1
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mul&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="c">;相当于从第(n-1)*0a0h个byte单元开始
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;定位好的位置偏移地址存放在bx里(行)
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;每个字符占2个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mul&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="c">;定位列，结果ax存放的是定位好的列的位置
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;列号在显存中下标从0开始，又因为是偶字节存放字符，所以减2
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;此时bx中存放的是行与列的偏移地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">B800h&lt;/span>&lt;span class="c">;显存开始的地方
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;es中存放的是显存的第0页的起始地段地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;di指向显存的偏移地址，确定指向下一个要处理的字符的位置
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cl&lt;/span>&lt;span class="c">;cl存放颜色参数，下边cl要用来临时存放要处理的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ch&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;下边cx存放的是每次准备处理的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;指向&amp;#39;welcome to masm &amp;#39;,0
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">jcxz&lt;/span> &lt;span class="no">ok&lt;/span>&lt;span class="c">;cl为0时跳转
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">cl&lt;/span>&lt;span class="c">;偶地址存放字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;奇地址存放字符的颜色属性
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;指向了下个字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s&lt;/span> &lt;span class="c">;无条件跳转，jcxz是离开的关键跳
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">ok:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">ret&lt;/span>&lt;span class="c">;定义结束
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-508df3eb18966546?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>test101&lt;/p>
&lt;ul>
&lt;li>实验10.2&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ss&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4240&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">fh&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">xx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">ah&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">divdw&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">divdw:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="c">;低16位先保存
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">dx&lt;/span>&lt;span class="c">;ax这时是高16位了
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;为了不影响余数位和高位数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">div&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">dx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">dx&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>实验10.3&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">12666&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>&lt;span class="c">;指向字符串的首地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">dtoc&lt;/span>&lt;span class="c">;实现将word型整数转化为字符串并存储
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="c">;打印初始化
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">cah&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">show_str&lt;/span>&lt;span class="c">;开始打印字符串
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">dtoc:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;bx在子程序中用来存放位数，用栈来临时存放修改后的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">d&lt;/span>&lt;span class="c">;d表示十进制，cx准备被除，用取余法来取出数字
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">div&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="c">;除以十
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;得到的商复制给cx，要利用jcxz
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jcxz&lt;/span> &lt;span class="no">s2&lt;/span>&lt;span class="c">;当商为0则跳到s2
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;余数加上30h得到相应的ascii码
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s1&lt;/span>
&lt;span class="nf">s2&lt;/span>&lt;span class="err">：&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;当商为0的时候，余数为个位
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">push&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="c">;再进行一次栈操作(补充当商为零而余数不为零时的情况)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="c">;总共有bx位进栈，所以循环次数为bx
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s3:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="c">;s3实现将栈中的数据依次出栈放到指定的内存中
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s3&lt;/span>
&lt;span class="nl">okay:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nl">show_str:&lt;/span>&lt;span class="c">;子程序
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">push&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">A0h&lt;/span>&lt;span class="c">;每行有80*2=160个字节=0a0h
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">dec&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="c">;行号在显存中下标从0开始，所以减1
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mul&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="c">;相当于从第(n-1)*0a0h个byte单元开始
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;定位好的位置偏移地址存放在bx里(行)
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;每个字符占2个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mul&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="c">;定位列，结果ax存放的是定位好的列的位置
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;列号在显存中下标从0开始，又因为是偶字节存放字符，所以减2
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;此时bx中存放的是行与列的偏移地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">B800h&lt;/span>&lt;span class="c">;显存开始的地方
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;es中存放的是显存的第0页的起始地段地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;di指向显存的偏移地址，确定指向下一个要处理的字符的位置
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cl&lt;/span>&lt;span class="c">;cl存放颜色参数，下边cl要用来临时存放要处理的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ch&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;下边cx存放的是每次准备处理的字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">S&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">jcxz&lt;/span> &lt;span class="no">ok&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">cl&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">i&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nl">ok:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="十一标志寄存器">十一、标志寄存器&lt;/h1>
&lt;h2 id="引言-5">引言&lt;/h2>
&lt;ul>
&lt;li>CPU内部的寄存器中有一种特殊的寄存器：
&lt;ul>
&lt;li>1、用来存储相关指令的某些执行结果；&lt;/li>
&lt;li>2、用来为CPU执行相关指令提供行为依据；&lt;/li>
&lt;li>3、用来控制CPU的相关工作方式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>8086 CPU的标志寄存器只有16位，其中存储的信息通常被称为程序状态字(PSW)。&lt;/li>
&lt;li>本章中的标志寄存器(以下简称为flag)。某些指令将影响标志寄存器中的多个标志位，这些被影响的标记位比较全面地记录ill指令的执行结果，为相关的处理提供了所需的依据。&lt;/li>
&lt;li>flag寄存器是按位起作用的，每一位都有专门的含义，记录特定的信息，与其他寄存器不一样。&lt;/li>
&lt;li>8086 CPU的flag寄存器的结构：&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-d712a884ae249075?imageMogr2/auto-orient/strip%7CimageView2/2/w/1158/format/webp" alt="">&lt;/p>
&lt;p>flag&lt;/p>
&lt;ul>
&lt;li>flag的1、3、5、12、13、14、15位在8086 CPU中没有使用，而0、2、4、6、7、8、9、10、11位都具有特殊的含义。&lt;/li>
&lt;/ul>
&lt;h2 id="111-zfzero-flag标志">11.1 ZF(zero flag)标志&lt;/h2>
&lt;ul>
&lt;li>flag的第6位是ZF，零标志位，它记录相关指令执行后，结果为0，ZF=1(记录下是0这样的肯定信息)，结果不为0，ZF=0(表示结果非0)。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="c">;指令执行后，结果为0，则ZF=1
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">or&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="c">;指令执行后，结果为1，则ZF=0
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>在8086CPU中,add、sub、mul、div、inc、or、and等它们大多都是运算(逻辑运算或是算术运算)指令，是影响标志寄存器的，而mov、push、pop等传送指令对标志寄存器一般没有影响，因为不会产生结果。&lt;/li>
&lt;/ul>
&lt;h2 id="112-pf标志">11.2 PF标志&lt;/h2>
&lt;ul>
&lt;li>flag的第2位是PF，奇偶标志位，记录指令执行后结果所有的二进制位中1的个数。为偶数，PF=1，为奇数PF=0&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>
&lt;span class="c">;执行结果为00001011B，有3个1，则PF=0
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">or&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>
&lt;span class="c">;执行后结果为00000011B，有2个1，则PF=1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="113-sfsign-flag标志">11.3 SF(sign flag)标志&lt;/h2>
&lt;ul>
&lt;li>flag的第7位是SF符号标志位，记录指令执行后结果为负则SF=1，结果为正，SF=0。&lt;strong>弱国我们将数据当作无符号数来运算，SF的值没有意义，虽然相关的指令影响了它的值。&lt;/strong>&lt;/li>
&lt;li>有符号数与补码
&lt;ul>
&lt;li>计算机默认把负数用补码记录。&lt;/li>
&lt;li>00000001B，可以看作无符号数1，也可以看作符号数+1；&lt;/li>
&lt;li>10000001B，可以看作无符号数129，也可以看作有符号数-127。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>补码&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10000001&lt;/span>&lt;span class="no">B&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="c">;执行指令后al的值是10000010B，无符号数130，有符号数-126
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-111">检测点 11.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-0bcdc71ed3ba4c48?imageMogr2/auto-orient/strip%7CimageView2/2/w/1143/format/webp" alt="">&lt;/p>
&lt;p>检测点11.1&lt;/p>
&lt;h2 id="114-cfcarry-flag标志">11.4 CF(carry flag)标志&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>flag的第0位是CF，进位标志位。一般情况下，在进行无符号运算的时候，它记录了运算结果的最高有效位向更高位的进位值或从更高位的借位值。对于位数为N的无符号数，其对应的二进制信息的最高位为N-1位的最高有效位，假想存在第N位。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-73facd3f7d1f5598?imageMogr2/auto-orient/strip%7CimageView2/2/w/1101/format/webp" alt="">&lt;/p>
&lt;p>更高位&lt;/p>
&lt;/li>
&lt;li>
&lt;p>两个8位的数据运算可能产生进位或者借位，由于这个进位值在8位数中无法保存，8086CPU就用flag的CF位来记录这个进位值。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al.98h&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;执行后(al)=30h，cf=1，cf记录了从最高有效位向更高位的进位值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;执行后(al)=60h，cf=0，cf记录了从更高有效位向更高位的进位值
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">97&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">98&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;执行后(al)=ffh，cf=1，cf记录了向更高位的借位值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">sub&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;执行后(al)=0，cf=0，cf记录了向更高位的借位值
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="115-ofoverflow-flag标志">11.5 OF(overflow flag)标志&lt;/h2>
&lt;ul>
&lt;li>如果运算结果超出了机器所能表达的范围(对于8位有符号数，机器所能表达的范围是-128~127)将产生溢出，对有符号数而言。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01100010&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01100011&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-640b24ec3b1dc4fa?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>1150f_1&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10001000&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11110000&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-4298bfcb6b992695?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>115of2&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">98&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-81cedf4a7b9fd536?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>CFdebug&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">97&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">98&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-bb5c78c64ee153ce?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>114cf2&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CF是对无符号数运算有意义的标志位，而OF是对有符号数运算有意义的标志位；&lt;/strong> CPU用CF位来记录无符号数运算是否产生了进位，用OF位来记录有符号数是否产生了溢出。用SF位来记录结果的符号&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> mov al,98d
add al,99d
;对于无符号数运算，98+99没有进位，CF=0
;对于有符号数运算，98+99发生溢出，OF=1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-112">检测点 11.2&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-9acf5ebaa90d402c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1162/format/webp" alt="">&lt;/p>
&lt;p>检测点11.2&lt;/p>
&lt;h2 id="116-adc指令">11.6 adc指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>adc是带有进位加法指令，利用了CF位上记录的进位值。格式:adc操作对象1，操作对象2，功能：操作对象1=操作对象1+操作对象2+CF。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">adx&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="c">;执行后 (ax)=4，相当于计算(ax)+1+CF=2+1+1+4
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">adc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="c">;执行后(ax)=5，相当于执行(ax)+3+CF=2+3+0=5
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">98&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">adx&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="c">;执行后 (ax)=34H，相当于执行(ax)+3+CF=30H+3+1=34H
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>由adc指令前面的指令决定在执行adc指令的时候加上的CF的值的含义，关键在于所加上的CF的值是被什么指令设置的。如果CF的值是被sub指令设置的，那么它的含义就是借位值；如果是被add指令设置的，那么它的含义就是进位值。加法运算先是低位相加，再高位相加加上低位相加产生的进位值。&lt;/li>
&lt;li>编程：计算1EF000H+201000H,结果存放在AX(高16位)和BX(低16位)中。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">001&lt;/span>&lt;span class="no">EH&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">F000H&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">adc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0020&lt;/span>&lt;span class="no">H&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程：1EF0001000H+2010001EF0H,结果存放在AX(高16位)、BX(次16位)中和cx(低16位)。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">001&lt;/span>&lt;span class="no">EH&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">F000H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="no">EF0H&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">adc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0020&lt;/span>&lt;span class="no">H&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程：对两个128位数据进行相加&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">88&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="no">H&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">add128&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">C00H&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nl">add128:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">di&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>&lt;span class="c">;将CF设置为0
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">adc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="c">;不能用add si,2代替
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="c">;因为会影响cf位
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="c">;而loop和inc不会影响
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">di&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">di&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="117-sbb指令">11.7 sbb指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>sbb是带借位减法指令，利用了CF位上记录的借位值。格式：sbb 操作对象1,操作对象2，功能是：操作对象1=操作对象1-操作对象2-CF。&lt;/strong>&lt;/li>
&lt;li>利用sbb指令我们可以对任意大的数据进行减法运算。sbb和adc是基于同样的思想设计的两条指令，在应用思路上sbb和adc类似。&lt;/li>
&lt;li>编程：计算003E1000H-00202000H，结果放在ax、bx中&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">003&lt;/span>&lt;span class="no">EH&lt;/span>
&lt;span class="nf">sbb&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="no">H&lt;/span>
&lt;span class="nf">sbb&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0020&lt;/span>&lt;span class="no">H&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="118-cmp指令">11.8 cmp指令&lt;/h2>
&lt;ul>
&lt;li>cmp是比较指令，功能上相当于减法指令，只是不保存结果。格式：cmp 操作对象1,操作对象2.功能：计算操作对象1-操作对象2但不保存结果，仅仅是根据计算结果对标志寄存器进行设置。&lt;/li>
&lt;li>cmp指令运算执行后通过做减法将对标志寄存器产生影响，其他相关指令通过识别这些被影响的标志寄存器位来得知比较结果。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">cmp&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="c">;执行后结果为0，ZF=1,PF=1,SF=0,CF=0,OF=0
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="c">;执行后ax、bx的值不变，ZF=0,PF=1,SF=0,CF=0,OF=0
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">cmp&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-a5705fc6d26d1c15?imageMogr2/auto-orient/strip%7CimageView2/2/w/1191/format/webp" alt="">&lt;/p>
&lt;p>118cmp_1&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-5be4231bf1034b6c?imageMogr2/auto-orient/strip%7CimageView2/2/w/592/format/webp" alt="">&lt;/p>
&lt;p>118cmp2&lt;/p>
&lt;ul>
&lt;li>CPU在执行cmp指令时也包含了对无符号数运算和进行有符号数运算，所以利用cmp指令可以对无符号数进行比较也可以对有符号数进行比较。&lt;/li>
&lt;li>&lt;strong>单纯地考察SF的值不可能知道结果的正负。因为SF记录的只是可以在计算机中存放的相应位数的结果的正负&lt;/strong>(例如：add ah， al执行后，SF记录的是ah中的8位二进制信息所表示的数据的正负)。&lt;strong>如果没有溢出发生的话，实际结果的正负和逻辑上真正结果的正负就一致了。&lt;/strong>。例如：22H(34)-0A0H(-96)=130=82H(是-126的补码)，SF=1。
&lt;ul>
&lt;li>&lt;strong>1、如果SF=1或SF=0，OF=0，逻辑上真正结果的正负=实际结果的正负。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>2、如果SF=1或SF=0，OF=1，逻辑上真正结果的负正=实际结果的正负。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="119-检测比较结果的条件转移指令">11.9 检测比较结果的条件转移指令&lt;/h2>
&lt;ul>
&lt;li>与cmp相配使用，根据cmp指令的比较结果(cmp指令执行后相关标志位的值)进行工作的指令。&lt;/li>
&lt;li>cmp指令可以同时进行两种比较，无符号数比较和有符号数比较，所以根据cmp指令的比较结果进行转移的指令也分为两种：
&lt;ul>
&lt;li>根据无符号数的比较结果进行转移的条件转移指令，它们检测ZF、CF的值；&lt;/li>
&lt;li>根据有符号数的比较结果进行转移的条件转移指令，它们检测SF、OF、ZF的值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>它们所检测的标志位都是cmp指令进行无符号数比较时候记录比较结果的标志位。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>指令&lt;/th>
&lt;th>含义&lt;/th>
&lt;th>检测的相关标志位&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>je&lt;/td>
&lt;td>等于则转移&lt;/td>
&lt;td>ZF=1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jne&lt;/td>
&lt;td>不等于则转移&lt;/td>
&lt;td>ZF=0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jb&lt;/td>
&lt;td>低于则转移&lt;/td>
&lt;td>CF=1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jnb&lt;/td>
&lt;td>不低于则转移&lt;/td>
&lt;td>CF=0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ja&lt;/td>
&lt;td>高于则转移&lt;/td>
&lt;td>CF=0 and ZF=0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>jna&lt;/td>
&lt;td>不高于则转移&lt;/td>
&lt;td>CF=1 or ZF=1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>j&lt;/th>
&lt;th>e&lt;/th>
&lt;th>ne&lt;/th>
&lt;th>b&lt;/th>
&lt;th>nb&lt;/th>
&lt;th>a&lt;/th>
&lt;th>na&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>jump&lt;/td>
&lt;td>equal&lt;/td>
&lt;td>not equal&lt;/td>
&lt;td>below&lt;/td>
&lt;td>not below&lt;/td>
&lt;td>above&lt;/td>
&lt;td>not above&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>编程：如果ah的值等于bh则ah的值等于ah的值加ah的值，否则ah的值等于ah的值加上bh的值。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">cmp&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bh&lt;/span>
&lt;span class="nf">je&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;ZF=1则跳转
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bh&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">ok&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bh&lt;/span>
&lt;span class="nl">ok:&lt;/span>&lt;span class="nf">ret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>je检测的是ZF的位置，不管je前面是什么指令，只要CPU执行je指令时，ZF=1那么就发生转移。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">je&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="c">;执行后ax的值等于1，add ax,0使得ZF=1，所以je指令将进行转移。
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="课堂练习">课堂练习&lt;/h2>
&lt;ul>
&lt;li>编程:统计data段中数值为8的字节的个数，用ax保存统计结果。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;方案一
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">63&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">38&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;ds:bx指向第一个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;初始化累加器
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="c">;和8进行比较
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jne&lt;/span> &lt;span class="no">next&lt;/span>&lt;span class="c">;如果不相等转到next，继续循环
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="c">;如果相等就计数值加1
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">next:&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;执行后：(ax)=3
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/br>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;方案二
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">63&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">38&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;ds:bx指向第一个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;初始化累加器
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="c">;和8进行比较
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">je&lt;/span> &lt;span class="no">ok&lt;/span>&lt;span class="c">;如果不相等转到ok，继续循环
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">next&lt;/span>&lt;span class="c">;如果不想等就转到next，继续循环
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">ok:&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="c">;如果相等就计数值加1
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">next:&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;执行后：(ax)=3
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程:统计data段中数值大于8的字节的个数，用ax保存统计结果。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">63&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">38&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;ds:bx指向第一个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;初始化累加器
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="c">;和8进行比较
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jna&lt;/span> &lt;span class="no">next&lt;/span>&lt;span class="c">;如果大于8转到next，继续循环
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">inc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="c">;如果大于就计数值加1
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">next:&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="c">;执行后：(ax)=3
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-113">检测点 11.3&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-51f01d62a37f398a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>检测点11.3&lt;/p>
&lt;h2 id="1110-dfdirection-flag标志和串传送指令">11.10 DF(direction flag)标志和串传送指令&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>flag的第10位是DF，方向标志位，在串处理指令中，控制每次操作后si(一般指向原始偏移地址)、di(一般指向目标偏移地址)的增减。&lt;/strong>
&lt;ul>
&lt;li>DF=0：每次操作后si、di递增；&lt;/li>
&lt;li>DF=1，每次操作后so、di递减。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>movsb(mov string byte)串传送指令，以字节为单位传送。将ds:si指向的内存单元中的字节送入es:di中，然后根据标志寄存器DF位的值将si和di递增1或递减1。movsw，以字为单位传送。将ds:si指向的内存单元中的字送入es:di中，然后根据标志寄存器DF位的值将si和di递增2或递减2。&lt;/strong>&lt;/li>
&lt;li>**movsb和movsw进行的是串传送操作中的一个步骤，一般和rep配合使用，格式：rep movsb，rep的作用是根据cx 的值，重复执行后面的串传送指令。**由于每次执行一次movsb指令si和di都会递增或递减指向后一个单元或前个单元，则rep movsb就可以循环实现(cx)个字符的传送。
&lt;ul>
&lt;li>1、传送的原始位置；&lt;/li>
&lt;li>2、传送的目的位置；&lt;/li>
&lt;li>3、传送的长度；&lt;/li>
&lt;li>4、传送的方向。&lt;/li>
&lt;li>movsb功能：((es)*16+(di))=((ds)*16+(si))，如果DF=0，则(si)=(si)+1,(di)=(di)+1;如果DF=1，则(si)=(si)-1，(di)=(di)-1。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>由于flag的DF位决定着串传送指令执行后，si和di改变的方向，8086CPU提供两条指令对DF位进行设置：
&lt;ul>
&lt;li>cld指令：将标志寄存器的DF位设置为0；&lt;/li>
&lt;li>std指令：将标志寄存器的DF位设置为1。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="1111-pushf和popf">11.11 pushf和popf&lt;/h2>
&lt;ul>
&lt;li>pushf的功能 是件标志寄存器的值压栈，popf是从栈中弹出数据m，送入标志寄存器中。pushf和popf为直接访问标志寄存器提供了一种方法。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;下面的程序执行后ax的值是多少？
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">popf&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">fff0h&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0010&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">pushf&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11000101&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">ah&lt;/span> &lt;span class="mi">00001000&lt;/span>&lt;span class="no">b&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>编程：用串传送指令将data段总的第一个字符串复制到它后面的空间中。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">welcome&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">masm&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;指向data:0
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;指向data:16
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;rep循环16次
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">cld&lt;/span>&lt;span class="c">;设置DF=0，正向传送
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">rep&lt;/span> &lt;span class="no">movsb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-244969b58f1410e4?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>1110&lt;/p>
&lt;ul>
&lt;li>用串传送指令将F00H段中的最后16个字符复制到data段中&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">f00h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">ffffh&lt;/span>&lt;span class="c">;指向f0000:ffff
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;指向data:15
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;rep循环16次
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">std&lt;/span>&lt;span class="c">;设置DF=1，逆向传送
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">rep&lt;/span> &lt;span class="no">movsb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-114">检测点 11.4&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-1585ebbd2027a1dc?imageMogr2/auto-orient/strip%7CimageView2/2/w/843/format/webp" alt="">&lt;/p>
&lt;p>检测点11.4&lt;/p>
&lt;h2 id="1112-标志寄存器在debug中的表示">11.12 标志寄存器在Debug中的表示&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-fc46994e4160a442?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>debugflag&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>标志&lt;/th>
&lt;th>值为1的标记&lt;/th>
&lt;th>值为0的标记&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>OF&lt;/td>
&lt;td>OV&lt;/td>
&lt;td>NV&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SF&lt;/td>
&lt;td>NG&lt;/td>
&lt;td>PL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ZF&lt;/td>
&lt;td>ZR&lt;/td>
&lt;td>NZ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PF&lt;/td>
&lt;td>PE&lt;/td>
&lt;td>PO&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CF&lt;/td>
&lt;td>CY&lt;/td>
&lt;td>NC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DF&lt;/td>
&lt;td>DN&lt;/td>
&lt;td>UP&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="十二内中断">十二、内中断&lt;/h1>
&lt;h2 id="引言-6">引言&lt;/h2>
&lt;ul>
&lt;li>中断时CPU处理外部突发事件的一个重要技术。它能使CPU在运行过程中对外部事件发出的中断请求几时进行处理，处理完成后又立即返回断电，基础进行CPU原来的工作。引起中断的原因或是说发出中断请求的来源叫做中断源。根据中断源的不同，可以把中断分为硬件中断和软件中断两大类，而硬件中断又可以分为外部中断和内部中断两类。&lt;/li>
&lt;li>外部中断一般是指由计算器外部设备发出的中断请求。如：键盘中断、打印机中断、定时器中断等。外部中断时可以屏蔽的中断，业绩是说利用中断控制器可以屏蔽这些外部设备的中断请求。&lt;/li>
&lt;li>内部中断是指因硬件出错(如突然掉电)或运算出错(如除数为0、单步中断)所引起的中断。内部中断是不可屏蔽的。&lt;/li>
&lt;li>软件中断其实并不是真正的中断，它们只是可被调用执行的一般程序以及DOS的系统功能调用(int 21)等都是软件中断。&lt;/li>
&lt;li>中断的优先权：
&lt;ul>
&lt;li>1、除法出错、溢出中断、软件中断；&lt;/li>
&lt;li>2、不可屏蔽中断；&lt;/li>
&lt;li>3、可屏蔽中断；&lt;/li>
&lt;li>4、单步中断。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>中断信息中包含有标识中断源的类型码。根据CPU的设计，中断源类型码的作用就是用来定位中断处理程序。&lt;/li>
&lt;/ul>
&lt;h2 id="121-内中断的产生">12.1 内中断的产生&lt;/h2>
&lt;ul>
&lt;li>8086CPU内部有以下情况发生时将产生相应的中断信息：
&lt;ul>
&lt;li>1、除法错误；&lt;/li>
&lt;li>2、单步执行；&lt;/li>
&lt;li>3、执行into指令；&lt;/li>
&lt;li>4、执行int指令。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>8086CPU中的中断类型码如下：
&lt;ul>
&lt;li>1、除法错误：0&lt;/li>
&lt;li>2、单步执行：1&lt;/li>
&lt;li>3、执行into指令：4&lt;/li>
&lt;li>4、执行int指令，该指令格式为int n，n为立即数是提供给CPU的中断类型码。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="122-中断处理程序">12.2 中断处理程序&lt;/h2>
&lt;ul>
&lt;li>CPU在收到中断信息后立即去执行该中断信息的处理程序。&lt;/li>
&lt;/ul>
&lt;h2 id="123-中断向量表">12.3 中断向量表&lt;/h2>
&lt;ul>
&lt;li>中断向量列表就是中断向量(中断处理程序的入口地址)的列表，其在内存中保存，存放着256个中断源说对应的中断处理程序的入口。8086PC机中断向量表放在内存地址0处。从内存0000:0000到0000:03FF的1024(一个物理地址是由段地址和偏移地址构成，要用4个字节来存放)个单元中存放着中断向量表。&lt;/li>
&lt;li>CPU用8位的中断类型码通过中断向量表找到相应的中断处理程序的入口地址。中断向量表中存放的就是各个类型的处理程序的地址，8位的类型码是个索引。&lt;/li>
&lt;/ul>
&lt;h2 id="124-中断过程">12.4 中断过程&lt;/h2>
&lt;ul>
&lt;li>用中断码在中断向量表中找到中断处理程序的入口地址，用它来设置CS和IP，使CPU执行中断程序。用中断类型码找到中断向量并用它设置CS和IP，这个工作室由CPU的硬件自动完成的，这个工作的过程被称为中断过程。&lt;/li>
&lt;li>8086CPU的中断过程：
&lt;ul>
&lt;li>1、从中断信息中取得中断类型码；&lt;/li>
&lt;li>2、标志寄存器的值入栈，以保护标志位；&lt;/li>
&lt;li>3、设置标志寄存器的第8位TF和第9位IF的值为0；&lt;/li>
&lt;li>4、CS的内容入栈，IP的内容入栈；&lt;/li>
&lt;li>5、从内存地址为中断类型码* 4和中断类型码 *4+2的两个字单元中读取中断处理程序的入口地址设置IP和CS。&lt;/li>
&lt;li>在最后一步完成后，CPU开始执行由程序员编写的中断处理程序。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="125-中断处理程序和iret指令">12.5 中断处理程序和iret指令&lt;/h2>
&lt;ul>
&lt;li>常规的步骤
&lt;ul>
&lt;li>1、保存用到的寄存器；&lt;/li>
&lt;li>2、处理中断；&lt;/li>
&lt;li>3、 恢复用到的寄存器；&lt;/li>
&lt;li>4、 用iret指令返回。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>iret指令的功能为相应的按顺序恢复之前保存起来的IP、CS地址和标志位寄存器。用汇编语法描述为：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">pop&lt;/span> &lt;span class="no">IP&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">CS&lt;/span>
&lt;span class="nf">popf&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="126-除法错误中断的处理">12.6 除法错误中断的处理&lt;/h2>
&lt;ul>
&lt;li>当CPU执行dvi等处罚指令的时候，如果发生了除法溢出错误，将产生中断类型码为0的中断信息，CPU将检测到这个信息然后引发中断过程，转去执行0号中断所对应的中断处理程序。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">codesg&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="no">div&lt;/span> &lt;span class="no">bh&lt;/span>
&lt;span class="nf">codesg&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-5c595ab454cfb14c?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>126&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-624615b341ec92a8?imageMogr2/auto-orient/strip%7CimageView2/2/w/635/format/webp" alt="">&lt;/p>
&lt;p>debug 126&lt;/p>
&lt;h2 id="127-编程处理0号中断">12.7 编程处理0号中断&lt;/h2>
&lt;ul>
&lt;li>改变0号中断处理程序的功能，在屏幕中间显示字然后再返回操作系统。
&lt;ul>
&lt;li>当发生除法溢出时产生0号中断信息，引发中断过程。
&lt;ul>
&lt;li>此时CPU将进行以下工作(中断过程)&lt;/li>
&lt;li>当中断0发生时，CPU将转去执行中断处理程序。&lt;/li>
&lt;li>先进行相关处理，然后向显示缓冲区送字符串，最后返回。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>改变后的中断处理程序应该放在内存中，因为除法溢出随时可能发生，CPU随时都可能将CS:IP指向改变后的中断处理程序的入口执行程序。&lt;/li>
&lt;li>把程序存入内存，修改向量表(即将内存地址登记在中断向量表的对应表项中)，中断时调用这个内存。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>除法溢出对应的中断类型码为0，它的中断处理程序的入口地址应该从0* 4+2地址单元开始存放，段地址存放在0* 4+2字单元中，偏移地址存放在0*4字单元中。也就是改变后的中断处理程序的段地址0存放在0000:0002字单元中，偏移地址200H存放在0000:0000字单元中。如果要显示的字符串在程序的data段中，那么程序执行完成后返回，它所占用的内存空间被系统释放，在其中存放的信息也可能被别的信息覆盖。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">do0&lt;/span>&lt;span class="c">;设置ds:di指向源地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;设置es:si指向目的地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">do0end&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">do0&lt;/span>&lt;span class="c">;设置cx为传输长度，编译器可以识别加减乘除运算符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cld&lt;/span>&lt;span class="c">;设置传输方向为正
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">rep&lt;/span> &lt;span class="no">movsb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;设置中断向量表
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">do0:&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">do0start&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="no">welcome&lt;/span> &lt;span class="no">to&lt;/span> &lt;span class="no">masm&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="c">;在代码段中存储数据
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">do0start&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">202&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;jmp short do0start这条指令栈两个字节
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;显示字符串，设置es:di指向字符串
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>&lt;span class="c">;显存空间，直接显示在显示器上
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">36&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;这只es:di指向显存空间的中间位置
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="c">;设置cx为字符串(welcome to masm！)长度
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">s&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">02&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">do0end:&lt;/span>
&lt;span class="nf">nop&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-0a7f4b12ca469744?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>do0&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-372a3cfef110daa7?imageMogr2/auto-orient/strip%7CimageView2/2/w/654/format/webp" alt="">&lt;/p>
&lt;p>do02&lt;/p>
&lt;h2 id="128-单步中断">12.8 单步中断&lt;/h2>
&lt;ul>
&lt;li>CPU执行完一条指令之后，如果检测到标志寄存器的TF位为1，则产生单步中断引发中断过程。单步中断的中断类型码为1，它所引发的中断过程如下：
&lt;ul>
&lt;li>1、取得中断类型码；&lt;/li>
&lt;li>2、标志寄存器入栈，TF、IF设置为0；&lt;/li>
&lt;li>3、CS、IP入栈；&lt;/li>
&lt;li>4、指向指定类型码的中断向量表。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="129-响应中断的特殊情况">12.9 响应中断的特殊情况&lt;/h2>
&lt;ul>
&lt;li>在有些情况下CPU在执行完当前指令后，即便是发生了中断也不会响应。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>在执行完向ss寄存器传送数据的指令后，即便检测到了中断信号CPU也不会响应。因为ss:sp指向栈顶，对他们的设置应该连续完成。如果在执行完设置ss指令后mCPU响应中断引发中断过程，要在栈中压入标志寄存器、CS和IP的值。而ss改变，sp并未改变则ss:sp指向不是正确的栈顶将引发错误。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>我们要将栈顶设置为1000:0，不应该隔开&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>应该&lt;/th>
&lt;th>不应该&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>mov ax,1000h&lt;/td>
&lt;td>mov ax,1000h&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov ss,ax&lt;/td>
&lt;td>mov ss,ax&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov sp,0&lt;/td>
&lt;td>mov ax,0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov ax,0&lt;/td>
&lt;td>mov sp,0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="十三int-指令">十三、int 指令&lt;/h1>
&lt;h2 id="引言-7">引言&lt;/h2>
&lt;ul>
&lt;li>在第12章中了解中断过程和除法错误中断和单步中断的处理，这章了解int指令。&lt;/li>
&lt;/ul>
&lt;h2 id="131-int-指令">13.1 int 指令&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>int格式：int n，n为中断类型码，它的功能是引发中断过程。CPU执行int n之力量能够，相当引发一个n号的中断过程，可以在程序中使用int指令调用任何一个中断的中断处理程序。执行过程如下：&lt;/p>
&lt;ul>
&lt;li>中断过程从，此处去执行n号中断的中断处理程序。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="c">;执行int 0指令，引发中断过程，执行0号中断处理程序
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-5f5e62dc453468ef?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>131dosbox&lt;/p>
&lt;p>​&lt;/p>
&lt;/li>
&lt;li>
&lt;p>int指令的最终功能和call类似，都是调用一段程序。一般情况下系统将一些具有一定功能的子程序以中断处理程序的方式提供给应用程序调用，也可以自己编写一些中断处理程序供别人使用。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="132-编写供应用程序调用的中断例程">13.2 编写供应用程序调用的中断例程&lt;/h2>
&lt;ul>
&lt;li>中断处理程序简称为中断例程。&lt;/li>
&lt;li>实例1：编写、安装中断7ch的中断例程实现求一word型数据的平方。
&lt;ul>
&lt;li>1、编程实现求平方功能的程序；&lt;/li>
&lt;li>2、安装程序在0:200处；&lt;/li>
&lt;li>3、设置中断向量表将程序的入口地址保存在7ch表项中，使其成为中断7ch的中断例程。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;计算
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">ssume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3456&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">adc&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">dx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;span class="c">;安装程序
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">sqr&lt;/span>&lt;span class="c">;设置ds:si指向源地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;设置es:di指向目的地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">sqrend-&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">sqr&lt;/span>&lt;span class="c">;设置cx为传输长度
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cld&lt;/span>&lt;span class="c">;设置传输方向为正
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">rep&lt;/span> &lt;span class="no">movsb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ws&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">sqr:&lt;/span>
&lt;span class="nf">mul&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">iret&lt;/span>
&lt;span class="nl">sqrend:&lt;/span>
&lt;span class="nf">nop&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>CPU执行int 7ch指令进入中断例程之前，标志寄存器、当前的CS和IP都被压入栈中，在执行完中断例程后，用iret指令恢复int 7ch执行前的标志寄存器和CS和IP的值，从而接着执行应用程序。&lt;/li>
&lt;li>&lt;strong>int指令和iret指令配合使用与call指令和ret指令配合使用具有相似的思路。&lt;/strong>&lt;/li>
&lt;li>实例2：编写、安装中断7ch的中断例程，实现将一个全是字母，以0为结尾的字符串转化为大写。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">conversation&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="no">ch&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="no">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">di&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">capitalend&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">capital&lt;/span>
&lt;span class="nf">cld&lt;/span>
&lt;span class="na">rep&lt;/span> &lt;span class="nf">movsb&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">capital:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nl">change:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ch&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jcxz&lt;/span> &lt;span class="no">ok&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">11011111&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">change&lt;/span>
&lt;span class="nl">ok:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">iret&lt;/span>
&lt;span class="nl">capitalend:&lt;/span>
&lt;span class="nf">nop&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>要注意用到的寄存器冲突。&lt;/li>
&lt;/ul>
&lt;h2 id="133-对intiret和栈的深入理解">13.3 对int、iret和栈的深入理解&lt;/h2>
&lt;ul>
&lt;li>中断处理程序和iret指令&lt;/li>
&lt;li>编程：用7ch中断例程完成loop指令的功能，在屏幕中间显示80个&amp;quot;!&amp;quot;.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>loop指令需要循环次数和到标号的位移。为了模拟loop指令7ch中断例程应具备下面dec cx和如果cx的值不等于0则转移到标号s处。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="p">-&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="m">7&lt;/span>&lt;span class="n">ch引发中断过程后&lt;/span>&lt;span class="err">，进入&lt;/span>&lt;span class="m">7&lt;/span>&lt;span class="n">ch中断例程在中断过程中当前的标志寄存器&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">CS和IP都要压栈&lt;/span>&lt;span class="err">。此时压入的&lt;/span>&lt;span class="n">CS和IP中的内容分别是调用程序的段地址&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">可以认为是标号&lt;/span>&lt;span class="n">s的段地址&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">和&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="m">7&lt;/span>&lt;span class="n">ch后一条指令的偏移地址&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">即标号&lt;/span>&lt;span class="n">se的偏移地址&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">。使用&lt;/span>&lt;span class="n">iret指令用栈中的内容设置CS&lt;/span>&lt;span class="err">、&lt;/span>&lt;span class="n">IP&lt;/span>&lt;span class="err">，从而实现转移到标号&lt;/span>&lt;span class="n">s处&lt;/span>&lt;span class="err">。&lt;/span>
&lt;span class="err">```&lt;/span>&lt;span class="n">asm&lt;/span>
&lt;span class="n">assume&lt;/span> &lt;span class="n">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">code&lt;/span>
&lt;span class="n">code&lt;/span> &lt;span class="n">segment&lt;/span>
&lt;span class="n">start&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="n">b800h&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">显存地址&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ax&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="m">12&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">offset&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">-&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="n">se&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">设置从标号&lt;/span>&lt;span class="n">s的转移位移&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">80&lt;/span>
&lt;span class="n">s&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="kt">byte&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="n">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="n">di&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="sc">&amp;#39;!&amp;#39;&lt;/span>
&lt;span class="k">add&lt;/span> &lt;span class="n">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="m">7&lt;/span>&lt;span class="n">ch&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">如果&lt;/span>&lt;span class="n">cx的值不等于0则转移到标号s处&lt;/span>
&lt;span class="n">se&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">nop&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="n">c00h&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="m">21&lt;/span>&lt;span class="n">h&lt;/span>
&lt;span class="n">code&lt;/span> &lt;span class="n">ends&lt;/span>
&lt;span class="n">end&lt;/span> &lt;span class="n">start&lt;/span>
&lt;span class="p">;&lt;/span>&lt;span class="m">7&lt;/span>&lt;span class="n">ch中断例程&lt;/span>
&lt;span class="n">lp&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">push&lt;/span> &lt;span class="n">bp&lt;/span>
&lt;span class="n">mov&lt;/span> &lt;span class="n">bp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">sp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">dec&lt;/span> &lt;span class="n">cx&lt;/span>
&lt;span class="n">jcxz&lt;/span> &lt;span class="n">lpret&lt;/span>
&lt;span class="k">add&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">bp&lt;/span>&lt;span class="p">+&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="n">bx&lt;/span>
&lt;span class="n">lpret&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">pop&lt;/span> &lt;span class="n">bp&lt;/span>
&lt;span class="n">iret&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">## 13.4 BIOD和DOS所提供的中断例程
- bios中主要包含以下几部分内容：
- 1、硬件操作系统的检测和初始化程序；
- 2、外部中断和内部中断的中断例程；
- 3、用于对硬件设备进行I\O操作的中断例程；
- 4、其他和硬件系统相关的中断例程。
- bios和dos在所提供的中断例程中包含了许多子程序，可以用int指令直接调用。和硬件设备相关的dos中断例程中一般都调用了bios的中断例程
## 13.5 bios和dos中断例程的安装过程
- 1、开机后8086CPU一加电初始化CS和IP，自动执行FFFF:0处指令，转去执行bios中的硬件系统检测和初始化程序。
- 2、初始化程序将建立bios所支持的中断向量，即将biso提供的中断例程的入口地址登记在中断向量表中。
- 3、硬件系统检测和初始化完成后，调用int 19h进行操作系统的引导。从此将计算机交由操作系统控制。
- 4、dos启动后除完成其他工作外，还将它所提供的中断例程装入内存并建立相应的中断向量。
## 13.6 bios中断例程应用
- bios和dos提供的中断例程douyongah来传递内部子程序的编号。
- int 10h中断例程是bios提供的中断例程，其中包含了多个和屏幕输出相关的子程序。int 10h中断例程的设置光标位置功能：
```asm
mov ah,2;表示调用10h号中断例程的2号子程序，功能为设置光标位置
mov bh,0;页号
mov dh,5;行号
mov dl 12;列号
int 10h;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;功能为在光标位置显示字符功能
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="c">;置光标，调用9号子程序
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="c">;字符
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">bl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="c">;颜色属性，和在显存中的属性字节的格式相同
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;第0页
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="c">;字符重复个数
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">int&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="err">​```&lt;/span>
&lt;span class="err">-&lt;/span> &lt;span class="err">编程：在屏幕的第5行12列显示3个红底高亮闪烁绿色的&amp;#39;&lt;/span>&lt;span class="nf">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="err">​```&lt;/span>&lt;span class="nf">asm&lt;/span>
&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="c">;设置光标
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;第0页
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="c">;dh中放行号
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">dl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="c">;dl中放列号
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">int&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="c">;设置光标
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="c">;字符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11001010&lt;/span>&lt;span class="no">b&lt;/span>&lt;span class="c">;颜色属性
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;第0页
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="c">;字符重复个数
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">int&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-51f0b4f968259aec?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>136&lt;/p>
&lt;h2 id="137-dos中断例程应用">13.7 dos中断例程应用&lt;/h2>
&lt;ul>
&lt;li>int 21h 中断例程&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">ch&lt;/span>&lt;span class="c">;程序返回
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c">;返回值0是正常返回
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;合起来写就是 mov ax,4c00h
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>int 2h中断例程还具有在光标位置显示字符串的功能、&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nl">ds:&lt;/span>&lt;span class="nf">dx&lt;/span>&lt;span class="c">;要显示的字符串需要用 $ 作为结束符
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="c">;功能号9，表示在光标位置显示字符串
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h1 id="十四端口">十四、端口&lt;/h1>
&lt;h2 id="引言-8">引言&lt;/h2>
&lt;ul>
&lt;li>CPU可以直接读写3个地方的数据：
&lt;ul>
&lt;li>1、CPU内部的寄存器；&lt;/li>
&lt;li>2、内存单元；&lt;/li>
&lt;li>3、 端口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="141-端口的读写">14.1 端口的读写&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>mov、push、pop等死内存读写指令。in和out是端口读指令写指令时in是从端口读取数据，out是往端口写入数据。in和out指令只能用ax或al来存放从端口中读入的数据或要发送到端口中的数据，访问8位短空时用al，访问16位端口时用ax。&lt;/strong>
&lt;ul>
&lt;li>访问内存：
&lt;ul>
&lt;li>mov ax,ds:[8+0];假设(ds)=0&lt;/li>
&lt;li>执行时，与总线相关的操作：
&lt;ul>
&lt;li>1、CPU通过地址线信息8发出；&lt;/li>
&lt;li>2、CPU通过控制线发出内存读命令，选中存储器芯片并通知它将要从中读取数据；&lt;/li>
&lt;li>3、 存储器将8号单元中的数据通过数据线送入CPU。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>访问端口：
&lt;ul>
&lt;li>in al,60h;从60h号端口读入一个字节。&lt;/li>
&lt;li>执行时与总线相关的操作：
&lt;ul>
&lt;li>1、CPU通过地址线将地址信息60h发出；&lt;/li>
&lt;li>2、CPU通过控制线发出端口读命令，选中端口所在的芯片，并通知它，将要从中读取数据；&lt;/li>
&lt;li>3、端口所在的芯片将60h端口中的数据通过数据线送入CPU。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="c">;对0~255以内的端口进行读写
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">in&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;从20h端口读入一个字节
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">out&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;往20h端口写入一个字节
&lt;/span>&lt;span class="c">;对256~65535的端口进行读写时，端口放在dx中
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="no">f8h&lt;/span>&lt;span class="c">;将端口号3f8h送入dx
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">in&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">dx&lt;/span>&lt;span class="c">;从3f8端口读入一个字节
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="no">out&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="no">f8h&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;往3f8h端口写入一个字节
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="142-cmos-ram芯片">14.2 CMOS RAM芯片&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>CMOA RAM特征：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>1、包含一个实时钟和一个有128个存储单元的RAM存储器。(早期的计算机位64个字节)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2、该芯片靠电池供电。因此关机后其内部的实时钟仍可正常工作，RAM中的信息不会丢失。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>3、128个字节的RAM，内部实时钟占用0~0dh单元来保存时间信息默契与大部分单元用于保存系统配置信息，供系统启动时bios程序读取。&lt;/p>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>bios也提供了相关的程序使用户在开机时配置CMOS RAM中的系统信息。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>4、该芯片内部有两个端口，端口地址为70h和71&lt;br>
h。CPU通过这两个端口读写CMOS RAM。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>5、70h为地址端口，存放要访问的CMOS RAM单元的地址;71h为数据端口，存放从选定的CMOS RAM单元中读取的数据，或要写入到其中的数据。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>CPU对CMOS RAM的读写分两步进行，以读2号单元为例：&lt;/p>
&lt;ul>
&lt;li>1、将2送入端口70h；&lt;/li>
&lt;li>2、从71h读出2号单元的内容。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="143-shl和shr指令">14.3 shl和shr指令&lt;/h2>
&lt;ul>
&lt;li>shl为逻辑左移指令功能为：
&lt;ul>
&lt;li>1、将一个寄存器或内存单元中的数据向左移位；&lt;/li>
&lt;li>2、将&lt;strong>最后移出&lt;/strong>的一位写入CF中；&lt;/li>
&lt;li>3、最低位用0补充。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01001000&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">shl&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="c">;将al中的数据左移一位
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;执行后al的值是10010000b，CF=0
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果移动位数大于1时，必须将移动位数放在cl中。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">01010001&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="nf">shl&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cl&lt;/span>
&lt;span class="c">;执行后al的值为10001000b，cf=0
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>二进制逻辑左移一位，相当于执行x=x*2(2是进制位)&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>mov al,00000001b&lt;/th>
&lt;th>执行后al的值等于00000001b=1&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>shl al,1&lt;/td>
&lt;td>执行后al的值等于00000010b=2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shl al,1&lt;/td>
&lt;td>执行后al的值等于00000100b=4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shl al,1&lt;/td>
&lt;td>执行后al的值等于00001000b=8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov cl,3&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shl al,cl&lt;/td>
&lt;td>执行后al的值等于01000000b=64&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>shr为逻辑左移指令功能为：
&lt;ul>
&lt;li>1、将一个寄存器或内存单元中的数据向右移位；&lt;/li>
&lt;li>2、将&lt;strong>最后移出&lt;/strong>的一位写入CF中；&lt;/li>
&lt;li>3、最高位用0补充。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>二进制逻辑右移一位，相当于执行x=x/2(2是进制位)&lt;/li>
&lt;/ul>
&lt;h2 id="144-cmosram中存储的时间信息">14.4 CMOS　RAM中存储的时间信息&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>在CMOS RAM中以每个信息一字节存放着当前的时间信息：年09h，月08h，日07h，时04h，分02h，秒00h。这些数据以BCD码的方式存放，BCD码以4位为一位。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数值26BCD码表示为0010 0110，用两个BCD码表示两位十进制，高4位表示十位，低4位表示各位。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编程：在屏幕中间显示当前的月份。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="c">;向地址端口70h写入要访问的单元地址，读取CMOS RAM的信息
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nf">out&lt;/span> &lt;span class="mi">70&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">in&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">71&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;从数据端口中取得指定单元中的数据
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;al中为从CMOS RAM的8号端口读出数据
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="nf">shr&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cl&lt;/span>&lt;span class="c">;ah中为月份的十位数码值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00001111&lt;/span>&lt;span class="no">b&lt;/span>&lt;span class="c">;ah中为月份的个位数值码
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;BCD码值+30h(字符&amp;#39;0&amp;#39;)=十进制对应的ASCII码
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">add&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="c">;用BCD码表示的月份以十进制的形式显示到屏幕上。
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>&lt;span class="c">;显存
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ah&lt;/span>&lt;span class="c">;显示月份的十位数码
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>&lt;span class="c">;显示月份的个位数码
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-0b7fb2ed2e7270a6?imageMogr2/auto-orient/strip%7CimageView2/2/w/642/format/webp" alt="">&lt;/p>
&lt;p>144_1&lt;/p>
&lt;h1 id="十五外中断">十五、外中断&lt;/h1>
&lt;h2 id="151接口芯片和端口">15.1接口芯片和端口&lt;/h2>
&lt;ul>
&lt;li>CPU通过端口和外设进行联系。在PC系统的接口卡和主板上，装有各种接口芯片。这些外设接口芯片的内部有若干寄存器，CCPU将这些寄存器当作端口来访问。外设的输入不直接送入内存和CPU，而是送入相关的接口芯片的端口中；CPU向外设的输出也不是直接送入到外设而是先送入端口再由相关的芯片送到外设。&lt;/li>
&lt;/ul>
&lt;h2 id="152外中断信息">15.2外中断信息&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>外中断源有两类：&lt;/p>
&lt;ul>
&lt;li>1、可屏蔽中断；
&lt;ul>
&lt;li>可屏蔽中断时CPU可以不响应的外中断。CPU是否响应可屏蔽中断要看标志寄存器的IF位的设置。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2、不可屏蔽中断&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>当CPU检测到可屏蔽中断信息时：&lt;/p>
&lt;ul>
&lt;li>如果IF=1，则CPU在执行完当前指令后响应中断引发中断过程。&lt;/li>
&lt;li>如果IF=0，着不响应可屏蔽中断。&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/f7434bb2ce09#12420e4b8ade696ade8bf87e7a88b_139">内中断过程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>可屏蔽中断所引发的中断过程，除在第一步的实现上有所不同外，基本上和内中断的中断过程相同。因为可屏蔽中断信息来自于CPU外部，中断类型码是通过数据总线送入CPU的；而内中断的中断类型码是在CPU内部产生的。在中断过程中将IF置0的原因是在进入中断处理程序后禁止其他的可屏蔽中断。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>8086CPU提供的设置IF的指令如下：&lt;/p>
&lt;ul>
&lt;li>sti，设置IF=1；&lt;/li>
&lt;li>cli，设置if=0.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>不可屏蔽中断是CPU必须响应的外中断。当CPU检测到不可屏蔽中断信息时，则在执行完当前指令后立即响应引发中断过程。对于8086CPU不可屏蔽的中断类型码固定为2。所以中断过程中不需要取中断类型码。几乎所有外设引发的外中断都是可屏蔽中断。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不可屏蔽中断过程：&lt;/p>
&lt;ul>
&lt;li>1、标志寄存器入栈，IF=0，TF=0’&lt;/li>
&lt;li>2、CS和IP入栈；&lt;/li>
&lt;li>3、(IP)=(8)，(CS)=(0AH)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="153pc机及键盘的处理过程">15.3PC机及键盘的处理过程&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>键盘输入的处理过程：&lt;/p>
&lt;ul>
&lt;li>1、键盘输入产生扫描码；&lt;/li>
&lt;li>2、扫描码送入60h端口；&lt;/li>
&lt;li>3、引发9号中断；&lt;/li>
&lt;li>4、执行int 9中断例程。&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>前三步由硬件系统自动完成，第四步用户可以修改int 9中断程序。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>按下一个键产生的扫描码称为通码，松开一个键产生的扫描码称为断码。扫描码被送入主板上的相关接口芯片端口地址为60h的寄存器中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>扫描码长度为一个字节，通码的第7位为0，断码的第7位为1。即断码=通码+80h。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-16a6a9fab3b09a6e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="">&lt;/p>
&lt;p>键盘上部分键的扫描码&lt;/p>
&lt;ul>
&lt;li>bios提供了int 9中断例程，用来进行基本键盘输入处理，主要的工作如下：
&lt;ul>
&lt;li>1、读出60h端口中的扫描码；&lt;/li>
&lt;li>2、如果是字符键的扫描码就将它和它所对应的字符码(ASCII码)送入内存中的bios键盘缓冲区；
&lt;ul>
&lt;li>键盘的输入到达60h端口时相关的芯片就会向CPU发出中断类型码为9的可屏蔽中断信息。&lt;/li>
&lt;li>CPU检测到该中断信息后，如果IF=1，则相应中断，引发中断过程，转去执行int 9中断例程。&lt;/li>
&lt;li>如果是控制键(如ctrl)和切换键(如capslock)的扫描码，则将其转变为状态字节(用为进制位记录控制键和切换键状态的字节)写入内存中存储状态字节的单元&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>3、键盘系统进行相关的控制。如向相关芯片发出应答信息。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>bios键盘缓冲区是系统启动后mbios用于存放int 9中断例程所接收的键盘输入的内存区。该内存可以存储15个键盘输入，在bios键盘缓冲区中一个键盘输入用一个字单元存放，高位字节存放扫描码，低位字节存放字符码。0040:17单元存储键盘状态字节该字节记录了控制键和切换键的状态
&lt;ul>
&lt;li>0:置1表表示按下右shift键&lt;/li>
&lt;li>1:置1表表示按下左shift键&lt;/li>
&lt;li>2:置1表表示按下ctrl&lt;/li>
&lt;li>3:置1表表示按下alt&lt;/li>
&lt;li>4:置1表表示按下scroll指示灯亮&lt;/li>
&lt;li>5:置1表表示按下numlock，小键盘输入的是数字&lt;/li>
&lt;li>6:置1表表示按下capslock，输入大写字母&lt;/li>
&lt;li>7:置1表表示按下insert。处于删除状态&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="154编写int-9中断">15.4编写int 9中断&lt;/h2>
&lt;ul>
&lt;li>键盘输入的处理过程&lt;/li>
&lt;li>编程：在屏幕中间依次显示让人看清的a~z，按下esc键后改变显示的颜色。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;显示字符
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ah&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">z&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">jna&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/br>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;延迟显示字符
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">128&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">128&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ah&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">delay&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ah&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">z&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">jna&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">delay:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;循环100次，延迟的时间和CPU的计算能力成反比
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s1:&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">sbb&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jne&lt;/span> &lt;span class="no">s1&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jne&lt;/span> &lt;span class="no">s1&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/br>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="c">;实现IF=0，TF=0步骤
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="nf">pushf&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11111100&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">popf&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>int指令在执行时CPU进行的工作&lt;/li>
&lt;li>完整程序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;span class="lnt">96
&lt;/span>&lt;span class="lnt">97
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">128&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">128&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;将原来的int9中断例程的入口地址保存
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">int9&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">cs&lt;/span>&lt;span class="c">;在中断向量表中设置新的int 9中断例程的入口地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ah&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">delay&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">ah&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="no">z&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="nf">jna&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;将中断向量表中int9中断例程的入口恢复为原来的地址
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">delay:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;循环100次，延迟的时间和CPU的计算能力成反比
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s1:&lt;/span>
&lt;span class="nf">sub&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">sbb&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jne&lt;/span> &lt;span class="no">s1&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">dx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">jne&lt;/span> &lt;span class="no">s1&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">dx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="c">;新的int 9中断例程
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">int9:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>
&lt;span class="nf">in&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">pushf&lt;/span>
&lt;span class="nf">pushf&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">and&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11111100&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">popf&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;对int指令进行模拟，调用原来的int9中断例程
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="c">;esc键盘扫描码
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jne&lt;/span> &lt;span class="no">int9ret&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;改变颜色
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">int9ret:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">iret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="155安装新的int-9中断例程">15.5安装新的int 9中断例程&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>小甲鱼版(笔者未成功运行)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;span class="lnt">91
&lt;/span>&lt;span class="lnt">92
&lt;/span>&lt;span class="lnt">93
&lt;/span>&lt;span class="lnt">94
&lt;/span>&lt;span class="lnt">95
&lt;/span>&lt;span class="lnt">96
&lt;/span>&lt;span class="lnt">97
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">assume cs:code
stack segment
db 128 dup(0)
stack ends
data segment
dw 0,0
data ends
code segment
start:
mov ax,stack
mov ss,ax
mov sp,128
mov ax,data
mov ds,ax
mov ax,0
mov es,ax
push es:[9*4]
pop ds:[0]
push es:[9*4+2]
pop ds:[2];将原来的int9中断例程的入口地址保存
mov word ptr es:[9*4+2],offset int9
mov es:[9*4+2],cs;在中断向量表中设置新的int 9中断例程的入口地址
mov ax,0b800h
mov es,ax
mov ah,&amp;#39;a&amp;#39;
s:
mov es:[160*12+40*2],ah
call delay
inc ah
cmp ah,&amp;#39;z&amp;#39;
jna s
mov ax,0
mov es,ax
push ds:[0]
pop es:[9*4]
push ds:[2]
pop es:[9*4+2];将中断向量表中int9中断例程的入口恢复为原来的地址
mov ax,4c00h
int 21h
delay:
push ax
push dx
mov dx,10000h;循环100次，延迟的时间和CPU的计算能力成反比
mov ax,0
s1:
sub ax,1
sbb dx,0
cmp ax,0
jne s1
cmp dx,0
jne s1
pop dx
pop ax
ret
;新的int 9中断例程
int9:
push ax
push bx
push es
in al,60h
pushf
pushf
pop bx
and bh,11111100b
push bx
popf
call dword ptr ds:[0];对int指令进行模拟，调用原来的int9中断例程
cmp al,1;esc键盘扫描码
jne int9ret
mov ax,0b800h
mov es,ax
inc byte ptr es:[160*12+40*2+1];改变颜色
int9ret:
pop es
pop bx
pop ax
iret
code ends
end start
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>王爽原版(笔者未成功运行)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">db&lt;/span> &lt;span class="mi">128&lt;/span> &lt;span class="no">dup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">stack&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">stack&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ss&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">sp&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">128&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cs&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ds&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">int9&lt;/span>&lt;span class="c">;设置ds:si指向源地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">di&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">204&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="c">;设置es:di指向目的地址
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">int9end&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="no">offset&lt;/span> &lt;span class="no">int9&lt;/span>&lt;span class="c">;设置cx为传输长度
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">cld&lt;/span>&lt;span class="c">;设置传输方向
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">rep&lt;/span> &lt;span class="no">movsb&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">202&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">cli&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">204&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">word&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">sti&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nl">int9:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>
&lt;span class="nf">in&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">pushf&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">dword&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="no">h&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;当此中断例程执行时(CS)=0
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">cmp&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="no">bh&lt;/span>&lt;span class="c">;f1的扫描码
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">jne&lt;/span> &lt;span class="no">int9ret&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2000&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">byte&lt;/span> &lt;span class="no">ptr&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nl">int9ret:&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">cx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">ax&lt;/span>
&lt;span class="nf">iret&lt;/span>
&lt;span class="nl">int9end:&lt;/span>
&lt;span class="nf">nop&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="第16章-直接定址表">第16章 直接定址表&lt;/h1>
&lt;h2 id="161-描述单元长度的标号">16.1 描述单元长度的标号&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">cod&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">a:&lt;/span>&lt;span class="nf">db&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">b:&lt;/span>&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">a&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">offset&lt;/span> &lt;span class="no">b&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;span class="c">;代码中的 s、start等都是标号，表示了内存的地址
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在code段中使用的标号a，b后面没有：，因此他们可以同时描述内存地址和单元长度的标号&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nf">cod&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">a&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span> &lt;span class="c">;描述了地址code：0，和从这个地址开始以后的内存单元都是直接单元
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">b&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c">;则b是code[8]
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">cx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c">;相当于mov al,cs:0[si]
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="检测点-161">检测点 16.1&lt;/h2>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/1968661-d7443f3d02a0fd2a?imageMogr2/auto-orient/strip%7CimageView2/2/w/829/format/webp" alt="">&lt;/p>
&lt;p>检测点16.1&lt;/p>
&lt;h2 id="162-在其他段中使用数据标号">16.2 在其他段中使用数据标号&lt;/h2>
&lt;ul>
&lt;li>注意：在后面加有：的地址标号只能在代码段中使用，不能在其他段中使用。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">cod&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nl">a:&lt;/span>&lt;span class="nf">db&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nl">b:&lt;/span>&lt;span class="nf">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nl">start:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">data&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">si&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nl">s:&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">si&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">add&lt;/span> &lt;span class="no">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ax&lt;/span>
&lt;span class="nf">inc&lt;/span> &lt;span class="no">si&lt;/span>
&lt;span class="nf">loop&lt;/span> &lt;span class="no">s&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="no">h&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果现在代码段中直接用数据标号访问数据，则需要用伪指令assume将标号所在的段和一个段寄存器联系起来。 我们可以将标号当作数据来定义，此时编译器将标号所表示的地址当作数据的值。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">a&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nf">b&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nf">c&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="no">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="c">;相当于 c dw offset a,offset b
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">data&lt;/span> &lt;span class="no">segment&lt;/span>
&lt;span class="nf">a&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>
&lt;span class="nf">b&lt;/span> &lt;span class="no">dw&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nf">c&lt;/span> &lt;span class="no">dd&lt;/span> &lt;span class="no">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">b&lt;/span>
&lt;span class="c">;相当于 c dw offset a,seg a,offset b,seg b
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="c">;seg操作符，功能是取得某一标号的段地址
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nf">data&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="163-直接定址表">16.3 直接定址表&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>利用表，在两个数据集合之间建立一种映射关系，使我们可以利用查表的方法根据给出的数据得到其在另一集合中对应数据&lt;/p>
&lt;ul>
&lt;li>目的：
&lt;ol>
&lt;li>为了算法的清晰和简洁&lt;/li>
&lt;li>为了加快运算速度&lt;/li>
&lt;li>为了使程序易于扩充&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>小练习，编写子程序，以十六进制的形式在屏幕中间显示给定的byte型数据。小技巧，利用映射关系，0-9数值+30h=对应字符的ascii值，10-15和A到F之间的银色关系是：数值+37h=对应字符的ascii的值&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm"> &lt;span class="nf">assume&lt;/span> &lt;span class="no">cs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="no">code&lt;/span>
&lt;span class="nl">code:&lt;/span>&lt;span class="nf">segment&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">eh&lt;/span>
&lt;span class="nf">call&lt;/span> &lt;span class="no">showbyte&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="no">c00h&lt;/span>
&lt;span class="nf">int&lt;/span> &lt;span class="mi">21&lt;/span>
&lt;span class="c">;子程序，用al传送要显示的数据
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">showbyte:&lt;/span>
&lt;span class="nf">jmp&lt;/span> &lt;span class="no">short&lt;/span> &lt;span class="no">show&lt;/span>
&lt;span class="nf">table&lt;/span> &lt;span class="no">db&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="mi">1023456789&lt;/span>&lt;span class="no">ABCDEF&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="c">;字符表
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nl">show:&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">push&lt;/span> &lt;span class="no">es&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">shr&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">shr&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">shr&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="nf">shr&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="c">;右移4位，ah中得到高4位的值
&lt;/span>&lt;span class="c">&lt;/span> &lt;span class="no">and&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">00001111&lt;/span>&lt;span class="no">b&lt;/span>&lt;span class="c">;al中为低4位
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">ah&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">ah&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;用高4位的值作为相对于table的便宜，取得对应的字符
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bx&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="no">b800h&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">bx&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">ah&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">bh&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">al&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="no">table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="no">bx&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="c">;用低4位的值作为相对于table的偏移，取得对应的字符
&lt;/span>&lt;span class="c">&lt;/span>
&lt;span class="nf">mov&lt;/span> &lt;span class="no">es&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">40&lt;/span>&lt;span class="p">*&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="no">al&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">es&lt;/span>
&lt;span class="nf">pop&lt;/span> &lt;span class="no">bx&lt;/span>
&lt;span class="nf">ret&lt;/span>
&lt;span class="nf">code&lt;/span> &lt;span class="no">ends&lt;/span>
&lt;span class="nf">end&lt;/span> &lt;span class="no">start&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="164-程序入口地址的直接定址表">16.4 程序入口地址的直接定址表&lt;/h2>
&lt;ul>
&lt;li>小练习&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>清屏：将显存中当前屏幕中的支付设为空格；&lt;/li>
&lt;li>设置前景色：设置显存中当前屏幕中处于奇地址的属性字节的第0、1、2位；&lt;/li>
&lt;li>设置背景色：设置显存中当前屏幕中处于奇地址的属性字节的第4、5、6位；&lt;/li>
&lt;li>向上滚动一行：依次将第n+行的内容复制到第n行处，最后一行为空。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">;================================入口函数1=====================================
;入口函数说明;
;用ah传递功能号，0是清屏，1是设置前景色，2是设置背景色，3是向上滚动一行
setscreen:
jmp short set
table dw sub1,sub2,sub3,sub4
set:
push bx
cmp ah,3;判断传递的功能号是否大于3
ja sret
mov bl,ah
mov bh,0
add bx,bx;根据ah中的功能号计算对应子程序的地址在table表中的偏移
call word ptr table[bx];调用对应的子程序
sret;
pop bx
iret
;================================入口函数2=====================================
;入口函数说明;
;用ah传递功能号，0是清屏，1是设置前景色，2是设置背景色，3是向上滚动一行
setscreen:
cmp ah,0
je do1
cmp ah,1
je do2
cmp ah,2
je do3
cmp ah,3
je do4
jmp short sret
do1:
call sub1
jmp short sret
do2:
call sub2
jmp short sret
do3:
call sub3
jmp short sret
do4:
call sub4
jmp short sret
;子功能==========================================================================
;清屏
sub1:
push bx
push cx
push es
mov bx,0b800h
mov es,bx
mov bx,0
mov cx,2000
sub1s:
mov byte ptr es:[bx],&amp;#39;&amp;#39;
add bx,2
loop sub1s
pop es
pop cx
pop bx
ret
;设置前景色
sub2:
push bx
push cx
push es
mov bx,0b800h
mov es,bx
mov bx,1
mov cx,2000
sub2s:
mov byte ptr es:[bx],11111000b
or es:[bx],al
add bx,2
loop sub2s
pop es
pop cx
pop bx
ret
;设置背景色
sub3:
push bx
push cx
push es
mov cl,4
shl al,cl
mov bx,0b800h
mov es,bx
mov bx,1
mov cx,2000
sub3s:
mov byte ptr es:[bx],10001111b
or es:[bx],al
add bx,2
loop sub3s
pop es
pop cx
pop bx
ret
;向上滚动一行
sub4:
push cx
push si
push di
push es
push ds
mov si,0b800h
mov es,si
mov ds,si
mov si,160;ds：si指向第n+行
mov di,0;es：di指向第n行
cld
mov cx,24;共复制24行
sub4s:
push cx
mov cx,160
rep movsb;复制
pop cx
loop sub4s
mov cx,80
mov si,0
sub4s1:
mov byte ptr es:[160*24+si],&amp;#39;&amp;#39;;最后一行清空
add si,2
loop sub4s1
pop ds
pop es
pop di
pop si
pop cx
ret;结束
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>01.最开始的两行代码</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/01.%E6%9C%80%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%A4%E8%A1%8C%E4%BB%A3%E7%A0%81/</link><pubDate>Wed, 03 Jan 2024 21:41:02 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/01.%E6%9C%80%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%A4%E8%A1%8C%E4%BB%A3%E7%A0%81/</guid><description>&lt;h1 id="01最开始的两行代码">01.最开始的两行代码&lt;/h1>
&lt;p>当你按下开机键的那一刻，在主板上提前写死的固件程序 &lt;strong>BIOS&lt;/strong> 会将硬盘中&lt;strong>启动区的 512 字节&lt;/strong>的数据，原封不动复制到&lt;strong>内存中的 0x7c00&lt;/strong> 这个位置，并跳转到那个位置进行执行。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-31-29-f43655cb64b0bf1fb69c39e4cb1756b3.png" alt="图片">&lt;/p>
&lt;p>启动区的定义非常简单，只要硬盘中的 0 盘 0 道 1 扇区的 512 个字节的最后两个字节分别是 &lt;strong>0x55&lt;/strong> 和 &lt;strong>0xaa&lt;/strong>，那么 BIOS 就会认为它是个启动区。&lt;/p>
&lt;p>所以对于我们理解操作系统而言，此时的 BIOS 仅仅就是个代码搬运工，把 512 字节的二进制数据从硬盘搬运到了内存中而已。&lt;strong>所以作为操作系统的开发人员，仅仅需要把操作系统最开始的那段代码，编译并存储在硬盘的 0 盘 0 道 1 扇区即可&lt;/strong>。之后 BIOS 会帮我们把它放到内存里，并且跳过去执行。&lt;/p>
&lt;p>而 Linux-0.11 的最开始的代码，就是这个用汇编语言写的 &lt;strong>bootsect.s&lt;/strong>，位于 &lt;strong>boot&lt;/strong> 文件夹下。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-31-43-3e6ebe90a46a8c82cc76c0d030463d1d.png" alt="图片">&lt;/p>
&lt;p>通过编译，这个 bootsect.s 会被编译成二进制文件，存放在启动区的第一扇区。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-31-50-46209abdfcc176f5aa379101fe570466.png" alt="图片">&lt;/p>
&lt;p>随后就会如刚刚所说，由 BIOS 搬运到内存的 0x7c00 这个位置，而 CPU 也会从这个位置开始，不断往后一条一条语句无脑地执行下去。&lt;/p>
&lt;p>那我们的梦幻之旅，就从这个文件的第一行代码开始啦！&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nf">mov&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="nb">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mh">0x07c0&lt;/span>
&lt;span class="nf">mov&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="nb">ds&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">ax&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>好吧，先连续看两行。&lt;/p>
&lt;p>这段代码是用汇编语言写的，含义是把 0x07c0 这个值复制到 &lt;strong>ax 寄存器&lt;/strong>里，再将 ax 寄存器里的值复制到 &lt;strong>ds 寄存器&lt;/strong>里。那其实这一番折腾的结果就是，让 ds 这个寄存器里的值变成了 0x07c0。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-31-57-088a5c0d86a663c7a22adf82ce615c9f.png" alt="图片">&lt;/p>
&lt;p>ds 是一个 16 位的段寄存器，具体表示数据段寄存器，在内存寻址时充当段基址的作用。啥意思呢？就是当我们之后用汇编语言写一个内存地址时，实际上仅仅是写了偏移地址，比如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nf">mov&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="nb">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mh">0x0001&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实际上相当于&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-nasm" data-lang="nasm">&lt;span class="nf">mov&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="nb">ax&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">ds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mh">0x0001&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ds 是默认加上的，表示在 ds 这个段基址处，往后再偏移 0x0001 单位，将这个位置的内存数据，复制到 ax 寄存器中。&lt;/p>
&lt;p>形象地比喻一下就是，你和朋友商量去哪玩比较好，你说天安门、南锣鼓巷、颐和园等等，实际上都是&lt;strong>偏移地址&lt;/strong>，省略了北京市这个&lt;strong>基址&lt;/strong>。&lt;/p>
&lt;p>当然你完全可以说北京天安门、北京南锣鼓巷这样，每次都加上北京这个前缀。不过如果你事先和朋友说好，以下我说的地方都是北京市里的哈，之后你就不用每次都带着北京市这个词了，是不是很方便？&lt;/p>
&lt;p>那 ds 这个数据段寄存器的作用就是如此，方便了描述一个内存地址时，可以省略一个基址，没什么神奇之处。&lt;/p>
&lt;p>ds : 0x0001&lt;/p>
&lt;p>北京市 : 南锣鼓巷&lt;/p>
&lt;p>再看，这个 ds 被赋值为了 0x07c0，由于 x86 为了让自己在 16 位这个实模式下能访问到 20 位的地址线这个历史因素（不了解这个的就先别纠结为啥了），所以段基址要先左移四位。&lt;strong>那 0x07c0 左移四位就是 0x7c00&lt;/strong>，那这就刚好和这段代码被 BIOS 加载到的内存地址 0x7c00 一样了。&lt;/p>
&lt;p>也就是说，之后再写的代码，里面访问的数据的内存地址，都先默认加上 0x7c00，再去内存中寻址。&lt;/p>
&lt;p>为啥统一加上 0x7c00 这个数呢？这很好解释，BIOS 规定死了把操作系统代码加载到内存 0x7c00，那么里面的各种数据自然就全都被偏移了这么多，所以把数据段寄存器 ds 设置为这个值，方便了以后通过这种基址的方式访问内存里的数据。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2024/01/02-15-32-06-6766eabd20fbbae85e6bae09813ff7e0.png" alt="图片">&lt;/p>
&lt;p>OK，赶紧消化掉前面的知识，那本篇就到此为止，只讲了两行代码，知识量很少，我没骗你吧。&lt;/p>
&lt;p>希望你能做到，对 BIOS 将操作系统代码加载到内存 0x7c00，以及我们通过 mov 指令将默认的数据段寄存器 ds 寄存器的值改为 0x07c0 方便以后的基址寻址方式，这两件事在心里认可，并且没有疑惑，这才方便后面继续进行。&lt;/p></description></item></channel></rss>