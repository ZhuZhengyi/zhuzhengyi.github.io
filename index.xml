<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Justice的小站</title>
    <link>https://justice.bj.cn/</link>
    <description>Recent content on Justice的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 22 May 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://justice.bj.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>堆排序</title>
      <link>https://justice.bj.cn/post/13.algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://justice.bj.cn/post/13.algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/</guid>
      
        <description>&lt;h1 id=&#34;堆排序&#34;&gt;堆排序&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;堆排序是借助于堆这个数据结构来实现排序的一种算法。&lt;/p&gt;
&lt;h3 id=&#34;堆heap的性质&#34;&gt;堆(heap)的性质&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;堆&lt;/strong&gt;是一个&lt;strong&gt;完全二叉树&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;堆的每个非叶子结点值均大于(大顶堆)/小于(小顶堆)其左右子节点值；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;堆的&lt;strong&gt;根节点&lt;/strong&gt;为所有节点中的最大值(大顶堆)/最小值(小顶堆)；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2021/05/22-20-35-03-2021-05-22-20-34-57-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;堆排序-1&#34;&gt;堆排序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;堆排序利用堆节点的性质 2，每次从堆中排出堆顶元素，从而最终得到有序的序列；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于堆是一个完全二叉树，所以可以用数组来组织；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于完全二叉树性质，数组中根节点索引($i_o$)和其左右子节点($i_l,i_r$)满足如下关系：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
i_l = 2 * i_o + 1 \&lt;br&gt;
i_r = 2 * i_o + 2
$$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/v2-b7907d351809293c60658b0b87053c66_b.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;复杂性分析&#34;&gt;复杂性分析&lt;/h2&gt;
&lt;h3 id=&#34;时间复杂度&#34;&gt;时间复杂度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Avg: $O(nlogn)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Max: $O(n^2)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Min: $O(n)$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;空间复杂度&#34;&gt;空间复杂度&lt;/h3&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;heap_sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_heap_adjust&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;        堆调整, 将nums数组从start开始,长度为length的数组调整为堆
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;right&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;_heap_adjust&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;#初始化堆&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_heap_adjust&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# 循环取出堆顶元素, 放到数组尾部, 并调整堆&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_heap_adjust&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>排序算法总结</title>
      <link>https://justice.bj.cn/post/13.algorithm/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://justice.bj.cn/post/13.algorithm/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      
        <description>&lt;h1 id=&#34;排序算法总结&#34;&gt;排序算法总结&lt;/h1&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;排序是最基础算法之一。&lt;/p&gt;
&lt;h3 id=&#34;分类&#34;&gt;分类&lt;/h3&gt;
&lt;p&gt;十种常见排序算法可以分为两大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;比较类排序&lt;/strong&gt;：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破$O(nlogn)$，因此也称为非线性时间比较类排序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非比较类排序&lt;/strong&gt;：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-32-59-849589-20190306165258970-1789860540.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;复杂度&#34;&gt;复杂度&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;排序方法&lt;/th&gt;
&lt;th&gt;时间复杂度(Avg)&lt;/th&gt;
&lt;th&gt;时间复杂度(Max)&lt;/th&gt;
&lt;th&gt;时间复杂度(Min)&lt;/th&gt;
&lt;th&gt;空间复杂度&lt;/th&gt;
&lt;th&gt;稳定性&lt;/th&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;冒泡排序&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td&gt;稳定&lt;/td&gt;
&lt;td&gt;比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;插入排序&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td&gt;稳定&lt;/td&gt;
&lt;td&gt;比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;选择排序&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td&gt;不稳定&lt;/td&gt;
&lt;td&gt;比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;希尔排序&lt;/td&gt;
&lt;td&gt;$O(n^{1.3})$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td&gt;不稳定&lt;/td&gt;
&lt;td&gt;比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;归并排序&lt;/td&gt;
&lt;td&gt;$O(nlog{{_2}{n}})$&lt;/td&gt;
&lt;td&gt;$O(nlog{{_2}{n}})$&lt;/td&gt;
&lt;td&gt;$O(nlog{{_2}{n}})$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;稳定&lt;/td&gt;
&lt;td&gt;比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;堆排序&lt;/td&gt;
&lt;td&gt;$O(n{log_2}n)$&lt;/td&gt;
&lt;td&gt;$O(nlog{{_2}{n}})$&lt;/td&gt;
&lt;td&gt;$O(nlog{{_2}{n}})$&lt;/td&gt;
&lt;td&gt;$O(1)$&lt;/td&gt;
&lt;td&gt;不稳定&lt;/td&gt;
&lt;td&gt;比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;快速排序&lt;/td&gt;
&lt;td&gt;$O(n{log_2}n)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(nlog_2n)$&lt;/td&gt;
&lt;td&gt;$O(nlog_2n)$&lt;/td&gt;
&lt;td&gt;不稳定&lt;/td&gt;
&lt;td&gt;比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;基数排序&lt;/td&gt;
&lt;td&gt;$O(n*k)$&lt;/td&gt;
&lt;td&gt;$O(n*k)$&lt;/td&gt;
&lt;td&gt;$O(n*k)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;稳定&lt;/td&gt;
&lt;td&gt;非比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计数排序&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;稳定&lt;/td&gt;
&lt;td&gt;非比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;桶排序&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;$O(n^2)$&lt;/td&gt;
&lt;td&gt;$O(n)$&lt;/td&gt;
&lt;td&gt;$O(n+k)$&lt;/td&gt;
&lt;td&gt;稳定&lt;/td&gt;
&lt;td&gt;非比较&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;相关概念&#34;&gt;相关概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定性&lt;/strong&gt;：如果 a 原本在 b 前面，而 a=b，排序之后 a 仍然在 b 的前面，则为稳定排序，否则未不稳定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间复杂度&lt;/strong&gt;：对排序数据的总的操作次数。反映当 n 变化时，操作次数呈现什么规律。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间复杂度&lt;/strong&gt;： 是指算法在计算机内执行时所需存储空间的度量，它也是数据规模 n 的函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基础比较排序算法&#34;&gt;基础比较排序算法&lt;/h2&gt;
&lt;h3 id=&#34;冒泡排序bubble-sort&#34;&gt;冒泡排序（Bubble Sort）&lt;/h3&gt;
&lt;p&gt;冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。&lt;/p&gt;
&lt;h4 id=&#34;算法描述&#34;&gt;算法描述&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;比较相邻的元素。如果第一个比第二个大，就交换它们两个；&lt;/li&gt;
&lt;li&gt;对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；&lt;/li&gt;
&lt;li&gt;针对所有的元素重复以上的步骤，除了最后一个；&lt;/li&gt;
&lt;li&gt;重复步骤 1~3，直到排序完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;动图演示&#34;&gt;动图演示&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-33-20-849589-20171015223238449-2146169197.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;实现&#34;&gt;实现&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;双向冒泡排序&#34;&gt;双向冒泡排序（）&lt;/h3&gt;
&lt;p&gt;双向冒泡排序（Bidirectional Bubble Sort），又叫鸡尾酒排序。这是冒泡排序的一种变体。不同之处在于，冒泡排序是从低到高比较序列里的每个元素，而鸡尾酒排序从两个方向（低到高、高到低）来回排序，效率更高。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-33-32-640&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;选择排序selection-sort&#34;&gt;选择排序（Selection Sort）&lt;/h3&gt;
&lt;p&gt;选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。&lt;/p&gt;
&lt;h4 id=&#34;描述&#34;&gt;描述&lt;/h4&gt;
&lt;p&gt;n 个记录的直接选择排序可经过 n-1 趟直接选择排序得到有序结果。具体算法描述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始状态：无序区为 R[1..n]，有序区为空；&lt;/li&gt;
&lt;li&gt;第 i 趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为 R[1..i-1]和 R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第 1 个记录 R 交换，使 R[1..i]和 R[i+1..n)分别变为记录个数增加 1 个的新有序区和记录个数减少 1 个的新无序区；&lt;/li&gt;
&lt;li&gt;n-1 趟结束，数组有序化了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;动图演示-1&#34;&gt;动图演示&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-34-51-849589-20171015224719590-1433219824.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;实现-1&#34;&gt;实现&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;算法分析&#34;&gt;算法分析&lt;/h4&gt;
&lt;p&gt;表现最稳定的排序算法之一，因为无论什么数据进去都是$O(^2)$的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。&lt;/p&gt;
&lt;h3 id=&#34;插入排序insertion-sort&#34;&gt;插入排序（Insertion Sort）&lt;/h3&gt;
&lt;p&gt;插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。&lt;/p&gt;
&lt;h4 id=&#34;算法描述-1&#34;&gt;算法描述&lt;/h4&gt;
&lt;p&gt;一般来说，插入排序都采用 in-place 在数组上实现。具体算法描述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从第一个元素开始，该元素可以认为已经被排序；&lt;/li&gt;
&lt;li&gt;取出下一个元素，在已经排序的元素序列中从后向前扫描；&lt;/li&gt;
&lt;li&gt;如果该元素（已排序）大于新元素，将该元素移到下一位置；&lt;/li&gt;
&lt;li&gt;重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；&lt;/li&gt;
&lt;li&gt;将新元素插入到该位置后；&lt;/li&gt;
&lt;li&gt;重复步骤 2~5。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;动图演示-2&#34;&gt;动图演示&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-34-32-849589-20171015225645277-1151100000.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;代码实现&#34;&gt;代码实现&lt;/h4&gt;
&lt;h4 id=&#34;算法分析-1&#34;&gt;算法分析&lt;/h4&gt;
&lt;p&gt;插入排序在实现上，通常采用 in-place 排序（即只需用到 O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。&lt;/p&gt;
&lt;h2 id=&#34;高级比较排序算法&#34;&gt;高级比较排序算法&lt;/h2&gt;
&lt;h3 id=&#34;希尔排序shell-sort&#34;&gt;希尔排序（Shell Sort）&lt;/h3&gt;
&lt;p&gt;1959 年 Shell 发明，第一个突破$O(n^2)$的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫&lt;strong&gt;缩小增量排序&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;算法描述-2&#34;&gt;算法描述&lt;/h4&gt;
&lt;p&gt;先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择一个增量序列 t1，t2，…，tk，其中 ti&amp;gt;tj，tk=1；&lt;/li&gt;
&lt;li&gt;按增量序列个数 k，对序列进行 k 趟排序；&lt;/li&gt;
&lt;li&gt;每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;动图演示-3&#34;&gt;动图演示&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-34-40-849589-20180331170017421-364506073.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;代码实现-1&#34;&gt;代码实现&lt;/h4&gt;
&lt;h4 id=&#34;算法分析-2&#34;&gt;算法分析&lt;/h4&gt;
&lt;p&gt;希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第 4 版）》的合著者 Robert Sedgewick 提出的。&lt;/p&gt;
&lt;h3 id=&#34;归并排序merge-sort&#34;&gt;归并排序（Merge Sort）&lt;/h3&gt;
&lt;p&gt;归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为 2-路归并。&lt;/p&gt;
&lt;h4 id=&#34;算法描述-3&#34;&gt;算法描述&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;把长度为 n 的输入序列分成两个长度为 n/2 的子序列；&lt;/li&gt;
&lt;li&gt;对这两个子序列分别采用归并排序；&lt;/li&gt;
&lt;li&gt;将两个排序好的子序列合并成一个最终的排序序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;动图演示-4&#34;&gt;动图演示&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-34-22-849589-20171015230557043-37375010.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;代码实现-2&#34;&gt;代码实现&lt;/h4&gt;
&lt;h4 id=&#34;算法分析-3&#34;&gt;算法分析&lt;/h4&gt;
&lt;p&gt;归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn）的时间复杂度。代价是需要额外的内存空间。&lt;/p&gt;
&lt;h3 id=&#34;快速排序quick-sort&#34;&gt;快速排序（Quick Sort）&lt;/h3&gt;
&lt;p&gt;快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。&lt;/p&gt;
&lt;h4 id=&#34;算法描述-4&#34;&gt;算法描述&lt;/h4&gt;
&lt;p&gt;快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从数列中挑出一个元素，称为 “基准”（pivot）；&lt;/li&gt;
&lt;li&gt;重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；&lt;/li&gt;
&lt;li&gt;递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;62-动图演示&#34;&gt;6.2 动图演示&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-33-40-849589-20171015230936371-1413523412.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;代码实现-3&#34;&gt;代码实现&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;堆排序heap-sort&#34;&gt;堆排序（Heap Sort）&lt;/h3&gt;
&lt;p&gt;堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。&lt;/p&gt;
&lt;h4 id=&#34;算法描述-5&#34;&gt;算法描述&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；&lt;/li&gt;
&lt;li&gt;将堆顶元素 R[1]与最后一个元素 R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足 R[1,2…n-1]&amp;lt;=R[n]；&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;72-动图演示&#34;&gt;7.2 动图演示&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-34-14-849589-20171015231308699-356134237.png&#34; alt=&#34;loading-ag-1822&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;代码实现-4&#34;&gt;代码实现&lt;/h4&gt;
&lt;h2 id=&#34;非比较排序&#34;&gt;非比较排序&lt;/h2&gt;
&lt;h3 id=&#34;计数排序counting-sort&#34;&gt;计数排序（Counting Sort）&lt;/h3&gt;
&lt;p&gt;计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。&lt;/p&gt;
&lt;h4 id=&#34;算法描述-6&#34;&gt;算法描述&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;找出待排序的数组中最大和最小的元素；&lt;/li&gt;
&lt;li&gt;统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项；&lt;/li&gt;
&lt;li&gt;对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）；&lt;/li&gt;
&lt;li&gt;反向填充目标数组：将每个元素 i 放在新数组的第 C(i)项，每放一个元素就将 C(i)减去 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;动图演示-5&#34;&gt;动图演示&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-33-57-849589-20171015231740840-6968181.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;代码实现-5&#34;&gt;代码实现&lt;/h4&gt;
&lt;h4 id=&#34;算法分析-4&#34;&gt;算法分析&lt;/h4&gt;
&lt;p&gt;计数排序是一个稳定的排序算法。当输入的元素是 n 个 0 到 k 之间的整数时，时间复杂度是 O(n+k)，空间复杂度也是 O(n+k)，其排序速度快于任何比较排序算法。当 k 不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。&lt;/p&gt;
&lt;h3 id=&#34;桶排序bucket-sort&#34;&gt;桶排序（Bucket Sort）&lt;/h3&gt;
&lt;p&gt;桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。&lt;/p&gt;
&lt;h4 id=&#34;算法描述-7&#34;&gt;算法描述&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;设置一个定量的数组当作空桶；&lt;/li&gt;
&lt;li&gt;遍历输入数据，并且把数据一个一个放到对应的桶里去；&lt;/li&gt;
&lt;li&gt;对每个不是空的桶进行排序；&lt;/li&gt;
&lt;li&gt;从不是空的桶里把排好序的数据拼接起来。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;图片演示&#34;&gt;图片演示&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-33-48-849589-20171015232107090-1920702011.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;代码实现-6&#34;&gt;代码实现&lt;/h4&gt;
&lt;h4 id=&#34;算法分析-5&#34;&gt;算法分析&lt;/h4&gt;
&lt;p&gt;桶排序最好情况下使用线性时间 O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为 O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。&lt;/p&gt;
&lt;h3 id=&#34;基数排序radix-sort&#34;&gt;基数排序（Radix Sort）&lt;/h3&gt;
&lt;p&gt;基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。&lt;/p&gt;
&lt;h4 id=&#34;算法描述-8&#34;&gt;算法描述&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;取得数组中的最大数，并取得位数；&lt;/li&gt;
&lt;li&gt;arr 为原始数组，从最低位开始取每个位组成 radix 数组；&lt;/li&gt;
&lt;li&gt;对 radix 进行计数排序（利用计数排序适用于小范围数的特点）；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;动图演示-6&#34;&gt;动图演示&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-32-46-849589-20171015232453668-1397662527.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;代码实现-7&#34;&gt;代码实现&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;算法分析-6&#34;&gt;算法分析&lt;/h4&gt;
&lt;p&gt;基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要 O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要 O(n)的时间复杂度。假如待排数据可以分为 d 个关键字，则基数排序的时间复杂度将是 O(d*2n) ，当然 d 要远远小于 n，因此基本上还是线性级别的。&lt;/p&gt;
&lt;p&gt;基数排序的空间复杂度为 O(n+k)，其中 k 为桶的数量。一般来说 n&amp;raquo;k，因此额外空间需要大概 n 个左右。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>红黑树</title>
      <link>https://justice.bj.cn/post/12.data_struct/tree/rb-tree/</link>
      <pubDate>Fri, 10 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/tree/rb-tree/</guid>
      
        <description>&lt;h1 id=&#34;红黑树rb-tree&#34;&gt;红黑树(RB-Tree)&lt;/h1&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;红黑树是一种二叉平衡树。&lt;/p&gt;
&lt;h2 id=&#34;性质&#34;&gt;性质&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每个节点要么是黑色，要么是红色。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Root 节点是黑色。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个叶子节点（NIL）是黑色。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个红色结点的两个子结点一定都是黑色。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任意一结点到每个叶子结点的路径都包含数量相同的黑结点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;旋转&#34;&gt;旋转&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;右旋&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/21-09-57-07-rbtree-right-rotate.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左旋&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/21-09-57-29-rbtree-left-rotate.webp&#34; alt=&#34;loading-ag-18088&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/63272157&#34;&gt;https://zhuanlan.zhihu.com/p/63272157&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/92761639&#34;&gt;https://zhuanlan.zhihu.com/p/92761639&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>LSMTree日志结构合并树</title>
      <link>https://justice.bj.cn/post/12.data_struct/tree/lsm-tree/</link>
      <pubDate>Thu, 09 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/tree/lsm-tree/</guid>
      
        <description>&lt;h1 id=&#34;日志结构合并树lsm-tree&#34;&gt;日志结构合并树(LSM-Tree)&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;LSM-Tree&lt;/code&gt;全称Log Structured Merge Tree，是Google在2006年开源其BigTable中引入的一种数据结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一种分层，有序，面向磁盘的数据结构；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其核心思想是充分了利用了磁盘批量的顺序写要远比随机写性能高出很多的特性；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LSM-Tree大大提升了数据的写入能力，却是以牺牲部分读取性能为代价，故此这种结构通常适合于写多读少的场景;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sstable&#34;&gt;SSTable&lt;/h2&gt;
&lt;p&gt;LSM-Tree核心的数据结构是SSTable，全称是Sorted String Table；&lt;/p&gt;
&lt;p&gt;SSTable是一种拥有持久化，有序且不可变的的键值存储结构，它的key和value都是任意的字节数组，并且了提供了按指定key查找和指定范围的key区间迭代遍历的功能。SSTable内部包含了一系列可配置大小的Block块，典型的大小是64KB，关于这些Block块的index存储在SSTable的尾部，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2021/09/04-10-12-38-2021-09-04-10-12-33-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;整体结构&#34;&gt;整体结构&lt;/h2&gt;
&lt;p&gt;LSM-Tree里，SSTable有一份在内存里面，其他的多级在磁盘上，如下图是一份完整的LSM-Tree图示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2021/09/04-10-08-25-2021-09-04-10-08-20-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;写流程&#34;&gt;写流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当收到一个写请求时，会先把该条数据记录在WAL Log里面，用作故障恢复；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当写完WAL Log后，会把该条数据写入内存的SSTable里面（删除是墓碑标记，更新是新记录一条的数据），也称Memtable。注意为了维持有序性在内存里面可以采用红黑树或者跳跃表相关的数据结构；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当Memtable超过一定的大小后，会在内存里面冻结，变成不可变的Memtable，同时为了不阻塞写操作需要新生成一个Memtable继续提供服务；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把内存里面不可变的Memtable给dump到到硬盘上的SSTable层中，此步骤也称为Minor Compaction，这里需要注意在L0层的SSTable是没有进行合并的，所以这里的key range在多个SSTable中可能会出现重叠，在层数大于0层之后的SSTable，不存在重叠key；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当每层的磁盘上的SSTable的体积超过一定的大小或者个数，也会周期的进行合并。此步骤也称为Major Compaction，这个阶段会真正 的清除掉被标记删除掉的数据以及多版本数据的合并，避免浪费空间，注意由于SSTable都是有序的，我们可以直接采用merge sort进行高效合并。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;读流程&#34;&gt;读流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当收到一个读请求的时候，会直接先在内存里面查询，如果查询到就返回；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果没有查询到就会依次下沉，知道把所有的Level层查询一遍得到最终结果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;优化&#34;&gt;优化&lt;/h2&gt;
&lt;h3 id=&#34;压缩&#34;&gt;压缩&lt;/h3&gt;
&lt;p&gt;SSTable 是可以启用压缩功能的，并且这种压缩不是将整个 SSTable 一起压缩，而是根据 locality 将数据分组，每个组分别压缩，这样的好处当读取数据的时候，我们不需要解压缩整个文件而是解压缩部分 Group 就可以读取。&lt;/p&gt;
&lt;h3 id=&#34;缓存&#34;&gt;缓存&lt;/h3&gt;
&lt;p&gt;因为SSTable在写入磁盘后，除了Compaction之外，是不会变化的，所以我可以将Scan的Block进行缓存，从而提高检索的效率&lt;/p&gt;
&lt;h2 id=&#34;索引bloom-filters&#34;&gt;索引，Bloom filters&lt;/h2&gt;
&lt;p&gt;正常情况下，一个读操作是需要读取所有的 SSTable 将结果合并后返回的，但是对于某些 key 而言，有些 SSTable 是根本不包含对应数据的，因此，我们可以对每一个 SSTable 添加 Bloom Filter，因为布隆过滤器在判断一个SSTable不存在某个key的时候，那么就一定不会存在，利用这个特性可以减少不必要的磁盘扫描。&lt;/p&gt;
&lt;h3 id=&#34;合并&#34;&gt;合并&lt;/h3&gt;
&lt;p&gt;这个在前面的写入流程中已经介绍过，通过定期合并瘦身， 可以有效的清除无效数据，缩短读取路径，提高磁盘利用空间。但Compaction操作是非常消耗CPU和磁盘IO的，尤其是在业务高峰期，如果发生了Major Compaction，则会降低整个系统的吞吐量，这也是一些NoSQL数据库，比如Hbase里面常常会禁用Major Compaction，并在凌晨业务低峰期进行合并的原因。&lt;/p&gt;
&lt;h2 id=&#34;lsm-tree-vs-btree&#34;&gt;LSM-Tree vs B+Tree&lt;/h2&gt;
&lt;p&gt;传统关系型数据采用的底层数据结构是B+树，那么同样是面向磁盘存储的数据结构LSM-Tree相比B+树有什么异同之处呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LSM-Tree的设计思路是，将数据拆分为几百M大小的Segments，并是顺序写入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B+Tree则是将数据拆分为固定大小的Block或Page, 一般是4KB大小，和磁盘一个扇区的大小对应，Page是读写的最小单位。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在数据的更新和删除方面，B+Tree可以做到原地更新和删除，这种方式对数据库事务支持更加友好，因为一个key只会出现一个Page页里面，但由于LSM-Tree只能追加写，并且在L0层key的rang会重叠，所以对事务支持较弱，只能在Segment Compaction的时候进行真正地更新和删除。&lt;/p&gt;
&lt;p&gt;因此LSM-Tree的优点是支持高吞吐的写（可认为是O（1）），这个特点在分布式系统上更为看重，当然针对读取普通的LSM-Tree结构，读取是O（N）的复杂度，在使用索引或者缓存优化后的也可以达到O（logN）的复杂度。&lt;/p&gt;
&lt;p&gt;而B+tree的优点是支持高效的读（稳定的OlogN），但是在大规模的写请求下（复杂度O(LogN)），效率会变得比较低，因为随着insert的操作，为了维护B+树结构，节点会不断的分裂和合并。操作磁盘的随机读写概率会变大，故导致性能降低。&lt;/p&gt;
&lt;p&gt;还有一点需要提到的是基于LSM-Tree分层存储能够做到写的高吞吐，带来的副作用是整个系统必须频繁的进行compaction，写入量越大，Compaction的过程越频繁。而compaction是一个compare &amp;amp; merge的过程，非常消耗CPU和存储IO，在高吞吐的写入情形下，大量的compaction操作占用大量系统资源，必然带来整个系统性能断崖式下跌，对应用系统产生巨大影响，当然我们可以禁用自动Major Compaction，在每天系统低峰期定期触发合并，来避免这个问题。&lt;/p&gt;
&lt;p&gt;阿里为了优化这个问题，在X-DB引入了异构硬件设备FPGA来代替CPU完成compaction操作，使系统整体性能维持在高水位并避免抖动，是存储引擎得以服务业务苛刻要求的关键。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1441835&#34;&gt;深入理解什么是LSM-Tree - 云+社区 - 腾讯云&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>BIT-树状数组</title>
      <link>https://justice.bj.cn/post/12.data_struct/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</guid>
      
        <description>&lt;h1 id=&#34;树状数组bit&#34;&gt;树状数组(BIT)&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;树状数组&lt;/strong&gt;或&lt;strong&gt;二元索引树&lt;/strong&gt;（英语：Binary Indexed Tree），又以其发明者命名为 FenwickFenwick 树。最早由 PeterM.FenwickPeterM.Fenwick 于 1994 年以 《A New Data Structure for Cumulative Frequency Tables&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84#cite_note-1&#34;&gt;[1]&lt;/a&gt;》为题发表在 《SOFTWARE PRACTICE AND EXPERIENCE》。其初衷是解决数据压缩里的累积频率（Cumulative Frequency）的计算问题，现多用于高效计算数列的前缀和， 区间和。它可以以 (logn)O(log⁡n) 的时间&lt;strong&gt;得到任意前缀和（区间和）&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;问题引入&#34;&gt;问题引入&lt;/h2&gt;
&lt;p&gt;数组的单点修改&lt;code&gt;update&lt;/code&gt;和区间求和&lt;code&gt;range_sum&lt;/code&gt;问题。&lt;/p&gt;
&lt;p&gt;使用普通数组，&lt;code&gt;update&lt;/code&gt;时间复杂度为$O(1)$,&lt;code&gt;range_sum&lt;/code&gt;时间复杂度为$O(n)$.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/23-10-36-26-2020-11-23-10-34-42-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用前缀和数组，&lt;code&gt;update&lt;/code&gt;时间复杂度为 O(n),&lt;code&gt;range_sum&lt;/code&gt;时间复杂度为$O(1)$.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/23-10-36-52-2020-11-23-10-36-20-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;树状数组是上述方法的一个折中，&lt;code&gt;update&lt;/code&gt;和&lt;code&gt;range_sum&lt;/code&gt;时间复杂度均为$O(log_2n)$。&lt;/p&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;树状数组就是这样一种结构，它巧妙地利用了&lt;strong&gt;二进制&lt;/strong&gt;（实际上，树状数组的英文名 BIT，直译过来就是&lt;strong&gt;二进制下标树&lt;/strong&gt;）。例如 11，转化为二进制数就是$(1011)_2$ ，如果我们要求前 11 项和，可以分别查询 $ ((0000)_2, (1000)_2] $ , $ ( (1000)_2, (1010)_2 ] $, $ ( (1010)_2, (1101)_2 ] $ 的和再相加。这三个区间怎么来的呢？其实就是&lt;strong&gt;不断地去掉二进制数最右边的一个 1&lt;/strong&gt;的过程（如下图）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/23-10-56-37-2020-11-23-10-53-33-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;二进制数最右边的一个 1，连带着它之后的 0 为&lt;code&gt;lowbit(x)&lt;/code&gt;（稍后再来看如何实现）。那么我们用$C_i$维护区间$ (A_i - lowbit(A_i), A_i] $ 的区间和，这样显然查询前 n 项和时需要合并的区间数是少于 $ log_2n $的。树状数组的结构大概像下面这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/23-10-56-30-2020-11-23-10-56-25-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt; 可用如下公式表示：&lt;/p&gt;
&lt;p&gt;$$
C[i] = A[i - 2^k+1] + A[i - 2^k+2] + &amp;hellip; + A[i]
$$&lt;/p&gt;
&lt;p&gt;其中: $k$表示 i 的二进制中从最低位到高位连续零的长度。&lt;/p&gt;
&lt;h2 id=&#34;lowbit&#34;&gt;lowbit&lt;/h2&gt;
&lt;p&gt;一个数的二进制表示中最低的一位&lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lowbit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;优缺点&#34;&gt;优缺点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：修改和查询的复杂度都是$O(logN)$，相比线段树系数要少很多，比传统数组要快，而且容易写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：是遇到复杂的区间问题还是不能解决，功能还是有限。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;p&gt;一般用于解决大部分基于区间上的更新以及求和问题。&lt;/p&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define low(i) ((i)&amp;amp;(-i))
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//单点修改
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//询问区间[1,pos]的权值和
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;range_query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/Last--Whisper/p/13823614.html&#34;&gt;树状数组（BIT）—— 一篇就够了 - Last_Whisper - 博客园&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/93795692&#34;&gt;https://zhuanlan.zhihu.com/p/93795692&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>B树</title>
      <link>https://justice.bj.cn/post/12.data_struct/tree/b-tree/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/tree/b-tree/</guid>
      
        <description>&lt;h1 id=&#34;b-tree&#34;&gt;B-Tree&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;B 树又叫平衡多路查找树。主要应用于数据库，文件等&lt;/p&gt;
&lt;p&gt;一棵 m 阶的 B 树 (m 叉树)的特性如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;树中每个结点最多含有 m 个孩子（m&amp;gt;=2）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除根结点和叶子结点外，其它每个结点至少有[ceil(m / 2)]个孩子（其中 ceil(x)是一个取上限的函数）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若根结点不是叶子结点，则至少有 2 个孩子（特殊情况：没有孩子的根结点，即根结点为叶子结点，整棵树只有一个根节点）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有叶子结点都出现在同一层，叶子结点不包含任何关键字信息(可以看做是外部接点或查询失败的接点，实际上这些结点不存在，指向这些结点的指针都为 null)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个非终端结点中包含有 n 个关键字信息： (P1，K1，P2，K2，P3，&amp;hellip;&amp;hellip;，Kn，Pn+1)。其中：
       a)   Ki (i=1&amp;hellip;n)为关键字，且关键字按顺序升序排序 K(i-1)&amp;lt; Ki。 
       b)   Pi 为指向子树根的接点，且指针 P(i)指向子树种所有结点的关键字均小于 Ki，但都大于 K(i-1)。 
       c)   关键字的个数 n 必须满足： [ceil(m / 2)-1]&amp;lt;= n &amp;lt;= m-1。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/21-09-56-17-2020-04-21-13-16-05-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;来模拟下查找文件 29 的过程：&lt;/p&gt;
&lt;p&gt;(1) 根据根结点指针找到文件目录的根磁盘块 1，将其中的信息导入内存。【磁盘 IO 操作 1 次】&lt;/p&gt;
&lt;p&gt;(2) 此时内存中有两个文件名 17，35 和三个存储其他磁盘页面地址的数据。根据算法我们发现 17&amp;lt;29&amp;lt;35，因此我们找到指针 p2。&lt;/p&gt;
&lt;p&gt;(3) 根据 p2 指针，我们定位到磁盘块 3，并将其中的信息导入内存。【磁盘 IO 操作 2 次】&lt;/p&gt;
&lt;p&gt;(4) 此时内存中有两个文件名 26，30 和三个存储其他磁盘页面地址的数据。根据算法我们发现 26&amp;lt;29&amp;lt;30，因此我们找到指针 p2。&lt;/p&gt;
&lt;p&gt;(5) 根据 p2 指针，我们定位到磁盘块 8，并将其中的信息导入内存。【磁盘 IO 操作 3 次】&lt;/p&gt;
&lt;p&gt;(6) 此时内存中有两个文件名 28，29。根据算法我们查找到文件 29，并定位了该文件内存的磁盘地址。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.02.md&#34;&gt;The-Art-Of-Programming-By-July/03.02.md at master · julycoding/The-Art-Of-Programming-By-July · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Disruptor</title>
      <link>https://justice.bj.cn/post/12.data_struct/%E9%AB%98%E6%95%88%E6%97%A0%E9%94%81%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97disruptor/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/%E9%AB%98%E6%95%88%E6%97%A0%E9%94%81%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97disruptor/</guid>
      
        <description>&lt;h1 id=&#34;disruptor-一种高效无锁内存队列&#34;&gt;Disruptor: 一种高效无锁内存队列&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Disruptor 是 LMAX 公司开源的一个高效的内存无锁队列。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>kafka时间轮算法</title>
      <link>https://justice.bj.cn/post/12.data_struct/%E6%97%B6%E9%97%B4%E8%BD%AE/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/%E6%97%B6%E9%97%B4%E8%BD%AE/</guid>
      
        <description>&lt;h1 id=&#34;kafka-时间轮算法&#34;&gt;Kafka 时间轮算法&lt;/h1&gt;
&lt;p&gt;Kafka中存在一些定时任务(DelayedOperation)，如DelayedFetch、DelayedProduce、DelayedHeartbeat等，在Kafka中，定时任务的添加、轮转、执行、消亡等是通过时间轮来实现的。(时间轮并不是Kafka独有的设计，而是一种通用的实现方式，Netty中也有用到时间轮的方式)&lt;/p&gt;
&lt;h2 id=&#34;1时间轮是什么&#34;&gt;1. 时间轮是什么&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://static001.geekbang.org/infoq/36/36293d8f2a75cd09852f9189092cbe9e.jpeg?x-oss-process=image/resize,p_80/auto-orient,1&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static001.geekbang.org/infoq/cb/cb615fcfbc43cd42a73b65644701d2a2.jpeg?x-oss-process=image/resize,p_80/auto-orient,1&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Kafka时间轮由多个环形数组组成，每个环形数组包含20个时间单位，表示一个时间维度（一轮），如：第一层时间轮，数组中的每个元素代表1ms，一圈就是20ms，当延迟时间大于20ms时，就“进位”到第二层时间轮，第二层中，每“一格”表示20ms，依此类推…&lt;/p&gt;
&lt;p&gt;对于一个延迟任务，大体包含三个过程：进入时间轮、降级和到期执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进入时间轮&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据延迟时间计算对应的时间轮“层次”（如钟表中的“小时级”还是“分钟级”还是“秒级”，实际上是一个不断“升级”的过程，直到找到合适的“层次”）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算在该轮中的位置，并插入该位置（每个bucket是一个双向链表，可能包含多个延迟任务，这也是时间轮提高效率的一大原因，后面会提到）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若该bucket是首次插入，需要将该bucket加入DelayQueue中（DelayQueue的引入是为了解决“空推进”，后面会提到）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://static001.geekbang.org/infoq/7b/7b74698c1815c0f86af8d1820da6b838.jpeg?x-oss-process=image/resize,p_80/auto-orient,1&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;降级&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;当时间“推进”到某个bucket时，说明该bucket中的任务在当前时间轮中的时间已经走完，需要进行“降级”，即进入更小粒度的时间轮中，reinsert的过程和进入时间轮是类似的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://static001.geekbang.org/infoq/d4/d4af2f2054bf00f89bcbf4e36044aa56.jpeg?x-oss-process=image/resize,p_80/auto-orient,1&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;到期执行&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;在reinsert的过程中，若发现已经到期，则执行这些任务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://static001.geekbang.org/infoq/19/19bb4299ca84652634ea5eade9471905.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;整体过程大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static001.geekbang.org/infoq/e9/e901a56d80092cda0bdbb4260ed21a91.jpeg?x-oss-process=image/resize,p_80/auto-orient,1&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2时间的推进&#34;&gt;2. 时间的“推进”&lt;/h2&gt;
&lt;p&gt;一种直观的想法是，像现实中的钟表一样，“一格一格”地走，这样就需要有一个线程一直不停的执行，而大多数情况下，时间轮中的bucket大部分是空的，指针的“推进”就没有实质作用，因此，为了减少这种“空推进”，Kafka引入了DelayQueue，以bucket为单位入队，每当有bucket到期，即queue.poll能拿到结果时，才进行时间的“推进”，减少了 ExpiredOperationReaper 线程空转的开销。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static001.geekbang.org/infoq/5e/5e190488738e81a0ab996eb2c155e54f.jpeg?x-oss-process=image/resize,p_80/auto-orient,1&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3为什么要用时间轮&#34;&gt;3. 为什么要用时间轮&lt;/h2&gt;
&lt;p&gt;用到延迟任务时，比较直接的想法是DelayQueue、ScheduledThreadPoolExecutor 这些，而时间轮相比之下，最大的优势是在时间复杂度上：&lt;/p&gt;
&lt;p&gt;时间复杂度对比：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static001.geekbang.org/infoq/cc/ccc843d13e25a1fec3e375b14e6658ac.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;因此，理论上，当任务较多时，TimingWheel的时间性能优势会更明显&lt;/p&gt;
&lt;p&gt;总结一下Kafka时间轮性能高的几个主要原因：&lt;/p&gt;
&lt;p&gt;（1）时间轮的结构+双向列表bucket，使得插入操作可以达到O(1)的时间复杂度&lt;/p&gt;
&lt;p&gt;（2）Bucket的设计让多个任务“合并”，使得同一个bucket的多次插入只需要在delayQueue中入队一次，同时减少了delayQueue中元素数量，堆的深度也减小，delayqueue的插入和弹出操作开销也更小&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>MassTree</title>
      <link>https://justice.bj.cn/post/12.data_struct/tree/masstree/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/tree/masstree/</guid>
      
        <description>&lt;h1 id=&#34;masstree&#34;&gt;MassTree&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;masstree 来源于 2012 年发表的论文(&lt;a href=&#34;https://pdos.csail.mit.edu/papers/masstree:eurosys12.pdf&#34;&gt;Cache craftiness for fast multicore key-value storage&lt;/a&gt;)，&lt;strong&gt;可以理解为 B+ Tree 和 Radix Tree 的混合体&lt;/strong&gt;，即将键切分成多个部分，每个部分为一个节点；每个节点内部又是一个 B+ Tree，兼顾空间和性能。&lt;/p&gt;
&lt;h2 id=&#34;特点&#34;&gt;特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Masstree 将变长键划分成多个固长部分，每个固长部分可以通过 int 类型表示，而不是 char 类型。由于处理器处理 int 类型比较操作的速度远远快于 char 数组的比较，因此 Masstree 通过 int 类型的比较进一步加速了查找过程。固定长度可以设置为 CPU 缓存行长度，以增加 CPU 缓存效率。&lt;/li&gt;
&lt;li&gt;每个节点是一个 B+ Tree，因此 CPU 在查询的时候可以将节点所代表的 B+ Tree 加载到 CPU 缓存中，以增加 CPU 缓存命中率。&lt;/li&gt;
&lt;li&gt;其并发控制用到了 Read-Copy-Update(RCU)。读不因任何数据更新而阻塞，但更新数据的时候，需要先复制一份副本，在副本上完成修改，再一次性地替换旧数据。因此读不会造成 CPU 缓存无效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结构&#34;&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/14-10-57-34-image-20190528102500578-9312132.png&#34; alt=&#34;image-20190528102500578&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;mass-tree-算法&#34;&gt;&lt;strong&gt;Mass Tree 算法&lt;/strong&gt;&lt;/h2&gt;
&lt;h2 id=&#34;并发策略&#34;&gt;&lt;strong&gt;并发策略&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Mass Tree 的并发策略和 OLFIT Tree 是相似的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fine-grained locking，即节点锁，解决 write-write 竞争，同一时刻只有一个线程可以对当前节点进行写操作&lt;/li&gt;
&lt;li&gt;optimistic concurrency control，即节点  &lt;code&gt;version&lt;/code&gt; (uint32_t)，解决 read-write 竞争，读开始前和读结束后都需要获取当前节点的最新 version，来判断在读过程中当前节点是否发生了写操作（插入或分裂），同时对节点的写操作都需要先修改 version，在插入 key 之前需要设置  &lt;code&gt;inserting&lt;/code&gt;  标记，插入完成之后将 insert 的 vinsert + 1；在分裂之前需要设置  &lt;code&gt;splitting&lt;/code&gt;  标记，分裂完成之后将 split 的 vsplit + 1。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/14-11-00-01-2020-11-14-10-59-56-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;和  &lt;code&gt;permutation&lt;/code&gt;  一样，&lt;code&gt;version&lt;/code&gt;  也被划分成了多个域，除了带有 insert 和 split 信息之外，还包含一个 lock bit，用于加锁；一个 root bit，用于指示否是根节点；一个 border bit，用于指示是否是 border node；一位 deleted 位，用于指示这个节点是否被标记为删除。&lt;/p&gt;
&lt;h2 id=&#34;下降流程&#34;&gt;&lt;strong&gt;下降流程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;对于每次插入，获取，删除操作，都需要从 root（可能是整棵树的根节点，也可能是某棵子树的根节点） 下降到对应的叶节点（border node）。&lt;/p&gt;
&lt;p&gt;首先，在开始读取节点之前，必须获得节点的 stable version（图中橙色方块），即  &lt;code&gt;version&lt;/code&gt;  中的  &lt;code&gt;inserting&lt;/code&gt;  和  &lt;code&gt;splitting&lt;/code&gt;  位都为 0。&lt;/p&gt;
&lt;p&gt;其次，在下降之前，需要获取最新的 root，因为在开始下降前，根节点可能分裂了，导致其发生了改变（图中蓝色方块）。&lt;/p&gt;
&lt;p&gt;最后，如果当前节点已经是叶节点，那么可以返回，否则需要进行下降，读取内部结点根据  &lt;code&gt;key[x, x+8)&lt;/code&gt;(8 字节) 获得下降节点之后，分为 3 种情况处理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;case 1 那行伪代码可以这样用 C 语言表示：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;before&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node_get_stable_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// read node here
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;after&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node_get_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// no need to be stable, just latest version
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;before&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;after&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LOCK_BIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;before&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;after&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// neither insert nor split happened
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;节点在我们读取期间没有发生任何变化，我们可以安全地进行下降；&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;节点发生了变化，而且是分裂，那么我们需要从根节点重新进行下降（内部节点没有相互连接起来，所以不能像 Blink Tree 那样获取右节点）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节点发生了变化，但只是插入，只需要重新对当前节点进行下降&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注意第二个黄色方块，这一行非常关键，如果你细看下的话，它似乎可以挪到 case 1 的 if 语句里面，但实际上不能这样做。因为如果当前节点的孩子节点发生了分裂，但是还没来得及将新节点插入到当前节点，对调这两行代码，可能会导致下降到错误的节点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;插入流程&#34;&gt;&lt;strong&gt;插入流程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;作者只给出了读取伪代码，这里给出插入伪代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/14-11-02-06-2020-11-14-11-01-59-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当我们通过  &lt;code&gt;findborder&lt;/code&gt;  下降到叶节点后，需要对其加锁（图中蓝色方块），但是此时并不能直接将 key 进行插入，当两个写线程同时下降到同一个叶节点时，只有一个线程可以进行写入，所以加锁后需要查看在加锁前是否有其他线程对这个节点进行了写入，如果有的话需要查看是否需要右移，这里的逻辑和 Blink Tree 是一样的。&lt;/p&gt;
&lt;p&gt;当我们成功加锁并且定位到正确的叶节点之后，可以进行写入，结果有 4 种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;插入 key 成功或 key 已经存在；&lt;/li&gt;
&lt;li&gt;需要下降到下一层，同时需要增加索引的偏移；&lt;/li&gt;
&lt;li&gt;存在索引冲突，比如 &amp;ldquo;12345678AA&amp;rdquo; 和 &amp;ldquo;12345678BB&amp;rdquo;，此时需要创建一棵子树，存放 &amp;ldquo;AA&amp;rdquo; 和 &amp;ldquo;BB&amp;rdquo;，同时需要把原来存放 &amp;ldquo;AA&amp;rdquo; 的地方替换成这棵子树的根节点&lt;/li&gt;
&lt;li&gt;节点已满，需要分裂之后再次插入（见下一小节）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;橙色方块在下面删除流程中介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//github.com/UncP/aili&#34;&gt;UncP/aili&lt;/a&gt;，没有实现删除操作；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//github.com/rmind/masstree&#34;&gt;https://github.com/rmind/masstree&lt;/a&gt;，采用了激进生成子树的策略，缺点就是 cache locality 在有些情况下不好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;论文作者的实现：&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//github.com/kohler/masstree-beta&#34;&gt;https://github.com/kohler/masstree-beta&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Trie 和 B+ 两种索引树的结合，使得在下降过程中的重试不需要从整棵树的根节点开始，同时加快拥有相同前缀的 key 的处理速度&lt;/li&gt;
&lt;li&gt;具体的内部结点与外部节点的结构&lt;/li&gt;
&lt;li&gt;fine-grained locking 写以及 lock-free 读&lt;/li&gt;
&lt;li&gt;比较具体的节点删除机制&lt;/li&gt;
&lt;li&gt;较小的节点减少了线程的竞争&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;需要指出的是这个算法不支持性能线性扩展，不过这并不是问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个算法实现起来很有&lt;strong&gt;挑战性&lt;/strong&gt;，个人认为主要有两个方面，第一个是对于&lt;strong&gt;树结构的把握&lt;/strong&gt;，Mass Tree 是 Trie 和 B+ 树的结合。第二个是对于&lt;strong&gt;并发下可见性的理解&lt;/strong&gt;，”先改哪个域后改哪个域“，”谁先可见谁后可见“，”谁何时可见“，“在哪加以及加不加 memory barrier”等等这样的问题需要花很多时间考虑，而且出现 bug 非常难调试。&lt;/p&gt;
&lt;p&gt;Mass Tree 性能比我预想中要好很多，对于均匀分布的 10 字节 key 随机插入，数据量 1000 万，在我的机器上 4 个线程可以到 500 万以上的 tps；对于分布集中的测试数据，可以到 1000 万以上。其实&lt;strong&gt;对于内存索引来说，cache miss 对性能造成的影响有时候是远远大于线程竞争的&lt;/strong&gt;，所以尽管数据分布非常集中（线程竞争更多），仍然可以获得更高的性能。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/papers/masstree:eurosys12.pdf&#34;&gt;https://pdos.csail.mit.edu/papers/masstree:eurosys12.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kohler/masstree-beta&#34;&gt;https://github.com/kohler/masstree-beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/52624601&#34;&gt;https://zhuanlan.zhihu.com/p/52624601&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>MerkleTree</title>
      <link>https://justice.bj.cn/post/12.data_struct/tree/merkle-tree/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/tree/merkle-tree/</guid>
      
        <description>&lt;h1 id=&#34;merkle-tree&#34;&gt;Merkle Tree&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Merkle Tree 是一种 Hash Tree，由 Ralph Merkle 在 1979 年发明。&lt;/p&gt;
&lt;p&gt;Merkle Tree 的每个非叶节点通过其子节点的标记或者值（子节点为叶节点）的哈希值来进行标注，为大型的数据结构提供了高效安全的验证手段。&lt;/p&gt;
&lt;p&gt;Merkle Tree 可以理解为哈希列表和哈希链表的泛化产物。&lt;/p&gt;
&lt;h2 id=&#34;结构&#34;&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/05-20-37-06-2020-12-05-20-34-44-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;特点&#34;&gt;特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MT 是一种树，大多数是二叉树，也可以多叉树；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Merkle Tree 的叶子节点的 value 是数据集合的单元数据或者单元数据 HASH。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非叶子节点的 value 是根据它下面所有的叶子节点值，然后按照 Hash 算法计算而得出的；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数字签名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P2P 网络&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可信计算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IPFS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BitCoin/Ethereum&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/fengzhiwu/p/5524324.html&#34;&gt;Merkle Tree 学习&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>ProtoBuf</title>
      <link>https://justice.bj.cn/post/12.data_struct/protobuf/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/protobuf/</guid>
      
        <description>&lt;h1 id=&#34;protobuf&#34;&gt;ProtoBuf&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;protocol buffers 是一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于（数据）通信协议、数据存储等。&lt;/p&gt;
&lt;h2 id=&#34;特点&#34;&gt;特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;语言无关、平台无关&lt;/strong&gt;。即 ProtoBuf 支持 Java、C++、Python 等多种语言，支持多个平台&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高效&lt;/strong&gt;。即比 XML 更小（3 ~ 10 倍）、更快（20 ~ 100 倍）、更为简单&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展性、兼容性好&lt;/strong&gt;。你可以更新数据结构，而不影响和破坏原有的旧程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编码结构&#34;&gt;编码结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/03-12-46-03-2020-12-03-12-45-56-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建 .proto 文件，定义数据结构&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 例1: 在 xxx.proto 文件中定义 Example1 message
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Example1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;optional&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stringVal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;optional&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bytesVal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;EmbeddedMessage&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int32Val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stringVal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;optional&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EmbeddedMessage&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;embeddedExample1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;repeated&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;repeatedInt32Val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;repeated&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;repeatedStringVal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;protoc 编译 .proto 文件生成读写接口&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ protoc -I&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$SRC_DIR&lt;/span&gt; --cpp_out&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DST_DIR&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$SRC_DIR&lt;/span&gt;/xxx.proto
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;调用接口实现序列化、反序列化以及读写&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Radix Tree</title>
      <link>https://justice.bj.cn/post/12.data_struct/tree/radixtree/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/tree/radixtree/</guid>
      
        <description>&lt;h1 id=&#34;基数树radix-tree&#34;&gt;基数树(Radix Tree)&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Radix tree(也被称为 radix trie，或者 compact prefix tree)是一种空间优化的前缀树(prefix tree)数据结构。&lt;/p&gt;
&lt;p&gt;针对这对这样的稀疏长整型数据查找，能高速且节省空间地完成映射&lt;/p&gt;
&lt;img title=&#34;&#34; src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2021/09/04-10-32-55-2021-09-04-10-32-52-image.png&#34; alt=&#34;&#34; data-align=&#34;left&#34;&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IP 路由；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;倒排索引；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IDR（ID Radix）机制；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux 基数树（radix tree），内存管理；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis Radix tree；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://ivanzz1001.github.io/records/post/data-structure/2018/11/18/ds-radix-tree&#34; title=&#34;数据结构之Radix Tree&#34;&gt;数据结构之 Radix Tree&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://sourcelink.top/2019/09/26/linux-kernel-radix-tree-analysis/&#34;&gt;详解 Linux 内核 Radix 树算法的实现 - 黎棉麒的独立博客&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1597128&#34;&gt;图解 Redis 中的 Radix 树 - 云+社区 - 腾讯云&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>RoaringBitmap</title>
      <link>https://justice.bj.cn/post/12.data_struct/31.roaringbitmap/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/31.roaringbitmap/</guid>
      
        <description>&lt;h1 id=&#34;roaringbitmap高效压缩位图的原理与应用&#34;&gt;RoaringBitmap:高效压缩位图的原理与应用&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;RoaringBitmap（简称为 RBM）是 2016 年由 S. Chambi、D. Lemire、O. Kaser 等人在论文中提出的一种高效位图压缩算法，用于解决稀疏位图空间占用效率问题。&lt;/p&gt;
&lt;h2 id=&#34;主要思想&#34;&gt;主要思想&lt;/h2&gt;
&lt;p&gt;将 32 位无符号整数按照高 16 位分桶，即最多可能有 216=65536 个桶，称为&lt;code&gt;container&lt;/code&gt;。存储数据时，按照数据的高 16 位找到 container（找不到就会新建一个），再将低 16 位放入 container 中。也就是说，一个 RBM 就是很多 container 的集合。如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/195230-7b71d0d9abe6e906.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/998/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中示出了三个 container：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高 16 位为 0000H 的 container，存储有前 1000 个 62 的倍数。&lt;/li&gt;
&lt;li&gt;高 16 位为 0001H 的 container，存储有[216, 216+100)区间内的 100 个数。&lt;/li&gt;
&lt;li&gt;高 16 位为 0002H 的 container，存储有[2×216, 3×216)区间内的所有偶数，共 215 个。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;container 是 RBM 新创造的概念，自然也是提高效率的核心。为了更高效地存储和查询数据，不同情况下会采用不同类型的 container，下面深入讲解一下 container 的细节。&lt;/p&gt;
&lt;h3 id=&#34;container&#34;&gt;Container&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ArrayContainer: 当桶内数据的基数不大于 4096 时，会采用它来存储，其本质上是一个 unsigned short 类型的有序数组。数组初始长度为 4，随着数据的增多会自动扩容（但最大长度就是 4096）。另外还维护有一个计数器，用来实时记录基数。上图中的前两个 container 基数都没超过 4096，所以均为 ArrayContainer。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BitmapContainer: 当桶内数据的基数大于 4096 时，会采用它来存储，其本质就是上一节讲过的普通位图，用长度固定为 1024 的 unsigned long 型数组表示，亦即位图的大小固定为 216 位（8KB）。它同样有一个计数器。上图中的第三个 container 基数远远大于 4096，所以要用 BitmapContainer 存储。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RunContainer: RunContainer 在图中并未示出，初始的 RBM 实现中也没有它，而是在本节开头的第二篇论文中新加入的。它使用可变长度的 unsigned short 数组存储用行程长度编码（RLE）压缩后的数据。举个例子，连续的整数序列&lt;code&gt;11, 12, 13, 14, 15, 27, 28, 29&lt;/code&gt;会被 RLE 压缩为两个二元组&lt;code&gt;11, 4, 27, 2&lt;/code&gt;，表示 11 后面紧跟着 4 个连续递增的值，27 后面跟着 2 个连续递增的值。由此可见，RunContainer 的压缩效果可好可坏。考虑极端情况：如果所有数据都是连续的，那么最终只需要 4 字节；如果所有数据都不连续（比如全是奇数或全是偶数），那么不仅不会压缩，还会膨胀成原来的两倍大。所以，RBM 引入 RunContainer 是作为其他两种 container 的折衷方案。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;来简要看看它们的复杂度和转换方法。&lt;/p&gt;
&lt;h2 id=&#34;时空分析&#34;&gt;时空分析&lt;/h2&gt;
&lt;p&gt;增删改查的时间复杂度方面，BitmapContainer 只涉及到位运算，显然为 O(1)。而 ArrayContainer 和 RunContainer 都需要用二分查找在有序数组中定位元素，故为 O(logN)。&lt;/p&gt;
&lt;p&gt;空间占用（即序列化时写出的字节流长度）方面，BitmapContainer 是恒定为 8192B 的。ArrayContainer 的空间占用与基数（c）有关，为(2 + 2c)B；RunContainer 的则与它存储的连续序列数（r）有关，为(2 + 4r)B。以上节图中的 RBM 为例，它一共存储了 33868 个 unsigned int，只占用了 10396 个字节的空间，可以说是非常高效了。&lt;/p&gt;
&lt;h4 id=&#34;container-的创建与转换&#34;&gt;Container 的创建与转换&lt;/h4&gt;
&lt;p&gt;在创建一个新 container 时，如果只插入一个元素，RBM 默认会用 ArrayContainer 来存储。如果插入的是元素序列的话，则会先根据上面的方法计算 ArrayContainer 和 RunContainer 的空间占用大小，并选择较小的那一种进行存储。&lt;/p&gt;
&lt;p&gt;当 ArrayContainer 的容量超过 4096 后，会自动转成 BitmapContainer 存储。4096 这个阈值很聪明，低于它时 ArrayContainer 比较省空间，高于它时 BitmapContainer 比较省空间。也就是说 ArrayContainer 存储稀疏数据，BitmapContainer 存储稠密数据，可以最大限度地避免内存浪费。&lt;/p&gt;
&lt;p&gt;RBM 还可以通过调用特定的 API（名为 optimize）比较 ArrayContainer/BitmapContainer 与等价的 RunContainer 的内存占用情况，一旦 RunContainer 占用较小，就转换之。也就是说，上图例子中的第二个 ArrayContainer 可以转化为只有一个二元组&lt;code&gt;0, 100&lt;/code&gt;的 RunContainer，占用空间进一步下降到 10200 字节。&lt;/p&gt;
&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;
&lt;p&gt;官方提供了 RBM 的多种语言实现，Java、C/C++、Python、Go、C#等等一应俱全。Java 版本的 GitHub repo 见&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Flemire%2FRoaringBitmap&#34;&gt;这里&lt;/a&gt;。代码比较多，但思路很清晰，看官如果对位运算比较熟悉的话读起来不难，故本文就不再长篇大论地讲源码了。值得注意的几点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个 RBM 做集合操作时，不同种类 container 之间位运算的处理方式，如 ArrayContainer AND BitmapContainer，BitmapContainer OR RunContainer 等；&lt;/li&gt;
&lt;li&gt;对 64 位整数的支持（32 位有时会不够用哈）；&lt;/li&gt;
&lt;li&gt;能够将 RBM 数据写到堆外，即内存映射；&lt;/li&gt;
&lt;li&gt;支持 Kryo 序列化方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RBM 的应用范围极广，下面只简单列举几个有代表性的应用，并给出 reference。&lt;/p&gt;
&lt;h4 id=&#34;lucene&#34;&gt;Lucene&lt;/h4&gt;
&lt;p&gt;为了加速搜索，Lucene 会将常用的查询过滤条件产生的结果集缓存到内存中，方便复用，称为 filter cache。结果集其实就是文档 ID（整形数）的集合。从 Lucene 5 开始，使用了 RBM 优化过的文档 ID 集合 RoaringDocIdSet 作为 filter cache，详情可以参见&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.elastic.co%2Fblog%2Fframe-of-reference-and-roaring-bitmaps&#34;&gt;《Frame of Reference and Roaring Bitmaps》&lt;/a&gt;。该文除了介绍 RBM 外，还介绍了压缩倒排索引的 Frame of Reference（FOR）编码，值得一读。&lt;/p&gt;
&lt;h4 id=&#34;spark&#34;&gt;Spark&lt;/h4&gt;
&lt;p&gt;在 Spark Core 的 MapStatus 组件（用来跟踪 ShuffleMapTask 的输出结果块）中，利用了 RBM 来存储块是否非空的状态。今后会在 Spark 连载里讲到它，所以现在看看&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fapache%2Fspark%2Fblob%2Fmaster%2Fcore%2Fsrc%2Fmain%2Fscala%2Forg%2Fapache%2Fspark%2Fscheduler%2FMapStatus.scala&#34;&gt;该类的源码&lt;/a&gt;就可以了，不难理解。&lt;/p&gt;
&lt;h4 id=&#34;greenplum&#34;&gt;Greenplum&lt;/h4&gt;
&lt;p&gt;我司是 Greenplum 大户，虽然本鶸现在不负责数仓相关的事情了，但是偶尔还是要向 GP 提供一些数据。GP 配合 RoaringBitmap 非常适合做海量用户的近实时画像，每个 RBM 代表一维标签即可，根据标签圈选用户也很方便。GP 原生并未支持 RBM 类型数据，需要安装一个扩展插件，见&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fzeromax007%2Fgpdb-roaringbitmap%3Fspm%3Da2c4e.10696291.0.0.a68919a4RFqCuW&#34;&gt;这里&lt;/a&gt;。关于 GP 与 RBM 的整合与使用，有两篇不错的参考文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fyq.aliyun.com%2Farticles%2F405191&#34;&gt;https://yq.aliyun.com/articles/405191&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://links.jianshu.com/go?to=http%3A%2F%2Fmysql.taobao.org%2Fmonthly%2F2018%2F08%2F09&#34;&gt;http://mysql.taobao.org/monthly/2018/08/09&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;redis&#34;&gt;Redis&lt;/h4&gt;
&lt;p&gt;我们在 Redis 里经常使用位图存储数据（Redis 原生以字符串的形式支持位图），当然也就会遇到稀疏位图浪费存储空间的问题。但要让 Redis 支持 RBM，需要引入专门的 module，项目地址见&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Faviggiano%2Fredis-roaring&#34;&gt;这里&lt;/a&gt;。它的设计思想与 Java 版 RBM 几乎相同，不再废话了。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://roaringbitmap.org/&#34;&gt;https://roaringbitmap.org/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Farxiv.org%2Fpdf%2F1402.6407.pdf&#34;&gt;《Better bitmap performance with Roaring bitmaps》&lt;/a&gt;与&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Farxiv.org%2Fpdf%2F1603.06549.pdf&#34;&gt;《Consistently faster and smaller compressed bitmaps with Roaring》&lt;/a&gt;中提出，&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>TAILQ-双向有尾队列</title>
      <link>https://justice.bj.cn/post/12.data_struct/tailq/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/tailq/</guid>
      
        <description>&lt;h1 id=&#34;tailq-双向有尾队列&#34;&gt;TAILQ: 双向有尾队列&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TAILQ&lt;/strong&gt;(双向有尾队列)是 FreeBSD/linux 内核对双向队列操作的一种抽象，在/usr/include/sys/queue.h 文件中实现各种定义。&lt;/p&gt;
&lt;p&gt;尾队列能实现操作队列需要的各种操作：插入元素，删除元素，遍历队列等。优点是插入元素很快。&lt;/p&gt;
&lt;p&gt;在一些著名的开源库中(如&lt;strong&gt;DPDK&lt;/strong&gt;,&lt;strong&gt;libevent&lt;/strong&gt;)有广泛的应用&lt;/p&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;双向有尾队列有一个表头和表尾，表头指向节点 1 和尾节点&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2021/06/03-10-55-36-2021-06-03-10-55-30-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TAILQ&lt;/strong&gt;队列有&lt;strong&gt;HEAD&lt;/strong&gt;和&lt;strong&gt;ENTRY&lt;/strong&gt;两种基本的数据结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 队列元素
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define TAILQ_ENTRY(type)         \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;struct {                          \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;    struct type *tqe_next;        \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;    struct type **tqe_prev;       \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tailq_entry&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
　　&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
　　&lt;span class=&#34;n&#34;&gt;TAILQ_ENTRY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int_node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 队列头
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define  TAILQ_HEAD(name, type)        \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;struct name {                          \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;    struct type *tqh_first;     &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*队列第一个元素的地址*/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;       \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;    struct type **tqh_last;     &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;       \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STAILQ_HEAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_tailq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;tailq_entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queue_head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意：数据结构中的&lt;strong&gt;filed&lt;/strong&gt;都是&lt;strong&gt;type&lt;/strong&gt;类型的指针(或者是二级指针)，这里的&lt;strong&gt;type&lt;/strong&gt;是用户的队列元素类型，&lt;/p&gt;
&lt;p&gt;将&lt;strong&gt;ENTRY&lt;/strong&gt;结构内嵌到用户的&lt;strong&gt;QUEUE_ITEM&lt;/strong&gt;结构中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;QUEUE_ITEM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;和-linux-list-区别&#34;&gt;和 linux list 区别&lt;/h2&gt;
&lt;p&gt;和&lt;strong&gt;Linux&lt;/strong&gt;中&lt;strong&gt;list&lt;/strong&gt;的组织方式不一样，后者是单纯地将&lt;strong&gt;struct list_head&lt;/strong&gt;作为链表的一个挂接点，并没有用户的信息，具体差别可以看下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/18-12-06-33-2020-11-18-12-04-56-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tailq-队列的操作&#34;&gt;TAILQ 队列的操作&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TAILQ&lt;/strong&gt;提供了多种操作队列的&lt;strong&gt;API&lt;/strong&gt;,比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;n&#34;&gt;TAILQ_HEAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;TAILQ_ENTRY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;TAILQ_EMPTY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;TAILQ_FIRST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;TAILQ_FOREACH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;TAILQ_INIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;TAILQ_INSERT_AFTER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;listelm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;TAILQ_INSERT_BEFORE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listelm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;TAILQ_INSERT_TAIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;tailq队列中为什么tqh_prev和tqh_last要使用二级指针&#34;&gt;*&lt;strong&gt;*TAILQ&lt;/strong&gt;队列中为什么&lt;strong&gt;tqh_prev&lt;/strong&gt;和&lt;strong&gt;tqh_last&lt;/strong&gt;要使用二级指针**&lt;/h3&gt;
&lt;p&gt;要搞清楚这个问题，我们可以考虑如果不使用二级指针会怎么样？ 就像定义成下面这样。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define    FAKE_TAILQ_HEAD(name, type)                        \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;struct name {                                \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;    struct type *tqh_first;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* first element */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;            \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;    struct type *tqh_last;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* last element */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;        \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define FAKE_TAILQ_ENTRY(type)                                            \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;struct {                                                             \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;    struct type *tqe_next;  &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* next element */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;                       \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;    struct type *tqe_prev;  &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*   previous element*/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;        \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/18-12-08-55-2020-11-18-12-08-37-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果我们想要删除队列的任意一个元素，对&lt;strong&gt;FAKE_TAILQ&lt;/strong&gt;，我们需要特殊处理该元素是第一个元素的情况(第一个元素的&lt;strong&gt;tqe_prev&lt;/strong&gt;指针为空)，而&lt;strong&gt;TAILQ&lt;/strong&gt;就没有这个烦恼！&lt;/p&gt;
&lt;p&gt;*&lt;strong&gt;*TAILQ&lt;/strong&gt;队列的遍历性能**&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;中的&lt;strong&gt;list&lt;/strong&gt;只将&lt;strong&gt;struct list_head&lt;/strong&gt;作为用户元素的挂接点，因此在正向遍历链表时，需要使用&lt;strong&gt;container_of&lt;/strong&gt;这类接口才能获取用户的数据，而&lt;strong&gt;TAILQ&lt;/strong&gt;由于&lt;strong&gt;tqe_next&lt;/strong&gt;指针直接指向用户元素的类型，所以理论上，正向遍历&lt;strong&gt;TAILQ&lt;/strong&gt;比&lt;strong&gt;list&lt;/strong&gt;更快.但逆向遍历时,由于&lt;strong&gt;TAILQ&lt;/strong&gt;的取用&lt;strong&gt;prev&lt;/strong&gt;元素的操作比&lt;strong&gt;next&lt;/strong&gt;麻烦的多，因此逆向遍历是比正向慢的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define    TAILQ_PREV(elm, headname, field)                \
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;    (*(((struct headname *)((elm)-&amp;gt;field.tqe_prev))-&amp;gt;tqh_last))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sunxidong.com/260.html&#34;&gt;https://www.sunxidong.com/260.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/fuzidage/p/14482501.html&#34;&gt;TAILQ 队列实现原理 - fuzidage - 博客园&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>分布式哈希表</title>
      <link>https://justice.bj.cn/post/12.data_struct/40.%E5%88%86%E5%B8%83%E5%BC%8F%E5%93%88%E5%B8%8C%E8%A1%A8dht/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/40.%E5%88%86%E5%B8%83%E5%BC%8F%E5%93%88%E5%B8%8C%E8%A1%A8dht/</guid>
      
        <description>&lt;h1 id=&#34;分布式哈希表dht&#34;&gt;分布式哈希表(DHT)&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;分布式哈希表(DHT, Distributed Hash Table)是分布式系统中，用来将一个键（key）的集合分散到所有节点。这里的节点类似哈希表中的存储位置。分布式哈希表通常是为了拥有大量节点的系统，而且系统的节点常常会加入或离开。&lt;/p&gt;
&lt;h2 id=&#34;dht&#34;&gt;DHT&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/12-21-20-49-2020-03-08-15-47-23-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;分布式哈希表的用于发点对点系统(P2P)，像是 Napster、Gnutella、BitTorrent 及 Freenet。这些系统使用分散在互联网上的各项资源以提供文件分享服务，特别在带宽及硬盘存储空间上受益良多。&lt;/p&gt;
&lt;p&gt;这些系统使用不同的方法来解决如何找到拥有某数据的节点的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Napster 使用中央的索引服务器：每个节点加入网络的同时，会将他们所拥有的文件列表发送给服务器，这使得服务器可以进行搜索并将结果回传给进行查询的节点。但中央索引服务器让整个系统易受攻击，且可能造成法律问题；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gnutella 和相似的网络改用大量查询模式（flooding query model）：每次搜索都会把查询消息广播给网络上的所有节点。虽然这个方式能够防止单点故障（single point of failure），但比起 Napster 来说却极没效率；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Freenet 使用了完全分布式的系统，但它建置了一套使用经验法则的基于键的路由方法（key based routing）。在这个方法中，每个文件与一个键相结合，而拥有相似键的文件会倾向被相似的节点构成的集合所保管。于是查询消息就可以根据它所提供的键被路由到该集合，而不需要经过所有的节点。然而，Freenet 并不保证存在网络上的数据在查询时一定会被找到。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分布式哈希表为了达到 Gnutella 与 Freenet 的分散性（decentralization）以及 Napster 的效率与正确结果，使用了较为结构化的基于键的路由方法。不过分布式哈希表也有个 Freenet 有的缺点，就是只能作精确搜索，而不能只提供部分的关键字；但这个功能可以在分布式哈希表的上层实现。&lt;/p&gt;
&lt;p&gt;最初的四项分布式哈希表技术——内容可定址网络（Content addressable network，CAN）、Chord（Chord project）、Pastry（Pastry (DHT)），以及 Tapestry (DHT)（Tapestry (DHT)）皆同时于 2001 年发表。从那时开始，相关的研究便一直十分活跃。在学术领域以外，分布式哈希表技术已经被应用在 BitTorrent 及 CoralCDN（Coral Content Distribution Network）等。&lt;/p&gt;
&lt;p&gt;分布式散列表本质上强调以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;离散性&lt;/strong&gt;：构成系统的节点并没有任何中央式的协调机制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;伸缩性&lt;/strong&gt;：即使有成千上万个节点，系统仍然应该十分有效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容错性&lt;/strong&gt;：即使节点不断地加入、离开或是停止工作，系统仍然必须达到一定的可靠度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要达到以上的目标，有一个关键的技术：任一个节点只需要与系统中的部分节点沟通，当成员改变的时候，只有一部分的工作（例如数据或键的发送，哈希表的改变等）必须要完成。&lt;/p&gt;
&lt;p&gt;分布式散列表的结构可以分成几个主要的组件。其基础是一个抽象的&lt;code&gt;键空间&lt;/code&gt;（keyspace），例如说所有&lt;strong&gt;160&lt;/strong&gt;位长的字符串集合。&lt;code&gt;键空间分区&lt;/code&gt;（keyspace partitioning）将&lt;code&gt;键空间&lt;/code&gt;分区成数个，并指定到在此系统的节点中。而&lt;code&gt;延展网络&lt;/code&gt;则连接这些节点，并让他们能够借由在&lt;code&gt;键空间&lt;/code&gt;内的任一值找到拥有该值的节点。&lt;/p&gt;
&lt;p&gt;假设&lt;code&gt;键空间&lt;/code&gt;是一个 160 位长的字符串集合。为了在分布式散列表中存储一个文件，名称为&lt;code&gt;filename&lt;/code&gt;且内容为&lt;code&gt;data&lt;/code&gt;，我们计算出&lt;code&gt;filename&lt;/code&gt;的 SHA1 散列值——一个 160 位的键&lt;code&gt;k&lt;/code&gt;——并将消息&lt;code&gt;put(k,data)&lt;/code&gt;送给分布式散列表中的任意参与节点。此消息在延展网络中被路由，直到抵达在键空间分区中被指定负责存储关键值&lt;code&gt;k&lt;/code&gt;的节点。而&lt;code&gt;(k,data)&lt;/code&gt;即存储在该节点。其他的节点只需要重新计算&lt;code&gt;filename&lt;/code&gt;的散列值&lt;code&gt;k&lt;/code&gt;，然后提交消息&lt;code&gt;get(k)&lt;/code&gt;给分布式哈希表中的任意参与节点，以此来找与&lt;code&gt;k&lt;/code&gt;相关的数据。此消息也会在延展网络中被路由到负责存储&lt;code&gt;k&lt;/code&gt;的节点。而此节点则会负责传回存储的数据&lt;code&gt;data&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;基本上，就是一种映射 key 和节点的算法以及路由的算法。&lt;/p&gt;
&lt;p&gt;其一为保证任何的路由路径长度必须尽量短，因而请求能快速地被完成；&lt;br&gt;
其二为任一节点的邻近节点数目（又称最大节点度（Degree (graph theory)））必须尽量少，因此维护的花费不会过多。&lt;/p&gt;
&lt;h2 id=&#34;分布式哈希与一致性哈希&#34;&gt;分布式哈希与一致性哈希&lt;/h2&gt;
&lt;p&gt;分布式哈希和一致性哈希有什么区别呢？lintong 的&lt;a href=&#34;https://www.jianshu.com/p/7beeb52376cc&#34;&gt;分布式哈希与一致性哈希&lt;/a&gt;  一文对它做了清晰而简洁的解释。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分布式哈希&lt;/strong&gt;: 将哈希表分散在不同的节点上，并且能提供相应的方法来查找， 比如 DHT 算法；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性哈希&lt;/strong&gt;: 当节点宕机或者扩容的时候，需要重新哈希，一致性哈希实现的 DHT 避免对大量的数据重新哈希, 比如&lt;a href=&#34;https://en.wikipedia.org/wiki/Chord_(peer-to-peer)&#34;&gt;Chord DHT&lt;/a&gt;. 所以一致性哈希是 DHT 的一种实现，避免在节点变化的时候出现的全部重新哈希的现象.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其它的 DHT 的分区实现(Keyspace partitioning)还有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rendezvous hashing&lt;/strong&gt;: 最高随机权重哈希。每个 client 都会获得服务节点相同的指示符&lt;code&gt;{S1, S2, ..., Sn }&lt;/code&gt;， 对于键&lt;code&gt;k&lt;/code&gt;, client 使用相同的哈希函数计算服务节点的权重&lt;code&gt;w1 = h(S1, k), w2 = h(S2, k), ..., wn = h(Sn, k)&lt;/code&gt;，然后总是选择最高权重的节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Locality-preserving hashing&lt;/strong&gt;: 相近的键总是指派给相近的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kademlia-算法&#34;&gt;Kademlia 算法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Kademlia&lt;/strong&gt;是一种通过 DHT 的协议算法，它是由 Petar 和 David 在 2002 年为 P2P 网络而设计的。Kademlia 规定了网络的结构，也规定了通过节点查询进行信息交换的方式。&lt;br&gt;
Kademlia 网络节点之间使用&lt;strong&gt;UDP&lt;/strong&gt;进行通讯。参与通讯的所有节点形成一张虚拟网（或者叫做覆盖网）。这些节点通过一组数字（或称为节点 ID）来进行身份标识。节点 ID 不仅可以用来做身份标识，还可以用来进行值定位（值通常是文件的散列或者关键词）。&lt;/p&gt;
&lt;p&gt;当我们在网络中搜索某些值（即通常搜索存储文件散列或关键词的节点）的时候，Kademlia 算法需要知道与这些值相关的键，然后逐步在网络中开始搜索。每一步都会找到一些节点，这些节点的 ID 与键更为接近，如果有节点直接返回搜索的值或者再也无法找到与键更为接近的节点 ID 的时候搜索便会停止。&lt;/p&gt;
&lt;p&gt;这种搜索值的方法是非常高效的：与其他的分布式哈希表的实现类似，在一个包含 n 个节点的系统的值的搜索中，Kademlia 仅访问&lt;code&gt;O(log(n))&lt;/code&gt;个节点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Kademlia&lt;/code&gt;简称为&lt;code&gt;Kad&lt;/code&gt;,它使用了一个精妙的算法，来计算节点之间的&amp;quot;距离&amp;quot; (这里的距离不是地理空间的距离，而是路由的跳数)，这个算法就是&lt;code&gt;XOR&lt;/code&gt;操作(异或)，因为这个操作和距离的计算类似：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(A ⊕ B) == (B ⊕ A)&lt;/code&gt;: XOR 符合“交换律”，具备对称性。A 和 B 的距离从哪一个节点计算都是相同的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(A ⊕ A) == 0&lt;/code&gt;: 反身性，自己和自己的距离为零。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(A ⊕ B) &amp;gt; 0&lt;/code&gt;: 两个不同的 key 之间的距离必大于零。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(A ⊕ B) + (B ⊕ C) &amp;gt;= (A ⊕ C)&lt;/code&gt;: 三角不等式, A 经过 B 到 C 的距离总是大于 A 直接到 C 的距离。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(精妙啊!是如何想起和距离计算联系在一起的？)&lt;/p&gt;
&lt;p&gt;Kad 使用 160 位的哈希算法（比如 SHA1），完整的 key 用二进制表示有 160 位，这样可以容纳 2160 个节点，可以说是不计其数了。&lt;/p&gt;
&lt;p&gt;Kad 把 key 映射到一个二叉树，每一个 key 都是这个二叉树的&lt;code&gt;叶子&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;映射规则&#34;&gt;&lt;strong&gt;映射规则&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;先把 key 以二进制形式表示，然后从高位到低位依次处理。&lt;/li&gt;
&lt;li&gt;二进制的第 n 个位就对应了二叉树的第 n 层&lt;/li&gt;
&lt;li&gt;如果该位是 1，进入左子树，是 0 则进入右子树（这只是人为约定，反过来处理也可以）&lt;/li&gt;
&lt;li&gt;全部位都处理完后，这个 key 就对应了二叉树上的某个叶子&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二叉树的拆分规则&#34;&gt;&lt;strong&gt;二叉树的拆分规则&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/12-21-21-16-2020-03-08-15-50-47-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;对每一个节点，都可以&lt;strong&gt;按照自己的视角&lt;/strong&gt;对整个二叉树进行拆分成最多 160 个子树。&lt;/p&gt;
&lt;p&gt;拆分的规则是：先从根节点开始，把&lt;strong&gt;不包含&lt;/strong&gt;自己的那个子树拆分出来；然后在剩下的子树再拆分不包含自己的第二层子树；以此类推，直到最后只剩下自己。&lt;/p&gt;
&lt;p&gt;Kad 默认的散列值空间是  &lt;code&gt;m=160&lt;/code&gt;（散列值有 160 bit），因此拆分出来的子树&lt;strong&gt;最多&lt;/strong&gt;有 160 个（考虑到实际的节点数&lt;strong&gt;远远小于&lt;/strong&gt;2160，子树的个数会明显小于 160）。&lt;/p&gt;
&lt;p&gt;对于每一个节点而言，当它以自己的视角完成子树拆分后，会得到 n 个子树；对于每个子树，如果它都能知道里面的一个节点，那么它就可以利用这 n 个节点进行递归路由，从而到达整个二叉树的&lt;strong&gt;任何一个&lt;/strong&gt;节点。&lt;/p&gt;
&lt;h3 id=&#34;拆子树&#34;&gt;&lt;strong&gt;拆子树&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;每个节点在完成子树拆分后，只需要知道每个子树里面的一个节点，就足以实现全遍历。但是考虑到健壮性（节点可能宕机或者退出），光知道&lt;strong&gt;一个&lt;/strong&gt;显然是不够的，需要知道&lt;strong&gt;多个&lt;/strong&gt;才比较保险。&lt;/p&gt;
&lt;p&gt;所以 Kad 论文中给出了一个&lt;code&gt;K-桶（K-bucket）&lt;/code&gt;的概念。也就是说：每个节点在完成子树拆分后，要记录每个子树里面的  &lt;code&gt;K&lt;/code&gt;  个节点。这里所说的  &lt;code&gt;K&lt;/code&gt;  值是一个&lt;strong&gt;系统级&lt;/strong&gt;的常量。由使用 Kad 的软件系统自己设定（比如 BT 下载使用的 Kad 网络，K 设定为 8）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;K 桶&lt;/strong&gt;其实就是&lt;strong&gt;路由表&lt;/strong&gt;。对于某个节点而言，如果&lt;strong&gt;以它自己为视角&lt;/strong&gt;拆分了  &lt;strong&gt;n&lt;/strong&gt;  个子树，那么它就需要维护  &lt;strong&gt;n&lt;/strong&gt;  个路由表，并且每个路由表的&lt;strong&gt;上限&lt;/strong&gt;是 K。&lt;/p&gt;
&lt;p&gt;说 K 只是一个&lt;strong&gt;上限&lt;/strong&gt;，是因为有两种情况使得 K 桶的尺寸会小于 K:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;距离越近的子树就越小。如果整个子树&lt;strong&gt;可能存在的&lt;/strong&gt;节点数小于 K，那么该子树的 K 桶尺寸永远也不可能达到 K。(这是由于 K 桶对应的距离越近，节点数越少)&lt;/li&gt;
&lt;li&gt;有些子树虽然实际上线的节点数超过 K，但是因为种种原因，没有收集到该子树足够多的节点，这也会使得该子树的 K 桶尺寸小于 K。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果选择这 K 个节点呢？&lt;br&gt;
Kademlia 选择把那些长时间在线的节点存入 K 桶，这一方法增长了未来某一时刻有效节点的数量，同时也提供了更为稳定的网络。当某个 K 桶已满，而又发现了相应于该桶的新节点的时候，那么，就首先检查 K 桶中最早访问的节点，假如该节点仍然存活，那么新节点就被安排到一个附属列表中（作为一个替代缓存）.只有当 K 桶中的某个节点停止响应的时候，替代 cache 才被使用。换句话说，新发现的节点只有在老的节点消失后才被使用。&lt;/p&gt;
&lt;h3 id=&#34;kademlia-协议&#34;&gt;&lt;strong&gt;Kademlia 协议&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Kademlia 协议共有四种消息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PING&lt;/strong&gt;消息: 用来测试节点是否仍然在线。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;STORE&lt;/strong&gt;消息: 在某个节点中存储一个键值对。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FIND_NODE&lt;/strong&gt;消息: 消息请求的接收者将返回自己桶中离请求键值最近的 K 个节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FIND_VALUE&lt;/strong&gt;消息: 与 FIND_NODE 一样，不过当请求的接收者存有请求者所请求的键的时候，它将返回相应键的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一个 RPC 消息中都包含一个发起者加入的随机值，这一点确保响应消息在收到的时候能够与前面发送的请求消息匹配。&lt;/p&gt;
&lt;h3 id=&#34;定位节点&#34;&gt;&lt;strong&gt;定位节点&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;节点查询可以异步进行，也可以同时进行，同时查询的数量由 α 表示，一般是 3。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由查询发起者从自己的 k-桶中筛选出若干距离目标 ID 最近的节点，并向这些节点同时发送异步查询请求；&lt;/li&gt;
&lt;li&gt;被查询节点收到请求之后，将从自己的 k-桶中找出自己所知道的距离查询目标 ID 最近的若干个节点，并返回给发起者；&lt;/li&gt;
&lt;li&gt;发起者在收到这些返回信息之后，更新自己的结果列表，再次从自己所有已知的距离目标较近的节点中挑选出若干没有请求过的，并重复步骤 1；&lt;/li&gt;
&lt;li&gt;上述步骤不断重复，直至无法获得比查询者当前已知的 k 个节点更接近目标的活动节点为止。&lt;/li&gt;
&lt;li&gt;在查询过程中，没有及时响应的节点将立即被排除；查询者必须保证最终获得的 k 个最节点都是活动的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;定位资源&#34;&gt;&lt;strong&gt;定位资源&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;通过把资源信息与键进行映射，资源即可进行定位，杂凑表是典型的用来映射的手段。由于以前的 STORE 消息，存储节点将会有对应 STORE 所存储的相关资源的信息。定位资源时，如果一个节点存有相应的资源的值的时候，它就返回该资源，搜索便结束了，除了该点以外，定位资源与定位离键最近的节点的过程相似。&lt;/p&gt;
&lt;p&gt;考虑到节点未必都在线的情况，资源的值被存在多个节点上（节点中的 K 个），并且，为了提供冗余，还有可能在更多的节点上储存值。储存值的节点将定期搜索网络中与储存值所对应的键接近的 K 个节点并且把值复制到这些节点上，这些节点可作为那些下线的节点的补充。另外还有缓存技术。&lt;/p&gt;
&lt;h3 id=&#34;加入网络&#34;&gt;&lt;strong&gt;加入网络&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;新节点 A 必须知道某个引导节点 B，并把它加入到自己相应的 K-桶中&lt;/li&gt;
&lt;li&gt;生成一个随机的节点 ID,直到离开网络，该节点会一直使用该 ID 号&lt;/li&gt;
&lt;li&gt;向 B（A 目前知道的唯一节点）发起一个查询请求（FIND_NODE），请求的 ID 是自己（就是查询自己）&lt;/li&gt;
&lt;li&gt;B 收到该请求之后，会先把 A 的 ID 加入自己的相应的 K-桶中。并且根据 FIND_NODE 请求的约定，B 会找到 K 个最接近 A 的节点，并返回给 A&lt;/li&gt;
&lt;li&gt;A 收到这 K 个节点的 ID 之后，把他们加入自己的 K-桶&lt;/li&gt;
&lt;li&gt;然后 A 会继续向刚刚拿到的这批节点(还未发送过请求的节点)发送查询请求（协议类型 FIND_NODE），如此往复，直至 A 建立了足够详细的路由表。&lt;/li&gt;
&lt;li&gt;这种“自我定位”将使得 Kad 的其他节点（收到请求的节点）能够使用 A 的 ID 填充他们的 K-桶，同时也能够使用那些查询过程的中间节点来填充 A 的 K-桶。这已过程既让 A 获得了详细的路由表，也让其它节点知道了 A 节点的加入&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;kad-在-p2p-网络中的应用&#34;&gt;kad 在 p2p 网络中的应用&lt;/h2&gt;
&lt;p&gt;Kademlia 可在文件分享网络中使用，通过制作 Kademlia 关键字搜索，我们能够在文件分享网络中找到我们需要的文件以供我们下载。由于没有中央服务器存储文件的索引，这部分工作就被平均地分配到所有的客户端中去：&lt;/p&gt;
&lt;p&gt;假如一个节点希望分享某个文件，它先根据文件的内容来处理该文件，通过运算，把文件的内容散列成一组数字，该数字在文件分享网络中可被用来标识文件。这组散列数字必须和节点 ID 有同样的长度，&lt;br&gt;
然后，该节点便在网络中搜索 ID 值与文件的散列值相近的节点，并把它自己的 IP 地址存储在那些搜索到的节点上，也就是说，它把自己作为文件的源进行了发布。正在进行文件搜索的客户端将使用 Kademlia 协议来寻找网络上 ID 值与希望寻找的文件的散列值最近的那个节点，然后取得存储在那个节点上的文件源列表。&lt;br&gt;
由于一个键可以对应很多值，即同一个文件可以有多个源，每一个存储源列表的节点可能有不同的文件的源的信息，这样的话，源列表可以从与键值相近的 K 个节点获得。&lt;/p&gt;
&lt;p&gt;文件的散列值通常可以从其他的一些特别的 Internet 链接的地方获得，或者被包含在从其他某处获得的索引文件中。&lt;br&gt;
文件名的搜索可以使用关键词来实现，文件名可以分割成连续的几个关键词，这些关键词都可以散列并且可以和相应的文件名和文件散列储存在网络中。搜索者可以使用其中的某个关键词，联系 ID 值与关键词散列最近的那个节点，取得包含该关键词的文件列表。由于在文件列表中的文件都有相关的散列值，通过该散列值就可利用上述通常取文件的方法获得要搜索的文件。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%88%86%E6%95%A3%E5%BC%8F%E9%9B%9C%E6%B9%8A%E8%A1%A8&#34;&gt;https://zh.wikipedia.org/wiki/分散式雜湊表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Distributed_hash_table&#34;&gt;https://en.wikipedia.org/wiki/Distributed_hash_table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://baike.baidu.com/item/DHT/1007999&#34;&gt;DHT（一种分布式存储方法）_百度百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/7beeb52376cc&#34;&gt;分布式哈希与一致性哈希 - 简书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://program-think.blogspot.com/2017/09/Introduction-DHT-Kademlia-Chord.html&#34;&gt;https://program-think.blogspot.com/2017/09/Introduction-DHT-Kademlia-Chord.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://colobu.com/2018/03/26/distributed-hash-table/&#34;&gt;https://colobu.com/2018/03/26/distributed-hash-table/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>跳表</title>
      <link>https://justice.bj.cn/post/12.data_struct/20.%E8%B7%B3%E8%A1%A8/</link>
      <pubDate>Tue, 07 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>https://justice.bj.cn/post/12.data_struct/20.%E8%B7%B3%E8%A1%A8/</guid>
      
        <description>&lt;h1 id=&#34;跳表skiplist&#34;&gt;跳表(skiplist)&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;跳表&lt;/code&gt;(SkipList)由 William Pugh 于 1990 年发明。他在 Communications of the ACM June 1990, 33(6) 668-676 上发表了 Skip lists: a probabilistic alternative to balanced trees，在该论文中详细解释了跳表的数据结构和插入删除操作。&lt;/p&gt;
&lt;p&gt;跳表是平衡树的一种替代的数据结构，和红黑树不相同的是，跳表对于树的平衡的实现是基于一种随机化的算法，跳表的插入和删除的工作是比较简单的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/12-21-20-04-2020-03-06-11-41-30-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;核心思想&#34;&gt;核心思想&lt;/h2&gt;
&lt;p&gt;通过对普通有序链表扩充层级指针，实现节点的快速访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/12-21-20-11-image-20190504154638969.png&#34; alt=&#34;image-20190504154638969&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;实现要点&#34;&gt;实现要点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;新增节点通过随机数决定指针的层级；&lt;/li&gt;
&lt;li&gt;通过调节因子决定随机层级，从而控制层级指针的疏密；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;zskiplistNode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// member 对象
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;robj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 分值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 后退指针
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;zskiplistNode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 层
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;zskiplistLevel&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 前进指针
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;zskiplistNode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 这个层跨越的节点数量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;span&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zskiplistNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/xuqiang/archive/2011/05/22/2053516.html&#34;&gt;http://www.cnblogs.com/xuqiang/archive/2011/05/22/2053516.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://redisbook.readthedocs.io/en/latest/internal-datastruct/skiplist.html&#34;&gt;跳跃表 — Redis 设计与实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</guid>
      
        <description>&lt;h1 id=&#34;kademlia算法&#34;&gt;Kademlia算法&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Kademlia算法是一种分布式存储及路由的算法。&lt;/p&gt;
&lt;p&gt;什么是分布式存储？试想一下，一所1000人的学校，现在学校突然决定拆掉图书馆（不设立中心化的服务器），将图书馆里所有的书都分发到每位学生手上（所有的文件分散存储在各个节点上）。即是所有的学生，共同组成了一个分布式的图书馆。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/947209-795f3af7231108b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;由中心图书馆到分布式图书馆&lt;/p&gt;
&lt;p&gt;在这种场景下，有几个关键的问题需要回答。&lt;/p&gt;
&lt;h3 id=&#34;1关键问题&#34;&gt;1）关键问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;每个同学手上都分配哪些书。即如何分配存储内容到各个节点，新增/删除内容如何处理。&lt;/li&gt;
&lt;li&gt;当你需要找到一本书，譬如《分布式算法》的时候，如何知道哪位同学手上有《分布式算法》（对1000个人挨个问一遍，“你有没有《分布式算法》？”，显然是个不经济的做法），又如何联系上这位同学。即一个节点如果想获取某个特定的文件，如何找到存储文件的节点/地址/路径。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/947209-8b12f9959fa3144f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/358/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如何寻找需要的书籍？&lt;/p&gt;
&lt;p&gt;接下来，让我们来看看Kademlia算法如何巧妙地解决这些问题。&lt;/p&gt;
&lt;h3 id=&#34;2节点的要素&#34;&gt;2）节点的要素&lt;/h3&gt;
&lt;p&gt;首先我们来看看每个同学（节点）都有哪些属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学号（Node ID，2进制，160位）&lt;/li&gt;
&lt;li&gt;手机号码（节点的IP地址及端口）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个同学会维护以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从图书馆分发下来的书本（被分配到需要存储的内容），每本书当然都有书名和书本内容（内容以&amp;lt;key, value&amp;gt;对的形式存储，可以理解为文件名和文件内容）；&lt;/li&gt;
&lt;li&gt;一个通讯录，包含一小部分其他同学的学号和手机号，通讯录按学号分层（一个路由表，称为“k-bucket”，按Node ID分层，记录有限个数的其他节点的ID和IP地址及端口）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据上面那个类比，可以看看这个表格：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/947209-ac0338100a380c61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/601/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;概念对比&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（Hash的概念解释，可参见&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E5%2593%2588%25E5%25B8%258C%25E7%25AE%2597%25E6%25B3%2595%2F4960188&#34;&gt;百度百科-哈希算法&lt;/a&gt;）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;关于为什么不是每个同学都有全量通讯录（每个节点都维护全量路由信息）：其一，分布式系统中节点的进入和退出是相当频繁的，每次有变动时都全网广播通讯录更新，通讯量会很大；其二，一旦任意一个同学被坏人绑架了（节点被黑客攻破），则坏人马上就拥有了所有人的手机号码，这并不安全。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;3文件的存储及查找&#34;&gt;3）文件的存储及查找&lt;/h3&gt;
&lt;p&gt;原来收藏在图书馆里，按索引号码得整整齐齐的书，以一种什么样的方式分发到同学们手里呢？大致的原则，包括：1）书本能够比较均衡地分布在同学们的手里，不会出现部分同学手里书特别多、而大部分同学连一本书都没有的情况；2）同学想找一本特定的书的时候，能够一种相对简单的索引方式找到这本书。&lt;br&gt;
Kademlia作了下面这种安排：&lt;br&gt;
假设《分布式算法》这本书的书名的hash值是 &lt;em&gt;00010000&lt;/em&gt;，那么这本书就会被要求存在学号为&lt;em&gt;00010000&lt;/em&gt;的同学手上。（这要求hash算法的值域与node ID的值域一致。Kademlia的Node ID是160位2进制。这里的示例对Node ID进行了简略）&lt;br&gt;
但还得考虑到会有同学缺勤。万一&lt;em&gt;00010000&lt;/em&gt;今天没来上学（节点没有上线或彻底退出网络），那《分布式算法》这本书岂不是谁都拿不到了？那算法要求这本书不能只存在一个同学手上，而是被要求同时存储在学号最接近&lt;em&gt;00010000&lt;/em&gt;的k位同学手上，即&lt;em&gt;00010001&lt;/em&gt;、&lt;em&gt;00010010&lt;/em&gt;、&lt;em&gt;00010011&lt;/em&gt;…等同学手上都会有这本书。&lt;/p&gt;
&lt;p&gt;同样地，当你需要找《分布式算法》这本书时，将书名hash一下，得到 &lt;em&gt;00010000&lt;/em&gt;，这个便是索书号，你就知道该找哪（几）位同学了。剩下的问题，就是找到这（几）位同学的手机号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/947209-54dfcb165392638e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/628/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;书籍搜索定位&lt;/p&gt;
&lt;h3 id=&#34;4节点的异或距离&#34;&gt;4）节点的异或距离&lt;/h3&gt;
&lt;p&gt;由于你手上只有一部分同学的通讯录，你很可能并没有&lt;em&gt;00010000&lt;/em&gt;的手机号（IP地址）。那如何联系上目标同学呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/947209-41d8839bc652fea1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/338/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;通讯录上并没有目标同学的情况&lt;/p&gt;
&lt;p&gt;一个可行的思路就是在你的通讯录里找到一位拥有目标同学的联系方式的同学。前面提到，每位同学手上的通讯录都是按距离分层的。算法的设计是，如果一个同学离你越近，你手上的通讯录里存有ta的手机号码的概率越大。而算法的核心的思路就可以是：当你知道目标同学Z与你之间的距离，你可以在你的通讯录上先找到一个你认为与同学Z最相近的同学B，请同学B再进一步去查找同学Z的手机号。&lt;/p&gt;
&lt;p&gt;上文提到的距离，是学号（Node ID）之间的异或距离(XOR distance）。异或是针对yes/no或者二进制的运算.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;异或的运算法则为：0⊕0=0，1⊕0=1，0⊕1=1，1⊕1=0（同为0，异为1）&lt;br&gt;
&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E5%25BC%2582%25E6%2588%2596%2F10993677%3Ffr%3Daladdin&#34;&gt;百度百科-异或&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举2个例子：&lt;br&gt;
&lt;em&gt;01010000&lt;/em&gt;与&lt;em&gt;01010010&lt;/em&gt;距离（即是2个ID的异或值）为&lt;em&gt;00000010&lt;/em&gt;（换算为十进制即为2）；&lt;br&gt;
&lt;em&gt;01000000&lt;/em&gt;与&lt;em&gt;00000001&lt;/em&gt;距离为&lt;em&gt;01000001&lt;/em&gt;（换算为十进制即为26+1，即65）；&lt;br&gt;
如此类推。&lt;/p&gt;
&lt;p&gt;那通讯录是如何按距离分层呢？下面的示例会告诉你，按异或距离分层，基本上可以理解为按位数分层。设想以下情景：&lt;br&gt;
以&lt;em&gt;0000110&lt;/em&gt;为基础节点，如果一个节点的ID，前面所有位数都与它相同，只有最后1位不同，这样的节点只有1个——&lt;em&gt;0000111&lt;/em&gt;，与基础节点的异或值为&lt;em&gt;0000001&lt;/em&gt;，即距离为1；对于&lt;em&gt;0000110&lt;/em&gt;而言，这样的节点归为**“k-bucket 1”**；&lt;br&gt;
如果一个节点的ID，前面所有位数相同，从倒数第2位开始不同，这样的节点只有2个：*0000101*、*0000100*，与基础节点的异或值为*0000011*和*0000010*，即距离范围为3和2；对于*0000110*而言，这样的节点归为**“k-bucket 2”**；&lt;br&gt;
……&lt;br&gt;
如果一个节点的ID，前面所有位数相同，从倒数第n位开始不同，这样的节点只有2(i-1)个，与基础节点的距离范围为[2(i-1), 2i）；对于*0000110*而言，这样的节点归为**“k-bucket i”**；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/947209-6bdd6e96a80d0780.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/430/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;按位数区分k-bucket&lt;/p&gt;
&lt;p&gt;对上面描述的另一种理解方式：如果将整个网络的节点梳理为一个按节点ID排列的二叉树，树最末端的每个叶子便是一个节点，则下图就比较直观的展现出，节点之间的距离的关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/947209-c12846900b0525db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/913/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;k-bucket示意图：右下角的黑色实心圆，为基础节点（按wiki百科的配图修改）&lt;/p&gt;
&lt;p&gt;回到我们的类比。每个同学只维护一部分的通讯录，这个通讯录按照距离分层（可以理解为按学号与自己的学号从第几位开始不同而分层），即k-bucket1, k-bucket 2, k-bucket 3…虽然每个k-bucket中实际存在的同学人数逐渐增多，但每个同学在它自己的每个k-bucket中只记录k位同学的手机号（k个节点的地址与端口，这里的k是一个可调节的常量参数）。&lt;br&gt;
由于学号（节点的ID）有160位，所以每个同学的通讯录中共分160层（节点共有160个k-bucket）。整个网络最多可以容纳2^160个同学（节点），但是每个同学（节点）最多只维护160 * k 行通讯录（其他节点的地址与端口）。&lt;/p&gt;
&lt;h3 id=&#34;5节点定位&#34;&gt;5）节点定位&lt;/h3&gt;
&lt;p&gt;我们现在来阐述一个完整的索书流程。&lt;/p&gt;
&lt;p&gt;A同学（学号&lt;em&gt;00000110&lt;/em&gt;）想找《分布式算法》，A首先需要计算书名的哈希值，hash(《分布式算法》) = &lt;em&gt;00010000&lt;/em&gt;。那么A就知道ta需要找到&lt;em&gt;00010000&lt;/em&gt;号同学（命名为Z同学）或学号与Z邻近的同学。&lt;br&gt;
Z的学号&lt;em&gt;00010000&lt;/em&gt;与自己的异或距离为 &lt;em&gt;00010110&lt;/em&gt;，距离范围在[24, 25)，所以这个Z同学可能在k-bucket 5中（或者说，Z同学的学号与A同学的学号从第5位开始不同，所以Z同学可能在k-bucket 5中）。&lt;br&gt;
然后A同学看看自己的k-bucket 5有没有Z同学：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果有，那就直接联系Z同学要书；&lt;/li&gt;
&lt;li&gt;如果没有，在k-bucket 5里随便找一个B同学（注意任意B同学，它的学号第5位肯定与Z相同，即它与Z同学的距离会小于24，相当于比Z、A之间的距离缩短了一半以上），请求B同学在它自己的通讯录里按同样的查找方式找一下Z同学：&lt;br&gt;
&amp;ndash; 如果B知道Z同学，那就把Z同学的手机号（IP Address）告诉A；&lt;br&gt;
&amp;ndash; 如果B也不知道Z同学，那B按同样的搜索方法，可以在自己的通讯录里找到一个离Z更近的C同学（Z、C之间距离小于23），把C同学推荐给A；A同学请求C同学进行下一步查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/947209-1396765e4e0afb12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/866/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;查询方式示意&lt;/p&gt;
&lt;p&gt;Kademlia的这种查询机制，有点像是将一张纸不断地对折来收缩搜索范围，保证对于任意n个学生，最多只需要查询log2(n)次，即可找到获得目标同学的联系方式（即在对于任意一个有[2(n−1), 2n)个节点的网络，最多只需要n步搜索即可找到目标节点）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload-images.jianshu.io/upload_images/947209-1143169c8318a2ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/666/format/webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;每次搜索都将距离至少收缩一半&lt;/p&gt;
&lt;p&gt;以上便是Kademlia算法的基本原理。以下再简要介绍协议中的技术细节。&lt;/p&gt;
&lt;h3 id=&#34;6算法的三个参数keyspacek和α&#34;&gt;6）算法的三个参数：keyspace，k和α&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;keyspace&lt;br&gt;
&amp;ndash; 即ID有多少位&lt;br&gt;
&amp;ndash; 决定每个节点的通讯录有几层&lt;/li&gt;
&lt;li&gt;k&lt;br&gt;
&amp;ndash; 每个一层k-bucket里装k个node的信息，即&amp;lt;node ID, IP Adress, port&amp;gt;&lt;br&gt;
&amp;ndash; 每次查找node时，返回k个node的信息&lt;br&gt;
&amp;ndash; 对于某个特定的data，离其key最近的k个节点被会要求存储这个data&lt;/li&gt;
&lt;li&gt;α&lt;br&gt;
&amp;ndash; 每次向其他node请求查找某个node时，会向α个node发出请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7节点的指令&#34;&gt;7）节点的指令&lt;/h3&gt;
&lt;p&gt;Kademlia算法中，每个节点只有4个指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PING&lt;br&gt;
&amp;ndash; 测试一个节点是否在线&lt;/li&gt;
&lt;li&gt;STORE&lt;br&gt;
&amp;ndash; 要求一个节点存储一份数据&lt;/li&gt;
&lt;li&gt;FIND_NODE&lt;br&gt;
&amp;ndash; 根据节点ID查找一个节点&lt;/li&gt;
&lt;li&gt;FIND_VALUE&lt;br&gt;
&amp;ndash; 根据KEY查找一个数据，实则上跟FIND_NODE非常类似&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8k-bucket的维护及更新机制&#34;&gt;8)k-bucket的维护及更新机制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每个bucket里的节点都按最后一次接触的时间倒序排列&lt;/li&gt;
&lt;li&gt;每次执行四个指令中的任意一个都会触发更新&lt;/li&gt;
&lt;li&gt;当一个节点与自己接触时，检查它是否在K-bucket中&lt;br&gt;
&amp;ndash; 如果在，那么将它挪到k-bucket列表的最底（最新）&lt;br&gt;
&amp;ndash; 如果不在，PING一下列表最上面（最旧）的一个节点&lt;br&gt;
&amp;ndash; a) 如果PING通了，将旧节点挪到列表最底，并丢弃新节点&lt;br&gt;
&amp;ndash; b) 如果PING不通，删除旧节点，并将新节点加入列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该机制保证了任意节点加入和离开都不影响整体网络。&lt;/p&gt;
&lt;h3 id=&#34;9总结&#34;&gt;9）总结&lt;/h3&gt;
&lt;p&gt;Kademlia是分布式哈希表（Distributed Hash Table, DHT）的一种。而DHT是一类去中心化的分布式系统。在这类系统中，每个节点（node）分别维护一部分的存储内容以及其他节点的路由/地址，使得网络中任何参与者（即节点）发生变更（进入/退出）时，对整个网络造成的影响最小。DHT可以用于构建更复杂的应用，包括分布式文件系统、点对点技术文件分享系统、合作的网页高速缓存、域名系统以及实时通信等。&lt;br&gt;
Kademlia算法在2002年由Petar Maymounkov 和 David Mazières 所设计，以异或距离来对哈希表进行分层是其特点。Kademlia后来被eMule、BitTorrent等P2P软件采用作为底层算法。Kademlia可以作为信息安全技术的奠基之一。&lt;br&gt;
Kademlia的优点在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于任意一个有[ 2(n−1) ,2𝑛)个节点的网络，最多只需要n步搜索即可找到目标节点；&lt;/li&gt;
&lt;li&gt;K-bucket的更新机制一定程度上保持了网络的活性和安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDistributed_hash_table&#34;&gt;wiki百科-分布式哈希表&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FKademlia&#34;&gt;wiki百科-Kademlia&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://links.jianshu.com/go?to=http%3A%2F%2Fpdos.csail.mit.edu%2F%7Epetar%2Fpapers%2Fmaymounkov-kademlia-lncs.pdf&#34;&gt;Kademlia: A Peer-to-peer information system based on the XOR Metric&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000000351815&#34;&gt;王子亭的Kademlia笔记&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://justice.bj.cn/post/31.distribute/chubao-raft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://justice.bj.cn/post/31.distribute/chubao-raft/</guid>
      
        <description>&lt;h1 id=&#34;tiglab-raft&#34;&gt;Tiglab Raft&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Tiglab Raft 是 chubaofs 项目使用的 golang multigroup-raft 库，是在 etcd raft 库上进行了重构和优化。&lt;/p&gt;
&lt;p&gt;向较于 etcd-raft，tiglab-raft 有以下不同改进：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;multi-raft：支持多组 raft；&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;状态机&#34;&gt;状态机&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;graph TB
    F(Follower)
    C(Candidate)
    L(Leader)
    E(ElectionAck)

    S((START)) --&amp;gt; F
    F --timeout--&amp;gt; C
    C --timeout/vote req--&amp;gt; C
    C --electAck/append/hb/minor votes--&amp;gt; F
    C -- quorum:lease_off --&amp;gt; L
    C -- quorum:lease_on --&amp;gt; E
    L -- lease offline --&amp;gt; F
    E -- vote req --&amp;gt; E
    E --electAck/append/hb--&amp;gt; F
    E --quorum--&amp;gt; L
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;选举&#34;&gt;选举&lt;/h2&gt;
&lt;h3 id=&#34;选举发生条件&#34;&gt;选举发生条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Follower&lt;/code&gt;或&lt;code&gt;Candidate&lt;/code&gt;节点&lt;code&gt;选举计时器&lt;/code&gt;超时（lease off） 或收到 Leader 的 Lease TimeOut 消息（lease on）；&lt;/li&gt;
&lt;li&gt;ElectionAck 状态时，选举计时器超时；&lt;/li&gt;
&lt;li&gt;外界选举信号；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;选举过程&#34;&gt;选举过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当选举条件达到时，raft 状态机会产生一个&lt;code&gt;LocalMsgHup&lt;/code&gt;消息中断当前任期，发起选举；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非 Leader 节点收到 LocalMsgHup 消息，如果可以提升为 Leader，且 raft 中没有待处理的配置变更日志，则举行选举(campaign)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发起节点先将自己变成候选人(Candidate);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断得票数。如果达到法定票数(大于总数一半)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启用 Lease，则直接当选为领导人(Leader)，选举结束;&lt;/li&gt;
&lt;li&gt;未启用 Lease，则进入选举确认(ElectionAck)状态；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;否则，如果未达到法定票数，则给各个复制节点发送&lt;code&gt;ReqMsgVote&lt;/code&gt;拉票消息，强制各节点投票；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Candidate&lt;/code&gt;节点收到&lt;code&gt;ReqMsgVote&lt;/code&gt;拉票消息，投反对票，并回复 RespMsgVote 消息给拉票节点；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Follower&lt;/code&gt;节点收到&lt;code&gt;ReqMsgVote&lt;/code&gt;拉票消息后，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果满足投票条件(条件：未设置 lease，或没有 leader 节点 并且 未投票给其他节点 且 日志为最新)，投赞成票，回复 RespMsgVote 消息给拉票节点；&lt;/li&gt;
&lt;li&gt;否则，投反对票；回复 RespMsgVote 消息给拉票节点；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Leader&lt;/code&gt;节点收到&lt;code&gt;ReqMsgVote&lt;/code&gt;消息，投反对票，回复&lt;code&gt;RespMsgVote&lt;/code&gt;消息给拉票节点；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ElectionAck&lt;/code&gt;节点收到&lt;code&gt;ReqMsgVote&lt;/code&gt;消息，投反对票；回复 RespMsgVote 消息给拉票节点；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Candidate&lt;/code&gt; 收到 &lt;code&gt;RespMsgVote&lt;/code&gt;投票消息后，统计有效票数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果赞成票达多数
&lt;ul&gt;
&lt;li&gt;如果未启用 lease，则成为 Leader；&lt;/li&gt;
&lt;li&gt;否则，进入 ElectionAck 状态；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果反对票达多数，则成为&lt;code&gt;Follower&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Follower&lt;/code&gt;给拉票候选人投赞成票条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无 leader（或未启用 lease）;&lt;/li&gt;
&lt;li&gt;未给其他节点投过票；&lt;/li&gt;
&lt;li&gt;该候选人的 term 和 index 均为最新。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;选举确认electionack&#34;&gt;选举确认（ElectionAck）&lt;/h3&gt;
&lt;p&gt;如果启用 Lease，节点获得多数票后，不会直接当选，需先进入 ElectionAck 状态，对选举进行确认；&lt;/p&gt;
&lt;p&gt;在 ElectionAck 状态，ElectionAck 节点将向其他节点发送选举确认请求消息(ReqMsgElectAck)，待其他节点回复确认消息(RespMsgElectAck)后，统计确认票数，如果确认票数达到法定票数，才当选为领导人(Leader)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follower 节点收到 ReqMsgElectAck 消息，将重置选举计数器，并将发送节点设为 Leader 后，回复 RespMsgElectAck 消息；&lt;/li&gt;
&lt;li&gt;Candidate 节点收到 ReqMsgElectAck 消息，将自己转变成 Follower，回复 RespMsgElectAck 消息；&lt;/li&gt;
&lt;li&gt;其他 ElectAck 节点收到 ReqMsgElectAck 消息，同样将自己转变成 Follower，回复 RespMsgElectAck 消息；&lt;/li&gt;
&lt;li&gt;ElectAck 节点收到 RespMsgElectAck 消息后，记录确认消息(ack)数。如果确认消息数大于等于法定当选票数，则当选为 Leader。并立即广播 append；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;消息驱动流程&#34;&gt;消息驱动流程&lt;/h2&gt;
&lt;h4 id=&#34;任何节点收到消息&#34;&gt;任何节点收到消息：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果是 LocalMsgHup 消息：
&lt;ul&gt;
&lt;li&gt;如果是非 Leader，且有副本节点，
&lt;ul&gt;
&lt;li&gt;如果包含配置变更消息且 comitted &amp;gt; applied, 则忽略；&lt;/li&gt;
&lt;li&gt;否则，举行选举；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果是 Leader 节点，则忽略；&lt;/li&gt;
&lt;li&gt;返回；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;否则，判断消息任期(Term):
&lt;ul&gt;
&lt;li&gt;如果 Term==0， 忽略；&lt;/li&gt;
&lt;li&gt;如果消息任期(m.Term) &amp;gt; 节点任期(r.term), 则继续判断
&lt;ul&gt;
&lt;li&gt;如果为请求投票消息(ReqMsgVote)，判断 lease：
&lt;ul&gt;
&lt;li&gt;如果是 Follower 节点，且启用了 lease，且消息不是来自旧 Leader 节点，则给旧 Leader 回复 LeaseMsgOffline 消息，通知旧 Leader Lease 下线；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变成 Follower。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果消息里任期小于节点任期(m.Term&amp;lt;r.term)，则忽略；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;转入不同角色状态处理；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;角色状态消息处理&#34;&gt;角色状态消息处理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Follower&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LocalPropMsg：
&lt;ul&gt;
&lt;li&gt;如果没有 Leader，则不处理（报警提示）；&lt;/li&gt;
&lt;li&gt;如果有 Leader，转发 Leader 处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ReqMsgAppend：
&lt;ul&gt;
&lt;li&gt;重置选举计数器；&lt;/li&gt;
&lt;li&gt;设置 Leader 为消息发送者；&lt;/li&gt;
&lt;li&gt;执行 append 操作：
&lt;ul&gt;
&lt;li&gt;如果消息 index 小于本节点 committed，则回复 RespMsgAppend 本节点 committe index；&lt;/li&gt;
&lt;li&gt;否则，尝试 append
&lt;ul&gt;
&lt;li&gt;如果 append 成功，则回复 RespMsgAppend（index = lastIndex）；&lt;/li&gt;
&lt;li&gt;否则，回复 RespMsgAppend，Reject=true；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ReqMsgHeartBeat：
&lt;ul&gt;
&lt;li&gt;重置选举计数器；&lt;/li&gt;
&lt;li&gt;设置 Leader 为消息发送者；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ReqCheckQuorum:
&lt;ul&gt;
&lt;li&gt;重置选举计数器；&lt;/li&gt;
&lt;li&gt;设置 Leader 为消息发送者；&lt;/li&gt;
&lt;li&gt;回应发送者 RespCheckQuorum 消息；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ReqMsgVote:
&lt;ul&gt;
&lt;li&gt;如果满足投票条件，则重置选举计数器，并回复发送者 RespMsgVote（赞成票，Reject=false）；&lt;/li&gt;
&lt;li&gt;否则回复发送者 RespMsgVote（反对票，Reject=true）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LeaseMsgTimeout
&lt;ul&gt;
&lt;li&gt;如果消息来自 Leader，则重置选举计数器，并发送 LocalMsgHup 消息;&lt;/li&gt;
&lt;li&gt;否则忽略；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Candidate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LocalMsgProp:
&lt;ul&gt;
&lt;li&gt;忽略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ReqMsgAppend：
&lt;ul&gt;
&lt;li&gt;先转变为 Follower；&lt;/li&gt;
&lt;li&gt;再执行 append:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ReqMsgHeartBeat：
&lt;ul&gt;
&lt;li&gt;转变为 Follower；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ReqMsgElectAck
&lt;ul&gt;
&lt;li&gt;先转变为 Follower；&lt;/li&gt;
&lt;li&gt;回复发送者 RespMsgElectAck 消息(Reject=false)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ReqMsgVote：
&lt;ul&gt;
&lt;li&gt;回复发送者 RespMsgVote 消息, 投反对票(Reject=true)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RespMsgVote:
&lt;ul&gt;
&lt;li&gt;统计收到的赞成票数；&lt;/li&gt;
&lt;li&gt;如果赞成票已达多数：
&lt;ul&gt;
&lt;li&gt;如果启用 LeaseCheck，则转变为 ElectionAck 状态；&lt;/li&gt;
&lt;li&gt;否则未启用 LeaseCheck，则当选为 Leader，并广播 append；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果反对票已达多数，则变成 Follower；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leader&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LocalMsgProp:
&lt;ul&gt;
&lt;li&gt;空消息或没有副本节点，则忽略该消息；&lt;/li&gt;
&lt;li&gt;否则，检查是否有配置变更消息；&lt;/li&gt;
&lt;li&gt;append；&lt;/li&gt;
&lt;li&gt;向副本节点广播 append。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ReqMsgVote:
&lt;ul&gt;
&lt;li&gt;向发送者回复 RespMsgVote，投反对票(Reject=true);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RespMsgAppend:
&lt;ul&gt;
&lt;li&gt;更新复制信道(pr)状态；&lt;/li&gt;
&lt;li&gt;如果 Reject, 则 pr 可能要回退，并转变到探测状态，在发送 append&lt;/li&gt;
&lt;li&gt;否则，更新信道状态，并尝试 commit：
&lt;ul&gt;
&lt;li&gt;如果 commit 成功，则广播 append；&lt;/li&gt;
&lt;li&gt;如果信道暂停过，则发送 append；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RespMsgHeartBeat:
&lt;ul&gt;
&lt;li&gt;更新信道状态；&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LeaseMsgOffline:
&lt;ul&gt;
&lt;li&gt;给所有副本节点发送 LeaseMsgTimeOut 消息；&lt;/li&gt;
&lt;li&gt;转变为 Follower；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RespMsgSnapShot:
&lt;ul&gt;
&lt;li&gt;如果信道状态不是 replicaStateSnapshot, 则忽略；&lt;/li&gt;
&lt;li&gt;如果消息被拒绝，则快照失败，信道转入探测状态；&lt;/li&gt;
&lt;li&gt;否则，更新信道并继续探测；&lt;/li&gt;
&lt;li&gt;信道暂停；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RespCheckQuorum:
&lt;ul&gt;
&lt;li&gt;接收 Ack；&lt;/li&gt;
&lt;li&gt;如果收到确认节点数+1(本节点)，则 readOnly-&amp;gt;advance;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ElectionAck&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LocalMsgProp:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;忽略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ReqMsgAppend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;转变为 Follower；&lt;/li&gt;
&lt;li&gt;执行 append；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ReqMsgHeartBeat:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变成 Follower；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ReqMsgElectAck:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变成 Follower；&lt;/li&gt;
&lt;li&gt;回复 ResqMsgElectAck;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ReqMsgVote:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回复 RespMsgVote，投反对票(Reject=true)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RespCheckQuorum:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;recvAck&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RespMsgElectAck:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;统计 ack 数；&lt;/li&gt;
&lt;li&gt;如果确认数&amp;gt;=法定票数，则成为 Leader，并广播 append；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;计时器tick&#34;&gt;计时器(Tick)&lt;/h3&gt;
&lt;p&gt;计时器和消息一起用于驱动 raft 状态机的状态变更，主要包括三种种计时器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;心跳计数器(tickHeartBeat)：用于 Leader 向 Follower 发送存活信号。&lt;/p&gt;
&lt;p&gt;用于 Leader 节点，其频率&amp;raquo;选举计时器，约为选举计数器频率的 10 倍,用于 Leader 和 Follower 节点间确认信道状态。流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;心跳计数器+1，选举计数器+1；&lt;/li&gt;
&lt;li&gt;如果选举计数器到达阈值：
&lt;ul&gt;
&lt;li&gt;重置选举计数器为 0；&lt;/li&gt;
&lt;li&gt;如果启用 lease 且 lease 失效，则 Leader 状态转变为 Follower 状态；
&lt;ul&gt;
&lt;li&gt;如果是非 Leader 节点，忽略；&lt;/li&gt;
&lt;li&gt;如果心跳计数器到达阈值：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重置心跳计数器为 0；&lt;/li&gt;
&lt;li&gt;检查所有副本状态，如果不是快照状态，则副本继续；&lt;/li&gt;
&lt;li&gt;广播 ReadOnly；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选举计时器(tickElection)：&lt;/p&gt;
&lt;p&gt;用于 Follower 和 Candidate 节点，用来计算一个任期是超时时间，如果一个任期内选举计时器超时，则将触发重新选举操作，流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果节点无法；&lt;/li&gt;
&lt;li&gt;选举计数器+1；&lt;/li&gt;
&lt;li&gt;判断是否超时：
&lt;ul&gt;
&lt;li&gt;如果超时，则重重置选举计数器为 0；状态机输入 LocalMsgHup 消息，中断当前任期；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当选确认计数器(tickElectAck)：&lt;/p&gt;
&lt;p&gt;当选确认计数器主要用作当选确认状态节点中，流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选举计数器+1；&lt;/li&gt;
&lt;li&gt;如果选举计数器超时，则：
&lt;ul&gt;
&lt;li&gt;重置选举计数器为 0；&lt;/li&gt;
&lt;li&gt;状态机输入 LocalMsgHup 消息，中断当前任期；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/47117804&#34;&gt;线性一致性和 Raft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/35697913&#34;&gt;Raft 的 PreVote 实现机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/50455478&#34;&gt;Etcd 之 Lease read&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5af066f1f265da0b715634b9&#34;&gt;Raft 协议精解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI3NDIxNTQyOQ==&amp;amp;mid=2247484499&amp;amp;idx=1&amp;amp;sn=79acb9b4b2f8baa3296f2288c4a0a45b&amp;amp;scene=0#wechat_redirect&#34;&gt;TiKV 源码解析系列 - Lease Read&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/solotzg/article/details/80669924&#34;&gt;Raft TLA+形式化验证&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://justice.bj.cn/post/70.tool/markdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://justice.bj.cn/post/70.tool/markdown/</guid>
      
        <description>&lt;h1 id=&#34;markdown&#34;&gt;MarkDown&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Markdown（标记向下）是一种&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80&#34; title=&#34;轻量级标记语言&#34;&gt;轻量级标记语言&lt;/a&gt;，创始人为&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E6%A0%BC%E9%AD%AF%E4%BC%AF&#34; title=&#34;约翰·格鲁伯&#34;&gt;约翰·格鲁伯&lt;/a&gt;。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的&lt;a href=&#34;https://zh.wikipedia.org/wiki/XHTML&#34; title=&#34;XHTML&#34;&gt;XHTML&lt;/a&gt;（或者&lt;a href=&#34;https://zh.wikipedia.org/wiki/HTML&#34; title=&#34;HTML&#34;&gt;HTML&lt;/a&gt;）文档。&lt;a href=&#34;https://zh.wikipedia.org/wiki/Markdown#cite_note-md-4&#34;&gt;[4]&lt;/a&gt;这种语言吸收了很多在&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6&#34; title=&#34;电子邮件&#34;&gt;电子邮件&lt;/a&gt;中已有的纯文本标记的特性。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;基础语法&#34;&gt;基础语法&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;标题&#34;&gt;标题&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# 一级标题
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;## 二级标题
&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;### 三级标题
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;文本格式&#34;&gt;文本格式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;粗体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;斜体&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;u&gt;下划线&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;删除线&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;高亮&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;行内代码：&lt;code&gt;int i = 0;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;行内数学公式：$ a=x^2$&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.github.com&#34;&gt;超链接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;代码块&#34;&gt;代码块&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;列表&#34;&gt;列表&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无序列表项1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无序列表项2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子列表项1&lt;/li&gt;
&lt;li&gt;子列表项2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;有序列表项1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有序列表项2&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 检查项1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 检查项2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;表格&#34;&gt;表格&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表头&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;表头栏&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;左对齐&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;右对齐&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;图&#34;&gt;图&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;流程图&#34;&gt;流程图&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;st=&amp;gt;start: 选举开始
Hup=&amp;gt;operation: 发送LocalMsgHup消息
e=&amp;gt;end: 结束

st-&amp;gt;Hup-&amp;gt;e
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;时序图&#34;&gt;时序图&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;sequenceDiagram
    participant Executor
    participant Reactor
    activate Executor
    Executor-&amp;gt;&amp;gt;Reactor: Pending Future
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Markdown&#34;&gt;https://zh.wikipedia.org/wiki/Markdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://justice.bj.cn/post/70.tool/vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://justice.bj.cn/post/70.tool/vim/</guid>
      
        <description>&lt;h1 id=&#34;vim&#34;&gt;vim&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;h2 id=&#34;基本操作&#34;&gt;基本操作&lt;/h2&gt;
&lt;h3 id=&#34;增加markdown-tagbar&#34;&gt;增加markdown tagbar&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;~/.ctags 中增加:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt; --langdef=markdown
 --langmap=markdown:.md
 --regex-markdown=/^#{1}[ \t]*([^#]+.*)/. \1/h,headings/
 --regex-markdown=/^#{2}[ \t]*([^#]+.*)/.   \1/h,headings/
 --regex-markdown=/^#{3}[ \t]*([^#]+.*)/.     \1/h,headings/
 --regex-markdown=/^#{4}[ \t]*([^#]+.*)/.       \1/h,headings/
 --regex-markdown=/^#{5}[ \t]*([^#]+.*)/.         \1/h,headings/
 --regex-markdown=/^#{6}[ \t]*([^#]+.*)/.           \1/h,headings/
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;vimrc tagbar中增加如下设置:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;    &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;tagbar_type_markdown&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; {&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;                \ &lt;span class=&#34;s1&#34;&gt;&amp;#39;ctagstype&amp;#39;&lt;/span&gt; : &lt;span class=&#34;s1&#34;&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;                \ &lt;span class=&#34;s1&#34;&gt;&amp;#39;kinds&amp;#39;&lt;/span&gt; : [&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;                \ &lt;span class=&#34;s1&#34;&gt;&amp;#39;h:headings&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;                \ ]&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;                \ &lt;span class=&#34;s1&#34;&gt;&amp;#39;sort&amp;#39;&lt;/span&gt; : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;                \ }&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;大小写转换&#34;&gt;大小写转换&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;转换小写：u

转换大写：U
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;错误排查&#34;&gt;错误排查&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ nvim -u NORC
  :CheckHealth

$ vim --startuptime tmp.txt           &lt;span class=&#34;c1&#34;&gt;#查看启动时间&lt;/span&gt;
$ strace -f -T -o vim.strace vim      &lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;去掉json自动隐藏引号&#34;&gt;去掉JSON自动隐藏引号&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;: set cole&amp;amp;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;去掉m&#34;&gt;去掉&lt;code&gt;^M&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;基本操作-1&#34;&gt;基本操作&lt;/h2&gt;
&lt;h3 id=&#34;光标命令&#34;&gt;光标命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ada&#34; data-lang=&#34;ada&#34;&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;左移一个字符&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;右移一个字符&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;下移一行&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;上移一行&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;前移一个单词&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;光标停在下一个单词开头&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;W&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;移动下一个单词开头&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;但忽略一些标点&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;前移一个单词&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;光标停在下一个单词末尾&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;E&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;移动到下一个单词末尾&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;如果词尾有标点&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;则移动到标点&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;后移一个单词&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;光标停在上一个单词开头&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;移动到上一个单词开头&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;忽略一些标点&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;前移1句&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;后移1句&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;前移1段&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;后移1段&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;滚屏命令&#34;&gt;滚屏命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ada&#34; data-lang=&#34;ada&#34;&gt;&lt;span class=&#34;n&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;下翻一屏&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;上翻一屏&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;下翻半屏&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;上翻半屏&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;向下滚动一行&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ctrl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;向上滚动一行&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;到文件n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;的位置&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;zz&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;将当前行移动到屏幕中央&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;zt&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;将当前行移动到屏幕顶端&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;zb&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;将当前行移动到屏幕底端&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;插入命令&#34;&gt;插入命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ada&#34; data-lang=&#34;ada&#34;&gt;&lt;span class=&#34;n&#34;&gt;第一部分&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;基本插入&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;在当前行第一个非空字符前插入&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;gI&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;在当前行第一列插入&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;在光标后插入&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;在当前行最后插入&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;在下面新建一行插入&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;O&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;在上面新建一行插入&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;第二部分&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;改写插入&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;改写光标后1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;个词&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;改写光标后n个字母&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vim中光标右移一个字符命令&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;改写光标前n个字母&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vim中光标左移一个字符命令&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;修改当前&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;行&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;以输入的文本替代光标之后1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;个字符&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;相当于c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;删除指定数目的行&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;并以所输入文本代替之&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;复制命令&#34;&gt;复制命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ada&#34; data-lang=&#34;ada&#34;&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;复制在可视模式下选中的文本&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;yy&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;复制整行文本&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;复制一&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;个词&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;复制光标右边1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;个字符&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;复制光标左边1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;个字符&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;从光标当前位置复制到行尾&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y0&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;从光标当前位置复制到行首&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;剪切和粘贴命令&#34;&gt;剪切和粘贴命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ada&#34; data-lang=&#34;ada&#34;&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;剪切光标右边n个字符&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;相当于d&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;剪切光标左边n个字符&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;相当于d&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;在光标之后粘贴&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;在光标之前粘贴&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;删除命令&#34;&gt;删除命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ada&#34; data-lang=&#34;ada&#34;&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;删除&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;剪切&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;在可视模式下选中的文本&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;删除&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;剪切&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;当前位置到行尾的内容&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;删除&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;剪切&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;个单词&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;删除&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;剪切&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;光标右边1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;个字符&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;删除&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;剪切&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;光标左边1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;个字符&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d0&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;删除&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;剪切&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;当前位置到行首的内容&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dd&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;删除&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;剪切&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;行&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;撤销命令&#34;&gt;撤销命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ada&#34; data-lang=&#34;ada&#34;&gt;&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;撤销最后执行的命令&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;撤销对整行的修改&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;查找命令&#34;&gt;查找命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ada&#34; data-lang=&#34;ada&#34;&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;在后面的文本中查找word&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;在前面的文本中查找word&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;将光标停在包含pattern的行后面第number行上&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;将光标停在包含pattern的行前面第number行上&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;向后查找下一个&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;向前查找下一个&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;替换命令&#34;&gt;替换命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ada&#34; data-lang=&#34;ada&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;可以替换&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;为&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;new&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;替换两行之间出现的每个匹配串&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;操作如下&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;其中&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;代表的是替换操作的若干行中首尾两行的行号&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;则是替换整个文件中的每个匹配串&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gc&lt;/span&gt;    &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;会找到整个文件中的每个匹配串&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;并且对每个匹配串提示是否进行替换&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;排版命令&#34;&gt;排版命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ada&#34; data-lang=&#34;ada&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;向左缩进一个shiftwidth&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;向右缩进一个shiftwidth&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;本行文字居中&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;le&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;本行文字靠左&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ght&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;本行文字靠右&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/24484514&#34;&gt;https://zhuanlan.zhihu.com/p/24484514&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
  </channel>
</rss>
