<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Justice的小站</title><link>https://justice.bj.cn/</link><description>Recent content on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 19 Jun 2022 22:15:37 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>Justice's Blog</title><link>https://justice.bj.cn/homepage/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/about/</guid><description>&lt;h2 id="self-introduction">Self Introduction&lt;/h2>
&lt;p>Cras ex dui, tristique a libero eget, consectetur semper ligula. Nunc augue arcu, malesuada a nisi et, molestie finibus metus. Sed lacus odio, ultricies a nisl vitae, sollicitudin tempor ipsum. Vivamus quis feugiat arcu. Sed mi nunc, efficitur quis tellus vitae, posuere mattis metus. Phasellus in mattis dui. Nullam blandit, augue non ullamcorper dapibus, lacus dui molestie massa, in iaculis purus lectus eu lectus. Duis hendrerit lacinia tellus, sit amet feugiat dolor placerat id. Aenean ac velit massa. Vivamus feugiat dui at magna viverra, ut dictum nunc rutrum. Duis eget sapien finibus, lobortis orci id, vestibulum tellus. Maecenas lobortis urna libero, quis fermentum lectus lobortis nec. Nullam laoreet volutpat libero, ac mattis magna ullamcorper quis. Duis eget ipsum eu nisi mattis cursus et vitae turpis.&lt;/p>
&lt;p>Aliquam pretium diam eget leo feugiat finibus. Donec malesuada commodo ipsum. Aenean a massa in lacus venenatis vestibulum. Duis vel sem quis elit iaculis consectetur et quis dolor. Morbi eu ipsum hendrerit, malesuada ante sed, dapibus est. Suspendisse feugiat nulla ut gravida convallis. Phasellus id massa posuere, rhoncus justo ut, porttitor dolor. Nulla ultrices malesuada egestas. Nunc fermentum tincidunt sem ac vulputate. Donec mollis sollicitudin justo eget varius. Donec ornare velit et felis blandit, id molestie sapien lobortis. Morbi eget tristique justo. Mauris posuere, nibh eu laoreet ultricies, ligula erat iaculis sapien, vel dapibus lacus libero ut diam. Etiam viverra ante felis, et scelerisque nunc pellentesque vitae. Praesent feugiat dictum molestie.&lt;/p>
&lt;h2 id="details">Details&lt;/h2>
&lt;p>Nunc pellentesque vitae:&lt;/p>
&lt;ul>
&lt;li>Morbi accumsan nibh efficitur diam molestie, non dignissim diam facilisis.&lt;/li>
&lt;li>Donec dignissim leo in mollis faucibus.&lt;/li>
&lt;li>Donec blandit lacus a pellentesque fermentum.&lt;/li>
&lt;/ul>
&lt;p>Donec mollis sollicitudin:&lt;/p>
&lt;ul>
&lt;li>Nunc dictum purus ornare purus consectetur, eu pellentesque massa ullamcorper.&lt;/li>
&lt;li>Aliquam eu leo vitae justo aliquam tincidunt.&lt;/li>
&lt;li>Fusce non massa id augue interdum feugiat sed et nulla.&lt;/li>
&lt;li>Vivamus molestie augue in tristique laoreet.&lt;/li>
&lt;/ul></description></item><item><title>Pages</title><link>https://justice.bj.cn/homepage/pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/pages/</guid><description/></item><item><title>Experiences</title><link>https://justice.bj.cn/homepage/experiences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/experiences/</guid><description/></item><item><title>Vintage</title><link>https://justice.bj.cn/homepage/vintage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/vintage/</guid><description/></item><item><title>Blank</title><link>https://justice.bj.cn/homepage/blank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/blank/</guid><description>
&lt;div style="text-align:center">
&lt;p>Write anything you like here!&lt;/p>
&lt;/div></description></item><item><title>MySQL 索引</title><link>https://justice.bj.cn/post/30.architech/mysql/mysql%E7%B4%A2%E5%BC%95/</link><pubDate>Sun, 19 Jun 2022 22:15:37 +0800</pubDate><guid>https://justice.bj.cn/post/30.architech/mysql/mysql%E7%B4%A2%E5%BC%95/</guid><description>&lt;h1 id="mysql-索引">MySQL 索引&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>mysql中的索引是用于提升查询效率的数据结构，其通过额外的存储空间换取查询的效率;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过索引可以快速的定位存储的数据，而不用每次都去遍历；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>典型的MyISA和Innodb存储引擎均使用&lt;strong>B+Tree&lt;/strong>来实现索引;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="分类">分类&lt;/h2>
&lt;p>按数据结构分类可分为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>B+Tree索引：支持范围查询；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hash索引：只支持精确查询，不支持范围查询；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Full-text索引：倒排索引；目前只有MyISAM引擎支持，主要用于提升文本的模糊查询效率较低的问题；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RTree：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>按物理存储分类可分为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>聚簇索引: 聚簇索引和数据放到了一块, 索引的叶子节点就是数据节点，找到索引也就找到了数据; 聚簇索引一般通过B+Tree来实现；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>非聚簇索引：非聚簇索引又叫二级索引（辅助索引），非聚簇索引的叶子节点仍然是索引节点，只不过是指向对应数据块的指针索引和数据分开存储结构，索引中存储的是主键ID，找到索引ID后，还需要通过回表再查询数据；MyISAM使用B+Tree实现的非聚簇索引；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>按字段特性分类可分为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>主键索引: 一张表只能有一个主键索引，不允许重复、不允许为 NULL；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>辅助索引:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>唯一索引：数据列不允许重复，允许为 NULL 值，一张表可有多个唯一索引，索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>普通索引: 一张表可以创建多个普通索引，一个普通索引可以包含多个字段，允许数据重复，允许 NULL 值插入；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>前缀索引:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>按字段个数分类可分为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>单列索引: 一个索引只包含一个列，一个表可以有多个单例索引。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>联合索引: 又叫复合索引、组合索引。一个组合索引包含两个或两个以上的列。查询的时候遵循 “最左前缀”原则，即使用 where 时条件要按照建立索引的时候字段的排列方式放置索引才会生效。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>-&lt;/th>
&lt;th>InnoDB&lt;/th>
&lt;th>MyISAM&lt;/th>
&lt;th>Memory&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>B+tree索引&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hash索引&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Full-text索引&lt;/td>
&lt;td>√（MySQL5.6+）&lt;/td>
&lt;td>√&lt;/td>
&lt;td>×&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="聚簇索引">聚簇索引&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>聚簇索引的叶子节点存储的是行记录；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每张表只能有一个聚集索引；&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果表设置了主键，则主键就是聚簇索引；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果表没有主键，则会默认第一个NOT NULL，且唯一（UNIQUE）的列作为聚簇索引；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>以上都没有，则会默认创建一个隐藏的row_id作为聚簇索引；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>聚簇索引的查询效率高，因为可以直接定位到行记录；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>聚集索引在一般使用自增主键来建索引，非自增键用作聚簇索引可能会由于分裂而导致性能地下；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2022/06/19-15-24-31-2022-06-19-15-24-24-image.png" alt="">&lt;/p>
&lt;h3 id="非聚簇索引">非聚簇索引&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>非聚簇索引又叫二级索引（辅助索引）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>非聚簇索引的叶子节点是主键的指针，行数据分开存储；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>非聚簇索引查询时需要回表再查询数据；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MyISAM使用B+Tree实现的非聚簇索引；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一张表可以有多个非聚集索引；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>非聚簇索引的插入，删除，更新等操作效率会比聚集索引高；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;img title="" src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2022/06/19-22-17-21-2022-06-19-15-26-11-image.png" alt="" data-align="inline">
&lt;h3 id="覆盖索引">覆盖索引&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>覆盖索引（covering index）指一个查询语句的执行只用从索引中就能够取得，不必从数据表中读取；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果一个索引包含了（或覆盖了）满足查询语句中字段与条件的数据就叫做覆盖索引；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="联合索引">联合索引&lt;/h3>
&lt;ul>
&lt;li>联合索引又叫复合索引，是指在两个或以上列上建立的索引；&lt;/li>
&lt;li>联合索引从左到右的使用索引中的字段；&lt;/li>
&lt;li>联合索引查询时，遵循最左匹配原则，即一个查询只使用索引中的一部份，但只能是最左侧部分；&lt;/li>
&lt;/ul>
&lt;h3 id="全文索引">全文索引&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>全文索引(FullText)是基于倒排的索引结构，一般用于文本搜索；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="索引下推">索引下推&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>索引下推(&lt;code>Index Condition Pushdown&lt;/code>，简称ICP), 是MySql 5.6 版本后的一个特性；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>索引下推是在联合索引查询时，将查询过滤条件从sever层下推到引擎层，从而减少回表数据的行为；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>索引下推能减少回表查询次数，提高查询效率；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="索引失效">索引失效&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>联合索引字段，查询时违反最左前缀原则；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用反向查询（!=, &amp;lt;&amp;gt;, NOT LIKE）的时候会导致全表扫描，无法使用索引，覆盖索引除外；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>like以通配符开头时，索引失效；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对索引列做了其他操作，例如数值计算、使用函数、（手动或自动）类型转换等操作，会导致索引失效；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://tech.meituan.com/2014/06/30/mysql-index.html">MySQL索引原理及慢查询优化 - 美团技术团队&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://database.51cto.com/art/201906/597382.htm">MySQL索引原理与应用：索引类型，存储结构与锁&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://juejin.cn/post/6931901822231642125">MySQL索引原理，一篇从头到尾讲清楚 - 掘金&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000037683781">MySQL索引有哪些分类，你真的清楚吗？&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>MySQL基础</title><link>https://justice.bj.cn/post/30.architech/mysql/mysql%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 19 Jun 2022 16:06:37 +0800</pubDate><guid>https://justice.bj.cn/post/30.architech/mysql/mysql%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="mysql基础">MySQL基础&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>mysql是&lt;/li>
&lt;/ul>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2022/06/19-15-49-28-2022-06-19-15-49-23-image.png" alt="">&lt;/p>
&lt;h2 id="特点">特点&lt;/h2>
&lt;h3 id="设计范式">设计范式&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>1NF&lt;/strong>: 原子性，保证每列不可再分, 保证表中无表；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>2NF&lt;/strong>: 消除部分依赖，在满足1NF上，每个属性完全依赖于主键；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>3NF&lt;/strong>: 消除传递依赖，在满足2NF上，属性不依赖于其他非主属性；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>BCNF&lt;/strong>: 在满足3NF上，&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="索引">索引&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>聚集索引&lt;/strong>：根据主键来构建，叶子节点存放的是该主键对应的这一行记录&lt;/li>
&lt;li>&lt;strong>普通索引&lt;/strong>：根据申明这个索引时候的列来构建，叶子节点存放的是这一行记录对应的主键的值
&lt;ul>
&lt;li>&lt;strong>唯一索引&lt;/strong>：在插入和修改的时候会校验该索引对应的列的值是否已经存在&lt;/li>
&lt;li>&lt;strong>联合索引&lt;/strong>：将两个列的值按照申明时候的顺序进行拼接后在构建索引。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>数据是以行为单位存储在聚簇索引里的，根据主键查询可以直接利用聚簇索引定位到所在记录，根据普通索引查询需要先在普通索引上找到对应的主键的值，然后根据主键值去聚簇索引上查找记录，俗称回表。&lt;/p>
&lt;p>普通索引上存储的值是主键的值，如果主键是一个很长的字符串并且建了很多普通索引，将造成普通索引占有很大的物理空间，这也是为什么建议使用 自增ID 来替代订单号作为主键，另一个原因是 自增ID 在插入的时候可以保证相邻的两条记录可能在同一个数据块，而订单号的连续性在设计上可能没有自增ID好，导致连续插入可能在多个数据块，增加了磁盘读写次数。&lt;/p>
&lt;h3 id="日志">日志&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>redolog&lt;/strong>：wal日志，保证数据库宕机后可以通过该文件进行恢复。&lt;/li>
&lt;li>&lt;strong>undolog&lt;/strong>：事务回滚和 MVCC。&lt;/li>
&lt;li>&lt;strong>binlog&lt;/strong>：高可用，也就是通过 binlog 来将数据同步到集群内其他的 MySQL 实例。&lt;/li>
&lt;/ul>
&lt;p>redolog和binlog区别：&lt;/p>
&lt;ul>
&lt;li>Binlog在存储引擎上层 Server 层写入的，记录的是逻辑操作，&lt;/li>
&lt;li>redolog 记录的底层某个数据页的物理操作；&lt;/li>
&lt;li>redolog 是循环写，&lt;/li>
&lt;li>binlog 是追加写的，不会覆盖以前写的数据&lt;/li>
&lt;/ul>
&lt;h3 id="锁">锁&lt;/h3>
&lt;p>InnoDB 中锁的最小粒度为行&lt;/p>
&lt;ul>
&lt;li>共享锁：读，共享锁之间可以兼容&lt;/li>
&lt;li>排他锁：写，其他都互斥。&lt;/li>
&lt;/ul>
&lt;p>根据加锁的范围，可以分为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>全局锁&lt;/strong>：全局锁会把整个数据库实例加锁，命令为 flush tables withs read lock ，将使数据库处于只读状态，其他数据写入和修改表结构等语句会阻塞，一般在备库上做全局备份使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>表级锁&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>表锁： lock table with read/write ，和读写锁一样；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>元数据锁：也叫意向锁，不需要显示申明，加索引的时候会自动加元数据写锁，对表进行增删改查的时候会加元数据读锁。这样当两条修改语句的事务之间元数据锁都是读锁不互斥，但是修改表结构的时候执行更新由于互斥就需要阻塞。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>行锁&lt;/strong>：间隙锁，他锁定的是两条记录之间的间隙，防止其他事务往这个间隙插入数据，间隙锁是隐式锁，是存储引擎自己加上的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="锁的问题">锁的问题&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>脏读&lt;/strong>：指一个事物读取了另外一个事物没有提交的数据，如果另外一个数据对这个数据又进行了更改，则出现数据一致性，脏读违背了数据库的隔离性。脏读目前只能出现在读未提交这个隔离级别下，目前 MySQL 默认的隔离级别为可重复读。&lt;/li>
&lt;li>&lt;strong>不可重复读&lt;/strong>：指一个事务先后两次读取同一条记录的结果不一样，因为第二次读取的时候可能其他事务已经进行更改并提交，不可重复读只发生在隔离级别为读未提交和读已提交里。&lt;/li>
&lt;li>&lt;strong>丢失更新&lt;/strong>：两个事务同时更新某一条记录，导致其中一个事务更新失效，理论上任何一个隔离级别都不会发生丢失更新，因为更新的时候会加上排他锁，但是应用中却经常发生，例如一个计数器应用，事务A查询计数器的值 v=5,在内存中加 1 写入到数据库，在写入之前另外一个事务读取到计数器的值 v=5 ，然后加 1 写入数据库，这样本来应该为 7 ， 现在却是 6 ，这是因为我们是先读取在写入，而读取和写入对数据库而言是两个操作，并不是一个原子操作，这里可以通过把查询的记录加上排他锁 select for update 来防止丢失更新现象。当然这里直接将 sql 改为 v = v + 1 也可以。&lt;/li>
&lt;li>&lt;strong>死锁&lt;/strong>：两个或两个以上事务因争夺资源而互相等待的情况，InnoDB 提供了死锁检测和超时机制来防止死锁的影响，死锁检测是非常耗 CPU 的，当很多个事务同时竞争同一个资源的时候，例如抢购的时候扣商品份额，或者支付的时候所有的订单都会用到一个公共账户，同一个资源竞争的事务越多，死锁检测越耗 CPU&lt;/li>
&lt;li>&lt;strong>热点&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h3 id="事务">事务&lt;/h3>
&lt;p>完全符合 ACID 特性。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>原子性&lt;/strong> : 是指一个事务内的所有操作要么全部成功要么全部失败，数据库中将 redolog 和 binlog 的写入采用两阶段提交就是为了保证事务的原子性。另外由于 InnodDB 是按页进行存储的，每个页大小为 16kb 而操作系统的一般以 4KB 为一页进行读取，所以可能出现一个 InnoDB 的数据页只写了一部分的情况。而 InnoDB 为了防止这种情况的发生采用双写机制，除了写入磁盘上的数据页还会在共享空间中写入。而 redolog 按块存储，每个块 512 字节，正好和扇区大小一样所以，可以保证原子性，不需要进行双写。&lt;/li>
&lt;li>&lt;strong>一致性&lt;/strong> ：保证磁盘和缓存的数据一致，binlog 数据和 主库中的数据一致。&lt;/li>
&lt;li>&lt;strong>隔离性&lt;/strong> ：默认为可重复读，采用 undolog 来实现。&lt;/li>
&lt;li>&lt;strong>持久性&lt;/strong> ：事务一旦提交，其结果就是永久的，redolog 需要在事务提交前进行刷盘，磁盘采用 RAID 等。&lt;/li>
&lt;/ul>
&lt;h3 id="存储过程">存储过程&lt;/h3>
&lt;h3 id="myisam-和-innodb的区别">MyISAM 和 INNODB的区别&lt;/h3>
&lt;ol>
&lt;li>MyISAM的索引和数据是分开的, innodb索引和数据是紧密捆绑的;&lt;/li>
&lt;li>MyISAM不支持事务，INNODB支持事务;&lt;/li>
&lt;li>外键 MyISAM 不支持外键， INNODB支持外键;&lt;/li>
&lt;li>MyISAM时表锁，innodb是行锁;&lt;/li>
&lt;li>查询和添加速度（MyISAM批量插入速度快）&lt;/li>
&lt;li>MyISAM支持全文索引，INNODB不支持全文索引;&lt;/li>
&lt;li>MyISAM内存空间使用率比InnoDB低&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/12/26-20-27-38-2020-12-26-20-27-32-image.png" alt="">&lt;/p>
&lt;h1 id="heading">&lt;/h1>
&lt;h2 id="主从复制">主从复制&lt;/h2>
&lt;ol>
&lt;li>master（主库）在每次准备提交事务完成数据更新前，将改变记录到二进制日志 (binary log) 中&lt;/li>
&lt;li>slave（从库）发起连接，连接到 master，请求获取指定位置的 binlog 文件&lt;/li>
&lt;li>master 创建 dump 线程，推送 binlog 的 slave&lt;/li>
&lt;li>slave 启动一个 I/O 线程来读取主库上 binary log 中的事件，并记录到 slave 自己的中继日志 (relay log) 中&lt;/li>
&lt;li>slave 还会起动一个 SQL 线程，该线程从 relay log 中读取事件并在备库执行，完成数据同步&lt;/li>
&lt;li>slave 记录自己的 binlog&lt;/li>
&lt;/ol>
&lt;img src="https://static001.infoq.cn/resource/image/59/2a/599d49c429805ffdce59783c0aeb782a.png" title="" alt="Mysql数据实时同步实践" data-align="center">
&lt;h2 id="sql-中的join">SQL 中的join&lt;/h2>
&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2022/01/24-17-46-06-2022-01-24-17-46-01-image.png" title="" alt="" data-align="center">
&lt;h3 id="参考">参考&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/63377684">https://zhuanlan.zhihu.com/p/63377684&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yq.aliyun.com/articles/691403">https://yq.aliyun.com/articles/691403&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>区块链共识算法</title><link>https://justice.bj.cn/post/60.blockchain/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/</link><pubDate>Sun, 19 Jun 2022 16:06:37 +0800</pubDate><guid>https://justice.bj.cn/post/60.blockchain/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/</guid><description>&lt;h1 id="区块链共识算法">区块链共识算法&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>共识算法是用来解决对等节点网络系统(P2P)中节点间相互信任问题（拜占庭将军问题, BFT）而提出的一种算法。&lt;/p>
&lt;p>在区块链中，PBFT和Raft是联盟链和私有链上常用的共识算法，而在公有链上，常用的是POW，POS，DPOS等共识算法。&lt;/p>
&lt;h2 id="pbft">PBFT&lt;/h2>
&lt;ul>
&lt;li>PBFT(Practical Byzantine Fault Tolerance，实用拜占庭容错算法)&lt;/li>
&lt;/ul>
&lt;p>由Miguel Castro和Barbara Liskov在1999年提出来的，解决了原始拜占庭容错算法效率不高的问题，将算法复杂度由指数级降低到多项式级，使得拜占庭容错算法在实际系统应用中变得可行。&lt;/p>
&lt;p>PBFT算法是一种状态机副本复制算法，可以容忍小于1/3个无效或者恶意节点。&lt;/p>
&lt;ul>
&lt;li>PBFT 算法的基本流程：&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>客户端发送请求给主节点 ；&lt;/li>
&lt;li>主节点广播请求给其它节点，节点执行 pbft 算法的三阶段共识流程；&lt;/li>
&lt;li>节点处理完三阶段流程后，返回消息给客户端；&lt;/li>
&lt;li>客户端收到来自 f+1 个节点的相同消息后，代表共识已经正确完成；&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/12-21-18-27-2020-10-30-10-51-00-image.png" alt="">&lt;/p>
&lt;h2 id="powproof-of-work-工作量证明">PoW(Proof of Work， 工作量证明)&lt;/h2>
&lt;p>pow是由中本聪在比特币中使用的基于算力的一种共识算法。&lt;/p>
&lt;p>比特币PoW的过程，可以简单理解成就是将不同的nonce值作为输入，尝试进行SHA256哈希运算，找出满足给定数量前导0的哈希值的过程。而要求的前导0的个数越多，代表难度越大。比特币节点求解工作量证明问题的步骤大致归纳如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>生成铸币交易，并与其他所有准备打包进区块的交易组成交易列表，通过Merkle树算法生成Merkle根哈希；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>把Merkle根哈希及其他相关字段组装成区块头，将区块头的80字节数据作为工作量证明的输入；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不停地变更区块头中的随机数，即nonce的数值，并对每次变更后的区块头做双重SHA256运算（即SHA256（SHA256（Block_Header））），将结果值与当前网络的目标值做对比，如果小于目标值，则解题成功，工作量证明完成。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="pow的弊端">PoW的弊端&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>PoW的前提是节点和算力是均匀分布的，因为通过CPU的计算能力来进行投票，拥有钱包（节点）数和算力值应该是大致匹配的，然而随着人们将CPU挖矿逐渐升级到GPU、FPGA，直至ASIC矿机挖矿，节点数和算力值也渐渐失配。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PoW太浪费了。比特币网络每秒可完成数百万亿次SHA256计算，但这些计算除了使恶意攻击者不能轻易地伪装成几百万个节点和打垮比特币网络，并没有更多实际或科学价值。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="posproof-of-stake-权益证明">PoS(Proof of Stake, 权益证明)&lt;/h2>
&lt;p>PoS类似于财产储存在银行，这种模式会根据你持有数字货币的量和时间，分配给你相应的利息。 &lt;br>
　　简单来说，就是一个根据你持有货币的量和时间，给你发利息的一个制度，在股权证明PoS模式下，有一个名词叫币龄，每个币每天产生1币龄，比如你持有100个币，总共持有了30天，那么，此时你的币龄就为3000，这个时候，如果你发现了一个PoS区块，你的币龄就会被清空为0。你每被清空365币龄，你将会从区块中获得0.05个币的利息(假定利息可理解为年利率5%)，那么在这个案例中，利息 = 3000 * 5% / 365 = 0.41个币，这下就很有意思了，持币有利息。&lt;/p>
&lt;p>PoS机制虽然考虑到了PoW的不足，但依据权益结余来选择，会导致首富账户的权力更大，有可能支配记账权。股份授权证明机制（Delegated Proof of Stake，DPoS）的出现正是基于解决PoW机制和PoS机制的这类不足。&lt;/p>
&lt;h2 id="dposdelegated-proof-of-stake委任权益证明">DPoS（Delegated Proof of Stake，委任权益证明）&lt;/h2>
&lt;p>DPoS通过使用证人（通常称为代表）减轻了中心化导致的潜在负面影响。 总共有N个证人（witness）签署了这些区块，这些证人由那些使用网络进行每次交易的节点进行投票选出。 通过使用一种去中心化的投票流程，DPOS在设计上比同类系统更民主。 DPOS并没有彻底消除对信任的需求，而是要确保那些代表整个网络的受信任的签名区块的人节点要正确无误和没有偏见。&lt;/p>
&lt;h3 id="poc-proof-of-capacity-基于容量的证明">PoC （Proof of Capacity, 基于容量的证明）&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>PoC&lt;/code>是Chia币挖矿使用的证明算法，其基础是使用硬盘容量来代替CPU算力，相较于POW，可减少电力消耗；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>拜占庭容错(Byzantine Fault Tolerance) WIKI:  &lt;a href="https://en.wikipedia.org/wiki/BFT">BFT - Wikipedia&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PBFT论文地址：http://pmg.csail.mit.edu/papers/osdi99.pdf&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/35847127">https://zhuanlan.zhihu.com/p/35847127&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>openssl</title><link>https://justice.bj.cn/post/70.tool/openssl/</link><pubDate>Tue, 14 Jun 2022 20:45:32 +0800</pubDate><guid>https://justice.bj.cn/post/70.tool/openssl/</guid><description>&lt;h1 id="openssl">openssl&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="操作">操作&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1">## 加密&lt;/span>
&lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;xxx&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> base64 &lt;span class="p">|&lt;/span> openssl enc -aes-128-ecb -a -e -nosalt
&lt;span class="c1">## 解密&lt;/span>
cat &lt;span class="s">&amp;lt;&amp;lt;EOF | openssl enc -aes-128-ecb -a -d -nosalt | base64 -d
&lt;/span>&lt;span class="s">yyy
&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2></description></item><item><title>Flink消息消费流程</title><link>https://justice.bj.cn/post/30.architech/flink/flink-%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF%E7%9A%84%E6%B5%81%E7%A8%8B/</link><pubDate>Tue, 14 Jun 2022 19:20:14 +0800</pubDate><guid>https://justice.bj.cn/post/30.architech/flink/flink-%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF%E7%9A%84%E6%B5%81%E7%A8%8B/</guid><description>&lt;h1 id="flink消息消费流程">Flink消息消费流程&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>准备一个ResultPartition；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通知JobMaster；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>JobMaster通知下游节点；如果下游节点尚未部署，则部署之；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下游节点向上游请求数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开始传输数据&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2022/01/03-21-34-50-2022-01-03-21-34-42-image.png" alt="">&lt;/p>
&lt;h3 id="数据跨-task-传输">数据跨 task 传输&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>数据在本operator处理完后，交给RecordWriter。每条记录都要选择一个下游节点，所以要经过ChannelSelector。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个channel都有一个serializer（我认为这应该是为了避免多线程写的麻烦），把这条Record序列化为ByteBuffer&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接下来数据被写入ResultPartition下的各个subPartition里，此时该数据已经存入DirectBuffer（MemorySegment）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>单独的线程控制数据的flush速度，一旦触发flush，则通过Netty的nio通道向对端写入&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对端的netty client接收到数据，decode出来，把数据拷贝到buffer里，然后通知InputChannel&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有可用的数据时，下游算子从阻塞醒来，从InputChannel取出buffer，再解序列化成record，交给算子执行用户代码&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2022/01/03-21-39-06-2022-01-03-21-39-02-image.png" alt="">&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://blog.csdn.net/jsjsjs1789/article/details/106526982">一文搞定 Flink 消费消息的全流程_shengjk1的博客-CSDN博客_flink阻塞消费&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>区块链-POS共识机制</title><link>https://justice.bj.cn/post/60.blockchain/%E5%8C%BA%E5%9D%97%E9%93%BE-pos%E5%85%B1%E8%AF%86%E6%9C%BA%E5%88%B6/</link><pubDate>Tue, 14 Jun 2022 19:20:14 +0800</pubDate><guid>https://justice.bj.cn/post/60.blockchain/%E5%8C%BA%E5%9D%97%E9%93%BE-pos%E5%85%B1%E8%AF%86%E6%9C%BA%E5%88%B6/</guid><description>&lt;h1 id="区块链-pos共识机制">区块链-POS共识机制&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>PoS(Proof of Stake，权益证明), 最早由点点币的创始人Sunny King提出，目的是为了解决使用PoW挖矿出现大量资源浪费的问题；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在基于PoS共识的区块链网络中，节点不再通过算力竞争记账权，获得记账权的概率取决于其拥有的权益多少；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>“权益”（Stake）可以是节点持有的通证数量，也可以是关于通证数量的一个函数；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="实现原理">实现原理&lt;/h4>
&lt;p>我们知道PoW挖矿的基本逻辑和步骤，即找到一个nonce值，使得新区块头的哈希值小于某个指定的值，即区块头结构中的“难度目标”&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Hash (block_header) &amp;lt; Target
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从公式中我们可以看到，PoW下所有矿工的目标值是一样的，只要计算结果哈希小于目标值即可，简化来看就是前导0的个数。&lt;/p>
&lt;p>而在PoS系统中，这个公式变更为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Hash (block_header) &amp;lt; Target * CoinAge
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>变量叫做CoinAge，也就是币龄，这里就有意思了。&lt;/p>
&lt;p>这个变量为会造成每个矿工看到的目标值不一样，如果你的币龄越大，也就意味着你的获得答案越容易。这里的Target与PoW一致，与全网难度成反比，用来控制出块速度的。&lt;/p>
&lt;p>例如当前全网的目标是4369，A矿工的输入的币龄是15，那么A矿工的目标值为65535，换算成十六进制就是0xFFFF，完整的哈希长度假设是8位，也就是0x0000FFFF。&lt;/p>
&lt;p>而B矿工比较有钱，他输入的币龄是240，那么B矿工的目标值就是0x000FFFFF。你如果仔细观察肯定会发现，相比A矿工的目标值，B直接少了一个零。即如下：&lt;/p>
&lt;p>A 矿工 Hash( block_header ) &amp;lt; 0x0000FFFF&lt;br>
B 矿工 Hash( block_header ) &amp;lt; 0x000FFFFF&lt;/p>
&lt;p>所以B矿工获得记账权的概率肯定要比A高。&lt;/p>
&lt;h4 id="pos的相关问题">PoS的相关问题&lt;/h4>
&lt;h3 id="无利害攻击">无利害攻击&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>任何节点都可以挖矿，导致链容易出现分叉；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>以太坊Casper共识应用了“执剑人”（Slashers，又译“剑手”）机制，在共识机制中引入惩罚措施，解决以往PoS共识的公共地悲剧；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="长程攻击">长程攻击&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>“长程攻击”是PoS共识中威胁最大的攻击形式；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当一个节点收回了他的抵押金时，虽然它不再拥有验证以后的区块的权利，但是仍然可以对收回抵押之前的区块进行回滚，并且由于它不再会受到没收押金惩罚，因此攻击者能够通过贿赂这些节点，收集足够的“幽灵”抵押金（这些抵押金已经被收回了），重新构造一条足够长的攻击链，尝试替换这些节点在作为验证者期间曾经验证过的区块；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一种解决策略是&lt;strong>移动检查点&lt;/strong>。即每隔一定的区块间隔设置检查点，只有检查点之后的区块可能会被重组。检查点的间隔一般少于要求的最短抵押金抵押时间，从而保证有充足可能性的区块都是由还有缴纳了抵押金的节点验证的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>另一种解决策略是&lt;strong>上下文感知交易&lt;/strong>（Context-Aware transactions）。在构造一笔交易时，在交易中记录前一个或前几个区块的哈希值，这样就能将一笔交易和特定的区块分支联系起来，在分叉链上伪造交易就变得困难；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.jianshu.com/p/aa61fb4c1e3c">共识机制-POS(权益证明)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/centrality/%E4%BA%86%E8%A7%A3%E5%85%B1%E8%AF%86%E6%9C%BA%E5%88%B6-%E5%B7%A5%E4%BD%9C%E8%AF%81%E6%98%8E-pow-%E8%BF%98%E6%98%AF%E6%9D%83%E7%9B%8A%E8%AF%81%E6%98%8E-pos-94a0e0530624">了解共识机制：工作证明（POW）还是权益证明（POS）&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@tokenroll/pos%E5%85%B1%E8%AF%86%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%AE%BE%E8%AE%A1%E5%93%B2%E5%AD%A6-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E5%BC%95%E5%8D%B7%E4%B9%8B%E4%BA%94-483c4639e0f8">PoS共识机制及设计哲学&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>区块链中的攻击</title><link>https://justice.bj.cn/post/60.blockchain/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%AD%E7%9A%84%E6%94%BB%E5%87%BB/</link><pubDate>Tue, 14 Jun 2022 19:20:14 +0800</pubDate><guid>https://justice.bj.cn/post/60.blockchain/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%AD%E7%9A%84%E6%94%BB%E5%87%BB/</guid><description>&lt;h1 id="区块链中的攻击">区块链中的攻击&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="1-双花攻击">1. 双花攻击&lt;/h2>
&lt;h3 id="问题">问题&lt;/h3>
&lt;ul>
&lt;li>双花问题是在点对点数字现金系统中，支付方将同一笔资金同时支付给两位收款方，由于收款方无法验证自己收到的资金是否还曾经付给他人，因此支付方使用一笔资金；&lt;/li>
&lt;/ul>
&lt;h3 id="解决方案">解决方案&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>中心化方式：监督者+盲签名；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>非中心化方式：比特币挖矿&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="2-粉尘攻击">2. 粉尘攻击&lt;/h2>
&lt;h3 id="问题-1">问题&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>粉尘就是很小部分的交易或金额，通常这部分金额都不值得交易，因为他们的交易费用常常都高于其本身价值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>攻击者向被攻击者钱包地址中发送少量的satoshis，将这些地址“粉尘化”。之后攻击者追踪已经被粉尘化的钱包中的资金和所有的交易，继而连接上这些地址，并最后确定这些钱包地址所属的公司或个人，从而破坏了被攻击者的隐私；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="对抗方案">对抗方案&lt;/h3>
&lt;ul>
&lt;li>对可疑的感染粉尘的账户进行预警(小于几百satoshis的交易)，避免移动；&lt;/li>
&lt;/ul>
&lt;h2 id="heading">&lt;/h2>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://academy.binance.com/zh/articles/double-spending-explained">双花问题详解 | Binance Academy&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://academy.binance.com/zh/articles/what-is-a-dusting-attack">什么是粉尘攻击？ | Binance Academy&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@tokenroll/pos%E5%85%B1%E8%AF%86%E6%9C%BA%E5%88%B6%E5%8F%8A%E8%AE%BE%E8%AE%A1%E5%93%B2%E5%AD%A6-%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E5%BC%95%E5%8D%B7%E4%B9%8B%E4%BA%94-483c4639e0f8">PoS共识机制及设计哲学 — — 区块链技术引卷之五&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>只出现一次的数字 III</title><link>https://justice.bj.cn/post/leetcode/doc/260.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97iii/</link><pubDate>Tue, 14 Jun 2022 10:57:13 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/260.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97iii/</guid><description>&lt;h1 id="只出现一次的数字-iiihttpsleetcodecnproblemssingle-number-iiidescription-httpsleetcodecnproblemssingle-number-iiidescription">&lt;a href="https://leetcode.cn/problems/single-number-iii/description/" title="https://leetcode.cn/problems/single-number-iii/description/">只出现一次的数字 III&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Category&lt;/th>
&lt;th>Difficulty&lt;/th>
&lt;th>Likes&lt;/th>
&lt;th>Dislikes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>algorithms&lt;/td>
&lt;td>Medium (73.51%)&lt;/td>
&lt;td>620&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Tags&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://leetcode.com/tag/bit-manipulation" title="https://leetcode.com/tag/bit-manipulation">&lt;code>bit-manipulation&lt;/code>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Companies&lt;/strong>&lt;/p>
&lt;p>&lt;code>Unknown&lt;/code>&lt;/p>
&lt;p>给定一个整数数组 &lt;code>nums&lt;/code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 &lt;strong>任意顺序&lt;/strong> 返回答案。&lt;/p>
&lt;p>**进阶：**你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？&lt;/p>
&lt;p>&lt;strong>示例 1：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：nums = [1,2,1,3,2,5]
输出：[3,5]
解释：[5, 3] 也是有效的答案。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 2：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：nums = [-1,0]
输出：[-1,0]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 3：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：nums = [0,1]
输出：[1,0]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>提示：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>2 &amp;lt;= nums.length &amp;lt;= 3 * 104&lt;/code>&lt;/li>
&lt;li>&lt;code>-231 &amp;lt;= nums[i] &amp;lt;= 231 - 1&lt;/code>&lt;/li>
&lt;li>除两个只出现一次的整数外，&lt;code>nums&lt;/code> 中的其他数字都出现两次&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://leetcode.cn/problems/single-number-iii/comments/" title="https://leetcode.cn/problems/single-number-iii/comments/">Discussion&lt;/a> | &lt;a href="https://leetcode.cn/problems/single-number-iii/solution/" title="https://leetcode.cn/problems/single-number-iii/solution/">Solution&lt;/a>&lt;/p>
&lt;h2 id="解法">解法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">class&lt;/span> &lt;span class="nc">Solution&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * ## 解题思路
&lt;/span>&lt;span class="cm"> * 1. 先将所有数字进行异或操作，得到一个异或结果xor, 由于存在两个不同的元素，则xor必不为0；
&lt;/span>&lt;span class="cm"> * 2. 根据xor，计算mask = xor &amp;amp; -xor, 得到xor第一个1
&lt;/span>&lt;span class="cm"> * 3. 使用mask与每个数字进行与操作，将nums分成两个子nums1， nums2，
&lt;/span>&lt;span class="cm"> * 4. 分别对两个nums1, nums2执行xor操作，得到最后两个不同的数；
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">singleNumber&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&amp;amp;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">div&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">div&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">div&lt;/span> &lt;span class="o">&amp;amp;=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">div&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">div&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">else&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>基本计算器</title><link>https://justice.bj.cn/post/leetcode/doc/224.%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8/</link><pubDate>Mon, 13 Jun 2022 17:36:43 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/224.%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8/</guid><description>&lt;h1 id="基本计算器httpsleetcodecnproblemsbasic-calculatordescription-httpsleetcodecnproblemsbasic-calculatordescription">&lt;a href="https://leetcode.cn/problems/basic-calculator/description/" title="https://leetcode.cn/problems/basic-calculator/description/">基本计算器&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Category&lt;/th>
&lt;th>Difficulty&lt;/th>
&lt;th>Likes&lt;/th>
&lt;th>Dislikes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>algorithms&lt;/td>
&lt;td>Hard (41.92%)&lt;/td>
&lt;td>777&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Tags&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://leetcode.com/tag/math" title="https://leetcode.com/tag/math">&lt;code>math&lt;/code>&lt;/a> | &lt;a href="https://leetcode.com/tag/stack" title="https://leetcode.com/tag/stack">&lt;code>stack&lt;/code>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Companies&lt;/strong>&lt;/p>
&lt;p>&lt;code>google&lt;/code>&lt;/p>
&lt;p>给你一个字符串表达式 &lt;code>s&lt;/code> ，请你实现一个基本计算器来计算并返回它的值。&lt;/p>
&lt;p>注意:不允许使用任何将字符串作为数学表达式计算的内置函数，比如 &lt;code>eval()&lt;/code> 。&lt;/p>
&lt;p>&lt;strong>示例 1：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：s = &amp;#34;1 + 1&amp;#34;
输出：2
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 2：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：s = &amp;#34; 2-1 + 2 &amp;#34;
输出：3
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 3：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：s = &amp;#34;(1+(4+5+2)-3)+(6+8)&amp;#34;
输出：23
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>提示：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>1 &amp;lt;= s.length &amp;lt;= 3 * 105&lt;/code>&lt;/li>
&lt;li>&lt;code>s&lt;/code> 由数字、&lt;code>'+'&lt;/code>、&lt;code>'-'&lt;/code>、&lt;code>'('&lt;/code>、&lt;code>')'&lt;/code>、和 &lt;code>' '&lt;/code> 组成&lt;/li>
&lt;li>&lt;code>s&lt;/code> 表示一个有效的表达式&lt;/li>
&lt;li>&amp;lsquo;+&amp;rsquo; 不能用作一元运算(例如， &amp;ldquo;+1&amp;rdquo; 和 &lt;code>&amp;quot;+(2 + 3)&amp;quot;&lt;/code> 无效)&lt;/li>
&lt;li>&amp;lsquo;-&amp;rsquo; 可以用作一元运算(即 &amp;ldquo;-1&amp;rdquo; 和 &lt;code>&amp;quot;-(2 + 3)&amp;quot;&lt;/code> 是有效的)&lt;/li>
&lt;li>输入中不存在两个连续的操作符&lt;/li>
&lt;li>每个数字和运行的计算将适合于一个有符号的 32位 整数&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://leetcode.cn/problems/basic-calculator/comments/" title="https://leetcode.cn/problems/basic-calculator/comments/">Discussion&lt;/a> | &lt;a href="https://leetcode.cn/problems/basic-calculator/solution/" title="https://leetcode.cn/problems/basic-calculator/solution/">Solution&lt;/a>&lt;/p>
&lt;h2 id="解法">解法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">class&lt;/span> &lt;span class="nc">Solution&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> ## 解题思路
&lt;/span>&lt;span class="cm"> * 对于表达式： 1+(4—(5+2))-3+(6+8)-(10-(19-3))
&lt;/span>&lt;span class="cm"> = 1 + 4 + (-5) + (-2) + (-3) + 6 + 8 + (-10) + (--19) + (---3)
&lt;/span>&lt;span class="cm"> * 可以看出, 结果 = 各个数字与其前面的符号 的 和 组成
&lt;/span>&lt;span class="cm"> * 各个数字前面的符号由嵌套括号决定，每多一层括号，
&lt;/span>&lt;span class="cm"> * 如果括号前为+, 则括号中的各个数字符号不变；
&lt;/span>&lt;span class="cm"> * 如果括号前符号为-, 则括号中各个数字的符号取反；
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">ops&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//每个操作数的符号
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ops&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//符号
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">//空格，跳过
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;+&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">//+, 上级符号不编号
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ops&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">top&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;-&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">//-，上级符号变相反；
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">ops&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">top&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;(&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">//左括号, 符号入栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ops&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sign&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;)&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">//右括号，符号出栈
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ops&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="c1">//数字，计算累加和
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;9&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">ret&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">sign&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Solution&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// ## 解题思路
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 对于表达式： 1+(4—(5+2))-3+(6+8)-(10-(19-3))
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// = 1 + 4 + (-5) + (-2) + (-3) + 6 + 8 + (-10) + (--19) + (---3)
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 可以看出, 结果 = 各个数字与其前面的符号 的 和 组成
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 各个数字前面的符号由嵌套括号决定，每多一层括号，
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 如果括号前为+, 则括号中的各个数字符号不变；
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sd">/// 如果括号前符号为-, 则括号中各个数字的符号取反；
&lt;/span>&lt;span class="sd">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">as_bytes&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ret&lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ops&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">vec&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">[];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ops&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sign&lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>: &lt;span class="kt">usize&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sc">b&amp;#39; &amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sc">b&amp;#39;(&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ops&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sign&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sc">b&amp;#39;)&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ops&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sc">b&amp;#39;+&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sign&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ops&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ops&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sc">b&amp;#39;-&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sign&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ops&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ops&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">matches&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sc">b&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sc">b&amp;#39;9&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="sc">b&amp;#39;0&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ret&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sign&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Rust模块及包管理</title><link>https://justice.bj.cn/post/14.language/rust/80.rust%E5%8C%85%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 13 Jun 2022 16:32:28 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/80.rust%E5%8C%85%E7%AE%A1%E7%90%86/</guid><description>&lt;h1 id="rust模块及包管理">Rust模块及包管理&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Rust程序代码组织分为三个层级：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>项目(package)&lt;/strong>：一个项目工程，一个项目通常由一个&lt;code>cargo.toml&lt;/code>定义，可包含多个crate；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>包(crate)&lt;/strong>：是一个独立的可编译单元成二进制的单元，可分为bin和lib两种类型；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>模块(mod)&lt;/strong>：是包内代码组织单元，用于实现命名空间；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="项目package">项目(Package)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>项目是由cargo.toml定义的一个rust源码编译目录结构；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个项目由一个或多个crate组成；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>项目可由cargo命令进行管理；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[&lt;/span>&lt;span class="nx">package&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;crate-name&amp;#34;&lt;/span>
&lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.1.0&amp;#34;&lt;/span>
&lt;span class="nx">authors&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;xxx&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">edition&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;2018&amp;#34;&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">#xxx&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">features&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">#default = [&amp;#34;test&amp;#34;]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="包crate">包(Crate)&lt;/h2>
&lt;p>包(&lt;code>crate&lt;/code>)是rust可独立编译的单元，包要点如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>包&lt;code>crate&lt;/code> 由一个或一批文件组成，可独立编译为二进制文件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>包分为两种类型：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>库(lib):&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可执行二进制文件(bin):&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>同一个crate的文件一般放在同一个目录下；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个crate有一个入口文件：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>二进制包入口为&lt;code>main.rs&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>库的入口文件是&lt;code>lib.rs&lt;/code>;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>引入外部crate：&lt;code>extern crate xxx;&lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>引用未发布的本地crate, 在&lt;code>Cargo.toml&lt;/code> &lt;code>dependencies&lt;/code>中声明；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="c">#... &lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">#xxx&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">features&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c">#default = [&amp;#34;test&amp;#34;]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="模块module">模块（module）&lt;/h2>
&lt;p>模块(&lt;code>mod&lt;/code>)是包内部代码组织单元，模块要点如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>模块由关键字&lt;code>mod&lt;/code>定义：&lt;code>mod XXX { ... } &lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>模块的命名风格是 &lt;code>lower_snake_case&lt;/code>，跟其它的 Rust 的标识符一样；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>模块可以嵌套；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>模块中可以写任何合法的 Rust 代码；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个包默认实现了一个隐式的 &lt;code>根模块（root module）&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个文件就是一个mod, mod名就是文件名，main.rs, lib.rs, mod.rs文件除外；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mod.rs&lt;/code>的模块名是其所在目录的名字；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>main.rs&lt;/code>, &lt;code>lib.rs&lt;/code> 的模块名是其目录结构，如：&lt;code>exp/src/main.rs&lt;/code>或 &lt;code>lip/src/lib.rs&lt;/code> 的mod名分别是exp和lip；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mod foo;&lt;/code> 告诉编译器找寻./foo.rs或者./foo/mod.rs，并且将找寻到的文件内容作为module foo的内容;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>文件和文件夹内的mod及其内部定义的函数默认都是private的，除非pub声明公开；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>private元素只有本模块内的元素以及它的子模块可以访问；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>public元素上一层的模块就有权访问它；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果存在与文件&lt;code>foo.rs&lt;/code>同名的目录&lt;code>foo/&lt;/code>， 则在该目录&lt;code>foo/*.rs&lt;/code>下定义的模块都是该文件的子模块；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>子模块必须在父模块在**声明(**mod child)，不然它们就不会存在。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// mod.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">mod&lt;/span> &lt;span class="nn">foo&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//声明mod
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//是将一个模块加进当前的scope。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Rust 的多层模块遵循如下两条规则：&lt;/p>
&lt;ol>
&lt;li>优先查找&lt;code>xxx.rs&lt;/code> 文件
&lt;ol>
&lt;li>&lt;code>main.rs&lt;/code>、&lt;code>lib.rs&lt;/code>、&lt;code>mod.rs&lt;/code>中的&lt;code>mod xxx;&lt;/code> 默认优先查找同级目录下的 &lt;code>xxx.rs&lt;/code> 文件；&lt;/li>
&lt;li>其他文件&lt;code>yyy.rs&lt;/code>中的&lt;code>mod xxx;&lt;/code>默认优先查找同级目录的&lt;code>yyy&lt;/code>目录下的 &lt;code>xxx.rs&lt;/code> 文件；&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>如果 &lt;code>xxx.rs&lt;/code> 不存在，则查找 &lt;code>xxx/mod.rs&lt;/code> 文件，即 &lt;code>xxx&lt;/code> 目录下的 &lt;code>mod.rs&lt;/code> 文件。&lt;/li>
&lt;/ol>
&lt;p>上述两种情况，加载成模块后，效果是相同的。Rust 就凭这两条规则，通过迭代使用，结合 &lt;code>pub&lt;/code> 关键字，实现了对深层目录下模块的加载；&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">src
├── a
│ ├── b
│ │ ├── c
│ │ │ ├── d.rs
│ │ │ └── mod.rs
│ │ └── mod.rs
│ └── mod.rs
└── main.rs
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// a/b/c/d.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">print_ddd&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;i am ddd.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// a/b/c/mod.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mod&lt;/span> &lt;span class="nn">d&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//声明mode
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// a/b/mod.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mod&lt;/span> &lt;span class="nn">c&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// a/mod.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mod&lt;/span> &lt;span class="nn">b&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// main.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">mod&lt;/span> &lt;span class="nn">a&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>::&lt;span class="n">b&lt;/span>::&lt;span class="n">c&lt;/span>::&lt;span class="n">d&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">d&lt;/span>::&lt;span class="n">print_ddd&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="模块路径">模块路径&lt;/h3>
&lt;p>想要调用一个函数，就需要知道它的路径，在 Rust 中，这种路径有两种形式：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>绝对路径&lt;/strong>，从包根开始，路径名以包名或者 &lt;code>crate&lt;/code> 作为开头&lt;/li>
&lt;li>&lt;strong>相对路径&lt;/strong>，从当前模块开始，以 &lt;code>self&lt;/code>，&lt;code>super&lt;/code> 或当前模块的标识符作为开头&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">// src/lib.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">mod&lt;/span> &lt;span class="nn">front_of_house&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mod&lt;/span> &lt;span class="nn">hosting&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">add_to_waitlist&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">eat_at_restaurant&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 绝对路径
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">crate&lt;/span>::&lt;span class="n">front_of_house&lt;/span>::&lt;span class="n">hosting&lt;/span>::&lt;span class="n">add_to_waitlist&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 相对路径
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">front_of_house&lt;/span>::&lt;span class="n">hosting&lt;/span>::&lt;span class="n">add_to_waitlist&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="模块系统">模块系统&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>单文件rust 中称为&lt;code>mod&lt;/code>，模块的名称就是文件的名称。&lt;/p>
&lt;p>模块内部的函数，只能在模块内部使用，如果要在模块外调用，需要用&lt;code>pub&lt;/code>关键词，显式声明函数可在外部使用。&lt;/p>
&lt;p>使用时，使用mod声明引入，mod name::&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">//file: rustmod/src/functions.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, {}!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">// 嵌套子模块
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mod&lt;/span> &lt;span class="nn">util&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">hello2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, {}!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//file: rust/src/main.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">mod&lt;/span> &lt;span class="nn">functions&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//声明模块
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">functions&lt;/span>::&lt;span class="n">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">functions&lt;/span>::&lt;span class="n">util&lt;/span>::&lt;span class="n">hello2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用mod.rs, mod 会去对应目录下mod.rs中导入该目录下声明的mod&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="c1">//file: rustmod/src/util/functions.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>: &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, {}!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//file: rustmod/src/util/mod.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mod&lt;/span> &lt;span class="nn">functions&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">//file: rustmod/src/main.rs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">mod&lt;/span> &lt;span class="nn">util&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">util&lt;/span>::&lt;span class="n">functions&lt;/span>::&lt;span class="n">util&lt;/span>::&lt;span class="n">hello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在同一层级不能同时存在文件夹和文件类型的模块，否则会名字冲突。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="典型rust项目结构">典型rust项目结构&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">.
├── Cargo.toml &lt;span class="c1">## cargo配置文件&lt;/span>
├── Cargo.lock
├── src
│ ├── main.rs &lt;span class="c1">## 默认二进制包入口&lt;/span>
│ ├── lib.rs &lt;span class="c1">## 默认lib包入口&lt;/span>
│ └── bin
│ └── main1.rs &lt;span class="c1">## 二进制可执行文件main1&lt;/span>
│ └── main2.rs &lt;span class="c1">## 二进制可执行文件main2&lt;/span>
├── tests
│ └── some_integration_tests.rs &lt;span class="c1">## 集成测试&lt;/span>
├── benches
│ └── simple_bench.rs &lt;span class="c1">## 性能测试&lt;/span>
└── examples
└── simple_example.rs &lt;span class="c1">## example&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://course.rs/basic/crate-module/intro.html#%E5%8C%85%E5%92%8C%E6%A8%A1%E5%9D%97">Rust语言圣经(Rust Course)-包和模块&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Substrate</title><link>https://justice.bj.cn/post/60.blockchain/substrate/</link><pubDate>Mon, 13 Jun 2022 16:32:28 +0800</pubDate><guid>https://justice.bj.cn/post/60.blockchain/substrate/</guid><description>&lt;h1 id="substrate">Substrate&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="参考">参考&lt;/h2></description></item><item><title>区块链UTXO模型</title><link>https://justice.bj.cn/post/60.blockchain/%E5%8C%BA%E5%9D%97%E9%93%BEutxo%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 13 Jun 2022 16:32:28 +0800</pubDate><guid>https://justice.bj.cn/post/60.blockchain/%E5%8C%BA%E5%9D%97%E9%93%BEutxo%E6%A8%A1%E5%9E%8B/</guid><description>&lt;h1 id="区块链utxo模型">区块链UTXO模型&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>UTXO(Unspent Transaction Output)是区块链中用来保存区块账户记录的方式之一。&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>blockchain_rust</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%B9%8Bblockchain/</link><pubDate>Sun, 12 Jun 2022 20:44:24 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%B9%8Bblockchain/</guid><description>&lt;h1 id="blockchain_rust">blockchain_rust&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>blockchain_rust是github上一个基于rust的blockchain实现；&lt;/p>
&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;ul>
&lt;li>block：&lt;/li>
&lt;/ul>
&lt;h2 id="操作">操作&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[&lt;/span>node1&lt;span class="o">]&lt;/span>$ mkdir -p data/node&lt;span class="o">{&lt;/span>1,2,3&lt;span class="o">}&lt;/span>
&lt;span class="o">[&lt;/span>node1&lt;span class="o">]&lt;/span>$ &lt;span class="nb">cd&lt;/span> data/node1
&lt;span class="c1">## 创建wallet&lt;/span>
&lt;span class="o">[&lt;/span>node1&lt;span class="o">]&lt;/span>$ ../../target/debug/blockchain_rust createwallet
Your new address: 13teoDGrDNhMrgGHHRESv7bhcnJoXnicqE
&lt;span class="c1">## 创建block0&lt;/span>
&lt;span class="o">[&lt;/span>node1&lt;span class="o">]&lt;/span>$ ../../target/debug/blockchain_rust createblockchain 13teoDGrDNhMrgGHHRESv7bhcnJoXnicqE
Mining the block
00518dae1ee13a19da96d24f865654eed74dfb3188f4ae0fe56616c03535acb9
Done!
&lt;span class="c1">## 手动同步创世区块数据&lt;/span>
&lt;span class="o">[&lt;/span>node2&lt;span class="o">]&lt;/span> &lt;span class="nb">cd&lt;/span> data/node2&lt;span class="p">;&lt;/span> cp -rf ../node1/data .
&lt;span class="o">[&lt;/span>node3&lt;span class="o">]&lt;/span> &lt;span class="nb">cd&lt;/span> data/node3&lt;span class="p">;&lt;/span> cp -rf ../node1/data .
&lt;span class="c1">## node2创建钱包&lt;/span>
&lt;span class="o">[&lt;/span>node2&lt;span class="o">]&lt;/span>$ ../../target/debug/blockchain_rust createwallet
Your new address: 1JvjDQGrmzVLLAo9dPsXYNNednuNZrGrAm
&lt;span class="o">[&lt;/span>node2&lt;span class="o">]&lt;/span>$ ../../target/debug/blockchain_rust createwallet
Your new address: 1JvjDQGrmzVLLAo9dPsXYNNednuNZrGrAm
&lt;span class="o">[&lt;/span>node2&lt;span class="o">]&lt;/span>$ ../../target/debug/blockchain_rust createwallet
Your new address: 1FztXwduMcABm6x2yxRWgozqT8g1dgeiFS
&lt;span class="c1">## 转账&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>IPFS(星际文件系统)</title><link>https://justice.bj.cn/post/60.blockchain/ipfs%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 12 Jun 2022 20:44:24 +0800</pubDate><guid>https://justice.bj.cn/post/60.blockchain/ipfs%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="ipfs星际文件系统">IPFS(星际文件系统)&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>IPFS&lt;/code>(InterPlanetary File System，星际文件系统), 是一个对等的分布式文件系统，用于存储和访问文件、网站、应用程序和数据。IPFS 旨在为分布式 Web——DWeb 提供动力；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IPFS项目通过整合已有的技术（BitTorrent、DHT、Git和SFS），创建一种点对点超媒体协议，试图打造一个更加快速、安全、开放的下一代互联网，实现互联网中永久可用、数据可以永久保存的全球文件存储系统。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同时，该协议有内容寻址、版本化特性，尝试补充甚至最终取代伴随了我们20多年的超文本传输协议（即HTTP协议）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IPFS是一个协议，也是一个P2P网络，它类似于现在的BT网络，只是拥有更强大的功能，使得IPFS拥有可以取代HTTP的潜力。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可防止&lt;a href="https://zh.m.wikipedia.org/wiki/DDoS" title="DDoS">DDoS&lt;/a>攻击；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="基本原理">基本原理&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>IPFS先将文件分成一个个block，每个block通过hash得到blockid；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个文件的所有blockid组成一个&lt;code>merkledag&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不同block通过&lt;code>KAD算法&lt;/code>分发到不同的节点上；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为保证可靠性，同一个block 可能有多个copy, 分别存储在不同的网络节点上；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="filecoin">Filecoin&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Filecoin是运行在IPFS上的一个激励层，是一个基于区块链的分布式存储网络，它把云存储变为一个算法市场，代币（FIL）在这里起到了很重要的作用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代币是沟通资源（存储和检索）使用者（IPFS用户）和资源的提供者（Filecoin矿工）之间的中介桥梁，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Filecoin协议拥有两个交易市场—数据检索和数据存储，交易双方在市场里面提交自己的需求，达成交易。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="get">Get&lt;/h2>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2022/06/12-18-52-38-ipfs_get.gif" alt="loading-ag-185">&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://zh.m.wikipedia.org/zh-hans/%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">星际文件系统 - 维基百科，自由的百科全书&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.aliyun.com/article/726565">https://developer.aliyun.com/article/726565&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.jianshu.com/p/3f7cc1ee9ec4">IPFS原理初探 - 简书&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.pseudoyu.com/zh/2021/03/25/blockchain_ipfs_structure/">IPFS 分布式存储协议分析与思考 · Pseudoyu&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Kademlia算法</title><link>https://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</link><pubDate>Sun, 12 Jun 2022 20:44:24 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</guid><description>&lt;h1 id="kademlia算法">Kademlia算法&lt;/h1>
&lt;hr>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Kademlia算法是2002年由Petar Maymounkov 和 David Mazières 所设计，以异或距离来对哈希表进行分层是其特点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Kademlia后来被eMule、BitTorrent等P2P软件采用作为底层算法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Kademlia可以作为信息安全技术的奠基之一。&lt;br>
Kademlia的优点在于：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>对于任意一个有[ 2(n−1) ,2𝑛)个节点的网络，最多只需要n步搜索即可找到目标节点；&lt;/li>
&lt;li>K-bucket的更新机制一定程度上保持了网络的活性和安全性。&lt;/li>
&lt;/ul>
&lt;p>Kademlia算法是一种分布式存储及路由的算法。&lt;/p>
&lt;p>什么是分布式存储？试想一下，一所1000人的学校，现在学校突然决定拆掉图书馆（不设立中心化的服务器），将图书馆里所有的书都分发到每位学生手上（所有的文件分散存储在各个节点上）。即是所有的学生，共同组成了一个分布式的图书馆。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-795f3af7231108b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800/format/webp" alt="">&lt;/p>
&lt;p>由中心图书馆到分布式图书馆&lt;/p>
&lt;p>在这种场景下，有几个关键的问题需要回答。&lt;/p>
&lt;h3 id="1关键问题">1）关键问题&lt;/h3>
&lt;ol>
&lt;li>每个同学手上都分配哪些书。即如何分配存储内容到各个节点，新增/删除内容如何处理。&lt;/li>
&lt;li>当你需要找到一本书，譬如《分布式算法》的时候，如何知道哪位同学手上有《分布式算法》（对1000个人挨个问一遍，“你有没有《分布式算法》？”，显然是个不经济的做法），又如何联系上这位同学。即一个节点如果想获取某个特定的文件，如何找到存储文件的节点/地址/路径。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-8b12f9959fa3144f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/358/format/webp" alt="">&lt;/p>
&lt;p>如何寻找需要的书籍？&lt;/p>
&lt;p>接下来，让我们来看看Kademlia算法如何巧妙地解决这些问题。&lt;/p>
&lt;h3 id="2节点的要素">2）节点的要素&lt;/h3>
&lt;p>首先我们来看看每个同学（节点）都有哪些属性：&lt;/p>
&lt;ul>
&lt;li>学号（Node ID，2进制，160位）&lt;/li>
&lt;li>手机号码（节点的IP地址及端口）&lt;/li>
&lt;/ul>
&lt;p>每个同学会维护以下内容：&lt;/p>
&lt;ul>
&lt;li>从图书馆分发下来的书本（被分配到需要存储的内容），每本书当然都有书名和书本内容（内容以&amp;lt;key, value&amp;gt;对的形式存储，可以理解为文件名和文件内容）；&lt;/li>
&lt;li>一个通讯录，包含一小部分其他同学的学号和手机号，通讯录按学号分层（一个路由表，称为“k-bucket”，按Node ID分层，记录有限个数的其他节点的ID和IP地址及端口）。&lt;/li>
&lt;/ul>
&lt;p>根据上面那个类比，可以看看这个表格：&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-ac0338100a380c61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/601/format/webp" alt="">&lt;/p>
&lt;p>概念对比&lt;/p>
&lt;p>&lt;em>（Hash的概念解释，可参见&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E5%2593%2588%25E5%25B8%258C%25E7%25AE%2597%25E6%25B3%2595%2F4960188">百度百科-哈希算法&lt;/a>）&lt;/em>&lt;/p>
&lt;p>&lt;em>关于为什么不是每个同学都有全量通讯录（每个节点都维护全量路由信息）：其一，分布式系统中节点的进入和退出是相当频繁的，每次有变动时都全网广播通讯录更新，通讯量会很大；其二，一旦任意一个同学被坏人绑架了（节点被黑客攻破），则坏人马上就拥有了所有人的手机号码，这并不安全。&lt;/em>&lt;/p>
&lt;h3 id="3文件的存储及查找">3）文件的存储及查找&lt;/h3>
&lt;p>原来收藏在图书馆里，按索引号码得整整齐齐的书，以一种什么样的方式分发到同学们手里呢？&lt;/p>
&lt;p>大致的原则，包括：&lt;/p>
&lt;p>    1）书本能够比较均衡地分布在同学们的手里，不会出现部分同学手里书特别多、而大部分同学连一本书都没有的情况；&lt;/p>
&lt;p>    2）同学想找一本特定的书的时候，能够一种相对简单的索引方式找到这本书。&lt;br>
Kademlia作了下面这种安排：&lt;br>
假设《分布式算法》这本书的书名的hash值是 &lt;em>00010000&lt;/em>，那么这本书就会被要求存在学号为&lt;em>00010000&lt;/em>的同学手上。（这要求hash算法的值域与node ID的值域一致。Kademlia的Node ID是160位2进制。这里的示例对Node ID进行了简略）&lt;br>
但还得考虑到会有同学缺勤。万一&lt;em>00010000&lt;/em>今天没来上学（节点没有上线或彻底退出网络），那《分布式算法》这本书岂不是谁都拿不到了？那算法要求这本书不能只存在一个同学手上，而是被要求同时存储在学号最接近&lt;em>00010000&lt;/em>的k位同学手上，即&lt;em>00010001&lt;/em>、&lt;em>00010010&lt;/em>、&lt;em>00010011&lt;/em>…等同学手上都会有这本书。&lt;/p>
&lt;p>同样地，当你需要找《分布式算法》这本书时，将书名hash一下，得到 &lt;em>00010000&lt;/em>，这个便是索书号，你就知道该找哪（几）位同学了。剩下的问题，就是找到这（几）位同学的手机号。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-54dfcb165392638e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/628/format/webp" alt="">&lt;/p>
&lt;p>书籍搜索定位&lt;/p>
&lt;h3 id="4节点的异或距离">4）节点的异或距离&lt;/h3>
&lt;p>由于你手上只有一部分同学的通讯录，你很可能并没有&lt;em>00010000&lt;/em>的手机号（IP地址）。那如何联系上目标同学呢？&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-41d8839bc652fea1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/338/format/webp" alt="">&lt;/p>
&lt;p>通讯录上并没有目标同学的情况&lt;/p>
&lt;p>一个可行的思路就是在你的通讯录里找到一位拥有目标同学的联系方式的同学。前面提到，每位同学手上的通讯录都是按距离分层的。算法的设计是，如果一个同学离你越近，你手上的通讯录里存有ta的手机号码的概率越大。而算法的核心的思路就可以是：当你知道目标同学Z与你之间的距离，你可以在你的通讯录上先找到一个你认为与同学Z最相近的同学B，请同学B再进一步去查找同学Z的手机号。&lt;/p>
&lt;p>上文提到的距离，是学号（Node ID）之间的异或距离(XOR distance）。异或是针对yes/no或者二进制的运算.&lt;/p>
&lt;blockquote>
&lt;p>异或的运算法则为：0⊕0=0，1⊕0=1，0⊕1=1，1⊕1=0（同为0，异为1）&lt;br>
&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E5%25BC%2582%25E6%2588%2596%2F10993677%3Ffr%3Daladdin">百度百科-异或&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>举2个例子：&lt;br>
&lt;em>01010000&lt;/em>与&lt;em>01010010&lt;/em>距离（即是2个ID的异或值）为&lt;em>00000010&lt;/em>（换算为十进制即为2）；&lt;br>
&lt;em>01000000&lt;/em>与&lt;em>00000001&lt;/em>距离为&lt;em>01000001&lt;/em>（换算为十进制即为26+1，即65）；&lt;br>
如此类推。&lt;/p>
&lt;p>那通讯录是如何按距离分层呢？下面的示例会告诉你，按异或距离分层，基本上可以理解为按位数分层。设想以下情景：&lt;br>
以&lt;em>0000110&lt;/em>为基础节点，如果一个节点的ID，前面所有位数都与它相同，只有最后1位不同，这样的节点只有1个——&lt;em>0000111&lt;/em>，与基础节点的异或值为&lt;em>0000001&lt;/em>，即距离为1；对于&lt;em>0000110&lt;/em>而言，这样的节点归为**“k-bucket 1”**；&lt;br>
如果一个节点的ID，前面所有位数相同，从倒数第2位开始不同，这样的节点只有2个：*0000101*、*0000100*，与基础节点的异或值为*0000011*和*0000010*，即距离范围为3和2；对于*0000110*而言，这样的节点归为**“k-bucket 2”**；&lt;br>
……&lt;br>
如果一个节点的ID，前面所有位数相同，从倒数第n位开始不同，这样的节点只有2(i-1)个，与基础节点的距离范围为[2(i-1), 2i）；对于*0000110*而言，这样的节点归为**“k-bucket i”**；&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-6bdd6e96a80d0780.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/430/format/webp" alt="">&lt;/p>
&lt;p>按位数区分k-bucket&lt;/p>
&lt;p>对上面描述的另一种理解方式：如果将整个网络的节点梳理为一个按节点ID排列的二叉树，树最末端的每个叶子便是一个节点，则下图就比较直观的展现出，节点之间的距离的关系。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-c12846900b0525db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/913/format/webp" alt="">&lt;/p>
&lt;p>k-bucket示意图：右下角的黑色实心圆，为基础节点（按wiki百科的配图修改）&lt;/p>
&lt;p>回到我们的类比。每个同学只维护一部分的通讯录，这个通讯录按照距离分层（可以理解为按学号与自己的学号从第几位开始不同而分层），即k-bucket1, k-bucket 2, k-bucket 3…虽然每个k-bucket中实际存在的同学人数逐渐增多，但每个同学在它自己的每个k-bucket中只记录k位同学的手机号（k个节点的地址与端口，这里的k是一个可调节的常量参数）。&lt;br>
由于学号（节点的ID）有160位，所以每个同学的通讯录中共分160层（节点共有160个k-bucket）。整个网络最多可以容纳2^160个同学（节点），但是每个同学（节点）最多只维护160 * k 行通讯录（其他节点的地址与端口）。&lt;/p>
&lt;h3 id="5节点定位">5）节点定位&lt;/h3>
&lt;p>我们现在来阐述一个完整的索书流程。&lt;/p>
&lt;p>A同学（学号&lt;em>00000110&lt;/em>）想找《分布式算法》，&lt;/p>
&lt;p>A首先需要计算书名的哈希值，hash(《分布式算法》) = &lt;em>00010000&lt;/em>。那么A就知道ta需要找到&lt;em>00010000&lt;/em>号同学（命名为Z同学）或学号与Z邻近的同学。&lt;br>
Z的学号&lt;em>00010000&lt;/em>与自己的异或距离为 &lt;em>00010110&lt;/em>，距离范围在[24, 25)，所以这个Z同学可能在k-bucket 5中（或者说，Z同学的学号与A同学的学号从第5位开始不同，所以Z同学可能在k-bucket 5中）。&lt;br>
然后A同学看看自己的k-bucket 5有没有Z同学：&lt;/p>
&lt;ul>
&lt;li>如果有，那就直接联系Z同学要书；&lt;/li>
&lt;li>如果没有，在k-bucket 5里随便找一个B同学（注意任意B同学，它的学号第5位肯定与Z相同，即它与Z同学的距离会小于24，相当于比Z、A之间的距离缩短了一半以上），请求B同学在它自己的通讯录里按同样的查找方式找一下Z同学：&lt;br>
&amp;ndash; 如果B知道Z同学，那就把Z同学的手机号（IP Address）告诉A；&lt;br>
&amp;ndash; 如果B也不知道Z同学，那B按同样的搜索方法，可以在自己的通讯录里找到一个离Z更近的C同学（Z、C之间距离小于23），把C同学推荐给A；A同学请求C同学进行下一步查找。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-1396765e4e0afb12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/866/format/webp" alt="">&lt;/p>
&lt;p>查询方式示意&lt;/p>
&lt;p>Kademlia的这种查询机制，有点像是将一张纸不断地对折来收缩搜索范围，保证对于任意n个学生，最多只需要查询log2(n)次，即可找到获得目标同学的联系方式（即在对于任意一个有[2(n−1), 2n)个节点的网络，最多只需要n步搜索即可找到目标节点）。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/947209-1143169c8318a2ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/666/format/webp" alt="">&lt;/p>
&lt;p>每次搜索都将距离至少收缩一半&lt;/p>
&lt;p>以上便是Kademlia算法的基本原理。&lt;/p>
&lt;p>以下再简要介绍协议中的技术细节。&lt;/p>
&lt;h3 id="6算法的三个参数keyspacek和α">6）算法的三个参数：keyspace，k和α&lt;/h3>
&lt;ul>
&lt;li>keyspace&lt;br>
&amp;ndash; 即ID有多少位&lt;br>
&amp;ndash; 决定每个节点的通讯录有几层&lt;/li>
&lt;li>k&lt;br>
&amp;ndash; 每个一层k-bucket里装k个node的信息，即&amp;lt;node ID, IP Adress, port&amp;gt;&lt;br>
&amp;ndash; 每次查找node时，返回k个node的信息&lt;br>
&amp;ndash; 对于某个特定的data，离其key最近的k个节点被会要求存储这个data&lt;/li>
&lt;li>α&lt;br>
&amp;ndash; 每次向其他node请求查找某个node时，会向α个node发出请求&lt;/li>
&lt;/ul>
&lt;h3 id="7节点的指令">7）节点的指令&lt;/h3>
&lt;p>Kademlia算法中，每个节点只有4个指令&lt;/p>
&lt;ul>
&lt;li>PING&lt;br>
&amp;ndash; 测试一个节点是否在线&lt;/li>
&lt;li>STORE&lt;br>
&amp;ndash; 要求一个节点存储一份数据&lt;/li>
&lt;li>FIND_NODE&lt;br>
&amp;ndash; 根据节点ID查找一个节点&lt;/li>
&lt;li>FIND_VALUE&lt;br>
&amp;ndash; 根据KEY查找一个数据，实则上跟FIND_NODE非常类似&lt;/li>
&lt;/ul>
&lt;h3 id="8k-bucket的维护及更新机制">8)k-bucket的维护及更新机制&lt;/h3>
&lt;ul>
&lt;li>每个bucket里的节点都按最后一次接触的时间倒序排列&lt;/li>
&lt;li>每次执行四个指令中的任意一个都会触发更新&lt;/li>
&lt;li>当一个节点与自己接触时，检查它是否在K-bucket中&lt;br>
&amp;ndash; 如果在，那么将它挪到k-bucket列表的最底（最新）&lt;br>
&amp;ndash; 如果不在，PING一下列表最上面（最旧）的一个节点&lt;br>
&amp;ndash; a) 如果PING通了，将旧节点挪到列表最底，并丢弃新节点&lt;br>
&amp;ndash; b) 如果PING不通，删除旧节点，并将新节点加入列表&lt;/li>
&lt;/ul>
&lt;p>该机制保证了任意节点加入和离开都不影响整体网络。&lt;/p>
&lt;h3 id="9总结">9）总结&lt;/h3>
&lt;p>Kademlia是分布式哈希表（Distributed Hash Table, DHT）的一种。而DHT是一类去中心化的分布式系统。&lt;/p>
&lt;p>在这类系统中，每个节点（node）分别维护一部分的存储内容以及其他节点的路由/地址，使得网络中任何参与者（即节点）发生变更（进入/退出）时，对整个网络造成的影响最小。&lt;/p>
&lt;p>DHT可以用于构建更复杂的应用，包括分布式文件系统、点对点技术文件分享系统、合作的网页高速缓存、域名系统以及实时通信等。&lt;/p>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDistributed_hash_table">wiki百科-分布式哈希表&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FKademlia">wiki百科-Kademlia&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://links.jianshu.com/go?to=http%3A%2F%2Fpdos.csail.mit.edu%2F%7Epetar%2Fpapers%2Fmaymounkov-kademlia-lncs.pdf">Kademlia: A Peer-to-peer information system based on the XOR Metric&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://links.jianshu.com/go?to=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000000351815">王子亭的Kademlia笔记&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>