<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Justice的小站</title><link>https://justice.bj.cn/</link><description>Recent content on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 13 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>Justice's Blog</title><link>https://justice.bj.cn/homepage/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/about/</guid><description>&lt;h2 id="self-introduction">Self Introduction&lt;/h2>
&lt;p>Cras ex dui, tristique a libero eget, consectetur semper ligula. Nunc augue arcu, malesuada a nisi et, molestie finibus metus. Sed lacus odio, ultricies a nisl vitae, sollicitudin tempor ipsum. Vivamus quis feugiat arcu. Sed mi nunc, efficitur quis tellus vitae, posuere mattis metus. Phasellus in mattis dui. Nullam blandit, augue non ullamcorper dapibus, lacus dui molestie massa, in iaculis purus lectus eu lectus. Duis hendrerit lacinia tellus, sit amet feugiat dolor placerat id. Aenean ac velit massa. Vivamus feugiat dui at magna viverra, ut dictum nunc rutrum. Duis eget sapien finibus, lobortis orci id, vestibulum tellus. Maecenas lobortis urna libero, quis fermentum lectus lobortis nec. Nullam laoreet volutpat libero, ac mattis magna ullamcorper quis. Duis eget ipsum eu nisi mattis cursus et vitae turpis.&lt;/p>
&lt;p>Aliquam pretium diam eget leo feugiat finibus. Donec malesuada commodo ipsum. Aenean a massa in lacus venenatis vestibulum. Duis vel sem quis elit iaculis consectetur et quis dolor. Morbi eu ipsum hendrerit, malesuada ante sed, dapibus est. Suspendisse feugiat nulla ut gravida convallis. Phasellus id massa posuere, rhoncus justo ut, porttitor dolor. Nulla ultrices malesuada egestas. Nunc fermentum tincidunt sem ac vulputate. Donec mollis sollicitudin justo eget varius. Donec ornare velit et felis blandit, id molestie sapien lobortis. Morbi eget tristique justo. Mauris posuere, nibh eu laoreet ultricies, ligula erat iaculis sapien, vel dapibus lacus libero ut diam. Etiam viverra ante felis, et scelerisque nunc pellentesque vitae. Praesent feugiat dictum molestie.&lt;/p>
&lt;h2 id="details">Details&lt;/h2>
&lt;p>Nunc pellentesque vitae:&lt;/p>
&lt;ul>
&lt;li>Morbi accumsan nibh efficitur diam molestie, non dignissim diam facilisis.&lt;/li>
&lt;li>Donec dignissim leo in mollis faucibus.&lt;/li>
&lt;li>Donec blandit lacus a pellentesque fermentum.&lt;/li>
&lt;/ul>
&lt;p>Donec mollis sollicitudin:&lt;/p>
&lt;ul>
&lt;li>Nunc dictum purus ornare purus consectetur, eu pellentesque massa ullamcorper.&lt;/li>
&lt;li>Aliquam eu leo vitae justo aliquam tincidunt.&lt;/li>
&lt;li>Fusce non massa id augue interdum feugiat sed et nulla.&lt;/li>
&lt;li>Vivamus molestie augue in tristique laoreet.&lt;/li>
&lt;/ul></description></item><item><title>Pages</title><link>https://justice.bj.cn/homepage/pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/pages/</guid><description/></item><item><title>Experiences</title><link>https://justice.bj.cn/homepage/experiences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/experiences/</guid><description/></item><item><title>Vintage</title><link>https://justice.bj.cn/homepage/vintage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/vintage/</guid><description/></item><item><title>Blank</title><link>https://justice.bj.cn/homepage/blank/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/homepage/blank/</guid><description>
&lt;div style="text-align:center">
&lt;p>Write anything you like here!&lt;/p>
&lt;/div></description></item><item><title>二叉树的最近公共祖先</title><link>https://justice.bj.cn/post/leetcode/doc/236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid><description>&lt;h1 id="二叉树的最近公共祖先httpsleetcode-cncomproblemslowest-common-ancestor-of-a-binary-treedescription-httpsleetcode-cncomproblemslowest-common-ancestor-of-a-binary-treedescription">&lt;a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/description/" title="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/description/">二叉树的最近公共祖先&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Category&lt;/th>
&lt;th>Difficulty&lt;/th>
&lt;th>Likes&lt;/th>
&lt;th>Dislikes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>algorithms&lt;/td>
&lt;td>Medium (68.41%)&lt;/td>
&lt;td>1530&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Tags&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://leetcode.com/tag/tree" title="https://leetcode.com/tag/tree">&lt;code>tree&lt;/code>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Companies&lt;/strong>&lt;/p>
&lt;p>&lt;code>amazon&lt;/code> | &lt;code>apple&lt;/code> | &lt;code>facebook&lt;/code> | &lt;code>linkedin&lt;/code> | &lt;code>microsoft&lt;/code>&lt;/p>
&lt;p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。&lt;/p>
&lt;p>&lt;a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin" title="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin">百度百科&lt;/a>中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（&lt;strong>一个节点也可以是它自己的祖先&lt;/strong>）。”&lt;/p>
&lt;p>&lt;strong>示例 1：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出：3
解释：节点 5 和节点 1 的最近公共祖先是节点 3 。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 2：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="">&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
输出：5
解释：节点 5 和节点 4 的最近公共祖先是节点 5 。因为根据定义最近公共祖先节点可以为节点本身。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>示例 3：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">输入：root = [1,2], p = 1, q = 2
输出：1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>提示：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>树中节点数目在范围 &lt;code>[2, 105]&lt;/code> 内。&lt;/li>
&lt;li>&lt;code>-109 &amp;lt;= Node.val &amp;lt;= 109&lt;/code>&lt;/li>
&lt;li>所有 &lt;code>Node.val&lt;/code> &lt;code>互不相同&lt;/code> 。&lt;/li>
&lt;li>&lt;code>p != q&lt;/code>&lt;/li>
&lt;li>&lt;code>p&lt;/code> 和 &lt;code>q&lt;/code> 均存在于给定的二叉树中。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/comments/" title="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/comments/">Discussion&lt;/a> | &lt;a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/" title="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/">Solution&lt;/a>&lt;/p>
&lt;h2 id="解法">解法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">class&lt;/span> &lt;span class="nc">Solution&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> ## 解题思路
&lt;/span>&lt;span class="cm"> * 最近公共祖先为:
&lt;/span>&lt;span class="cm"> 1. 若root为null，或为p,q之一，则最近公共祖先为root；
&lt;/span>&lt;span class="cm"> 2. 否则，分别递归在左右子树中查找最近公共祖先；
&lt;/span>&lt;span class="cm"> 3. 如果左右子树中都不存在最近公共祖先，则为root；
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">lowestCommonAncestor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lowestCommonAncestor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">left&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lowestCommonAncestor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nl">right&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">right&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="nl">left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>有序链表转换二叉搜索树</title><link>https://justice.bj.cn/post/leetcode/doc/109.%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/109.%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid><description>&lt;h1 id="有序链表转换二叉搜索树httpsleetcode-cncomproblemsconvert-sorted-list-to-binary-search-treedescription-httpsleetcode-cncomproblemsconvert-sorted-list-to-binary-search-treedescription">&lt;a href="https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/description/" title="https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/description/">有序链表转换二叉搜索树&lt;/a>&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Category&lt;/th>
&lt;th>Difficulty&lt;/th>
&lt;th>Likes&lt;/th>
&lt;th>Dislikes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>algorithms&lt;/td>
&lt;td>Medium (76.22%)&lt;/td>
&lt;td>659&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Tags&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://leetcode.com/tag/linked-list" title="https://leetcode.com/tag/linked-list">&lt;code>linked-list&lt;/code>&lt;/a> | &lt;a href="https://leetcode.com/tag/depth-first-search" title="https://leetcode.com/tag/depth-first-search">&lt;code>depth-first-search&lt;/code>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Companies&lt;/strong>&lt;/p>
&lt;p>&lt;code>zenefits&lt;/code>&lt;/p>
&lt;p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。&lt;/p>
&lt;p>本题中，一个高度平衡二叉树是指一个二叉树&lt;em>每个节点&lt;/em> 的左右两个子树的高度差的绝对值不超过 1。&lt;/p>
&lt;p>&lt;strong>示例:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">给定的有序链表： [-10, -3, 0, 5, 9],
一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：
0
/ \
-3 9
/ /
-10 5
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>&lt;a href="https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/comments/" title="https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/comments/">Discussion&lt;/a> | &lt;a href="https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/solution/" title="https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/solution/">Solution&lt;/a>&lt;/p>
&lt;h2 id="解法">解法&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="k">class&lt;/span> &lt;span class="nc">Solution&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> ## 解题思路
&lt;/span>&lt;span class="cm"> * 1. 使用快慢指针查找链表的中间节点；
&lt;/span>&lt;span class="cm"> * 2. 根据中间节点生成二叉搜索树的根节点；
&lt;/span>&lt;span class="cm"> * 3. 链表前半部分递归建立左子树；
&lt;/span>&lt;span class="cm"> * 4. 链表后半部分递归建立右子树；
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">sortedListToBST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ListNode&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">auto&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p2&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span>&lt;span class="n">p2&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">p&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">p1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">p2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">p2&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">//auto midNode = split2SubList(head);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sortedListToBST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sortedListToBST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>纠删码(ErasureCode)</title><link>https://justice.bj.cn/post/13.algorithm/erasurecode/</link><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/13.algorithm/erasurecode/</guid><description>&lt;h1 id="纠删码erasurecode">纠删码(ErasureCode)&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>纠删码&lt;/code>是通过利用纠删码算法将原始的数据进行编码得到校验，并将数据和校验一并存储起来，以达到容错的目的;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其基本思想：是对于任意n元1次方程，需要n个方程可以求解；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于n块数据，为了保证其任意损坏m块，任意能恢复出来，则需要额外增加m个一次方程，则需要存储(n(数据块)+m(校验块))份数据；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>则这n+m个n元1次方程系数将是一个[n, n+m]的矩阵；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为保证任意的m块丢失都能求解，则改矩阵需满足任意的[n,n]维矩阵都必须可逆，满足该性质的矩阵为范德蒙矩阵或柯西矩阵；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>纠删码技术在&lt;a href="http://www.chinabyte.com/keyword/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/%20//t%20_blank">分布式存储&lt;/a> 系统中的应用主要有三类，阵列纠删码（Array Code: RAID5、RAID6等）、RS(Reed-Solomon)里德-所罗门类纠删码和LDPC(LowDensity Parity Check Code)低密度奇偶校验纠删码。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Reed-Solomon&lt;/code>（RS）码是存储系统较为常用的一种纠删码，它有两个参数 k 和 m，记为 RS(k，m)。如图所示，k 个数据块组成一个向量被乘上一个生成矩阵（Generator Matrix）GT 从而得到一个码字（codeword）向量，该向量由 k 个数据块和 m 个校验块构成。如果一个数据块丢失，可以用(GT)-1 乘以码字向量来恢复出丢失的数据块。RS(k，m)最多可容忍 m 个块（包括数据块和校验块）丢失。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/02/11-13-03-57-2022-02-11-13-03-54-image.png" alt="">&lt;/p>
&lt;h2 id="lrc">LRC&lt;/h2>
&lt;h2 id="ec在存储中的实践">EC在存储中的实践&lt;/h2>
&lt;ul>
&lt;li>HDFS 3.0 Ecode&lt;/li>
&lt;li>Ceph ECode&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://www.iteblog.com/archives/1684.html">https://www.iteblog.com/archives/1684.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/Androidlushangderen/article/details/51923582">https://blog.csdn.net/Androidlushangderen/article/details/51923582&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/itlz/p/14090193.html">详解Hadoop3.x新特性功能-HDFS纠删码 - 五分钟学大数据 - 博客园&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/69374970">知乎-纠删码 Erasure Code&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.51cto.com/u_15081047/2589369">网易数帆 Ceph EC 纠删码在线存储性能优化实践【图文】_mb5ffbc7cecbf87_51CTO博客&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HDFSErasureCoding.html">Apache Hadoop 3.3.1 – HDFS Erasure Coding&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.infoq.cn/article/b3clz4xtpjoprdkqq6fq">HDFS EC在滴滴的实践-InfoQ&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.modb.pro/db/113920">Apache Hadoop3 EC 原理与实践 - 墨天轮&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.shuzhiduo.com/A/RnJWk87YJq/">Ceph的正确玩法之Ceph纠删码理论与实践&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>CubeFS-BlobStore</title><link>https://justice.bj.cn/post/40.storage/chubaofs/cubefs-blobstore/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/chubaofs/cubefs-blobstore/</guid><description>&lt;h1 id="cubefs-blobstore">CubeFS-BlobStore&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>CubeFS-BlobStore是一个高可靠、高可用、低成本、支持超大规模(EB)的分布式存储系统。采用纠删码中的Reed-Solomon编码，对比三副本，以更低的存储成本提供更高的数据耐久性保障，支持多种纠删码模式和多可用区部署，同时针对小文件做了专门优化，可满足不同业务场景的存储需求。&lt;/p>
&lt;h2 id="erasurecode">ErasureCode&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Erasure Code(纠删码)&lt;/strong> 通过对n个同样大小的数据块通过&lt;strong>特定矩阵&lt;/strong>计算出m个同样大小校验块，并将n个数据块和m个校验块同时存储的方式来保证这n+m个数据块中，任意最多m块数据丢失，都能通过剩下的数据块完全恢复出之前的n个数据；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其理论实质其实是n元1次方程的求解；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为满足任意的m个块的求解，[n, n+m]阶系数矩阵需满足任意的[n, n]阶子矩阵都可逆，满足该条件的矩阵为范德蒙德矩阵或柯西矩阵；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/02/11-13-03-57-2022-02-11-13-03-54-image.png" alt="">&lt;/p>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/02/08-10-42-13-2022-02-08-10-42-09-image.png" alt="">&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>模块&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Access&lt;/td>
&lt;td>接入模块，对外提供数据读、写和删除接口&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ClusterManager&lt;/td>
&lt;td>元数据管理模块,负责集群管理和卷的生成&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Allocator&lt;/td>
&lt;td>ClusterManager的代理模块，提供数据写入空间的分配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BlobNode&lt;/td>
&lt;td>数据存储模块&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Scheduler&lt;/td>
&lt;td>异步任务调度中心，负责卷修补、迁移和回收任务的生成和调度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Worker&lt;/td>
&lt;td>卷修补、迁移和回收任务执行模块&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MQProxy&lt;/td>
&lt;td>修补和删除操作消息保存模块,用于后续异步执行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tinker&lt;/td>
&lt;td>修补和删除操作异步执行模块&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="encoder">EnCoder&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// ec参数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Tactic&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">N&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//数据块个数；
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">M&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//校验块个数;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">L&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//LRC中，本地校验块个数；
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">AZCount&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//分区个数;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">PutQuorum&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//写操作时，最少写成功的数据块个数,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 为了保证写入时，有一个az挂掉后还能恢复数，最小写入块数必须&amp;gt;=(N+M)/AZCount+N
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">GetQuorum&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//读操作时，最少读成功的数据块个数;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">MinShardSize&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">//每个数据块最小大小；
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//当1en(data) &amp;lt; MinShardSize*N, 每个shard大小为MinShardSize, 后面不够的填0
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//当len(data) &amp;gt; MinShardSize*N, 每个shard大小为[len(data)/N], 后面填0;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 预制的ec
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">constCodeModeTactic&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">CodeMode&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">Tactic&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">EC15P12&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC6P6&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC16P20L2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCounect&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">34&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC6P10L2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="c1">// single az
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">EC12P4&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC16P4&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">19&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC3P3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC10P4&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC6P3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="c1">// for env test
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">EC6P3L3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC6P6Align0&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize0B&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC6P6Align512&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize512B&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="nx">EC4P4L2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">M&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">L&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">AZCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PutQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">GetQuorum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">MinShardSize&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">alignSize2KB&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//vol layout ep:EC6P10L2
&lt;/span>&lt;span class="c1">//|----N------|--------M----------------|--L--|
&lt;/span>&lt;span class="c1">//|0,1,2,3,4,5|6,7,8,9,10,11,12,13,14,15|16,17|
&lt;/span>&lt;span class="c1">// global stripe:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], n=6 m=10
&lt;/span>&lt;span class="c1">// two local stripes:
&lt;/span>&lt;span class="c1">// local stripe1:[0,1,2, 6, 7, 8, 9,10, 16] n=8 m=1
&lt;/span>&lt;span class="c1">// local stripe2:[3,4,5, 11,12,13,14,15, 17] n=8 m=1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="资源管理">资源管理&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Volume&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Disk&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Cluster&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="cluster集群">Cluster(集群)&lt;/h3>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="volume卷">Volume(卷)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Volume是数据管理逻辑单元，是面向客户端的数据视图；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基本信息&lt;/p>
&lt;ul>
&lt;li>
&lt;p>vid(32bits)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CodeMode: 编码模式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Status: 状态&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HealthScore: 健康分&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Total: 总空间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Free: 可用空间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Used: 已使用空间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CreateByNodeID: 创建NodeID&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Volume Status&lt;/p>
&lt;ul>
&lt;li>
&lt;p>idle:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>active:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>lock:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>unlocking&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//卷信息
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">VolumeInfo&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Units&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">Unit&lt;/span>
&lt;span class="nx">VolumeInfoBase&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//卷单元
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Unit&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Vuid&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Vuid&lt;/span>
&lt;span class="nx">DiskID&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DiskID&lt;/span>
&lt;span class="nx">Host&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="disk磁盘">Disk(磁盘)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Disk是BlobNode节点上一个格式化后挂载到某一目录的物理磁盘，用来存储具体的数据；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Disk基本信息包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>DiskID: 磁盘ID(uint32), 1~1^31-1；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ClusterID: 所属ClusterID(uint32)；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Idc: Idc&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Path：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Host：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Status&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ReadOnly: 是否只读&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Disk Status包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Normal: 正常&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Broken:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Repairing&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Repaired&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Droped&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// disk format
&lt;/span>&lt;span class="c1">// blobnode/core/format.go
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;span class="cm"> * ${diskRoot}/
&lt;/span>&lt;span class="cm"> * - .sys/ //disk
&lt;/span>&lt;span class="cm"> * - .format.json
&lt;/span>&lt;span class="cm"> * - .format.json.tmp
&lt;/span>&lt;span class="cm"> * - .trash/ //回收站，被清理的chunk
&lt;/span>&lt;span class="cm"> * - data/ //disk数据信息, chunk file
&lt;/span>&lt;span class="cm"> - &amp;lt;chunkID1&amp;gt;file // chunk file 1 (最多8196个chunk)
&lt;/span>&lt;span class="cm"> - &amp;lt;chunkID2&amp;gt;file // chunk file 2
&lt;/span>&lt;span class="cm"> * - meta/ //disk元信息
&lt;/span>&lt;span class="cm"> - superblock/ //disk超级块，disk meta kvdb
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="c1">// 磁盘格式信息受保护域，
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">FormatInfoProtectedField&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">DiskID&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DiskID&lt;/span> &lt;span class="s">`json:&amp;#34;diskid&amp;#34;`&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Version&lt;/span> &lt;span class="kt">uint8&lt;/span> &lt;span class="s">`json:&amp;#34;version&amp;#34;`&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Ctime&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="s">`json:&amp;#34;ctime&amp;#34;`&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Format&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;format&amp;#34;`&lt;/span> &lt;span class="c1">//disk格式，当前只支持fs
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">//磁盘格式信息
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">FormatInfo&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">FormatInfoProtectedField&lt;/span>
&lt;span class="nx">CheckSum&lt;/span> &lt;span class="kt">uint32&lt;/span> &lt;span class="s">`json:&amp;#34;check_sum&amp;#34;`&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//disk metadb(rocksdb)
&lt;/span>&lt;span class="c1">// k ---- v
&lt;/span>&lt;span class="c1">// disk/&amp;lt;diskid&amp;gt; [diskid]
&lt;/span>&lt;span class="c1">// chunk/&amp;lt;chunkid&amp;gt; [chunkid]
&lt;/span>&lt;span class="c1">// vuid/&amp;lt;vuid&amp;gt; [vuid]
&lt;/span>&lt;span class="c1">// diskinfo [diskmeta]
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//DiskMeta
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">DiskMeta&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">FormatInfo&lt;/span>
&lt;span class="nx">Host&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;host&amp;#34;`&lt;/span>
&lt;span class="nx">Path&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="s">`json:&amp;#34;path&amp;#34;`&lt;/span>
&lt;span class="nx">Status&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">DiskStatus&lt;/span> &lt;span class="s">`json:&amp;#34;status&amp;#34;`&lt;/span>
&lt;span class="nx">Registered&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="s">`json:&amp;#34;registered&amp;#34;`&lt;/span>
&lt;span class="nx">Readonly&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="s">`json:&amp;#34;readonly&amp;#34;`&lt;/span>
&lt;span class="nx">Mtime&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="s">`json:&amp;#34;mtime&amp;#34;`&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="chunk">Chunk&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Chunk是对Disk上具体数据的一种抽象，当前的chunk实现为一个file；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>chunk file 位于disk的data目录下, 以chunkID为名的file；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>chunkID为vuid+创建chunk时的时间戳；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个chunk由多个连续的shard组成，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>chunk status:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Default:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Normal:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ReadOnly:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Release:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// cubufs-blobstore/blobnode/core/shard.go
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// chunk datafile format:
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | chunk header | (4k)
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | shard | ----------------------
&lt;/span>&lt;span class="c1">// | shard | | header (32 Bytes) |
&lt;/span>&lt;span class="c1">// | shard | ----&amp;gt; | data (...) |
&lt;/span>&lt;span class="c1">// | shard | | footer (8 Bytes) |
&lt;/span>&lt;span class="c1">// | .... | ----------------------
&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">// Chunkdata header format:
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | magic number | ---- 4 bytes
&lt;/span>&lt;span class="c1">// | version | ---- 1 byte
&lt;/span>&lt;span class="c1">// | parent chunk | ---- 16 byte //compact前的chunk
&lt;/span>&lt;span class="c1">// | create time | ---- 8 byte
&lt;/span>&lt;span class="c1">// | padding | ---- aligned with shard padding size ( 4k-4-1-16-8)
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// shard
&lt;/span>&lt;span class="c1">// shard header format:
&lt;/span>&lt;span class="c1">// ---------------------
&lt;/span>&lt;span class="c1">// |crc(header)(uint32)|
&lt;/span>&lt;span class="c1">// | magic (uint32) |
&lt;/span>&lt;span class="c1">// | bid (int64) |
&lt;/span>&lt;span class="c1">// | vuid (uint64) |
&lt;/span>&lt;span class="c1">// | size (uint32) |
&lt;/span>&lt;span class="c1">// | padding (4 bytes) |
&lt;/span>&lt;span class="c1">// ---------------------
&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">// shard data format.
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | block | ---- 64 KiB
&lt;/span>&lt;span class="c1">// | block | ---- 64 KiB
&lt;/span>&lt;span class="c1">// | block | ---- 64 KiB
&lt;/span>&lt;span class="c1">// ---------------
&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">// block format.
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | crc | ---- 4 Byte
&lt;/span>&lt;span class="c1">// | data | ---- (64 KiB - 4)
&lt;/span>&lt;span class="c1">// ---------------
&lt;/span>&lt;span class="c1">//
&lt;/span>&lt;span class="c1">// footer format:
&lt;/span>&lt;span class="c1">// ----------------------
&lt;/span>&lt;span class="c1">// | magic (int32) |
&lt;/span>&lt;span class="c1">// | crc(shard) (int32) |
&lt;/span>&lt;span class="c1">// | padding (0 bytes) |
&lt;/span>&lt;span class="c1">// ----------------------
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Chunkdata has a header (4k).
&lt;/span>&lt;span class="c1">// Chunkdata header format:
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | magic number | ---- 4 bytes
&lt;/span>&lt;span class="c1">// | version | ---- 1 byte
&lt;/span>&lt;span class="c1">// | parent chunk | ---- 16 byte
&lt;/span>&lt;span class="c1">// | create time | ---- 8 byte
&lt;/span>&lt;span class="c1">// | padding | ---- aligned with shard padding size ( 4k-4-1-16-8)
&lt;/span>&lt;span class="c1">// --------------
&lt;/span>&lt;span class="c1">// | shard |
&lt;/span>&lt;span class="c1">// | shard |
&lt;/span>&lt;span class="c1">// | shard |
&lt;/span>&lt;span class="c1">// | shard |
&lt;/span>&lt;span class="c1">// | shard |
&lt;/span>&lt;span class="c1">// | .... |
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">ChunkHeader&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">magic&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">_chunkMagicSize&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;span class="nx">version&lt;/span> &lt;span class="kt">byte&lt;/span>
&lt;span class="nx">parentChunk&lt;/span> &lt;span class="nx">bnapi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ChunkId&lt;/span>
&lt;span class="nx">createTime&lt;/span> &lt;span class="kt">int64&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Chunk ID
&lt;/span>&lt;span class="c1">// vuid + timestamp
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">const&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">chunkVuidLen&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="nx">chunkTimestmapLen&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="nx">ChunkIdLength&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">chunkVuidLen&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">chunkTimestmapLen&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="shard">Shard&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>shard(同Blob，BlobID代表唯一的shard id)是chunk中一段,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>shard status:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Default:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Normal:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MarkDelete:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="默认参数">默认参数&lt;/h2>
&lt;h3 id="blobnode">blobnode&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>一个disk默认最多chunk数&lt;code>DefaultMaxChunks&lt;/code>：8192;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个chunk默认最大size&lt;code>DefaultMaxChu&lt;/code>: 1TiB;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>默认chunk size&lt;code>DefaultChunkSize&lt;/code>：16GiB;&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//blobnode/core/config.go
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">DefaultDiskReservedSpaceB&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">int64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">60&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 60 GiB
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultChunkSize&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">int64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 16 GiB
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultMaxChunks&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">int32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 8192
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultChunkReleaseProtectionM&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1440&lt;/span> &lt;span class="c1">// 1 days
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultChunkGcCreateTimeProtectionM&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1440&lt;/span> &lt;span class="c1">// 1 days
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultChunkGcModifyTimeProtectionM&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1440&lt;/span> &lt;span class="c1">// 1 days
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultChunkCompactIntervalSec&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="c1">// 10 min
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultChunkCleanIntervalSec&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="c1">// 1 min
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultDiskUsageIntervalSec&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="c1">// 1 min
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultDiskCleanTrashIntervalSec&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="c1">// 60 min
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultDiskTrashProtectionM&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2880&lt;/span> &lt;span class="c1">// 2 days
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultCompactBatchSize&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1024&lt;/span> &lt;span class="c1">// 1024 counts
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultCompactMinSizeThreshold&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">16&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 16 GiB
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultCompactTriggerThreshold&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 1 TiB
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultMetricReportIntervalS&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">30&lt;/span> &lt;span class="c1">// 30 Sec
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">DefaultCompactEmptyRateThreshold&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">float64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 80% rate
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// blobnode/core/disk/disk.go
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">MaxChunkSize&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">int64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 1024 GiB, 一个disk chunk最大size，
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="写入流程">写入流程&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/02/08-10-44-35-2022-02-08-10-44-24-image.png" alt="">&lt;/p>
&lt;h3 id="读取流程">读取流程&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/02/08-10-45-04-2022-02-08-10-44-59-image.png" alt="">&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://cubefs.readthedocs.io/zh_CN/latest/design/blobstore.html">https://cubefs.readthedocs.io/zh_CN/latest/design/blobstore.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.cnblogs.com/itlz/p/14090193.html">详解Hadoop3.x新特性功能-HDFS纠删码 - 五分钟学大数据 - 博客园&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/shelldon/article/details/54144730?spm=1001.2101.3001.6661.1&amp;amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;amp;utm_relevant_index=1">Erasure Code - EC纠删码原理_shelldon的专栏-CSDN博客_ec纠删码&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>ElasticSearch基础</title><link>https://justice.bj.cn/post/30.architech/elasticsearch/es%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/elasticsearch/es%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="elasticsearch基础">ElasticSearch基础&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Elasticsearch 是一个基于lucene的分布式可扩展的近实时搜索和分析引擎。&lt;/p>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/07-14-03-48-2022-01-07-14-03-43-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>一个 ES Index 在集群模式下，有多个 Node （节点）组成。每个节点就是 ES 的Instance (实例)。&lt;/li>
&lt;li>每个节点上会有多个 shard （分片）， P1 P2 是主分片, R1 R2 是副本分片&lt;/li>
&lt;li>每个分片上对应着就是一个 Lucene Index（底层索引文件）&lt;/li>
&lt;li>Lucene Index 是一个统称
&lt;ul>
&lt;li>由多个 Segment （段文件，就是倒排索引）组成。每个段文件存储着就是 Doc 文档。&lt;/li>
&lt;li>commit point记录了所有 segments 的信息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Lucene索引结构&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/09-17-11-59-2022-01-09-17-11-56-image.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/09-17-11-19-2022-01-09-17-11-13-image.png" alt="">&lt;/p>
&lt;h3 id="lucene索引处理流程">Lucene索引处理流程&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/09-17-09-44-2022-01-09-17-09-40-image.png" alt="">&lt;/p>
&lt;h2 id="特点">特点&lt;/h2>
&lt;ul>
&lt;li>分布式存储&lt;/li>
&lt;li>近实时检索&lt;/li>
&lt;/ul>
&lt;h2 id="核心概念">核心概念&lt;/h2>
&lt;ul>
&lt;li>索引(index):&lt;/li>
&lt;li>分片(shard):&lt;/li>
&lt;li>分段(segment):&lt;/li>
&lt;li>Translog:&lt;/li>
&lt;/ul>
&lt;h2 id="数据类型">数据类型&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Elasticsearch中每个field都要精确对应一个数据类型；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>类型包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>keyword：不需要分词，进行过滤、排序、聚合等操作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>text：分词，用于全文搜索，无法排序，聚合等操作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>integer：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="写流程">写流程&lt;/h3>
&lt;p>创建索引的过程：&lt;/p>
&lt;ul>
&lt;li>准备待索引的原文档，数据来源可能是文件、数据库或网络&lt;/li>
&lt;li>对文档的内容进行分词组件处理，形成一系列的Term&lt;/li>
&lt;li>索引组件对文档和Term处理，形成字典和倒排表&lt;/li>
&lt;/ul>
&lt;p>搜索索引的过程：&lt;/p>
&lt;ul>
&lt;li>对查询语句进行分词处理，形成一系列Term&lt;/li>
&lt;li>根据倒排索引表查找出包含Term的文档，并进行合并形成符合结果的文档集&lt;/li>
&lt;li>比对查询语句与各个文档相关性得分，并按照得分高低返回&lt;/li>
&lt;/ul>
&lt;h2 id="单文档写入流程">单文档写入流程&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/09-17-17-45-2022-01-09-17-17-40-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>客户端向 Node 1 发送新建、索引或者删除请求。&lt;/li>
&lt;li>节点使用文档的 _id 确定文档属于分片 0 。请求会被转发到 Node 3，因为分片 0 的主分片目前被分配在 Node 3 上。&lt;/li>
&lt;li>Node 3 在主分片上面执行请求。如果成功了，它将请求并行转发到 Node 1 和 Node 2 的副本分片上。一旦所有的副本分片都报告成功, Node 3 将向协调节点报告成功，协调节点向客户端报告成功。&lt;/li>
&lt;/ul>
&lt;h2 id="常用操作">常用操作&lt;/h2>
&lt;ul>
&lt;li>清空index数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># create index&lt;/span>
curl -X PUT http://192.168.0.10:20000/test6 --header &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -d index.json
cat index.json
&lt;span class="c1"># delete index&lt;/span>
curl -X DELETE http://192.168.0.10:20000/test6
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="tfidf">TF/IDF&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>TF(Term Frequency, 词频): 词(Term)在文档中出现的频率；&lt;/p>
&lt;p>$ tf(t\in d) = \sqrt{frequency} $&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IDF(Invert Doc Frequency, 逆向文档频率): 索引中文档数量除以所有包含该词的文档数&lt;/p>
&lt;p>$ idf(t) = 1 + log ( numDocs / (docFreq + 1)) $&lt;/p>
&lt;/li>
&lt;li>
&lt;p>norm(字段长度归一值): 字段中词数平方根的倒数,&lt;/p>
&lt;p>$ norm(d) = 1 / \sqrt{numTerms} $&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://pdai.tech/md/db/nosql-es/elasticsearch-y-th-2.html">ES详解 - 原理：ES原理知识点补充和整体结构 | Java 全栈知识体系&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Golang之interface</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Binterface/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Binterface/</guid><description>&lt;h1 id="golang之interface">Golang之interface&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>接口是一个或多个方法签名的集合&lt;/li>
&lt;li>只要某个类型拥有该接口的所有方法签名，即算实现该接口，无需显示声明实现了哪个接口，这称为 Structural Typing&lt;/li>
&lt;li>接口只有方法声明，没有实现，没有数据字段&lt;/li>
&lt;li>接口可以匿名嵌入其它接口，或嵌入到结构中&lt;/li>
&lt;li>将对象赋值给接口时，发生拷贝，接口内部存储的是指向这个复制品的指针，既无法修改复制品的状态，也无法获取指针&lt;/li>
&lt;li>只有当接口存储的类型和对象都为nil时，接口才等于nil&lt;/li>
&lt;li>接口调用不会做receiver的自动转换&lt;/li>
&lt;li>接口同样支持匿名字段方法&lt;/li>
&lt;li>接口也可实现类似OOP中的多态&lt;/li>
&lt;li>空接口可以作为任何类型数据的容器&lt;/li>
&lt;/ul>
&lt;h2 id="接口实现">接口实现&lt;/h2>
&lt;p>接口分为两种：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>空接口: 包含类型信息和数据指针两个字段；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有方法接口: 包含方法表和数据指针两个字段；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// 没有方法的interface
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">eface&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">_type&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">_type&lt;/span> &lt;span class="c1">//类型信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pointer&lt;/span> &lt;span class="c1">//数据指针
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 有方法的interface
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">iface&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">tab&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">itab&lt;/span> &lt;span class="c1">//方法表
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pointer&lt;/span> &lt;span class="c1">//
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/02/08-17-13-25-2022-02-08-17-13-18-image.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/02/08-17-12-48-2022-02-08-17-12-43-image.png" alt="">&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://halfrost.com/go_interface/">深入研究 Go interface 底层实现&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000018565842">https://segmentfault.com/a/1190000018565842&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Kafka</title><link>https://justice.bj.cn/post/30.architech/kafka/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/kafka/</guid><description>&lt;h1 id="kafka">Kafka&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>&lt;strong>Kafka&lt;/strong>是由Linkedin公司开发的分布式、支持分区（partition）、多副本（replica），基于zookeeper的分布式消息系统。&lt;/p>
&lt;p>最初是被设计用来解决LinkedIn公司内部海量日志传输等问题。&lt;/p>
&lt;p>Kafka使用Scala语言编写，于2011年开源并进入Apache孵化器，2012年10月正式毕业，现在为Apache顶级项目；&lt;/p>
&lt;h2 id="特性">特性&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>高吞吐量、低延迟&lt;/strong>：kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒&lt;/li>
&lt;li>&lt;strong>可扩展性&lt;/strong>：kafka集群支持热扩展&lt;/li>
&lt;li>&lt;strong>持久性、可靠性&lt;/strong>：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失&lt;/li>
&lt;li>&lt;strong>容错性&lt;/strong>：允许集群中节点失败（若副本数量为n,则允许n-1个节点失败）&lt;/li>
&lt;li>&lt;strong>高并发&lt;/strong>：支持数千个客户端同时读写&lt;/li>
&lt;/ul>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/10/08-19-14-37-2021-10-08-19-14-27-image.png" alt="">&lt;/p>
&lt;h3 id="场景应用">场景应用&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>日志收集&lt;/strong>：一个公司可以用Kafka可以收集各种服务的log，通过kafka以统一接口服务的方式开放给各种consumer，例如hadoop、Hbase、Solr等。&lt;/li>
&lt;li>&lt;strong>消息系统&lt;/strong>：解耦和生产者和消费者、缓存消息等。&lt;/li>
&lt;li>&lt;strong>用户活动跟踪&lt;/strong>：Kafka经常被用来记录web用户或者app用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到kafka的topic中，然后订阅者通过订阅这些topic来做实时的监控分析，或者装载到hadoop、数据仓库中做离线分析和挖掘。&lt;/li>
&lt;li>&lt;strong>运营指标&lt;/strong>：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告。&lt;/li>
&lt;li>&lt;strong>流式处理&lt;/strong>：比如spark streaming和storm&lt;/li>
&lt;li>&lt;strong>事件源&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="设计思想">设计思想&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Consumergroup&lt;/strong>：各个consumer可以组成一个组，每个消息只能被组中的一个consumer消费，如果一个消息可以被多个consumer消费的话，那么这些consumer必须在不同的组。&lt;/li>
&lt;li>&lt;strong>消息状态&lt;/strong>：在Kafka中，消息的状态被保存在consumer中，broker不会关心哪个消息被消费了被谁消费了，只记录一个offset值（指向partition中下一个要被消费的消息位置），这就意味着如果consumer处理不好的话，broker上的一个消息可能会被消费多次。&lt;/li>
&lt;li>&lt;strong>消息持久化&lt;/strong>：Kafka中会把消息持久化到本地文件系统中，并且保持极高的效率。&lt;/li>
&lt;li>&lt;strong>消息有效期&lt;/strong>：Kafka会长久保留其中的消息，以便consumer可以多次消费，当然其中很多细节是可配置的。&lt;/li>
&lt;li>&lt;strong>批量发送&lt;/strong>：Kafka支持以消息集合为单位进行批量发送，以提高push效率。&lt;/li>
&lt;li>&lt;strong>push-and-pull&lt;/strong> :Kafka中的Producer和consumer采用的是push-and-pull模式，即Producer只管向broker push消息，consumer只管从broker pull消息，两者对消息的生产和消费是异步的。&lt;/li>
&lt;li>&lt;strong>Kafka集群中broker之间的关系&lt;/strong>：不是主从关系，各个broker在集群中地位一样，我们可以随意的增加或删除任何一个broker节点。&lt;/li>
&lt;li>&lt;strong>负载均衡方面&lt;/strong>： Kafka提供了一个 metadata API来管理broker之间的负载（对Kafka0.8.x而言，对于0.7.x主要靠zookeeper来实现负载均衡）。&lt;/li>
&lt;li>&lt;strong>同步异步&lt;/strong>：Producer采用异步push方式，极大提高Kafka系统的吞吐率（可以通过参数控制是采用同步还是异步方式）。&lt;/li>
&lt;li>&lt;strong>分区机制partition&lt;/strong>：Kafka的broker端支持消息分区，Producer可以决定把消息发到哪个分区，在一个分区中消息的顺序就是Producer发送消息的顺序，一个主题中可以有多个分区，具体分区的数量是可配置的。&lt;/li>
&lt;li>&lt;strong>离线数据装载&lt;/strong>：Kafka由于对可拓展的数据持久化的支持，它也非常适合向Hadoop或者数据仓库中进行数据装载。&lt;/li>
&lt;li>&lt;strong>插件支持&lt;/strong>：现在不少活跃的社区已经开发出不少插件来拓展Kafka的功能，如用来配合Storm、Hadoop、flume相关的插件。&lt;/li>
&lt;/ul>
&lt;h2 id="通信模式">通信模式&lt;/h2>
&lt;p>kafka支持两种通信模式：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>点对点模式&lt;/strong>：是基于拉取或者轮询的消息传送模型，这个模型的特点是发送到队列的消息被一个且只有一个消费者进行处理。生产者将消息放入消息队列后，由消费者主动去&lt;strong>拉取&lt;/strong>消息进行消费。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>发布订阅模式&lt;/strong>：该模式可以有多种不同的订阅者。生产者将消息放入消息队列后，队列会将消息&lt;strong>推送&lt;/strong>给订阅过该类消息的消费者&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="基础架构">基础架构&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/27-11-04-14-2020-11-27-11-04-09-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>Producer：消息的产生者，是消息的入口。&lt;/li>
&lt;li>Broker：Broker是kafka实例，每个服务器上有一个或多个kafka的实例，我们姑且认为每个broker对应一台服务器。每个kafka集群内的broker都有一个不重复的编号，如图中的broker-0、broker-1等……&lt;/li>
&lt;li>Topic：消息的主题，可以理解为消息的分类，kafka的数据就保存在topic。在每个broker上都可以创建多个topic。&lt;/li>
&lt;li>Partition：Topic的分区，每个topic可以有多个分区，分区的作用是做负载，提高kafka的吞吐量。同一个topic在不同的分区的数据是不重复的，partition的表现形式就是一个一个的文件夹！&lt;/li>
&lt;li>Replication:每一个分区都有多个副本，副本的作用是做备胎。当主分区（Leader）故障的时候会选择一个备胎（Follower）上位，成为Leader。在kafka中默认副本的最大数量是10个，且副本的数量不能大于Broker的数量，follower和leader绝对是在不同的机器，同一机器对同一个分区也只可能存放一个副本（包括自己）。&lt;/li>
&lt;li>Message：每一条发送的消息主体。&lt;/li>
&lt;li>Consumer：消费者，即消息的消费方，是消息的出口。&lt;/li>
&lt;li>Consumer Group：我们可以将多个消费组组成一个消费者组，在kafka的设计中同一个分区的数据只能被消费者组中的某一个消费者消费。同一个消费者组的消费者可以消费同一个topic的不同分区的数据，这也是为了提高kafka的吞吐量！&lt;/li>
&lt;li>Zookeeper：kafka集群依赖zookeeper来保存集群的的元信息，来保证系统的可用性。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="分区partition">分区(Partition)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Topic划分成多个分区（Partition），生产者生产的每条消息只会被发送到其中一个分区;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分区 (Partition) 都是一个有序的、不可变的数据序列，消息数据被不断的添加到序列的尾部;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分区中的每一条消息数据都被赋予了一个连续的数字ID，即偏移量 (offset) ，用于唯一标识分区中的每条消息数据;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Kafka 分区可以有如下策略:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>轮询策略（Round-robin）: 即顺序分配策略。如果一个Topic有3个分区，则第1条消息被发送到分区0，第2条被发送到分区1，第3条被发送到分区2，以此类推;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>随机策略（Randomness）: 是将消息随机地放置到任意一个分区上;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按消息键保序策略: Kafka允许为每条消息定义消息键，简称为Key。Key可以是一个有着明确业务含义的字符串，如客户代码、部门编号或是业务ID等;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基于地理位置的分区策略:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自定义分区策略：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//随机策略
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PartitionInfo&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">partitions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cluster&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">partitionsForTopic&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">topic&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ThreadLocalRandom&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">current&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">nextInt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">partitions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="c1">//消息键保序
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PartitionInfo&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">partitions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cluster&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">partitionsForTopic&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">topic&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">abs&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">partitions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//基于地理位置的分区策略
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PartitionInfo&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">partitions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cluster&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">partitionsForTopic&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">topic&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">partitions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">filter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">isChina&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">leader&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">host&lt;/span>&lt;span class="o">())).&lt;/span>&lt;span class="na">map&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">PartitionInfo&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">partition&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">findAny&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>分区删除策略：&lt;/p>
&lt;ul>
&lt;li>基于时间：log.retention.hours=168&lt;/li>
&lt;li>基于大小：log.retention.bytes=1073741824&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>消息保序&lt;/p>
&lt;ul>
&lt;li>
&lt;p>kafka只能保证分区内有序，无法保证分区间有序，所以消费时，数据是相对有序的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果将Topic设置成单分区，该Topic的所有的消息都只在一个分区内读写，保证全局的顺序性，但将丧失Kafka多分区带来的高吞吐量和负载均衡的性能优势。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多分区消息保序的方法是按消息键保序策略，根据业务提取出需要保序的消息的逻辑主体，并建立消息标志位ID，对标志位设定专门的分区策略，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保证同一标志位的所有消息都发送到同一分区，既可以保证分区内的消息顺序，也可以享受到多分区带来的搞吞吐量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>消息重试只是简单将消息重新发送到原来的分区，不会重新选择分区。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>消息路由策略&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在通过API方式发布消息时，生产者是以Record为消息进行发布的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Record中包含key与value，value才是消息本身，而key用于路由消息所要存放Partition。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>消息要写入到哪个Partition并不是随机的，而是由路由策略决定。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指定Partition，直接写入指定Partition。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>没有指定Partition但指定了key，则通过对key的hash值与Partition数量取模，结果就是要选出的Partition索引。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Partition和key都未指定，则使用轮询算法选出一个Partition。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>增加分区时，Partition内的消息不会重新进行分配，随着数据继续写入，新分区才会参与再平衡。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/10/08-19-19-42-2021-10-08-19-19-38-image.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/10/08-19-20-23-2021-10-08-19-20-17-image.png" alt="">&lt;/p>
&lt;h2 id="producer流程">Producer流程&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/10/08-19-22-48-2021-10-08-19-22-44-image.png" alt="">&lt;/p>
&lt;p>消息生产过程如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Producer先通过分区策略确定数据录入的partition，再从Zookeeper中找到Partition的Leader&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Producer将消息发送给分区的Leader。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Leader将消息接入本地的Log，并通知ISR（In-sync Replicas，副本同步列表）的Followers。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ISR中的Followers从Leader中pull消息，写入本地Log后向Leader发送ACK（消息发送确认机制）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Leader收到所有ISR中的Followers的ACK后，增加HW（high watermark，最后commit 的offset）并向Producer发送ACK，表示消息写入成功。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="消费者组">消费者组&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>消费者是以consumer group消费者组的方式工作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由一个或者多个消费者组成一个组，共同消费一个topic；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个partition在同一时间只能由group中的一个消费者读取，但是多个consumer group可以同时消费这个partition；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>consumer采用pull（拉）模式从broker中读取数据；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/10/09-09-35-16-2021-10-09-09-35-08-image.png" alt="">&lt;/p>
&lt;h2 id="isr机制">ISR机制&lt;/h2>
&lt;p>Kafka采用&lt;code>ISR&lt;/code>（In-Sync Replicas）机制来保证多副本间数据的一致性，不同于&lt;code>Paxos&lt;/code>, &lt;code>Zab&lt;/code>等一致性算法，ISR需要较少的副本就可以满足可用性要求；&lt;/p>
&lt;p>ISR具体做法如下：将所有次级副本数据分到两个集合，其中一个被称为ISR集合，这个集合备份数据的特点是即时和主副本数据保持一致，而另外一个集合的备份数据允许其消息队列落后于主副本的数据&lt;/p>
&lt;ul>
&lt;li>
&lt;p>AR（Assigned Repllicas）一个partition的所有副本（就是replica，不区分leader或follower）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ISR（In-Sync Replicas）能够和 leader 保持同步的 follower + leader本身 组成的集合。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OSR（Out-Sync Relipcas）不能和 leader 保持同步的 follower 集合&lt;/p>
&lt;/li>
&lt;li>
&lt;p>公式：AR = ISR + OSR&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LEO（last end offset）：当前replica存的最大的offset的下一个值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HW（high watermark）：小于 HW 值的offset所对应的消息被认为是“已提交”或“已备份”的消息，才对消费者可见。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/10/09-09-42-16-2021-10-09-09-42-11-image.png" alt="">&lt;/p>
&lt;h2 id="提交offset">提交offset&lt;/h2>
&lt;p>在新消费者客户端中，消费位移是存储在Kafka内部的主题 __consumer_offsets 中。把消费位移存储起来（持久化）的动作称为 “提交” ，&lt;strong>消费者在消费完消息之后需要执行消费位移的提交&lt;/strong>。&lt;/p>
&lt;p>KafkaConsumer 类提供了 partition(TopicPartition) 和 committed(TopicPartition) 两个方法来分别获取上面所说的 postion 和 committed offset 的值。这两个方法的定义如下所示：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>public long position(TopicPartition partition)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>public OffsetAndMetadata committed(TopicPartition partition)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>提交方式 ：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>自动 提交：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>enable.auto.commit = true&lt;/p>
&lt;/li>
&lt;li>
&lt;p>默认的配置下，消费者每隔 5 秒会将拉取到的每个分区中最大的消息位移进行提交。自动位移提交的动作是在 poll() 方法的逻辑里完成的，在每次真正向服务端发起拉取请求之前会检查是否可以进行位移提交，如果可以，那么就会提交上一次轮询的位移。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>手动提交：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>同步提交：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>异步提交&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="kafka性能优化">Kafka性能优化&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>使用最佳写方式；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;code>SendFile&lt;/code>直接将文件数据从内核页缓存复制到网卡缓冲区，减少内存拷贝次数；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://blog.csdn.net/weixin_45366499/article/details/106943229">Kafka基本原理详解（超详细！）_蔡政洁的博客-CSDN博客_kafka&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/269190480">https://zhuanlan.zhihu.com/p/269190480&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Prometheus基础</title><link>https://justice.bj.cn/post/36.monitor/prometheus/prometheus%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/36.monitor/prometheus/prometheus%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="prometheus基础">Prometheus基础&lt;/h1>
&lt;hr>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>&lt;strong>Prometheus&lt;/strong>(普罗米修斯)受启发于Google的Brogmon监控系统，是继Kubernetes之后成为第二个正式加入CNCF基金会的项目。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>2012年，由前Google工程师在Soundcloud以开源软件的形式进行研发；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2015年，对外发布早期版本；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2016年5月，加入CNCF基金会；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2016年6月，发布1.0版本；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2017年底，发布2.0版本，基于全新存储层，能更好地与容器平台、云平台配合。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/17-11-10-43-2020-11-03-16-18-50-image.png" alt="">&lt;/p>
&lt;hr>
&lt;h2 id="特点">特点&lt;/h2>
&lt;p>Prometheus作为新一代的云原生监控系统，基于中央化的规则计算、统一分析和告警的模型，特点如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>易于部署&lt;/strong>：单一二进制文件，无第三方依赖，不会有潜在级联故障的风险，部署简单；&lt;/li>
&lt;li>&lt;strong>强大数据模型&lt;/strong>：监控指标以时序序列保存在存储中，并可灵活设置&lt;strong>标签&lt;/strong>来对数据不同维度进行区分；&lt;/li>
&lt;li>&lt;strong>强大查询语言&lt;/strong>PromQL：内置的PromQL支持查询、聚合、过滤等复杂操作，可实现高效的查询；&lt;/li>
&lt;li>&lt;strong>易于扩展&lt;/strong>：支持分区和联邦集群部署，并可结合thano实现分布式部署；&lt;/li>
&lt;li>&lt;strong>易于集成&lt;/strong>：支持多种语言SDK，拥有大量第三方集成模块，可方便与第三方系统进行集成；&lt;/li>
&lt;li>&lt;strong>可视化&lt;/strong>：自带web ui， 与grafana很好的集成；&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>Prometheus 的主要模块如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/17-11-11-10-2020-06-05-15-09-02-image.png" alt="">&lt;/p>
&lt;hr>
&lt;h2 id="工作流程">工作流程&lt;/h2>
&lt;ol>
&lt;li>Prometheus server 定期从配置好的 jobs 或者 exporters 中拉 metrics，或者接收来自 Pushgateway 发过来的 metrics，或者从其他的 Prometheus server 中拉 metrics。&lt;/li>
&lt;li>Prometheus server 在本地存储收集到的 metrics，并运行已定义好的 alert.rules，记录新的时间序列或者向 Alertmanager 推送警报。&lt;/li>
&lt;li>Alertmanager 根据配置文件，对接收到的警报进行处理，发出告警。&lt;/li>
&lt;li>在图形界面中，可视化采集数据。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="数据模型">数据模型&lt;/h2>
&lt;p>Prometheus 中存储的数据为时间序列，是由 metric 的名字和一系列的标签（键值对）唯一标识的，不同的标签则代表不同的时间序列，如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">api_http_requests_total{path=&amp;#34;/users&amp;#34;,status=200,method=&amp;#34;GET&amp;#34;,instance=&amp;#34;10.111.201.26&amp;#34;} 100
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该时序的名字为 api_http_requests_total，标签为 path、status、method 和 instance，只有时序名字和标签键值完全相同的时序才是同一个时序。事实上，时序名字就是一个隐藏标签：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">{name=&amp;#34;api_http_requests_total&amp;#34;,path=&amp;#34;/users&amp;#34;,status=200,method=&amp;#34;GET&amp;#34;,instance=&amp;#34;10.111.201.26&amp;#34;} 100
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="指标类型">指标类型&lt;/h2>
&lt;p>四种类型：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Counter&lt;/strong>: 用于累计计数，例如用来记录请求次数。Counter的特点是一直增加不会减少。&lt;/li>
&lt;li>&lt;strong>Gauge&lt;/strong>：用于记录常规数值，可以增加或减少。例如用来记录CPU、内存的变化&lt;/li>
&lt;li>&lt;strong>Histogram&lt;/strong>：可理解为直方图，常用于跟踪事件发生的规模，如请求耗时、响应大小。可对记录的内容分组和聚合(count,sum等)，例如响应时间小于500毫秒的多少次、500毫秒~1000毫秒之间多少次、1000毫秒以上的多少次&lt;/li>
&lt;li>&lt;strong>Summary&lt;/strong>：与Histogram类似，但支持按百分比跟踪结果&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="存储模型">存储模型&lt;/h2>
&lt;p>prometheus是一个时序型KV数据库，时序数据拥有&lt;em>垂直写，水平读&lt;/em>的特点，在此基础上&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第1代: Prototype：直接利用LevelDB进行kv存储；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第2代: Prometheus V1：chunk file，压缩存储；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第3代: Prometheus V2：合并的chunk+index 文件；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="服务发现">服务发现&lt;/h2>
&lt;p>Prometheus基于Pull模式, 无法主动发现新的监控节点，Prometheus引入**SD(Service Discovery)**服务发现机制来解决。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/17-11-11-30-2020-11-03-16-50-06-image.png" alt="">&lt;/p>
&lt;hr>
&lt;p>支持服务发现的组件类型：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Static&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;li>
&lt;p>DNS&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Consul&lt;/p>
&lt;/li>
&lt;li>
&lt;p>K8s&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;hellip;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>服务发现支持Relabeling机制，可对默认label进行map、replace、filter等操作。&lt;/p>
&lt;hr>
&lt;h2 id="扩展高可用">扩展高可用&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>HA + LB&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HA + remote storage&lt;/p>
&lt;/li>
&lt;li>
&lt;p>联邦（federate）集群&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>每一个Prometheus Server都包含一个/federate的接口，可用来获取当前节点中的监控数据。因此可通过该接口对整个prometheus集群进行拆分组合，建立分级节点，以做到集群的扩展，此模式称为联邦模式。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/17-11-12-04-image-20190425092255032.png" alt="image20190425092255032">&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>&lt;strong>Thanos&lt;/strong>(灭霸)：是一个专门用于prometheus的高可用方案，可以一次查询多个 Prometheus 实例，并且能够对来自多个实例的相同指标进行去重&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="alertmanager">AlertManager&lt;/h2>
&lt;p>alertmanger是promtheus的独立组件，通过在Prometheus中定义AlertRule（告警规则），Prometheus会周期性的对告警规则进行计算，如果满足告警触发条件就会向Alertmanager发送告警信息。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/17-11-12-21-2020-11-03-17-19-46-image.png" alt="">&lt;/p>
&lt;hr>
&lt;h3 id="告警规则">告警规则&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>告警名称：用户需要为告警规则命名，当然对于命名而言，需要能够直接表达出该告警的主要内容&lt;/p>
&lt;/li>
&lt;li>
&lt;p>告警规则：告警规则实际上主要由PromQL进行定义，其实际意义是当表达式（PromQL）查询结果持续多长时间（During）后出发告警&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="告警处理">告警处理&lt;/h3>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/17-11-12-42-2020-11-03-17-22-20-image.png" alt="">&lt;/p>
&lt;hr>
&lt;hr>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart/why-monitor">https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart/why-monitor&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://dockerone.com/article/8605">Prometheus 不完全避坑指南 - DockOne.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://dockerone.com/article/10143">Prometheus Metrics 设计的最佳实践和应用实例 - DockOne.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.qikqiak.com/k8strain/monitor/thanos/">Thanos - K8S训练营&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/introduction/overview/">Overview | Prometheus&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Prometheus直方图</title><link>https://justice.bj.cn/post/36.monitor/prometheus/prometheus%E4%B9%8B%E7%9B%B4%E6%96%B9%E5%9B%BE/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/36.monitor/prometheus/prometheus%E4%B9%8B%E7%9B%B4%E6%96%B9%E5%9B%BE/</guid><description>&lt;h1 id="prometheus直方图">Prometheus直方图&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>prometheus中的histogram是用来设置直方图指标的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>histogram指标是为了消除指标采样中的长尾效应；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Prometheus 的 histogram 是一种累积直方图;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/02/11-12-36-31-2022-02-11-12-36-27-image.png" alt="">&lt;/p>
&lt;h2 id="使用">使用&lt;/h2>
&lt;ul>
&lt;li>histogram使用时，和其他指标相比，还需要指定buckets分布；&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="err">#&lt;/span> &lt;span class="nx">使用了&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">0.2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">0.4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">60&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">120&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">Inf&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nx">这几个分桶来采样数据&lt;/span>&lt;span class="err">。&lt;/span>
&lt;span class="err">#&lt;/span> &lt;span class="nx">HELP&lt;/span> &lt;span class="nx">prometheus_tsdb_compaction_chunk_range&lt;/span> &lt;span class="nx">Final&lt;/span> &lt;span class="nx">time&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">of&lt;/span> &lt;span class="nx">chunks&lt;/span> &lt;span class="nx">on&lt;/span> &lt;span class="nx">their&lt;/span> &lt;span class="nx">first&lt;/span> &lt;span class="nx">compaction&lt;/span>
&lt;span class="err">#&lt;/span> &lt;span class="nx">TYPE&lt;/span> &lt;span class="nx">prometheus_tsdb_compaction_chunk_range&lt;/span> &lt;span class="nx">histogram&lt;/span>
&lt;span class="nx">prometheus_tsdb_compaction_chunk_range_bucket&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">le&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;100&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">prometheus_tsdb_compaction_chunk_range_bucket&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">le&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;400&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">prometheus_tsdb_compaction_chunk_range_bucket&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">le&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;1600&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">prometheus_tsdb_compaction_chunk_range_bucket&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">le&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;6400&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">prometheus_tsdb_compaction_chunk_range_bucket&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">le&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;25600&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">prometheus_tsdb_compaction_chunk_range_bucket&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">le&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;102400&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">prometheus_tsdb_compaction_chunk_range_bucket&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">le&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;409600&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">prometheus_tsdb_compaction_chunk_range_bucket&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">le&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;1.6384e+06&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">260&lt;/span>
&lt;span class="nx">prometheus_tsdb_compaction_chunk_range_bucket&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">le&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;6.5536e+06&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">780&lt;/span>
&lt;span class="nx">prometheus_tsdb_compaction_chunk_range_bucket&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">le&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;2.62144e+07&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">780&lt;/span>
&lt;span class="nx">prometheus_tsdb_compaction_chunk_range_bucket&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">le&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;+Inf&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">780&lt;/span>
&lt;span class="nx">prometheus_tsdb_compaction_chunk_range_sum&lt;/span> &lt;span class="mf">1.1540798e+09&lt;/span>
&lt;span class="nx">prometheus_tsdb_compaction_chunk_range_count&lt;/span> &lt;span class="mi">780&lt;/span>
&lt;span class="c1">// 过去1小时内的P95（95%的请求耗时都小于等于这个值）
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nf">histogram_quantile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.95&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">rate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">prometheus_http_request_duration_seconds_bucket&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="nx">h&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="分位数">分位数&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>prometheus自带&lt;code>histogram_quantile()&lt;/code>函数来计算histogram类型指标的分位数情况；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>该函数通过线性插值的方式计算出指定分位的指标估算值，如quantile=0.95, 表示指定采样时间范围内第95%个指标的估算值；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过分位数可以很方便的了解指标的异常采样情况；如果分位值出现毛刺，则表明该指标可能出现异常情况；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//分位值计算公式
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="nx">bucketStart&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">bucketEnd&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">bucketStart&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nb">float64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rank&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="histogram和summary的区别">histogram和summary的区别&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>histogram可以聚合，summary无法聚合；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>histogram在查询时计算分位值；summary在采样时计算；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>histogram的分位数是通过插值估算来的，summary在采样时直接统计，后者根准确；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://cloud.tencent.com/developer/article/1495303">一文搞懂 Prometheus 的直方图 - 云+社区 - 腾讯云&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-metrics-types">Metrics类型 - prometheus-book&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.bookstack.cn/read/prometheus-manual/best_practices-histogram_and_summaries.md">最佳实践 - histograms and summaries直方图和总数 - 《Prometheus 非官方中文手册》 - 书栈网 · BookStack&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Prometheus配置</title><link>https://justice.bj.cn/post/36.monitor/prometheus/prometheus%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/36.monitor/prometheus/prometheus%E9%85%8D%E7%BD%AE/</guid><description>&lt;h1 id="prometheus配置">Prometheus配置&lt;/h1>
&lt;hr>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Prometheus受启发于Google的Brogmon监控系统（相似的Kubernetes是从Google的Brog系统演变而来），从2012年开始由前Google工程师在Soundcloud以开源软件的形式进行研发，并且于2015年早期对外发布早期版本。2016年5月继Kubernetes之后成为第二个正式加入CNCF基金会的项目，同年6月正式发布1.0版本。2017年底发布了基于全新存储层的2.0版本，能更好地与容器平台、云平台配合。&lt;/p>
&lt;hr>
&lt;h2 id="特点">特点&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>易于部署&lt;/strong>：单一二进制文件，部署简单&lt;/li>
&lt;li>&lt;strong>高效数据模型&lt;/strong>：监控指标以时序序列保存在存储中，并可灵活设置标签来对数据不同维度进行区分；&lt;/li>
&lt;li>&lt;strong>强大查询语言&lt;/strong>PromQL：内置的PromQL支持查询、聚合、过滤等复杂操作，可实现高效的查询；&lt;/li>
&lt;li>&lt;strong>易于扩展&lt;/strong>：支持分区和联邦集群部署，并可结合thano实现分布式部署；&lt;/li>
&lt;li>&lt;strong>易于集成&lt;/strong>：支持多种语言SDK，拥有大量第三方集成模块，可方便与第三方系统进行集成&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>Prometheus 的主要模块包括：Prometheus server, exporters, Pushgateway, PromQL, Alertmanager 以及图形界面。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/02/11-11-51-35-2022-02-11-11-51-30-image.png" alt="">&lt;/p>
&lt;hr>
&lt;h2 id="工作流程">工作流程&lt;/h2>
&lt;ol>
&lt;li>Prometheus server 定期从配置好的 jobs 或者 exporters 中拉 metrics，或者接收来自 Pushgateway 发过来的 metrics，或者从其他的 Prometheus server 中拉 metrics。&lt;/li>
&lt;li>Prometheus server 在本地存储收集到的 metrics，并运行已定义好的 alert.rules，记录新的时间序列或者向 Alertmanager 推送警报。&lt;/li>
&lt;li>Alertmanager 根据配置文件，对接收到的警报进行处理，发出告警。&lt;/li>
&lt;li>在图形界面中，可视化采集数据。&lt;/li>
&lt;/ol>
&lt;h2 id="数据模型">数据模型&lt;/h2>
&lt;p>Prometheus 中存储的数据为时间序列，是由 metric 的名字和一系列的标签（键值对）唯一标识的，不同的标签则代表不同的时间序列，如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">api_http_requests_total{path=&amp;#34;/users&amp;#34;,status=200,method=&amp;#34;GET&amp;#34;,instance=&amp;#34;10.111.201.26&amp;#34;} 100
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该时序的名字为 api_http_requests_total，标签为 path、status、method 和 instance，只有时序名字和标签键值完全相同的时序才是同一个时序。事实上，时序名字就是一个隐藏标签：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">{name=&amp;#34;api_http_requests_total&amp;#34;,path=&amp;#34;/users&amp;#34;,status=200,method=&amp;#34;GET&amp;#34;,instance=&amp;#34;10.111.201.26&amp;#34;} 100
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="指标类型">指标类型&lt;/h2>
&lt;p>Prometheus的时序数据包含以下四种类型：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Counter&lt;/strong>: 用于累计计数，例如用来记录请求次数。Counter的特点是一直增加不会减少。&lt;/li>
&lt;li>&lt;strong>Gauge&lt;/strong>：用于记录常规数值，可以增加或减少。例如用来记录CPU、内存的变化&lt;/li>
&lt;li>&lt;strong>Histogram&lt;/strong>：可理解为直方图，常用于跟踪事件发生的规模，如请求耗时、响应大小。可对记录的内容分组和聚合(count,sum等)，例如响应时间小于500毫秒的多少次、500毫秒~1000毫秒之间多少次、1000毫秒以上的多少次&lt;/li>
&lt;li>&lt;strong>Summary&lt;/strong>：与Histogram类似，但支持按百分比跟踪结果&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="存储模型">存储模型&lt;/h2>
&lt;p>prometheus是一个时序型KV数据库，时序数据拥有&lt;em>垂直写，水平读&lt;/em>的特点，在此基础上&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第1代: Prototype：直接利用LevelDB作为本地持久化存储，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第2代: Prometheus V1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第3代: Prometheus V2&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="高可用方案">高可用方案&lt;/h2>
&lt;hr>
&lt;h2 id="存储原理">存储原理&lt;/h2>
&lt;p>Prometheus按2小时一个block进行存储，每个block由一个目录组成，该目录里包含：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>一个或者多个chunk文件（保存timeseries数据）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个metadata文件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个index文件（通过metric name和labels查找timeseries数据在chunk文件的位置）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>最新写入的数据保存在内存block中，达到2小时后写入磁盘。为了防止程序崩溃导致数据丢失，实现了WAL（write-ahead-log）机制，启动时会以写入日志(WAL)的方式来实现重播，从而恢复数据。&lt;/p>
&lt;p>删除数据时，删除条目会记录在独立的tombstone文件中，而不是立即从chunk文件删除。&lt;/p>
&lt;p>通过时间窗口的形式保存所有的样本数据，可以明显提高Prometheus的查询效率，当查询一段时间范围内的所有样本数据时，只需要简单的从落在该范围内的块中查询数据即可。&lt;/p>
&lt;p>这些2小时的block会在后台压缩成更大的block，数据压缩合并成更高level的block文件后删除低level的block文件。这个和leveldb、rocksdb等LSM树的思路一致。&lt;/p>
&lt;p>这些设计和Gorilla的设计高度相似，所以Prometheus几乎就是等于一个缓存TSDB。它本地存储的特点决定了它不能用于long-term数据存储，只能用于短期窗口的timeseries数据保存和查询，并且不具有高可用性（宕机会导致历史数据无法读取）。&lt;/p>
&lt;p>内存中的block数据未写入磁盘时，block目录下面主要保存wal文件:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">./data/01BKGV7JBM69T2G1BGBGM6KB12
./data/01BKGV7JBM69T2G1BGBGM6KB12/meta.json
./data/01BKGV7JBM69T2G1BGBGM6KB12/wal/000002
./data/01BKGV7JBM69T2G1BGBGM6KB12/wal/000001
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>持久化的block目录下wal文件被删除，timeseries数据保存在chunk文件里。index用于索引timeseries在wal文件里的位置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">./data/01BKGV7JC0RY8A6MACW02A2PJD
./data/01BKGV7JC0RY8A6MACW02A2PJD/meta.json
./data/01BKGV7JC0RY8A6MACW02A2PJD/index
./data/01BKGV7JC0RY8A6MACW02A2PJD/chunks
./data/01BKGV7JC0RY8A6MACW02A2PJD/chunks/000001
./data/01BKGV7JC0RY8A6MACW02A2PJD/tombstones
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h4 id="存储配置">存储配置&lt;/h4>
&lt;p>对于本地存储，prometheus提供了一些配置项，主要包括：&lt;/p>
&lt;ul>
&lt;li>–storage.tsdb.path: 存储数据的目录，默认为data/，如果要挂外部存储，可以指定该目录&lt;/li>
&lt;li>–storage.tsdb.retention.time: 数据过期清理时间，默认保存15天&lt;/li>
&lt;li>–storage.tsdb.retention.size: 实验性质，声明数据块的最大值，不包括wal文件，如512MB&lt;/li>
&lt;li>–storage.tsdb.retention: 已被废弃，改为使用storage.tsdb.retention.time&lt;/li>
&lt;/ul>
&lt;p>Prometheus将所有当前使用的块保留在内存中。此外，它将最新使用的块保留在内存中，最大内存可以通过storage.local.memory-chunks标志配置。&lt;/p>
&lt;p>监测当前使用的内存量：&lt;/p>
&lt;ul>
&lt;li>prometheus_local_storage_memory_chunks&lt;/li>
&lt;li>process_resident_memory_bytes&lt;/li>
&lt;/ul>
&lt;p>监测当前使用的存储指标：&lt;/p>
&lt;ul>
&lt;li>prometheus_local_storage_memory_series: 时间序列持有的内存当前块数量&lt;/li>
&lt;li>prometheus_local_storage_memory_chunks: 在内存中持久块的当前数量&lt;/li>
&lt;li>prometheus_local_storage_chunks_to_persist: 当前仍然需要持久化到磁盘的的内存块数量&lt;/li>
&lt;li>prometheus_local_storage_persistence_urgency_score: 紧急程度分数&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="内存使用">内存使用&lt;/h3>
&lt;p>prometheus在内存里保存了最近使用的chunks，具体chunks的最大个数可以通过storage.local.memory-chunks来设定，默认值为1048576，即1048576个chunk，大小为1G。&lt;br>
除了采用的数据，prometheus还需要对数据进行各种运算，因此整体内存开销肯定会比配置的local.memory-chunks大小要来的大，因此官方建议要预留3倍的local.memory-chunks的内存大小。&lt;/p>
&lt;blockquote>
&lt;p>As a rule of thumb, you should have at least three times more RAM available than needed by the memory chunks alone&lt;/p>
&lt;/blockquote>
&lt;p>可以通过server的metrics去查看prometheus_local_storage_memory_chunks以及process_resident_memory_byte两个指标值。&lt;/p>
&lt;ul>
&lt;li>prometheus_local_storage_memory_chunks&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>The current number of chunks in memory, excluding cloned chunks&lt;br>
目前内存中暴露的chunks的个数&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>process_resident_memory_byte&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Resident memory size in bytes&lt;br>
驻存在内存的数据大小&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>prometheus_local_storage_persistence_urgency_score&lt;br>
介于0-1之间，当该值小于等于0.7时，prometheus离开rushed模式。&lt;/li>
&lt;/ul>
&lt;p>当大于0.8的时候，进入rushed模式&lt;/p>
&lt;ul>
&lt;li>prometheus_local_storage_rushed_mode&lt;br>
1表示进入了rushed mode，0表示没有。进入了rushed模式的话，prometheus会利用storage.local.series-sync-strategy以及storage.local.checkpoint-interval的配置加速chunks的持久化。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="storage参数">storage参数&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">docker run -p 9090:9090 &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>    -v /tmp/prometheus-data:/prometheus-data &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>    prom/prometheus &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>    -storage.local.retention 168h0m0s &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>    -storage.local.max-chunks-to-persist &lt;span class="m">3024288&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>    -storage.local.memory-chunks&lt;span class="o">=&lt;/span>&lt;span class="m">50502740&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span>    -storage.local.num-fingerprint-mutexes&lt;span class="o">=&lt;/span>&lt;span class="m">300960&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="storagelocalmemory-chunks">storage.local.memory-chunks&lt;/h3>
&lt;p>设定prometheus内存中保留的chunks的最大个数，默认为1048576，即为1G大小&lt;/p>
&lt;h3 id="storagelocalretention">storage.local.retention&lt;/h3>
&lt;p>用来配置采用数据存储的时间，168h0m0s即为24*7小时，即1周&lt;/p>
&lt;h3 id="storagelocalseries-file-shrink-ratio">storage.local.series-file-shrink-ratio&lt;/h3>
&lt;p>用来控制序列文件rewrite的时机，默认是在10%的chunks被移除的时候进行rewrite，如果磁盘空间够大，不想频繁rewrite，可以提升该值，比如0.3，即30%的chunks被移除的时候才触发rewrite。&lt;/p>
&lt;h3 id="storagelocalmax-chunks-to-persist">storage.local.max-chunks-to-persist&lt;/h3>
&lt;p>该参数控制等待写入磁盘的chunks的最大个数，如果超过这个数，Prometheus会限制采样的速率，直到这个数降到指定阈值的95%。建议这个值设定为storage.local.memory-chunks的50%。Prometheus会尽力加速存储速度，以避免限流这种情况的发送。&lt;/p>
&lt;h3 id="storagelocalnum-fingerprint-mutexes">storage.local.num-fingerprint-mutexes&lt;/h3>
&lt;p>当prometheus server端在进行checkpoint操作或者处理开销较大的查询的时候，采集指标的操作会有短暂的停顿，这是因为prometheus给时间序列分配的mutexes可能不够用，可以通过这个指标来增大预分配的mutexes，有时候可以设置到上万个。&lt;/p>
&lt;h4 id="storagelocalseries-sync-strategy">storage.local.series-sync-strategy&lt;/h4>
&lt;p>控制写入数据之后，何时同步到磁盘，有&amp;rsquo;never', &amp;lsquo;always&amp;rsquo;, &amp;lsquo;adaptive&amp;rsquo;. 同步操作可以降低因为操作系统崩溃带来数据丢失，但是会降低写入数据的性能。&lt;br>
默认为adaptive的策略，即不会写完数据就立刻同步磁盘，会利用操作系统的page cache来批量同步。&lt;/p>
&lt;h4 id="storagelocalcheckpoint-interval">storage.local.checkpoint-interval&lt;/h4>
&lt;p>进行checkpoint的时间间隔，即对尚未写入到磁盘的内存chunks执行checkpoint操作。&lt;/p>
&lt;hr>
&lt;h3 id="索引">&lt;strong>索引&lt;/strong>&lt;/h3>
&lt;p>一般prometheus的查询是把metric+label做关键字的，而且是很宽泛，完全用户自定义的字符，因此没办法使用常规的sql数据库，prometheus的存储层使用了全文检索中的&lt;a href="https://nlp.stanford.edu/IR-book/html/htmledition/a-first-take-at-building-an-inverted-index-1.html">倒排索引&lt;/a>概念，将每个时间序列视为一个小文档。而metric和label对应的是文档中的单词。&lt;/p>
&lt;p>例如，requests_total{path=”/status”, method=”GET”, instance=”10.0.0.1:80″}是包含以下单词的文档：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>name&lt;/strong>=”requests_total”&lt;/li>
&lt;li>path=”/status”&lt;/li>
&lt;li>method=”GET”&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="联邦federate集群">联邦（federate）集群&lt;/h3>
&lt;p>每一个Prometheus Server都包含一个/federate的接口，可用来获取当前节点中的监控数据。因此可通过该接口对整个prometheus集群进行拆分组合，建立分级节点，以做到集群的扩展，此模式称为联邦模式。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/03-15-48-04-image-20190425092255032.png?token=AARMIEXWLIVX5F5HMVN5YMS7UEFXE" alt="image-20190425092255032">&lt;/p>
&lt;p>3级联邦集群&lt;/p>
&lt;ul>
&lt;li>
&lt;p>L0：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># my global config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">global&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scrape_interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">evaluation_interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">rule_files&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/export/App/prometheus/conf/*_rules.yml&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># Here it&amp;#39;s Prometheus itself.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">scrape_configs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">job_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;hbase&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">honor_labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scrape_interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scrape_timeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">45s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metrics_path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;/federate&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">&amp;#39;match[]&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;{service=~&amp;#34;.base&amp;#34;}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">static_configs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">targets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.132.62&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.5.176&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.17.166.111&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.17.166.112&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.17.198.231&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.53.221&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.17.230.96&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.134.32&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>L1&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># my global config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">global&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scrape_interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">evaluation_interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">rule_files&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/export/App/prometheus/conf/*_rules.yml&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># Here it&amp;#39;s Prometheus itself.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">scrape_configs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">job_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;hbase&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">honor_labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scrape_interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1m&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scrape_timeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">45s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metrics_path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;/federate&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">params&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">&amp;#39;match[]&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;{service=~&amp;#34;.base&amp;#34;}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">relabel_configs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">source_labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">__address__]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">modulus&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">target_label&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">__tmp_hash&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hashmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">source_labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">__tmp_hash]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">regex&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">^1$ &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">keep&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">static_configs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">targets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.17.95.179&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.5.41&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.5.42&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.17.196.172&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.37.33&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.37.34&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.97.88&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.17.108.239&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.17.108.240&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.131.202&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.17.165.240&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.17.228.41&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.163.237&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.163.236&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.17.228.40&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.247.2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.17.130.94&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.163.235&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.70.175&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">11.18.131.201&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">9090&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">11.18.28.106&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">11.18.166.71&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">11.18.85.93&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">11.18.28.107&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">11.17.198.232&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">11.18.134.35&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">11.17.230.97&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">11.17.98.43&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">11.18.85.92&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">11.18.134.34&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>L2&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="c"># my global config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">global&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scrape_interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">30s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">evaluation_interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">30s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># Alertmanager configuration&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c">#alerting:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># alertmanagers:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># - static_configs:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># - targets:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># - ALERTMANAGER_ADDR:9093&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">rule_files&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;/export/App/prometheus/conf/*_rules.yml&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># Here it&amp;#39;s Prometheus itself.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">scrape_configs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">job_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;consul&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">relabel_configs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">source_labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;__meta_consul_service&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">replace&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">regex&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;(.*)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replacement&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;${1}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">target_label&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;service&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">source_labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;__meta_consul_tags&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">replace&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">regex&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;,(?:[^,]+,){0}([^=]+)=([^,]+),.*&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replacement&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;${2}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">target_label&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;${1}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">source_labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;__meta_consul_tags&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">replace&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">regex&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;,(?:[^,]+,){1}([^=]+)=([^,]+),.*&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replacement&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;${2}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">target_label&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;${1}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">source_labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;__meta_consul_tags&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">replace&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">regex&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;,(?:[^,]+,){2}([^=]+)=([^,]+),.*&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">replacement&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;${2}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">target_label&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;${1}&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">source_labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">__address__]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">modulus&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">20&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">target_label&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">__tmp_hash&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hashmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">source_labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">__tmp_hash]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">regex&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">^1$ &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">keep&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metrics_path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/metrics&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">scheme&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">consul_sd_configs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">11.25.146.232&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8500&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">hbase&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">cbase&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="go_metrics">go_metrics&lt;/h3>
&lt;ul>
&lt;li>go_memstats_alloc_bytes: Number of bytes allocated and still in use&lt;/li>
&lt;li>go_memstats_alloc_bytes_total: Total number of bytes allocated, even if freed.&lt;/li>
&lt;li>go_memstats_buck_hash_sys_bytes: Number of bytes used by the profiling bucket hash table.&lt;/li>
&lt;li>go_memstats_frees_total: Total number of frees.&lt;/li>
&lt;li>go_memstats_gc_cpu_fraction: The fraction of this program&amp;rsquo;s available CPU time used by the GC since the program started.&lt;/li>
&lt;li>go_memstats_gc_sys_bytes: Number of bytes used for garbage collection system metadata.&lt;/li>
&lt;li>go_memstats_heap_alloc_bytes: Number of heap bytes allocated and still in use.&lt;/li>
&lt;li>go_memstats_heap_idle_bytes: Number of heap bytes waiting to be used.&lt;/li>
&lt;li>go_memstats_heap_inuse_bytes: Number of heap bytes that are in use.&lt;/li>
&lt;li>go_memstats_heap_objects: Number of allocated objects.&lt;/li>
&lt;li>go_memstats_heap_released_bytes: Number of heap bytes released to OS.&lt;/li>
&lt;li>go_memstats_heap_sys_bytes: Number of heap bytes obtained from system.&lt;/li>
&lt;li>go_memstats_last_gc_time_seconds: Number of seconds since 1970 of last garbage collection.&lt;/li>
&lt;li>go_memstats_lookups_total: Total number of pointer lookups.&lt;/li>
&lt;li>go_memstats_mallocs_total: Total number of mallocs.&lt;/li>
&lt;li>go_memstats_mcache_inuse_bytes: Number of bytes in use by mcache structures.&lt;/li>
&lt;li>go_memstats_mcache_sys_bytes: Number of bytes used for mcache structures obtained from system.&lt;/li>
&lt;li>go_memstats_mspan_inuse_bytes: Number of bytes in use by mspan structures.&lt;/li>
&lt;li>go_memstats_next_gc_bytes: Number of heap bytes when next garbage collection will take place.&lt;/li>
&lt;li>go_memstats_other_sys_bytes: Number of bytes used for other system allocations.&lt;/li>
&lt;li>go_memstats_stack_inuse_bytes: Number of bytes in use by the stack allocator.&lt;/li>
&lt;li>go_memstats_stack_sys_bytes: Number of bytes obtained from system for stack allocator.&lt;/li>
&lt;li>go_memstats_sys_bytes: Number of bytes obtained from system.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart/why-monitor">https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/quickstart/why-monitor&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://dockerone.com/article/8605">Prometheus 不完全避坑指南 - DockOne.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://dockerone.com/article/10143">Prometheus Metrics 设计的最佳实践和应用实例 - DockOne.io&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>RCFile</title><link>https://justice.bj.cn/post/30.architech/rcfile/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/rcfile/</guid><description>&lt;h1 id="rcfile">RCFile&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>RCFile文件格式是FaceBook开源的一种Hive的文件存储格式，首先将表分为几个行组，对每个行组内的数据进行按列存储，每一列的数据都是分开存储，正是先水平划分，再垂直划分的理念。&lt;/p>
&lt;p>在存储结构上：
如上图是HDFS内RCFile的存储结构，我们可以看到，首先对表进行行划分，分成多个行组。一个行组主要包括：16字节的HDFS同步块信息，主要是为了区分一个HDFS块上的相邻行组；元数据的头部信息主要包括该行组内的存储的行数、列的字段信息等等；数据部分我们可以看出RCFile将每一行，存储为一列，将一列存储为一行，因为当表很大，我们的字段很多的时候，我们往往只需要取出固定的一列就可以。
在一般的行存储中 select a from table，虽然只是取出一个字段的值，但是还是会遍历整个表，所以效果和select * from table 一样，在RCFile中，像前面说的情况，只会读取该行组的一行。
在一般的列存储中，会将不同的列分开存储，这样在查询的时候会跳过某些列，但是有时候存在一个表的有些列不在同一个HDFS块上（如下图），所以在查询的时候，Hive重组列的过程会浪费很多IO开销。&lt;/p>
&lt;p>而RCFile由于相同的列都是在一个HDFS块上，所以相对列存储而言会节省很多资源。&lt;/p>
&lt;p>在存储空间上：
RCFile采用游程编码，相同的数据不会重复存储，很大程度上节约了存储空间，尤其是字段中包含大量重复数据的时候。&lt;/p>
&lt;p>懒加载：
数据存储到表中都是压缩的数据，Hive读取数据的时候会对其进行解压缩，但是会针对特定的查询跳过不需要的列，这样也就省去了无用的列解压缩。&lt;/p>
&lt;p>select c from table where a&amp;gt;1
1
针对行组来说，会对一个行组的a列进行解压缩，如果当前列中有a&amp;gt;1的值，然后才去解压缩c。若当前行组中不存在a&amp;gt;1的列，那就不用解压缩c，从而跳过整个行组。&lt;/p>
&lt;p>2.ORCFile
ORC是在一定程度上扩展了RCFile，是对RCFile的优化。&lt;/p>
&lt;p>存储结构上
根据结构图，我们可以看到ORCFile在RCFile基础上引申出来Stripe和Footer等。每个ORC文件首先会被横向切分成多个Stripe，而每个Stripe内部以列存储，所有的列存储在一个文件中，而且每个stripe默认的大小是250MB，相对于RCFile默认的行组大小是4MB，所以比RCFile更高效。&lt;/p>
&lt;p>Postscripts中存储该表的行数，压缩参数，压缩大小，列等信息
Stripe Footer中包含该stripe的统计结果，包括Max，Min，count等信息
FileFooter中包含该表的统计结果，以及各个Stripe的位置信息
IndexData中保存了该stripe上数据的位置信息，总行数等信息
RowData以stream的形式保存了数据的具体信息
1
2
3
4
5
Hive读取数据的时候，根据FileFooter读出Stripe的信息，根据IndexData读出数据的偏移量从而读取出数据。
网友有一幅图，形象的说明了这个问题：&lt;/p>
&lt;p>存储空间上
ORCFile扩展了RCFile的压缩，除了Run-length（游程编码），引入了字典编码和Bit编码。
采用字典编码，最后存储的数据便是
字典中的值，每个字典值得长度以及字段在字典中的位置&lt;/p>
&lt;p>至于Bit编码，对所有字段都可采用Bit编码来判断该列是否为null，
如果为null则Bit值存为0，否则存为1，对于为null的字段在实际编码的时候不需要存储，也就是说字段若为null，是不占用存储空间的。
————————————————&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/u014307117/article/details/52381383">RCFile和ORCFile_夫唯不争，故天下莫能与之争。-CSDN博客_rcfile和orcfile的区别&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Golang 内存管理</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>&lt;h1 id="golang-内存管理">Golang 内存管理&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>Golang内存管理采用类似&lt;code>tcmalloc&lt;/code>的分级分配算法，主要由&lt;code>MHeap&lt;/code>、&lt;code>MCentral&lt;/code>、&lt;code>MCache&lt;/code> 3 级组成。按分配对象的大小不同，选择相应的区域进行分配。&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2021/12/28-10-17-33-2021-12-28-10-17-27-image.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/24-16-34-34-2022-01-24-16-34-31-image.png" alt="">&lt;/p>
&lt;h2 id="内存布局">内存布局&lt;/h2>
&lt;p>golang程序启动时，会根据OS类型向OS申请一大块连续虚拟内存空间如下：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-49-34-2020-05-04-09-32-44-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>arena&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>由连续的page(8KB)组成，用于具体的对象分配；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>spans&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>存放了&lt;code>mspan&lt;/code>的指针(8Byte)，表示arena区中的某一页(page)属于哪个&lt;code>mspan&lt;/code>，用于管理arena；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>bitmap&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>用于标记&lt;code>arena&lt;/code>(即heap)中的对象, 每个对象使用两个bit进行标记，分别表示gc状态和是否分配；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>高地址部分指向arena区域的低地址部分，地址是由高地址向低地址增长的；&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-49-42-2020-05-04-09-36-04-image.png" alt="">&lt;/p>
&lt;h2 id="基本数据结构">基本数据结构&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>MHeap&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>代表了golang的整个堆内存;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>全局唯一的;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大对象(&amp;gt;32KB)直接在MHeap中分配；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>mheap 包含free，large两个域：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>free: free包含一个256单元的数组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>large:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>给MCentral和MCache等下层提供空间；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-49-48-2020-05-04-09-39-31-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>MCentral&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>集中管理不同类型（67种）的MSpan，对应TCMalloc中的CentralCache；&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>每个mcentral包含两个mspan列表:
&lt;ul>
&lt;li>noempty: 表示已被mcache的mspan list；&lt;/li>
&lt;li>empty: 表示未被使用(empty)的mspan 链表。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>当某个goroutine中的mcache内存不够时，就会从mcentral的empty链表中分配对应的mspan。&lt;/li>
&lt;li>如果mcentral内存不够，就会从MHeap中分配；&lt;/li>
&lt;li>mcentral中有锁，以为多个goroutine分配提供互斥；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-49-08-2020-05-04-09-38-29-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>MCache&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>是各个goroutine自有的局部内存;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>向&lt;code>mcentral&lt;/code>申请得到的;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>小对象(&amp;lt;=32KB)的分配直接在goroutine内部进行，不用加锁，提高分配速度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>mcache 内存不够时，会向mcentral重新申请；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-49-13-2020-05-04-09-38-54-image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>MSpan&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>内存管理基本单元，由一片连续的8KB页组成的双向链表，进行内存对象的数据分配;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为满足不同大小对象分配的需要，减少内存碎片，同时兼顾内存利用率，golang将span分层不同的大小类型（总共67种）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对象分配内存时，根据对象大小，选择最合适的mspan进行分配。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/11/22-13-49-19-2020-05-04-09-37-59-image.png" alt="">&lt;/p>
&lt;h2 id="内存分配">内存分配&lt;/h2>
&lt;p>Go的内存分配器在分配对象时，根据对象的大小，分成三类：&lt;/p>
&lt;ul>
&lt;li>Tiny对象： (0, 16B]，使用mcache的tiny分配器分配，多个tiny对象可组合在一个mspan中&lt;/li>
&lt;li>Small对象：(16B, 32KB ]，在mcache中选择相应规格大小的mspan进行分配；&lt;/li>
&lt;li>大对象：&amp;gt;32KB, 直接从MHeap中分配；&lt;/li>
&lt;/ul>
&lt;p>golang变量是在栈上分配还是在堆上分配，是由逃逸分析的结果决定的。&lt;/p>
&lt;p>通常情况下，编译器是倾向于将变量分配到栈上的，因为它的开销小。&lt;/p>
&lt;p>分配顺序：&lt;/p>
&lt;ul>
&lt;li>首先通过计算使用的大小规格&lt;/li>
&lt;li>然后&lt;code>mcache&lt;/code>中对应大小规格的块分配。&lt;/li>
&lt;li>如果&lt;code>mcache&lt;/code> free 链表不够分配&lt;/li>
&lt;li>如果&lt;code>mcentral&lt;/code>中没有可用的块，则向&lt;code>mheap&lt;/code>申请，并根据算法找到最合适的&lt;code>mspan&lt;/code>。&lt;/li>
&lt;li>如果申请到的&lt;code>mspan&lt;/code> 超出申请大小，将会根据需求进行切分，以返回用户所需的页数。剩余的页构成一个新的 mspan 放回 mheap 的空闲列表。&lt;/li>
&lt;li>如果 mheap 中没有可用 span，则向操作系统申请一系列新的页（最小 1MB）。&lt;/li>
&lt;/ul>
&lt;h2 id="gc流程">GC流程&lt;/h2>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/27807169">https://zhuanlan.zhihu.com/p/27807169&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/2904efc7f1a8">图解Golang的内存分配&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/29216091">https://zhuanlan.zhihu.com/p/29216091&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/76802887">https://zhuanlan.zhihu.com/p/76802887&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yq.aliyun.com/articles/652551">&lt;strong>简单易懂的 Go 内存分配原理解读&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://juejin.im/post/5c888a79e51d456ed11955a8">https://juejin.im/post/5c888a79e51d456ed11955a8&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/225190602">白话Go语言内存管理三部曲（一）内存分配原理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000022499402">go怎样做stw&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/3gGbJaeuvx4klqcv34hmmw">https://mp.weixin.qq.com/s/3gGbJaeuvx4klqcv34hmmw&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>Golang之syscall</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bsyscall/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bsyscall/</guid><description>&lt;h1 id="golang之syscall">Golang之syscall&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ User Mode ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─
│
│ Application syscall library
program /src/syscall │
│
│
│ ┌───────────────────┐ ┌──────────────────────┐
│ │ ┌────────────▶│Faccessat { │ │
│ │ │ │ │ │
│ │ │ │ runtime·Syscall6 { │ │
│ │... │ │ │ │
│syscall.Access( │ │ │ ... │ │
│ │ path, mode)───┼────────┘ │ SYSCALL ──────────┼────────────────┐
│... ◀──────────┼──────┐ │ ... ◀──────────┼──────────┼─────┼────────┐
│ │ │ └───────────────┼─── return; │ │ │
│ │ │ } │ │ │ │
│ │ │ │} │ │ │
└───────────────────┘ └──────────────────────┘ │ │ │
│ │ │
─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘ │ ▲
│ │
switch to kernel mode │
┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ Kernel Mode ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ▼ │
│ │ │
│ System call Trap handler │ │
service routine │ │ │
│ ┌──────────────────┐ ┌───────────────────────┐ │ │
│sys_faccessat() ◀─┼───────────┐ │system call: ◀───────┼────────┼─────┘ │
│ │{ │ │ │ │ │
│ │ │ │ │ │ │
│ │ │ │ │ ... │ │
│ │ │ │ │ │ │
│ │ ... │ └───────────┼───call sys_call_table │ switch to user mode
│ │ │ │ │ │
│ │ │ ┌───────────┼─▶ ... │ │
│ return error; ──┼───────────┘ │ │ │ │
│ │} │ │ ───────────────────┼───────────▶───────────┘
└──────────────────┘ └───────────────────────┘ │
│
─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">/syscall/syscall_linux.go
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以把系统调用分为三类:&lt;/p>
&lt;ol>
&lt;li>阻塞系统调用&lt;/li>
&lt;li>非阻塞系统调用&lt;/li>
&lt;li>wrapped 系统调用&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">//sys Madvise(b []byte, advice int) (err error)
&lt;/span>&lt;span class="c1">//sysnb EpollCreate(size int) (fd int, err error)
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">//mksyscall.pl 脚本 将上面的定义生成如下
&lt;/span>&lt;span class="c1">//sys
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">Madvise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">advice&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">_p0&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Pointer&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">_p0&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Pointer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">_p0&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Pointer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">_zero&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">e1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">Syscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">SYS_MADVISE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">_p0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">advice&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">e1&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">errnoErr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//sysnb
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">EpollCreate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">size&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">fd&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">e1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">RawSyscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">SYS_EPOLL_CREATE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">uintptr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">size&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fd&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">e1&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">errnoErr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//wrapped
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">Rename&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">oldpath&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newpath&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nf">Renameat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">_AT_FDCWD&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">oldpath&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_AT_FDCWD&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newpath&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>入口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Syscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">trap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a3&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r2&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Errno&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">Syscall6&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">trap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a6&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r2&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Errno&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">RawSyscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">trap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a3&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r2&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Errno&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">RawSyscall6&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">trap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a6&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r2&lt;/span> &lt;span class="kt">uintptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="nx">syscall&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Errno&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些函数的实现都是汇编，按照 linux 的 syscall 调用规范，我们只要在汇编中把参数依次传入寄存器，并调用 SYSCALL 指令即可进入内核处理逻辑，系统调用执行完毕之后，返回值放在 RAX 中:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>RDI&lt;/th>
&lt;th>RSI&lt;/th>
&lt;th>RDX&lt;/th>
&lt;th>R10&lt;/th>
&lt;th>R8&lt;/th>
&lt;th>R9&lt;/th>
&lt;th>RAX&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>参数一&lt;/td>
&lt;td>参数二&lt;/td>
&lt;td>参数三&lt;/td>
&lt;td>参数四&lt;/td>
&lt;td>参数五&lt;/td>
&lt;td>参数六&lt;/td>
&lt;td>系统调用编号/返回值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Syscall 和 Syscall6 的区别只有传入参数不一样&lt;/p>
&lt;p>Syscall 和 Syscall6在进入和退出Syscall时，分别调用了&lt;code>runtime·entersyscall(SB)&lt;/code>和&lt;code>runtime·exitsyscall(SB)&lt;/code>;&lt;/p>
&lt;p>RawSyscall 和 RawSyscall6 在进入和退出Syscall 时候没有调用；&lt;/p>
&lt;h4 id="新版本抢占式调度中的-rawsyscall-和-syscall">新版本抢占式调度中的 RawSyscall 和 Syscall&lt;/h4>
&lt;p>由于 &lt;code>RawSyscall&lt;/code> 相较于 &lt;code>Syscall&lt;/code> 缺少了 &lt;code>runtime·entersyscall(SB)&lt;/code> 以及 &lt;code>runtime·exitsyscall(SB)&lt;/code> 的调用，当 &lt;code>g&lt;/code> 执行的是阻塞性质的系统调用的时候，当前 &lt;code>g&lt;/code> 会维持 &lt;code>running&lt;/code> 状态，runtime 系统监控在进行全局调度的时候一旦发现运行超过 10ms 的 &lt;code>g&lt;/code> 就会执行抢占操作（1.14.3 版本, linux_amd64 下为例），通过发送信号量给 &lt;code>g&lt;/code> 对应的线程，而由于线程在初始化的时候进行了信号量的监听以及设置了相应的 &lt;code>sa_flags&lt;/code> 参数，虽然包含诸如&lt;code>SA_RESTART&lt;/code>参数会让系统调用在信号中断后自动恢复，但是不是对所有系统调用都会有效，这将会导致在收到信号量的时候对正在阻塞的系统调用产生中断，&lt;/p>
&lt;p>提供给用户使用的系统调用，基本都会通知 runtime，以 entersyscall，exitsyscall 的形式来告诉 runtime，在这个 syscall 阻塞的时候，由 runtime 判断是否把 P 腾出来给其它的 M 用。解绑定指的是把 M 和 P 之间解绑，如果绑定被解除，在 syscall 返回时，这个 g 会被放入执行队列 runq 中。&lt;/p>
&lt;p>同时 runtime 又保留了自己的特权，在执行自己的逻辑的时候，我的 P 不会被调走，这样保证了在 Go 自己“底层”使用的这些 syscall 返回之后都能被立刻处理。&lt;/p>
&lt;p>所以同样是 epollwait，runtime 用的是不能被别人打断的，你用的 syscall.EpollWait 那显然是没有这种特权的。&lt;/p>
&lt;h2 id="vsdo">vsdo&lt;/h2>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://github.com/cch123/golang-notes/blob/master/syscall.md">https://github.com/cch123/golang-notes/blob/master/syscall.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.itpub.net/69908606/viewspace-2642153/">曹春晖：谈一谈 Go 和 Syscall_ITPUB博客&lt;/a>&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>MySQL</title><link>https://justice.bj.cn/post/30.architech/mysql/mysql%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/mysql/mysql%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="mysql">MySQL&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;h2 id="特点">特点&lt;/h2>
&lt;h3 id="设计范式">设计范式&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>1NF&lt;/strong>: 原子性，保证每列不可再分, 保证表中无表；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>2NF&lt;/strong>: 消除部分依赖，在满足1NF上，每个属性完全依赖于主键；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>3NF&lt;/strong>: 消除传递依赖，在满足2NF上，属性不依赖于其他非主属性；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>BCNF&lt;/strong>: 在满足3NF上，&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="索引">索引&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>聚集索引&lt;/strong>：根据主键来构建，叶子节点存放的是该主键对应的这一行记录&lt;/li>
&lt;li>&lt;strong>普通索引&lt;/strong>：根据申明这个索引时候的列来构建，叶子节点存放的是这一行记录对应的主键的值
&lt;ul>
&lt;li>&lt;strong>唯一索引&lt;/strong>：在插入和修改的时候会校验该索引对应的列的值是否已经存在&lt;/li>
&lt;li>&lt;strong>联合索引&lt;/strong>：将两个列的值按照申明时候的顺序进行拼接后在构建索引。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>数据是以行为单位存储在聚簇索引里的，根据主键查询可以直接利用聚簇索引定位到所在记录，根据普通索引查询需要先在普通索引上找到对应的主键的值，然后根据主键值去聚簇索引上查找记录，俗称回表。&lt;/p>
&lt;p>普通索引上存储的值是主键的值，如果主键是一个很长的字符串并且建了很多普通索引，将造成普通索引占有很大的物理空间，这也是为什么建议使用 自增ID 来替代订单号作为主键，另一个原因是 自增ID 在插入的时候可以保证相邻的两条记录可能在同一个数据块，而订单号的连续性在设计上可能没有自增ID好，导致连续插入可能在多个数据块，增加了磁盘读写次数。&lt;/p>
&lt;h3 id="日志">日志&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>redolog&lt;/strong>：wal日志，保证数据库宕机后可以通过该文件进行恢复。&lt;/li>
&lt;li>&lt;strong>undolog&lt;/strong>：事务回滚和 MVCC。&lt;/li>
&lt;li>&lt;strong>binlog&lt;/strong>：高可用，也就是通过 binlog 来将数据同步到集群内其他的 MySQL 实例。&lt;/li>
&lt;/ul>
&lt;p>redolog和binlog区别：&lt;/p>
&lt;ul>
&lt;li>Binlog在存储引擎上层 Server 层写入的，记录的是逻辑操作，&lt;/li>
&lt;li>redolog 记录的底层某个数据页的物理操作；&lt;/li>
&lt;li>redolog 是循环写，&lt;/li>
&lt;li>binlog 是追加写的，不会覆盖以前写的数据&lt;/li>
&lt;/ul>
&lt;h3 id="锁">锁&lt;/h3>
&lt;p>InnoDB 中锁的最小粒度为行&lt;/p>
&lt;ul>
&lt;li>共享锁：读，共享锁之间可以兼容&lt;/li>
&lt;li>排他锁：写，其他都互斥。&lt;/li>
&lt;/ul>
&lt;p>根据加锁的范围，可以分为：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>全局锁&lt;/strong>：全局锁会把整个数据库实例加锁，命令为 flush tables withs read lock ，将使数据库处于只读状态，其他数据写入和修改表结构等语句会阻塞，一般在备库上做全局备份使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>表级锁&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>表锁： lock table with read/write ，和读写锁一样；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>元数据锁：也叫意向锁，不需要显示申明，加索引的时候会自动加元数据写锁，对表进行增删改查的时候会加元数据读锁。这样当两条修改语句的事务之间元数据锁都是读锁不互斥，但是修改表结构的时候执行更新由于互斥就需要阻塞。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>行锁&lt;/strong>：间隙锁，他锁定的是两条记录之间的间隙，防止其他事务往这个间隙插入数据，间隙锁是隐式锁，是存储引擎自己加上的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="锁的问题">锁的问题&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>脏读&lt;/strong>：指一个事物读取了另外一个事物没有提交的数据，如果另外一个数据对这个数据又进行了更改，则出现数据一致性，脏读违背了数据库的隔离性。脏读目前只能出现在读未提交这个隔离级别下，目前 MySQL 默认的隔离级别为可重复读。&lt;/li>
&lt;li>&lt;strong>不可重复读&lt;/strong>：指一个事务先后两次读取同一条记录的结果不一样，因为第二次读取的时候可能其他事务已经进行更改并提交，不可重复读只发生在隔离级别为读未提交和读已提交里。&lt;/li>
&lt;li>&lt;strong>丢失更新&lt;/strong>：两个事务同时更新某一条记录，导致其中一个事务更新失效，理论上任何一个隔离级别都不会发生丢失更新，因为更新的时候会加上排他锁，但是应用中却经常发生，例如一个计数器应用，事务A查询计数器的值 v=5,在内存中加 1 写入到数据库，在写入之前另外一个事务读取到计数器的值 v=5 ，然后加 1 写入数据库，这样本来应该为 7 ， 现在却是 6 ，这是因为我们是先读取在写入，而读取和写入对数据库而言是两个操作，并不是一个原子操作，这里可以通过把查询的记录加上排他锁 select for update 来防止丢失更新现象。当然这里直接将 sql 改为 v = v + 1 也可以。&lt;/li>
&lt;li>&lt;strong>死锁&lt;/strong>：两个或两个以上事务因争夺资源而互相等待的情况，InnoDB 提供了死锁检测和超时机制来防止死锁的影响，死锁检测是非常耗 CPU 的，当很多个事务同时竞争同一个资源的时候，例如抢购的时候扣商品份额，或者支付的时候所有的订单都会用到一个公共账户，同一个资源竞争的事务越多，死锁检测越耗 CPU&lt;/li>
&lt;li>&lt;strong>热点&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;h3 id="事务">事务&lt;/h3>
&lt;p>完全符合 ACID 特性。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>原子性&lt;/strong> : 是指一个事务内的所有操作要么全部成功要么全部失败，数据库中将 redolog 和 binlog 的写入采用两阶段提交就是为了保证事务的原子性。另外由于 InnodDB 是按页进行存储的，每个页大小为 16kb 而操作系统的一般以 4KB 为一页进行读取，所以可能出现一个 InnoDB 的数据页只写了一部分的情况。而 InnoDB 为了防止这种情况的发生采用双写机制，除了写入磁盘上的数据页还会在共享空间中写入。而 redolog 按块存储，每个块 512 字节，正好和扇区大小一样所以，可以保证原子性，不需要进行双写。&lt;/li>
&lt;li>&lt;strong>一致性&lt;/strong> ：保证磁盘和缓存的数据一致，binlog 数据和 主库中的数据一致。&lt;/li>
&lt;li>&lt;strong>隔离性&lt;/strong> ：默认为可重复读，采用 undolog 来实现。&lt;/li>
&lt;li>&lt;strong>持久性&lt;/strong> ：事务一旦提交，其结果就是永久的，redolog 需要在事务提交前进行刷盘，磁盘采用 RAID 等。&lt;/li>
&lt;/ul>
&lt;h3 id="存储过程">存储过程&lt;/h3>
&lt;h3 id="myisam-和-innodb的区别">MyISAM 和 INNODB的区别&lt;/h3>
&lt;ol>
&lt;li>MyISAM的索引和数据是分开的, innodb索引和数据是紧密捆绑的;&lt;/li>
&lt;li>MyISAM不支持事务，INNODB支持事务;&lt;/li>
&lt;li>外键 MyISAM 不支持外键， INNODB支持外键;&lt;/li>
&lt;li>MyISAM时表锁，innodb是行锁;&lt;/li>
&lt;li>查询和添加速度（MyISAM批量插入速度快）&lt;/li>
&lt;li>MyISAM支持全文索引，INNODB不支持全文索引;&lt;/li>
&lt;li>MyISAM内存空间使用率比InnoDB低&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2020/12/26-20-27-38-2020-12-26-20-27-32-image.png" alt="">&lt;/p>
&lt;h2 id="btree">B+Tree&lt;/h2>
&lt;h2 id="主从复制">主从复制&lt;/h2>
&lt;ol>
&lt;li>master（主库）在每次准备提交事务完成数据更新前，将改变记录到二进制日志 (binary log) 中&lt;/li>
&lt;li>slave（从库）发起连接，连接到 master，请求获取指定位置的 binlog 文件&lt;/li>
&lt;li>master 创建 dump 线程，推送 binlog 的 slave&lt;/li>
&lt;li>slave 启动一个 I/O 线程来读取主库上 binary log 中的事件，并记录到 slave 自己的中继日志 (relay log) 中&lt;/li>
&lt;li>slave 还会起动一个 SQL 线程，该线程从 relay log 中读取事件并在备库执行，完成数据同步&lt;/li>
&lt;li>slave 记录自己的 binlog&lt;/li>
&lt;/ol>
&lt;img src="https://static001.infoq.cn/resource/image/59/2a/599d49c429805ffdce59783c0aeb782a.png" title="" alt="Mysql数据实时同步实践" data-align="center">
&lt;h2 id="sql-中的join">SQL 中的join&lt;/h2>
&lt;p>&lt;img src="https://gitee.com/justice/gitnote-img-bed/raw/master/2022/01/24-17-46-06-2022-01-24-17-46-01-image.png" alt="">&lt;/p>
&lt;h3 id="参考">参考&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/63377684">https://zhuanlan.zhihu.com/p/63377684&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yq.aliyun.com/articles/691403">https://yq.aliyun.com/articles/691403&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>专题：二叉树</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</guid><description>&lt;h1 id="专题二叉树">专题：二叉树&lt;/h1>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>二叉树是一个递归的结构&lt;/p>
&lt;h2 id="相关题目">相关题目&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>题目&lt;/th>
&lt;th>难度&lt;/th>
&lt;th>解题思路&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="../94.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86">94.二叉树的中序遍历&lt;/a>&lt;/td>
&lt;td>**&lt;/td>
&lt;td>递归，栈&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../100.%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91">100.相同的树&lt;/a>&lt;/td>
&lt;td>**&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../101.%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91">101.对称二叉树&lt;/a>&lt;/td>
&lt;td>*&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86">102.二叉树的层序遍历&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../108.%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91">108.将有序数组转换为二叉搜索树&lt;/a>&lt;/td>
&lt;td>*&lt;/td>
&lt;td>递归&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91">110.平衡二叉树&lt;/a>&lt;/td>
&lt;td>*&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../543.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84">543.二叉树的直径&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../617.%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91">617.合并二叉树&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="../111.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6">111.二叉树的最小深度&lt;/a>&lt;/td>
&lt;td>*&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>