# BTree, B+Tree, B*Tree

## BTree

* `B-Tree`(B树)又叫*平衡多路查找树*(Balance Multiple Search Tree);

* 是一种平衡多叉树；

* m阶B-Tree的每个节点最多有m个子节点；

### 特性

一棵 m 阶 B 树 (m 叉树)的特性如下：

1. 每个Node最多含有 m -1个key；

2. Root节点key数：[1, m-1]；

3. 非Root节点key数：[m/2, m-1];

4. 若Root结点不是叶子结点，则至少有 2 个孩子；

5. 所有叶子结点都出现在同一层，叶子结点不包含任何关键字信息(可以看做是外部接点或查询失败的接点，实际上这些结点不存在，指向这些结点的指针都为 null)；

6. 每个非终端结点中包含有 n 个关键字信息： (P1，K1，P2，K2，P3，......，Kn，Pn+1)。其中：
          a)   Ki (i=1...n)为关键字，且关键字按顺序升序排序 K(i-1)< Ki。 
          b)   Pi 为指向子树根的接点，且指针 P(i)指向子树种所有结点的关键字均小于 Ki，但都大于 K(i-1)。 
          c)   关键字的个数 n 必须满足： [ceil(m / 2)-1]<= n <= m-1。

![](https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/11/21-09-56-17-2020-04-21-13-16-05-image.png)

### B-Tree操作

来模拟下查找文件 29 的过程：

(1) 根据根结点指针找到文件目录的根磁盘块 1，将其中的信息导入内存。【磁盘 IO 操作 1 次】

(2) 此时内存中有两个文件名 17，35 和三个存储其他磁盘页面地址的数据。根据算法我们发现 17<29<35，因此我们找到指针 p2。

(3) 根据 p2 指针，我们定位到磁盘块 3，并将其中的信息导入内存。【磁盘 IO 操作 2 次】

(4) 此时内存中有两个文件名 26，30 和三个存储其他磁盘页面地址的数据。根据算法我们发现 26<29<30，因此我们找到指针 p2。

(5) 根据 p2 指针，我们定位到磁盘块 8，并将其中的信息导入内存。【磁盘 IO 操作 3 次】

(6) 此时内存中有两个文件名 28，29。根据算法我们查找到文件 29，并定位了该文件内存的磁盘地址。

## B+Tree

* B+树是B-Tree的一种变种；

### 特点

1. B+**树的层级更少**：相较于B树B+每个**非叶子**节点存储的关键字数更多，树的层级更少所以查询数据更快；

2. B+**树查询速度更稳定**：B+所有关键字数据地址都存在**叶子**节点上，所以每次查找的次数都相同所以查询速度要比B树更稳定;

3. B+树天然具备排序功能：**B+树所有的**叶子节点数据构成了一个有序链表，在查询大小区间的数据时候更方便，数据紧密性很高，缓存的命中率也会比B树高。

4. B+树全节点遍历更快：**B+树遍历整棵树只需要遍历所有的**叶子节点即可，而不需要像B树一样需要对每一层进行遍历，这有利于数据库做全表扫描。

**B树**相对于**B+树**的优点是：如果经常访问的数据离根节点很近，而**B树**的**非叶子**节点本身存有关键字其数据的地址，所以这种数据检索的时候会要比**B+树**快。

`B+树`通常用于数据库和操作系统的`文件系统`中;

![](https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2022/03/19-11-42-17-2022-03-19-11-42-14-image.png)

### 插入

### 删除

## B* Tree

B*树是B+树的变种，相对于B+树他们的不同之处如下：

（1）首先是关键字个数限制问题，B+树初始化的关键字初始化个数是cei(m/2)，b*树的初始化个数为（cei(2/3*m)）

（2）B+树节点满时就会分裂，而B*树节点满时会检查兄弟节点是否满（因为每个节点都有指向兄弟的指针），如果兄弟节点未满则向兄弟节点转移关键字，如果兄弟节点已满，则从当前节点和兄弟节点各拿出1/3的数据创建一个新的节点出来；

![](https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2022/03/19-11-42-56-2022-03-19-11-42-52-image.png)

## 参考

1. [The-Art-Of-Programming-By-July/03.02.md at master · julycoding/The-Art-Of-Programming-By-July · GitHub](https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.02.md)
2. https://zhuanlan.zhihu.com/p/27700617
3. https://zhuanlan.zhihu.com/p/54102723
4. [为什么 MySQL 使用 B+ 树 - 面向信仰编程](https://draveness.me/whys-the-design-mysql-b-plus-tree/)
5. [B+树详解 | Ivanzz](https://ivanzz1001.github.io/records/post/data-structure/2018/06/16/ds-bplustree)
6. https://segmentfault.com/a/1190000020416577
7. [B+树介绍 - wade&luffy - 博客园](https://www.cnblogs.com/wade-luffy/p/6292784.html)
8. 
