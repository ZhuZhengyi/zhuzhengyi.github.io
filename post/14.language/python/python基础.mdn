# Python 基础

## 简介

## 包依赖

- 用法

```python
import  module_name     #
from module_name import module1, module2
```

- import 搜索顺序:
1. 当前目录
2. 如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。
3. 如果都找不到，Python 会察看默认路径。UNIX 下，默认路径一般为/usr/local/lib/python/

### 数据类型

- 不可变量: boolean, int, float, string, tuple
- 可变量: 其他类型

```python
t1 = (1, 2, "abc") #tuple
l1 = [] #list
s1 = {"abc", 10, l1}
h1 = {1: 'xxx', 2: 'yyy'}
```

### 列表解析

```python
[ expr(i) for i in array {condition} ]
```

### 装饰器

```python
@mod
def func():
    ...
```

### 迭代器

```

```

### 生成器

- yield: 将函数变为生成器

### GIL(全局解析器锁)

- 一个防止多线程并发执行机器码的一个 Mutex, 在解析器上面确保同一时刻只有一个线程执行;

### gevent

### conroutine(协程)

### asyncio

## 1. 数据类型

- 列表: 有序可变集,通过索引访问（顺序访问）

```python
list1 = [ "apple", "big" ]
```

- 元组(tuple)：有序不可变集,

```python
stock = ('aaa', 102)
```

- 集合: 无序

```python
set1 = { "abc", 19, }
```

- 字典：无序可变集

```python
dic1 = { key1:value1, key2:value2 }
```

## 2. 装饰器

```python
@deco1(deco_arg)
@deco2
def func():
        pass
```

## 3. Lambda

```python
f = lambda arg1,arg2 : do arg1 arg2

f(a1, a2)
```

- 内建函数

```python
filter(bfunc, seq)
map(func, seq1[, seq2])
reduce(func, seq[, init])
```

## 4. 列表解析

```python
[ expression for target1 in seq1 [if cond1] \
    for target2 in seq2 [if cond2] \
    for target3 in seq3 [if cond3] \
    … \
]
```
