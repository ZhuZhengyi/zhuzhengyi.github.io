# CSS

## 简介

- **CSS** (`Cascading Style Sheets`，层叠样式表）；
- 文件扩展名为 .css；
- 用于定义如何显示 HTML 元素；
- 实现了 web 页面的内容与表现分离的问题；
- CSS 布局主要是基于*盒子模型*；

## CSS 工作原理

1. 浏览器载入 HTML 文件（比如从网络上获取）。
2. 将 HTML 文件转化成一个 DOM（Document Object Model），DOM 是文件在计算机内存中的表现形式，下一节将更加详细的解释 DOM。
3. 接下来，浏览器会拉取该 HTML 相关的大部分资源，比如嵌入到页面的图片、视频和 CSS 样式。JavaScript 则会稍后进行处理，简单起见，同时此节主讲 CSS，所以这里对如何加载 JavaScript 不会展开叙述。
4. 浏览器拉取到 CSS 之后会进行解析，根据选择器的不同类型（比如 element、class、id 等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id 选择器等）应用在对应的 DOM 的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。
5. 上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。
6. 网页展示在屏幕上（这一步被称为着色）。

![1686093358979](image/css/1686093358979.png)

1. 浏览器载入 HTML 文件（比如从网络上获取）。
2. 将 HTML 文件转化成一个 DOM（Document Object Model），DOM 是文件在计算机内存中的表现形式，下一节将更加详细的解释 DOM。
3. 接下来，浏览器会拉取该 HTML 相关的大部分资源，比如嵌入到页面的图片、视频和 CSS 样式。JavaScript 则会稍后进行处理，简单起见，同时此节主讲 CSS，所以这里对如何加载 JavaScript 不会展开叙述。
4. 浏览器拉取到 CSS 之后会进行解析，根据选择器的不同类型（比如 element、class、id 等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id 选择器等）应用在对应的 DOM 的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。
5. 上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。
6. 网页展示在屏幕上（这一步被称为着色）。
7. 浏览器载入 HTML 文件（比如从网络上获取）。
8. 将 HTML 文件转化成一个 DOM（Document Object Model），DOM 是文件在计算机内存中的表现形式，下一节将更加详细的解释 DOM。
9. 接下来，浏览器会拉取该 HTML 相关的大部分资源，比如嵌入到页面的图片、视频和 CSS 样式。JavaScript 则会稍后进行处理，简单起见，同时此节主讲 CSS，所以这里对如何加载 JavaScript 不会展开叙述。
10. 浏览器拉取到 CSS 之后会进行解析，根据选择器的不同类型（比如 element、class、id 等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id 选择器等）应用在对应的 DOM 的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。
11. 上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。
12. 网页展示在屏幕上（这一步被称为着色）。
13. 浏览器载入 HTML 文件（比如从网络上获取）。
14. 将 HTML 文件转化成一个 DOM（Document Object Model），DOM 是文件在计算机内存中的表现形式，下一节将更加详细的解释 DOM。
15. 接下来，浏览器会拉取该 HTML 相关的大部分资源，比如嵌入到页面的图片、视频和 CSS 样式。JavaScript 则会稍后进行处理，简单起见，同时此节主讲 CSS，所以这里对如何加载 JavaScript 不会展开叙述。
16. 浏览器拉取到 CSS 之后会进行解析，根据选择器的不同类型（比如 element、class、id 等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id 选择器等）应用在对应的 DOM 的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。
17. 上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。
18. 网页展示在屏幕上（这一步被称为着色）。

## css 规则

- css 文件由一系列的 css 规则组成；
- 每个 css 规则由一个选择器和一或多个 css 声明组成；

## css 选择器

- 标签选择(`a`): 选择名称为 `a`的标签；
- id 选择器(`#a`)：选择 `id='a'`的所有标签；
- class 选择器(`.a`)：选择 `class='a'`的所有标签；
- 分组选择器(`a,b`)：将同样内容的不同选择器放到一块，形成一个分组，以 `，`来连接不同的分组；
- 嵌套选择器：多个选择器嵌套在一起；
- 组合选择器：将 2 个有特别关系的标签组合得到的选择器；

  - 后代选择器(`a b`)：`b`为 `a`的后代元素；
  - 子元素选择器(`a>b`)：`b`为 `a`的第一级后代；
  - 相邻兄弟选择器(`a+b`)：`b`与 `a`相邻的一个；
  - 普通兄弟选择器(`a~b`)：`b`与 `a`相邻的所有；

- 伪类选择器(`a:archor`)：
- 伪元素选择器(`selector:pseudo-element {property:value;}`):
- 属性选择器(`[a]`)：通过标签属性值选择的标签；

```css
/* 注释 */
h1 {
  color: orange;
  text-align: center;
} /* 基本选择器，所有的h1标签 */
#para1 {
  text-align: center;
  color: red;
} /* id选择器，所有id='para1'的标签 */
.center {
  text-align: center;
} /* class选择器，所有class=center的标签 */

/*** 分组选择器 ***/
h1,
h2,
p {
  color: green;
} /* h1,h2,p标签 */

/*** 嵌套选择器 ***/
.marked p {
  color: white;
} /* class="marked" 元素内的 p 元素指定一个样式 */
p.marked {
  text-decoration: underline;
} /* 所有p 且class="marked"的元素 */

/*** 组合选择器 ***/
div p {
  background-color: yellow;
} /* 后代选择器： div的所有p后代，包括所有子层级<p> */
div > p {
  background-color: yellow;
} /* 子选择器: div的第一子层p */
div + p {
  background-color: yellow;
} /* 相邻选择器: div同级相邻的后一个p */
div ~ p {
  background-color: yellow;
} /* 后续兄弟选择器: div同级相邻后的所有p */

/*** 伪类选择器 ***/
a:link {
  color: #ff0000;
} /* link：未访问的链接 */
a:visited {
  color: #00ff00;
} /* visited：已访问的链接 */
a:hover {
  color: #ff00ff;
} /* hover：鼠标划过链接 */
a:active {
  color: #0000ff;
} /* active：已选中的链接 */
p:first-child {
  color: blue;
} /* 第一个p子类元素 */
p > i:first-child {
  color: blue;
} /* p的第一个<i>元素  */
p:first-child i {
  color: blue;
} /* 第一个子元素的 <p> 中的所有 <i> 的标签 */

/*** 伪元素选择器 ***/
p:first-letter {
  color: #ff0000;
  font-size: xx-large;
} /* p标签值中的第一个字母 */
p.article:first-letter {
  color: #ff0000;
} /* p article类标签值的第一个字母 */
h1:before {
  content: url(smiley.gif);
} /* 每个 <h1>元素前面插入一幅图片 */

/*** 属性选择器 ***/
[title] {
  color: blue;
} /* 所有属性为title的标签 */
[title="runoob"] {
  border: 5px solid green;
} /* 所有title=runoob的标签 */
```

## css 分类

- 外部样式表：head 中通过 `<link href="">`引入外部的 css 文件；
- 内部样式表：head 中 `<style></style>`标签内部自定义的；
- 内联样式：标签内部通过 style 属性定义的样式；

```html
<head>
  <!-- 外部式样表 -->
  <link rel="stylesheet" type="text/css" href="mystyle.css" />
  <!-- 内部式样表 -->
  <style>
    hr {
      color: sienna;
    }
    p {
      margin-left: 20px;
    }
    body {
      background-image: url("images/back40.gif");
    }
  </style>
</head>

<body>
  <!-- 内联式样表 -->
  <p style="color:sienna;margin-left:20px">这是一个段落。</p>
</body>
```

## 多重式样表

- 当同一个标签同时被多种式样表选择器选择时，其属性值将**从更具体的样式**表中被继承过来：
- 优先级由高到低：
  - （内联样式）Inline style；
  - （内部样式）Internal style sheet ；
  - （外部样式）External style sheet ；
  - 浏览器默认样式；
  - !important 规则：!important 声明将覆盖任何其他声明；
  - 当两条相互冲突的带有 !important 规则的声明被应用到相同的元素上时，拥有更大优先级的声明将会被采用；
- html 引入外部 css 文件方法:
  - 链接式(`link`): 在 html 文件 head 中 link 加载, 渲染 body 页面时, css 已经加载完成, 页面直接显式;
  - 导入式(`import`): 在 css 文件中通过 import 语句导入, 按需加载;

```css
/* style.css */
@import "css_red.css";
@import "css_green.css";
@import "css_blue.css";
```

```html
<!-- index.html -->
<head>
  <link rel="stylesheet" type="text/css" href="style.css" />

  <herf></herf>
</head>
```

## 盒子模型(Box Model)

CSS 盒模型本质上是一个盒子，封装周围的 HTML 元素，它包括：边距，边框，填充，和实际内容。

不同部分的说明：

- **Margin(外边距)** - 清除边框外的区域，外边距是透明的。
- **Border(边框)** - 围绕在内边距和内容外的边框。
- **Padding(内边距)** - 清除内容周围的区域，内边距是透明的。
- **Content(内容)** - 盒子的内容，显示文本和图像。

![](https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2023/06/02-20-56-48-2023-06-02-20-56-43-image.png)

## 参考

1. [CSS 教程 | 菜鸟教程](https://www.runoob.com/css/css-tutorial.html)
2. https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity
3.
