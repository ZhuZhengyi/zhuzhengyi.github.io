# 动态内存管理

## 智能指针

* 智能指针使得自动、异常安全的对象生存期管理可行。

* 定义于头文件 `<memory>` 

### 指针类别

|                                                                                                          |                                                                                                                     |
| -------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- |
| [unique_ptr](https://zh.cppreference.com/w/cpp/memory/unique_ptr "cpp/memory/unique ptr")                | 拥有独有对象所有权语义的智能指针<br>(类模板)                                                                                           |
| [shared_ptr](https://zh.cppreference.com/w/cpp/memory/shared_ptr "cpp/memory/shared ptr")<br><br>(C++11) | 拥有共享对象所有权语义的智能指针<br>(类模板)                                                                                           |
| [weak_ptr](https://zh.cppreference.com/w/cpp/memory/weak_ptr "cpp/memory/weak ptr")<br><br>(C++11)       | 到 [std::shared_ptr](https://zh.cppreference.com/w/cpp/memory/shared_ptr "cpp/memory/shared ptr") 所管理对象的弱引用<br>(类模板) |
| [auto_ptr](https://zh.cppreference.com/w/cpp/memory/auto_ptr "cpp/memory/auto ptr")<br><br>(C++17 中移除)   | 拥有严格对象所有权语义的智能指针<br>(类模板)                                                                                           |
| ### 辅助类                                                                                                  |                                                                                                                     |

| [owner_less](https://zh.cppreference.com/w/cpp/memory/owner_less "cpp/memory/owner less")<br><br>(C++11)                                        | 提供基于所有者的，共享指针和弱指针的混合类型的排序<br>(类模板)                                                                                  |
| [enable_shared_from_this](https://zh.cppreference.com/w/cpp/memory/enable_shared_from_this "cpp/memory/enable shared from this")<br><br>(C++11) | 允许对象创建指代自身的 `shared_ptr`<br>(类模板)                                                                                   |
| [bad_weak_ptr](https://zh.cppreference.com/w/cpp/memory/bad_weak_ptr "cpp/memory/bad weak ptr")<br><br>(C++11)                                  | 访问指向已销毁对象的 `weak_ptr` 时抛出的异常<br>(类)                                                                                 |
| [default_delete](https://zh.cppreference.com/w/cpp/memory/default_delete "cpp/memory/default delete")<br><br>(C++11)                            | `unique_ptr` 的默认删除器<br>(类模板)                                                                                        |

### 分配器

分配器是封装内存分配策略的类模板。这允许泛型容器从数据自身将内存管理解耦合。

| 定义于头文件 `<memory>` |
| --- | --- |
| [allocator](https://zh.cppreference.com/w/cpp/memory/allocator "cpp/memory/allocator") | 默认的分配器<br>(类模板) |
| [allocator_traits](https://zh.cppreference.com/w/cpp/memory/allocator_traits "cpp/memory/allocator traits")<br><br>(C++11) | 提供关于分配器类型的信息<br>(类模板) |
| [allocator_arg_t](https://zh.cppreference.com/w/cpp/memory/allocator_arg_t "cpp/memory/allocator arg t")<br><br>(C++11) | 标签类型，用于选择具分配器的构造函数重载<br>(类) |
| [allocator_arg](https://zh.cppreference.com/w/cpp/memory/allocator_arg "cpp/memory/allocator arg")<br><br>(C++11) | 用于选择具分配器的构造函数的 [std::allocator_arg_t](https://zh.cppreference.com/w/cpp/memory/allocator_arg_t "cpp/memory/allocator arg t") 对象<br>(常量) |
| [uses_allocator](https://zh.cppreference.com/w/cpp/memory/uses_allocator "cpp/memory/uses allocator")<br><br>(C++11) | 检查指定的类型是否支持使用分配器的构造<br>(类模板) |
| [uses_allocator_construction_args](https://zh.cppreference.com/w/cpp/memory/uses_allocator_construction_args "cpp/memory/uses allocator construction args")<br><br>(C++20) | 准备匹配给定类型所要求的使用分配器构造的口味的参数列表<br>(函数模板) |
| [make_obj_using_allocator](https://zh.cppreference.com/w/cpp/memory/make_obj_using_allocator "cpp/memory/make obj using allocator")<br><br>(C++20) | 以使用分配器构造的手段创建给类型的对象<br>(函数模板) |
| [uninitialized_construct_using_allocator](https://zh.cppreference.com/w/cpp/memory/uninitialized_construct_using_allocator "cpp/memory/uninitialized construct using allocator")<br><br>(C++20) | 以使用分配器构造的手段在指定的内存位置创建给定类型的对象<br>(函数模板) |
| 定义于头文件 `<scoped_allocator>` |     |
| [scoped_allocator_adaptor](https://zh.cppreference.com/w/cpp/memory/scoped_allocator_adaptor "cpp/memory/scoped allocator adaptor")<br><br>(C++11) | 为多级容器实现的多级分配器<br>(类模板) |
| 定义于头文件 `<memory_resource>` |     |
| 定义于命名空间 `pmr` |     |
| [polymorphic_allocator](https://zh.cppreference.com/w/cpp/memory/polymorphic_allocator "cpp/memory/polymorphic allocator")<br><br>(C++17) | 以 std::memory_resource 构造，支持基于它的运行时多态的分配器<br>(类模板) |

### 内存资源

内存资源实现可为 [std::pmr::polymorphic_allocator](https://zh.cppreference.com/w/cpp/memory/polymorphic_allocator "cpp/memory/polymorphic allocator") 所用的内存分配策略

| 定义于头文件 `<memory_resource>` |
| --- | --- |
| 定义于命名空间 `pmr` |     |
| [memory_resource](https://zh.cppreference.com/w/cpp/memory/memory_resource "cpp/memory/memory resource")<br><br>(C++17) | 一个抽象接口，用于各种封装内存资源的类<br>(类) |
| [new_delete_resource](https://zh.cppreference.com/w/cpp/memory/new_delete_resource "cpp/memory/new delete resource")<br><br>(C++17) | 返回一个静态的程序范围 [std::pmr::memory_resource](https://zh.cppreference.com/w/cpp/memory/memory_resource "cpp/memory/memory resource")，它使用全局 [operator new](https://zh.cppreference.com/w/cpp/memory/new/operator_new "cpp/memory/new/operator new") 与 [operator delete](https://zh.cppreference.com/w/cpp/memory/new/operator_delete "cpp/memory/new/operator delete") 分配和解分配内存<br>(函数) |
| [null_memory_resource](https://zh.cppreference.com/w/cpp/memory/null_memory_resource "cpp/memory/null memory resource")<br><br>(C++17) | 返回一个不进行任何分配的静态 [std::pmr::memory_resource](https://zh.cppreference.com/w/cpp/memory/memory_resource "cpp/memory/memory resource")<br>(函数) |
| [get_default_resource](https://zh.cppreference.com/w/cpp/memory/get_default_resource "cpp/memory/get default resource")<br><br>(C++17) | 获取缺省 [std::pmr::memory_resource](https://zh.cppreference.com/w/cpp/memory/memory_resource "cpp/memory/memory resource")<br>(函数) |
| [set_default_resource](https://zh.cppreference.com/w/cpp/memory/set_default_resource "cpp/memory/set default resource")<br><br>(C++17) | 设置缺省 [std::pmr::memory_resource](https://zh.cppreference.com/w/cpp/memory/memory_resource "cpp/memory/memory resource")<br>(函数) |
| [pool_options](https://zh.cppreference.com/w/cpp/memory/pool_options "cpp/memory/pool options")<br><br>(C++17) | 一组池资源的构造函数选项<br>(类) |
| [synchronized_pool_resource](https://zh.cppreference.com/w/cpp/memory/synchronized_pool_resource "cpp/memory/synchronized pool resource")<br><br>(C++17) | 线程安全的 [std::pmr::memory_resource](https://zh.cppreference.com/w/cpp/memory/memory_resource "cpp/memory/memory resource")，用于管理具有不同块大小的池中的分配<br>(类) |
| [unsynchronized_pool_resource](https://zh.cppreference.com/w/cpp/memory/unsynchronized_pool_resource "cpp/memory/unsynchronized pool resource")<br><br>(C++17) | 线程不安全的 [std::pmr::memory_resource](https://zh.cppreference.com/w/cpp/memory/memory_resource "cpp/memory/memory resource")，用于管理具有不同块大小的池中的分配<br>(类) |
| [monotonic_buffer_resource](https://zh.cppreference.com/w/cpp/memory/monotonic_buffer_resource "cpp/memory/monotonic buffer resource")<br><br>(C++17) | 一种特殊用途的 [std::pmr::memory_resource](https://zh.cppreference.com/w/cpp/memory/memory_resource "cpp/memory/memory resource")，仅在资源被销毁时才释放所分配内存<br>(类) |

### 未初始化存储

提供数个工具以创建并访问未初始化存储

| 定义于头文件 `<memory>` |
| --- | --- |
| [uninitialized_copy](https://zh.cppreference.com/w/cpp/memory/uninitialized_copy "cpp/memory/uninitialized copy") | 将范围内的对象复制到未初始化的内存区域<br>(函数模板) |
| [uninitialized_copy_n](https://zh.cppreference.com/w/cpp/memory/uninitialized_copy_n "cpp/memory/uninitialized copy n")<br><br>(C++11) | 将指定数量的对象复制到未初始化的内存区域<br>(函数模板) |
| [uninitialized_fill](https://zh.cppreference.com/w/cpp/memory/uninitialized_fill "cpp/memory/uninitialized fill") | 复制一个对象到以范围定义的未初始化内存区域<br>(函数模板) |
| [uninitialized_fill_n](https://zh.cppreference.com/w/cpp/memory/uninitialized_fill_n "cpp/memory/uninitialized fill n") | 复制一个对象到以起点和计数定义的未初始化内存区域<br>(函数模板) |
| [uninitialized_move](https://zh.cppreference.com/w/cpp/memory/uninitialized_move "cpp/memory/uninitialized move")<br><br>(C++17) | 移动一个范围的对象到未初始化的内存区域<br>(函数模板) |
| [uninitialized_move_n](https://zh.cppreference.com/w/cpp/memory/uninitialized_move_n "cpp/memory/uninitialized move n")<br><br>(C++17) | 移动一定数量对象到未初始化内存区域<br>(函数模板) |
| [uninitialized_default_construct](https://zh.cppreference.com/w/cpp/memory/uninitialized_default_construct "cpp/memory/uninitialized default construct")<br><br>(C++17) | 在范围所定义的未初始化的内存区域以[默认初始化](https://zh.cppreference.com/w/cpp/language/default_initialization "cpp/language/default initialization")构造对象<br>(函数模板) |
| [uninitialized_default_construct_n](https://zh.cppreference.com/w/cpp/memory/uninitialized_default_construct_n "cpp/memory/uninitialized default construct n")<br><br>(C++17) | 在起始和计数所定义的未初始化内存区域用[默认初始化](https://zh.cppreference.com/w/cpp/language/default_initialization "cpp/language/default initialization")构造对象<br>(函数模板) |
| [uninitialized_value_construct](https://zh.cppreference.com/w/cpp/memory/uninitialized_value_construct "cpp/memory/uninitialized value construct")<br><br>(C++17) | 在范围所定义的未初始化内存中用[值初始化](https://zh.cppreference.com/w/cpp/language/value_initialization "cpp/language/value initialization")构造对象<br>(函数模板) |
| [uninitialized_value_construct_n](https://zh.cppreference.com/w/cpp/memory/uninitialized_value_construct_n "cpp/memory/uninitialized value construct n")<br><br>(C++17) | 在起始和计数所定义的未初始化内存区域以[值初始化](https://zh.cppreference.com/w/cpp/language/value_initialization "cpp/language/value initialization")构造对象<br>(函数模板) |
| [destroy_at](https://zh.cppreference.com/w/cpp/memory/destroy_at "cpp/memory/destroy at")<br><br>(C++17) | 销毁在给定地址的对象<br>(函数模板) |
| [destroy](https://zh.cppreference.com/w/cpp/memory/destroy "cpp/memory/destroy")<br><br>(C++17) | 销毁一个范围中的对象<br>(函数模板) |
| [destroy_n](https://zh.cppreference.com/w/cpp/memory/destroy_n "cpp/memory/destroy n")<br><br>(C++17) | 销毁范围中一定数量的对象<br>(函数模板) |
| [construct_at](https://zh.cppreference.com/w/cpp/memory/construct_at "cpp/memory/construct at")<br><br>(C++20) | 在给定地址创建对象<br>(函数模板) |
| [raw_storage_iterator](https://zh.cppreference.com/w/cpp/memory/raw_storage_iterator "cpp/memory/raw storage iterator")<br><br>(C++17 中弃用)(C++20 中移除) | 允许标准算法存储结果于未初始化内存的迭代器<br>(类模板) |
| [get_temporary_buffer](https://zh.cppreference.com/w/cpp/memory/get_temporary_buffer "cpp/memory/get temporary buffer")<br><br>(C++17 中弃用)(C++20 中移除) | 获得未初始化存储<br>(函数模板) |
| [return_temporary_buffer](https://zh.cppreference.com/w/cpp/memory/return_temporary_buffer "cpp/memory/return temporary buffer")<br><br>(C++17 中弃用)(C++20 中移除) | 释放未初始化存储<br>(函数模板) |

### 有制约的未初始化内存算法 (C++20)

C++20 提供[有制约的](https://zh.cppreference.com/w/cpp/language/constraints "cpp/language/constraints")未初始化内存算法，它们接受范围参数或迭代器-哨位对。

| 定义于头文件 `<memory>` |
| --- | --- |
| 定义于命名空间 `std::ranges` |     |
| [uninitialized_copy](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/uninitialized_copy&action=edit&redlink=1 "cpp/memory/ranges/uninitialized copy（页面不存在）")<br><br>(C++20) | 复制元素范围到未初始化的内存区域<br>(niebloid) |
| [uninitialized_copy_n](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/uninitialized_copy_n&action=edit&redlink=1 "cpp/memory/ranges/uninitialized copy n（页面不存在）")<br><br>(C++20) | 复制一定量元素到未初始化的内存区域<br>(niebloid) |
| [uninitialized_fill](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/uninitialized_fill&action=edit&redlink=1 "cpp/memory/ranges/uninitialized fill（页面不存在）")<br><br>(C++20) | 复制一个对象到范围所定义的未初始化的内存区域<br>(niebloid) |
| [uninitialized_fill_n](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/uninitialized_fill_n&action=edit&redlink=1 "cpp/memory/ranges/uninitialized fill n（页面不存在）")<br><br>(C++20) | 复制一个对象到起始与计数所定义的未初始化的内存区域<br>(niebloid) |
| [uninitialized_move](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/uninitialized_move&action=edit&redlink=1 "cpp/memory/ranges/uninitialized move（页面不存在）")<br><br>(C++20) | 移动对象范围到未初始化的内存区域<br>(niebloid) |
| [uninitialized_move_n](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/uninitialized_move_n&action=edit&redlink=1 "cpp/memory/ranges/uninitialized move n（页面不存在）")<br><br>(C++20) | 移动一定量对象到未初始化的内存区域<br>(niebloid) |
| [uninitialized_default_construct](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/uninitialized_default_construct&action=edit&redlink=1 "cpp/memory/ranges/uninitialized default construct（页面不存在）")<br><br>(C++20) | 在范围所定义的未初始化的内存区域以[默认初始化](https://zh.cppreference.com/w/cpp/language/default_initialization "cpp/language/default initialization")构造对象<br>(niebloid) |
| [uninitialized_default_construct_n](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/uninitialized_default_construct_n&action=edit&redlink=1 "cpp/memory/ranges/uninitialized default construct n（页面不存在）")<br><br>(C++20) | 在起始与计数所定义的未初始化的内存区域以[默认初始化](https://zh.cppreference.com/w/cpp/language/default_initialization "cpp/language/default initialization")构造对象<br>(niebloid) |
| [uninitialized_value_construct](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/uninitialized_value_construct&action=edit&redlink=1 "cpp/memory/ranges/uninitialized value construct（页面不存在）")<br><br>(C++20) | 在范围所定义的未初始化的内存区域以[值初始化](https://zh.cppreference.com/w/cpp/language/value_initialization "cpp/language/value initialization")构造对象<br>(niebloid) |
| [uninitialized_value_construct_n](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/uninitialized_value_construct_n&action=edit&redlink=1 "cpp/memory/ranges/uninitialized value construct n（页面不存在）")<br><br>(C++20) | 在起始与计数所定义的未初始化的内存区域以[值初始化](https://zh.cppreference.com/w/cpp/language/value_initialization "cpp/language/value initialization")构造对象<br>(niebloid) |
| [destroy_at](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/destroy_at&action=edit&redlink=1 "cpp/memory/ranges/destroy at（页面不存在）")<br><br>(C++20) | 销毁位于给定地址的元素<br>(niebloid) |
| [destroy](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/destroy&action=edit&redlink=1 "cpp/memory/ranges/destroy（页面不存在）")<br><br>(C++20) | 销毁范围中的元素<br>(niebloid) |
| [destroy_n](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/destroy_n&action=edit&redlink=1 "cpp/memory/ranges/destroy n（页面不存在）")<br><br>(C++20) | 销毁范围中一定量的元素<br>(niebloid) |
| [construct_at](https://zh.cppreference.com/mwiki/index.php?title=cpp/memory/ranges/construct_at&action=edit&redlink=1 "cpp/memory/ranges/construct at（页面不存在）")<br><br>(C++20) | 在给定地址创建对象<br>(niebloid) |

### 垃圾收集器支持

| 定义于头文件 `<memory>` |
| --- | --- |
| [declare_reachable](https://zh.cppreference.com/w/cpp/memory/gc/declare_reachable "cpp/memory/gc/declare reachable")<br><br>(C++11) | 声明一个对象不能被回收<br>(函数) |
| [undeclare_reachable](https://zh.cppreference.com/w/cpp/memory/gc/undeclare_reachable "cpp/memory/gc/undeclare reachable")<br><br>(C++11) | 声明一个对象可以被回收<br>(函数模板) |
| [declare_no_pointers](https://zh.cppreference.com/w/cpp/memory/gc/declare_no_pointers "cpp/memory/gc/declare no pointers")<br><br>(C++11) | 声明该内存区域不含可追踪指针<br>(函数) |
| [undeclare_no_pointers](https://zh.cppreference.com/w/cpp/memory/gc/undeclare_no_pointers "cpp/memory/gc/undeclare no pointers")<br><br>(C++11) | 取消 [std::declare_no_pointers](https://zh.cppreference.com/w/cpp/memory/gc/declare_no_pointers "cpp/memory/gc/declare no pointers") 的效果<br>(函数) |
| [pointer_safety](https://zh.cppreference.com/w/cpp/memory/gc/pointer_safety "cpp/memory/gc/pointer safety")<br><br>(C++11) | 列出指针安全模式<br>(枚举) |
| [get_pointer_safety](https://zh.cppreference.com/w/cpp/memory/gc/get_pointer_safety "cpp/memory/gc/get pointer safety")<br><br>(C++11) | 返回当前的指针安全模式<br>(函数) |

### 杂项

| 定义于头文件 `<memory>` |
| --- | --- |
| [pointer_traits](https://zh.cppreference.com/w/cpp/memory/pointer_traits "cpp/memory/pointer traits")<br><br>(C++11) | 提供关于指针式类型的信息<br>(类模板) |
| [to_address](https://zh.cppreference.com/w/cpp/memory/to_address "cpp/memory/to address")<br><br>(C++20) | 从指针式类型获得裸指针<br>(函数模板) |
| [addressof](https://zh.cppreference.com/w/cpp/memory/addressof "cpp/memory/addressof")<br><br>(C++11) | 获得对象的实际地址，即使其重载了 *&* 运算符<br>(函数模板) |
| [align](https://zh.cppreference.com/w/cpp/memory/align "cpp/memory/align")<br><br>(C++11) | 对齐缓冲区中的指针<br>(函数) |
| [assume_aligned](https://zh.cppreference.com/w/cpp/memory/assume_aligned "cpp/memory/assume aligned")<br><br>(C++20) | 告知编译器指针已对齐<br>(函数模板) |

### [C 风格内存管理](https://zh.cppreference.com/w/cpp/memory/c "cpp/memory/c")

包含如 [std::malloc](https://zh.cppreference.com/w/cpp/memory/c/malloc "cpp/memory/c/malloc") 、 [std::free](https://zh.cppreference.com/w/cpp/memory/c/free "cpp/memory/c/free")

### [低层内存管理](https://zh.cppreference.com/w/cpp/memory/new "cpp/memory/new")

包含如 [operator new](https://zh.cppreference.com/w/cpp/memory/new/operator_new "cpp/memory/new/operator new") 、 [operator delete](https://zh.cppreference.com/w/cpp/memory/new/operator_delete "cpp/memory/new/operator delete") 、 [std::set_new_handler](https://zh.cppreference.com/w/cpp/memory/new/set_new_handler "cpp/memory/new/set new handler")
