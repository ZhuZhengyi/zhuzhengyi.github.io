# C++ string

## 简介

## `std::string`

C++ 字符串库支持三种通用字符串类型：

- [std::basic_string](https://zh.cppreference.com/w/cpp/string/basic_string "cpp/string/basic string") ——为操作任何字符类型的字符串设计的模板类。
- [std::basic_string_view](https://zh.cppreference.com/w/cpp/string/basic_string_view "cpp/string/basic string view") (C++17) ——对于字符串子序列的轻量无所有权的只读视图。
- 空终止字符串 - 以特殊的*空*字符终止的字符数组。

### [std::basic_string](https://zh.cppreference.com/w/cpp/string/basic_string "cpp/string/basic string")

模板类 [std::basic_string](https://zh.cppreference.com/w/cpp/string/basic_string "cpp/string/basic string") 通用化字符序列如何操作及存储。

字符串创建、操作及析构全部为便利的类方法集合与相关函数所处理。

标准提供 [std::basic_string](https://zh.cppreference.com/w/cpp/string/basic_string "cpp/string/basic string") 对常用类型的数种特化：

| 定义于头文件 `<string>`                                                                                           |                                                                                     |
| ----------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| 类型                                                                                                          | 定义                                                                                  |
| [std::string](https://zh.cppreference.com/w/cpp/string/basic_string "cpp/string/basic string")              | [std::basic_string](http://zh.cppreference.com/w/cpp/string/basic_string)<char>     |
| [std::wstring](https://zh.cppreference.com/w/cpp/string/basic_string "cpp/string/basic string")             | [std::basic_string](http://zh.cppreference.com/w/cpp/string/basic_string)<wchar_t>  |
| std::u8string (C++20 起)                                                                                     | [std::basic_string](http://zh.cppreference.com/w/cpp/string/basic_string)<char8_t>  |
| [std::u16string](https://zh.cppreference.com/w/cpp/string/basic_string "cpp/string/basic string") (C++11 起) | [std::basic_string](http://zh.cppreference.com/w/cpp/string/basic_string)<char16_t> |
| [std::u32string](https://zh.cppreference.com/w/cpp/string/basic_string "cpp/string/basic string") (C++11 起) | [std::basic_string](http://zh.cppreference.com/w/cpp/string/basic_string)<char32_t> |

### [std::basic_string_view](https://zh.cppreference.com/w/cpp/string/basic_string_view "cpp/string/basic string view")

模板类 [std::basic_string_view](https://zh.cppreference.com/w/cpp/string/basic_string_view "cpp/string/basic string view") 提供一个轻量对象，它使用类似 [std::basic_string](https://zh.cppreference.com/w/cpp/string/basic_string "cpp/string/basic string") 接口的接口，提供对字符串一部分的只读访问。标准提供 [std::basic_string_view](https://zh.cppreference.com/w/cpp/string/basic_string_view "cpp/string/basic string view") 对常用类型的数种特化：

|                                                                                                                            |                                                                                               |
| -------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- |
| 定义于头文件 `<string_view>`                                                                                                     |                                                                                               |
| 类型                                                                                                                         | 定义                                                                                            |
| [std::string_view](https://zh.cppreference.com/w/cpp/string/basic_string_view "cpp/string/basic string view") (C++17 起)    | [std::basic_string_view](http://zh.cppreference.com/w/cpp/string/basic_string_view)<char>     |
| [std::wstring_view](https://zh.cppreference.com/w/cpp/string/basic_string_view "cpp/string/basic string view") (C++17 起)   | [std::basic_string_view](http://zh.cppreference.com/w/cpp/string/basic_string_view)<wchar_t>  |
| std::u8string_view (C++20 起)                                                                                               | [std::basic_string_view](http://zh.cppreference.com/w/cpp/string/basic_string_view)<char8_t>  |
| [std::u16string_view](https://zh.cppreference.com/w/cpp/string/basic_string_view "cpp/string/basic string view") (C++17 起) | [std::basic_string_view](http://zh.cppreference.com/w/cpp/string/basic_string_view)<char16_t> |
| [std::u32string_view](https://zh.cppreference.com/w/cpp/string/basic_string_view "cpp/string/basic string view") (C++17 起) | [std::basic_string_view](http://zh.cppreference.com/w/cpp/string/basic_string_view)<char32_t> |

(C++17 起)

### 空终止字符串

空终止字符串是以特殊的*空*字符终止的字符数组。

C++提供创建、检查及修改空终止字符串的函数。

空终止字符串有三种类型：

- [空终止字节字符串](https://zh.cppreference.com/w/cpp/string/byte "cpp/string/byte")
- [空终止多字节字符串](https://zh.cppreference.com/w/cpp/string/multibyte "cpp/string/multibyte")
- [空终止宽字符串](https://zh.cppreference.com/w/cpp/string/wide "cpp/string/wide")

### 附加支持

#### [std::char_traits](https://zh.cppreference.com/w/cpp/string/char_traits "cpp/string/char traits")

字符串库亦提供类模板 [std::char_traits](https://zh.cppreference.com/w/cpp/string/char_traits "cpp/string/char traits") ，它为 [std::basic_string](https://zh.cppreference.com/w/cpp/string/basic_string "cpp/string/basic string") 和 [std::basic_string_view](https://zh.cppreference.com/w/cpp/string/basic_string_view "cpp/string/basic string view") (C++17 起)定义类型和函数。标准定义下列特化：

| 定义于头文件[<string>](https://zh.cppreference.com/w/cpp/header/string "cpp/header/string") |     |           |
| ------------------------------------------------------------------------------------- | --- | --------- |
| template<> class char_traits<char>;                                                   |     |           |
| template<> class char_traits<wchar_t>;                                                |     |           |
| template<> class char_traits<char8_t>;                                                |     | (C++20 起) |
| template<> class char_traits<char16_t>;                                               |     | (C++11 起) |
| template<> class char_traits<char32_t>;                                               |     | (C++11 起) |

#### 转换与分类

[本地化库](https://zh.cppreference.com/w/cpp/locale "cpp/locale")提供对字符串转换的支持（例如 [std::wstring_convert](http://zh.cppreference.com/w/cpp/locale/wstring_convert) 或 std::toupper ），还有分类字符的函数（例如 std::isspace 或 std::isdigit ）。

## **StringPiece**

 string的只读视图，为了便于解释，直接来看代码吧：

```cpp
void func(const std::string & str);
```

`const &` 限定了 函数 `func` 没法修改入参 `str`，但是如果给 `func` 传递的参数是 `char *` 或者 `const char *`，那么将**构造一个临时的 std::string，并且产生了字符串的拷贝**，但是显然这次拷贝并没有必要。StringPiece 就是在这种情况去替换 std::string，可以避免字符串拷贝，因为 StringPiece 只是简单接管一下指针，看一下 StringPiece 的简单实现就知道了，这里以 leveldb 中的 Slice 为例子，看一下其构造函数就明白了

```cpp
class LEVELDB_EXPORT Slice {
 public:
  ......
  Slice(const char* d, size_t n) : data_(d), size_(n) { }
  ......
 private:
  const char* data_;
  size_t size_;
};    
```

## FBString

FBString 是 facebook 开源 C++ lib folly 的一个 std::string 替换着，

如果你**想更好的性能**，又不想重写，那么 FBString 是一个不错的选择，

Facebook 对其做了大量的性能优化，其核心特点如下：

1. 100% 兼容 std::string
2. 高性能的内存管理，对不同大小的字符串， 分 3 种情况分配和管理内存：
   1. string length <= 23，使用栈上内存；
   2. 23< string length <=255，使用 malloc 分配堆上内存；
   3. string lenght > 255，堆上内存，且使用引用计数 + COW 计数，实现在真正需要的时候才拷贝修改，避免大字符串不必要的拷贝
3. find 操作使用了 Boyer Moore [3] 算法，相比 O(n) 的 KMP 实际性能好很多，Facebook 官方宣称性能：`Casual tests indicate a 30x speed improvement over`string::find()`for successful searches and a 1.5x speed improvement for failed searches`

## 参考

1. 
