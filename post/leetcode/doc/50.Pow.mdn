# [Pow(x, n)](https://leetcode-cn.com/problems/powx-n/description/ "https://leetcode-cn.com/problems/powx-n/description/")

| Category   | Difficulty      | Likes | Dislikes |
| ---------- | --------------- | ----- | -------- |
| algorithms | Medium (37.83%) | 944   | -        |

**Tags**

[`math`](https://leetcode.com/tag/math "https://leetcode.com/tag/math") | [`binary-search`](https://leetcode.com/tag/binary-search "https://leetcode.com/tag/binary-search")

**Companies**

`bloomberg` | `facebook` | `google` | `linkedin`

实现 [pow(*x*, *n*)](https://www.cplusplus.com/reference/valarray/pow/ "https://www.cplusplus.com/reference/valarray/pow/") ，即计算 `x` 的 `n` 次幂函数（即，`xn` ）。

**示例 1：**

```
输入：x = 2.00000, n = 10
输出：1024.00000
```

**示例 2：**

```
输入：x = 2.10000, n = 3
输出：9.26100
```

**示例 3：**

```
输入：x = 2.00000, n = -2
输出：0.25000
解释：2-2 = 1/22 = 1/4 = 0.25
```

**提示：**

- `-100.0 < x < 100.0`
- `-231 <= n <= 231-1`
- `-104 <= xn <= 104`

---

[Discussion](https://leetcode-cn.com/problems/powx-n/comments/ "https://leetcode-cn.com/problems/powx-n/comments/") | [Solution](https://leetcode-cn.com/problems/powx-n/solution/ "https://leetcode-cn.com/problems/powx-n/solution/")

## 解法

```cpp
class Solution {
public:
    /**
    * ## 解题思路
    * * 
    * * f(n) = f(n/2) * f(n/2) * f(n%2)
    */
    double myPow(double x, int n) {
        // x == 0
        if (x <= 0.00001 && x >= -0.00001) {
            return 0;
        }
        // x == 1
        if ((x-1<=0.000001 && x-1>=-0.000001)) {
            return 1;
        }
        // x == -1
        if ((x+1<=0.000001 && x+1>=-0.000001)) {
            return n %2?-1:1;
        }
        if (n == -2147483648) {
            return 0;
        }
        if (n<0) {
            return 1 / myPow(x, -n);
        }
        if (n==0) {
            return 1;
        }
        if (n==1) {
            return x;
        }
        return myPow(x, n/2) * myPow(x, n/2) * myPow(x, n%2);
    }
};
```
