# [最小栈](https://leetcode-cn.com/problems/min-stack/description/ "https://leetcode-cn.com/problems/min-stack/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (58.03%) | 1293  | -        |

**Tags**

[`stack`](https://leetcode.com/tag/stack "https://leetcode.com/tag/stack") | [`design`](https://leetcode.com/tag/design "https://leetcode.com/tag/design")

**Companies**

`amazon` | `bloomberg` | `google` | `snapchat` | `uber` | `zenefits`

设计一个支持 `push` ，`pop` ，`top` 操作，并能在常数时间内检索到最小元素的栈。

实现 `MinStack` 类:

- `MinStack()` 初始化堆栈对象。
- `void push(int val)` 将元素val推入堆栈。
- `void pop()` 删除堆栈顶部的元素。
- `int top()` 获取堆栈顶部的元素。
- `int getMin()` 获取堆栈中的最小元素。

**示例 1:**

```
输入：
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

输出：
[null,null,null,null,-3,null,0,-2]

解释：
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.getMin();   --> 返回 -2.
```

**提示：**

- `-231 <= val <= 231 - 1`
- `pop`、`top` 和 `getMin` 操作总是在 **非空栈** 上调用
- `push`, `pop`, `top`, and `getMin`最多被调用 `3 * 104` 次

---

[Discussion](https://leetcode-cn.com/problems/min-stack/comments/ "https://leetcode-cn.com/problems/min-stack/comments/") | [Solution](https://leetcode-cn.com/problems/min-stack/solution/ "https://leetcode-cn.com/problems/min-stack/solution/")

## 解法

```cpp
/*
## 解题思路
* 用一个stack记录每次push时的最小值
*/
class MinStack {
private:
    stack<int> m_stack;
    stack<int> minStack;

public:
    MinStack() {
    }

    void push(int val) {
        m_stack.push(val);
        minStack.push(min(val, minStack.size()>0?minStack.top():val));
    }

    void pop() {
        m_stack.pop();
        minStack.pop();
    }

    int top() {
        return m_stack.top();
    }

    int getMin() {
        return minStack.top();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
```
