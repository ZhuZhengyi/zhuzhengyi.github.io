# [分发饼干](https://leetcode.cn/problems/assign-cookies/description/ "https://leetcode.cn/problems/assign-cookies/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (56.44%) | 727   | -        |

<details open=""><summary><strong>Tags</strong></summary>

[`greedy`](https://leetcode.com/tag/greedy "https://leetcode.com/tag/greedy")

<details open=""><summary><strong>Companies</strong></summary>

`Unknown`

假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。

对每个孩子 `i`，都有一个胃口值 `g[i]` ~，~ 这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 `j`，都有一个尺寸 `s[j]` ~ ~ 。如果 `s[j] >= g[i]`，我们可以将这个饼干 `j` 分配给孩子 `i` ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。

**示例 1:**

```
输入: g = [1,2,3], s = [1,1]
输出: 1
解释:
你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
所以你应该输出1。
```

**示例 2:**

```
输入: g = [1,2], s = [1,2,3]
输出: 2
解释:
你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
你拥有的饼干数量和尺寸都足以让所有孩子满足。
所以你应该输出2.
```

**提示：**

- `1 <= g.length <= 3 * 10<sup>4</sup>`
- `0 <= s.length <= 3 * 10<sup>4</sup>`
- `1 <= g[i], s[j] <= 2<sup>31</sup> - 1`

[Discussion](https://leetcode.cn/problems/assign-cookies/comments/ "https://leetcode.cn/problems/assign-cookies/comments/") | [Solution](https://leetcode.cn/problems/assign-cookies/solution/ "https://leetcode.cn/problems/assign-cookies/solution/")

## 解法

```rust
// @lc code=start
impl Solution {
    pub fn find_content_children(g: Vec<i32>, s: Vec<i32>) -> i32 {
        let mut res = 0_i32;
        let (mut i, mut j) = (0, 0);
        let (mut g, mut s) = (g, s);
        g.sort();
        s.sort();
        while i < g.len() && j < s.len() {
            // 饼干大小能满足当前最小的孩子胃口
            if g[i] <= s[j] {
                res += 1; // 分配一块饼干
                i += 1;
            }
            j += 1;
        }

        res
    }
}
// @lc code=end

struct Solution;

```
