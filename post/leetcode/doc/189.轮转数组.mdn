# [轮转数组](https://leetcode-cn.com/problems/rotate-array/description/ "https://leetcode-cn.com/problems/rotate-array/description/")

| Category   | Difficulty      | Likes | Dislikes |
| ---------- | --------------- | ----- | -------- |
| algorithms | Medium (44.34%) | 1453  | -        |

**Tags**

[`array`](https://leetcode.com/tag/array "https://leetcode.com/tag/array")

**Companies**

`amazon` | `bloomberg` | `microsoft`

给你一个数组，将数组中的元素向右轮转 `k` 个位置，其中 `k` 是非负数。

**示例 1:**

```
输入: nums = [1,2,3,4,5,6,7], k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右轮转 1 步: [7,1,2,3,4,5,6]
向右轮转 2 步: [6,7,1,2,3,4,5]
向右轮转 3 步: [5,6,7,1,2,3,4]
```

**示例 2:**

```
输入：nums = [-1,-100,3,99], k = 2
输出：[3,99,-1,-100]
解释: 
向右轮转 1 步: [99,-1,-100,3]
向右轮转 2 步: [3,99,-1,-100]
```

**提示：**

- `1 <= nums.length <= 105`
- `-231 <= nums[i] <= 231 - 1`
- `0 <= k <= 105`

**进阶：**

- 尽可能想出更多的解决方案，至少有 **三种** 不同的方法可以解决这个问题。
- 你可以使用空间复杂度为 `O(1)` 的 **原地** 算法解决这个问题吗？

---

[Discussion](https://leetcode-cn.com/problems/rotate-array/comments/ "https://leetcode-cn.com/problems/rotate-array/comments/") | [Solution](https://leetcode-cn.com/problems/rotate-array/solution/ "https://leetcode-cn.com/problems/rotate-array/solution/")

## 解法

```cpp
class Solution {
public:
    /*
    * @brief 解题思路
    * 1. 先反转整个数组
    * 2. 再反转[:k]
    * 3. 最后翻转[k:]
    */
    void rotate(vector<int>& nums, int k) {
        k %= nums.size();
        reverse(nums.begin(), nums.end());
        reverse(nums.begin(), nums.begin()+k);
        reverse(nums.begin()+k, nums.end());
    }
};
```


