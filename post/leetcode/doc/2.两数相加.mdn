# [两链表数相加](https://leetcode-cn.com/problems/add-two-numbers/description/ "https://leetcode-cn.com/problems/add-two-numbers/description/")

| Category   | Difficulty      | Likes | Dislikes |
| ---------- | --------------- | ----- | -------- |
| algorithms | Medium (36.10%) | 3467  | -        |

**Tags** **Companies**

给出两个  **非空**  的链表用来表示两个非负的整数。其中，它们各自的位数是按照  **逆序**  的方式存储的，并且它们的每个节点只能存储  **一位**  数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0  开头。

**示例：**

```
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
```

---

[Discussion](https://leetcode-cn.com/problems/add-two-numbers/comments/ "https://leetcode-cn.com/problems/add-two-numbers/comments/") | [Solution](https://leetcode-cn.com/problems/add-two-numbers/solution/ "https://leetcode-cn.com/problems/add-two-numbers/solution/")

## 解法

```python
class Solution:
    '''
    ## 解题思路
    1. 同时遍历l1, l2;
    2. 设置额外的两个变量p, a，分别记录遍历过程中计算的链表头和进位数；
    3. 将遍历中每个l1,l2的val相加，根据和计算进位和当前值，生成新node,加入到p尾部；
    4. 处理将剩余链表；
    '''
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        p = dummy = ListNode(0)
        a = 0  #进位
        while l1 is not None or l2 is not None:
            v = a + (l1.val if l1 is not None else 0) + (l2.val if l2 is not None else 0)
            a = int(v/10)
            v = v - a*10
            p.next = ListNode(v)
            p = p.next
            l1 = l1.next if l1 is not None else None
            l2 = l2.next if l2 is not None else None

        if a > 0:
            p.next = ListNode(a)

        return dummy.next
```
