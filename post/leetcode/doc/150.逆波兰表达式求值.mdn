# [逆波兰表达式求值](https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/description/ "https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/description/")

| Category   | Difficulty      | Likes | Dislikes |
| ---------- | --------------- | ----- | -------- |
| algorithms | Medium (49.14%) | 111   | -        |

**Tags**

[`stack`](https://leetcode.com/tag/stack "https://leetcode.com/tag/stack")

**Companies**

`linkedin`

根据[逆波兰表示法](https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437 "https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437")，求表达式的值。

有效的运算符包括 `+`, `-`, `*`, `/` 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。

**说明：**

- 整数除法只保留整数部分。
- 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。

**示例 1：**

```
输入: ["2", "1", "+", "3", "*"]
输出: 9
解释: ((2 + 1) * 3) = 9
```

**示例 2：**

```
输入: ["4", "13", "5", "/", "+"]
输出: 6
解释: (4 + (13 / 5)) = 6
```

**示例 3：**

```
输入: ["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
输出: 22
解释: 
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
```

---

[Discussion](https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/comments/ "https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/comments/") | [Solution](https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/solution/ "https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/solution/")

## 解法

使用栈

```python
class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        tmp = []
        op = {
            "+": lambda x, y: x + y, 
            "-": lambda x, y: y - x, 
            "*": lambda x, y: x * y, 
            "/": lambda x, y : int(y / x)
        }
        for t in tokens:
            if t in op:
                r = tmp.append(op[t](tmp.pop(), tmp.pop() ))
            else:
                tmp.append(int(t))
        return tmp.pop()
```
