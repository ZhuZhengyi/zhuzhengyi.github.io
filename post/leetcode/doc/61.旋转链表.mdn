# [旋转链表](https://leetcode-cn.com/problems/rotate-list/description/ "https://leetcode-cn.com/problems/rotate-list/description/")

| Category   | Difficulty      | Likes | Dislikes |
| ---------- | --------------- | ----- | -------- |
| algorithms | Medium (39.96%) | 203   | -        |

**Tags**

[`linked-list`](https://leetcode.com/tag/linked-list "https://leetcode.com/tag/linked-list") | [`two-pointers`](https://leetcode.com/tag/two-pointers "https://leetcode.com/tag/two-pointers")

**Companies**

`Unknown`

给定一个链表，旋转链表，将链表每个节点向右移动 *k *个位置，其中 *k *是非负数。

**示例 1:**

```
输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
```

**示例 2:**

```
输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL
```

---

[Discussion](https://leetcode-cn.com/problems/rotate-list/comments/ "https://leetcode-cn.com/problems/rotate-list/comments/") | [Solution](https://leetcode-cn.com/problems/rotate-list/solution/ "https://leetcode-cn.com/problems/rotate-list/solution/")

## 解法

### Rust

* 两次遍历，第一次遍历

```rust
impl Solution {
    pub fn rotate_right(head: Option<Box<ListNode>>, k: i32) -> Option<Box<ListNode>> {
        //
        if head.is_none() || k <= 0 { return head }  

        //遍历获取总节点数
        let mut ptr: Option<&Box<ListNode>> = head.as_ref();
        let mut node_count: i32 = 0;
        //遍历获取总结点数
        while let Some(node) = ptr {
            node_count += 1;
            ptr = node.next.as_ref();
        }

        //获取截断结点数
        let cut_nodes = node_count - k % node_count;
        if cut_nodes == node_count {
            return head;
        }

        //获取截断点上一个结点可变借用
        /*
                        ptr      
                        |     
        head: 1 -> 2 -> 3 -> 4 -> 5 -> NULL
        */
        let mut head = head;
        let mut ptr: &mut Box<ListNode> = head.as_mut().unwrap();
        for _ in 0..cut_nodes-1 {
            ptr = ptr.next.as_mut().unwrap(); 
        }

        //通过上一个节点释放并重新获取截断结点所有权
        /*
                        ptr      
                        |     
        head: 1 -> 2 -> 3    
        new_head: 4 -> 5 -> NULL
        */
        let mut new_head: Option<Box<ListNode>> = ptr.next.take();


        /*
        head: 1 -> 2 -> 3    
                  ptr
                  |
        new_head: 4 -> 5 -> NULL
        */
        //
        let mut ptr: Option<&mut Box<ListNode>>  = new_head.as_mut();  
        /*
        head: 1 -> 2 -> 3    
                       ptr
                       | 
        new_head: 4 -> 5 -> NULL
        */
        //
        while let Some(node) = ptr {  
            if node.next.is_none() { 
                ptr = Some(node); 
                break; 
            }  
            ptr = node.next.as_mut();  
        }  

        /*
                       ptr
                       |
        new_head: 4 -> 5 -> 1 -> 2 ->
        */
        //new_head最后节点的next获得head所有权
        ptr.unwrap().next = head;   

        new_head  
    }
}
```
