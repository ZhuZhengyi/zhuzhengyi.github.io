# [二叉树展开为链表](https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/description/ "https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/description/")

| Category   | Difficulty      | Likes | Dislikes |
| ---------- | --------------- | ----- | -------- |
| algorithms | Medium (68.83%) | 340   | -        |

**Tags**

[`tree`](https://leetcode.com/tag/tree "https://leetcode.com/tag/tree") | [`depth-first-search`](https://leetcode.com/tag/depth-first-search "https://leetcode.com/tag/depth-first-search")

**Companies**

`microsoft`

给定一个二叉树，[原地](https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95/8010757 "https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95/8010757")将它展开为一个单链表。

例如，给定二叉树

```
    1
   / \
  2   5
 / \   \
3   4   6
```

将其展开为：

```
1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6
```

---

[Discussion](https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/comments/ "https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/comments/") | [Solution](https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/solution/ "https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/solution/")

## 解法

```cpp
/*
## 解题思路
   * 递归
   1. 先分别展开左右子树；
   2. 将root->right指向左子树link头；
   3. 设置一个遍历指针，移动到左子link末尾；
   4. 末尾节点right指针指向右子link；
*/
class Solution {
public:
    void flatten(TreeNode* root) {
        if(!root){
            return;
        }
        flatten(root->left);
        flatten(root->right);
        if(root->left) {
            auto right = root->right;
            root->right = root->left;
            root->left = NULL;
            auto p = root->right;
            while(root->right) {
                root = root->right;
            }
            root->right = right;
        }
    }
};
```
