# [分隔链表](https://leetcode-cn.com/problems/partition-list/description/ "https://leetcode-cn.com/problems/partition-list/description/")

| Category   | Difficulty      | Likes | Dislikes |
| ---------- | --------------- | ----- | -------- |
| algorithms | Medium (55.90%) | 158   | -        |

**Tags**

[`linked-list`](https://leetcode.com/tag/linked-list "https://leetcode.com/tag/linked-list") | [`two-pointers`](https://leetcode.com/tag/two-pointers "https://leetcode.com/tag/two-pointers")

**Companies**

`Unknown`

给定一个链表和一个特定值* x*，对链表进行分隔，使得所有小于 *x* 的节点都在大于或等于 *x* 的节点之前。

你应当保留两个分区中每个节点的初始相对位置。

**示例:**

```
输入: head = 1->4->3->2->5->2, x = 3
输出: 1->2->2->4->3->5
```

---

[Discussion](https://leetcode-cn.com/problems/partition-list/comments/ "https://leetcode-cn.com/problems/partition-list/comments/") | [Solution](https://leetcode-cn.com/problems/partition-list/solution/ "https://leetcode-cn.com/problems/partition-list/solution/")

## 解法

### Rust

1. 建立两个空链表`smaller_list`和`bigger_list`；

2. 依次取出原链表结点，和`target_val`比较，小于`target_val`的加入`smaller_list`末尾；否则加入`bigger_list`末尾；

3. 原链表所有节点取完后，如果`bigger_list`不为空，则加入到`smaller_list`结尾；ß

```rust
pub fn partition(head: Option<Box<ListNode>>, x: i32) -> Option<Box<ListNode>> {
  if head.is_none() {
    return head
  }

  let mut dummy_head1 = Some(Box::new(ListNode::new(0)));
  let mut dummy_head2 = Some(Box::new(ListNode::new(0)));
  let mut ptr1 = &mut dummy_head1;
  let mut ptr2 = &mut dummy_head2;

  let mut head = head;
  while let Some(mut node) = head {
    head = node.next.take();
    if node.val < x {
      ptr1.as_mut().unwrap().next = Some(node);
      ptr1 = &mut ptr1.as_mut().unwrap().next;
    } else {
      ptr2.as_mut().unwrap().next = Some(node);
      ptr2 = &mut ptr2.as_mut().unwrap().next;
    }
  }

  if let Some(mut node) = dummy_head2.as_mut().unwrap().next.take() {
    ptr1.as_mut().unwrap().next = Some(node);
  }

  dummy_head1.unwrap().next
}
```
