# [回文数](https://leetcode-cn.com/problems/palindrome-number/description/ "https://leetcode-cn.com/problems/palindrome-number/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (57.09%) | 946   | -        |

**Tags**

[`math`](https://leetcode.com/tag/math "https://leetcode.com/tag/math")

**Companies**

`Unknown`

判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

**示例 1:**

```
输入: 121
输出: true
```

**示例 2:**

```
输入: -121
输出: false
解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
```

**示例 3:**

```
输入: 10
输出: false
解释: 从右向左读, 为 01 。因此它不是一个回文数。
```

**进阶:**

你能不将整数转为字符串来解决这个问题吗？

---

[Discussion](https://leetcode-cn.com/problems/palindrome-number/comments/ "https://leetcode-cn.com/problems/palindrome-number/comments/") | [Solution](https://leetcode-cn.com/problems/palindrome-number/solution/ "https://leetcode-cn.com/problems/palindrome-number/solution/")

## 解法

```python
lass Solution:
    def isPalindrome(self, x: int) -> bool:
        if x < 0 :
            return False
        def getReserve(x: int) -> int:
            res = 0
            while x > 0:
                res = res * 10 + x % 10
                x = int(x / 10)
            return res

        return x == getReserve(x)
```
