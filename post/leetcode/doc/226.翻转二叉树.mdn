# [翻转二叉树](https://leetcode-cn.com/problems/invert-binary-tree/description/ "https://leetcode-cn.com/problems/invert-binary-tree/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (78.84%) | 1145  | -        |

**Tags**

[`tree`](https://leetcode.com/tag/tree "https://leetcode.com/tag/tree")

**Companies**

`Unknown`

翻转一棵二叉树。

**示例：**

输入：

```
     4
   /   \
  2     7
 / \   / \
1   3 6   9
```

输出：

```
     4
   /   \
  7     2
 / \   / \
9   6 3   1
```

**备注:**  
这个问题是受到 [Max Howell](https://twitter.com/mxcl "https://twitter.com/mxcl") 的 [原问题](https://twitter.com/mxcl/status/608682016205344768 "https://twitter.com/mxcl/status/608682016205344768") 启发的 ：

> 谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。

---

[Discussion](https://leetcode-cn.com/problems/invert-binary-tree/comments/ "https://leetcode-cn.com/problems/invert-binary-tree/comments/") | [Solution](https://leetcode-cn.com/problems/invert-binary-tree/solution/ "https://leetcode-cn.com/problems/invert-binary-tree/solution/")

## 解法

```cpp
class Solution {
public:
    /*
    ## 解题思路
    * 递归法
    */
    TreeNode* invertTree(TreeNode* root) {
        if (!root) return root;
        TreeNode* right = invertTree(root->right);
        TreeNode* left = invertTree(root->left);
        root->left = right;
        root->right = left;
        return root;
    }
};
```


