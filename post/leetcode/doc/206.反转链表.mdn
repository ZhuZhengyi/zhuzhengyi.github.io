# [反转链表](https://leetcode-cn.com/problems/reverse-linked-list/description/ "https://leetcode-cn.com/problems/reverse-linked-list/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (65.94%) | 758   | -        |

**Tags**

[`linked-list`](https://leetcode.com/tag/linked-list "https://leetcode.com/tag/linked-list")

**Companies**

`adobe` | `amazon` | `apple` | `bloomberg` | `facebook` | `microsoft` | `snapchat` | `twitter` | `uber` | `yahoo` | `yelp` | `zenefits`

反转一个单链表。

**示例:**

```
输入: 1->2->3->4->5->NULL
输出: 5->4->3->2->1->NULL
```

**进阶:**  
你可以迭代或递归地反转链表。你能否用两种方法解决这道题？

---

[Discussion](https://leetcode-cn.com/problems/reverse-linked-list/comments/ "https://leetcode-cn.com/problems/reverse-linked-list/comments/") | [Solution](https://leetcode-cn.com/problems/reverse-linked-list/solution/ "https://leetcode-cn.com/problems/reverse-linked-list/solution/")

## 代码

```rust
// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn reverse_list(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {
        let mut lhs = head;
        let mut rhs = None;
        while let Some(mut node) = lhs {
            lhs = node.next.take();
            node.next = rhs;
            rhs = Some(node);
        }
        rhs
    }
}
```
