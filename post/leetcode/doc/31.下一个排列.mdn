# [下一个排列](https://leetcode.cn/problems/next-permutation/description/ "https://leetcode.cn/problems/next-permutation/description/")

| Category   | Difficulty      | Likes | Dislikes |
| ---------- | --------------- | ----- | -------- |
| algorithms | Medium (38.23%) | 2117  | -        |

**Tags**

[`array`](https://leetcode.com/tag/array "https://leetcode.com/tag/array")

**Companies**

`google`

整数数组的一个 **排列**  就是将其所有成员以序列或线性顺序排列。

- 例如，`arr = [1,2,3]` ，以下这些都可以视作 `arr` 的排列：`[1,2,3]`、`[1,3,2]`、`[3,1,2]`、`[2,3,1]` 。

整数数组的 **下一个排列** 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 **下一个排列** 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。

- 例如，`arr = [1,2,3]` 的下一个排列是 `[1,3,2]` 。
- 类似地，`arr = [2,3,1]` 的下一个排列是 `[3,1,2]` 。
- 而 `arr = [3,2,1]` 的下一个排列是 `[1,2,3]` ，因为 `[3,2,1]` 不存在一个字典序更大的排列。

给你一个整数数组 `nums` ，找出 `nums` 的下一个排列。

必须 **[原地](https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95 "https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95")** 修改，只允许使用额外常数空间。

**示例 1：**

```
输入：nums = [1,2,3]
输出：[1,3,2]
```

**示例 2：**

```
输入：nums = [3,2,1]
输出：[1,2,3]
```

**示例 3：**

```
输入：nums = [1,1,5]
输出：[1,5,1]
```

**提示：**

- `1 <= nums.length <= 100`
- `0 <= nums[i] <= 100`

---

[Discussion](https://leetcode.cn/problems/next-permutation/comments/ "https://leetcode.cn/problems/next-permutation/comments/") | [Solution](https://leetcode.cn/problems/next-permutation/solution/ "https://leetcode.cn/problems/next-permutation/solution/")

## 解法

```rust
// @lc code=start
impl Solution {
    /// ## 解题思路：
    /// - 交换
    /// 1. 从右往左，找到第一个nums[i-1]<nums[i]的i;
    /// 2. 然后再从[i+1..]中查找比nums[i-1]大的最小数nums[j];
    /// 3. 交换nums[i-1],nums[j];
    /// 4. 交换后，重新按从小到大排列nums[i..]；
    pub fn next_permutation(nums: &mut Vec<i32>) {
        let len = nums.len();
        if len < 2 {
            return;
        }

        let mut resort_i = 0;  //要重新排序的部分起始index
        // 从右向左遍历
        for i in (1..len).rev() {
            // 找到第一个nums[i-1]<nums[i]
            if nums[i - 1] < nums[i] {
                // 在[i..]中, 查找比nums[i-1]大的最小数
                let bigger = nums[i..]
                    .iter()
                    .enumerate()
                    .filter(|(_, &n)| n > nums[i - 1])
                    .min_by(|(_, &n1), (_, &n2)| n1.cmp(&n2))
                    .map(|(j, _)| j + i)
                    .unwrap_or(i);
                // 交换nums[i-1], nums[bigger]
                nums.swap(i - 1, bigger);
                resort_i = i; //标记交换点
                break;
            }
        }

        //重新排序nums[i..]
        nums[resort_i..].sort();
    }
}
// @lc code=end

struct Solution;

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test() {
        let mut nums = vec![1, 2, 3];
        Solution::next_permutation(&mut nums);
        assert_eq!(nums, vec![1, 3, 2]);
    }
}
```
