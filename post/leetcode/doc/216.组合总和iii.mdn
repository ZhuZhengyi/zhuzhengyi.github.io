# [组合总和 III](https://leetcode-cn.com/problems/combination-sum-iii/description/ "https://leetcode-cn.com/problems/combination-sum-iii/description/")

| Category   | Difficulty      | Likes | Dislikes |
| ---------- | --------------- | ----- | -------- |
| algorithms | Medium (72.79%) | 461   | -        |

**Tags**

[`array`](https://leetcode.com/tag/array "https://leetcode.com/tag/array") | [`backtracking`](https://leetcode.com/tag/backtracking "https://leetcode.com/tag/backtracking")

**Companies**

`Unknown`

找出所有相加之和为  `n` 的  `k` 个数的组合，且满足下列条件：

- 只使用数字 1 到 9
- 每个数字  **最多使用一次**

返回  *所有可能的有效组合的列表* 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。

**示例 1:**

```
输入: k = 3, n = 7
输出: [[1,2,4]]
解释:
1 + 2 + 4 = 7
没有其他符合的组合了。
```

**示例 2:**

```
输入: k = 3, n = 9
输出: [[1,2,6], [1,3,5], [2,3,4]]
解释:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
没有其他符合的组合了。
```

**示例 3:**

```
输入: k = 4, n = 1
输出: []
解释: 不存在有效的组合。
在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 = 10，因为10 > 1，没有有效的组合。
```

**提示:**

- `2 <= k <= 9`
- `1 <= n <= 60`

[Discussion](https://leetcode-cn.com/problems/combination-sum-iii/comments/ "https://leetcode-cn.com/problems/combination-sum-iii/comments/") | [Solution](https://leetcode-cn.com/problems/combination-sum-iii/solution/ "https://leetcode-cn.com/problems/combination-sum-iii/solution/")

## 解法

```cpp
class Solution {
    vector<vector<int>> result;
public:
    /*
    * ## 解题思路
    * * 回溯法
    */
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> nums = {1,2,3,4,5,6,7,8,9};
        vector<int> tmp;
        dfs(nums, tmp, n, k, 0);
        return result;
    }

    void dfs(vector<int>& nums, vector<int>& tmp, int target, int k, int s) {
        if (k<0 || target < 0) {
            return;
        }
        if(target == 0 && k==0) {
            result.push_back(tmp);
            return;
        }
        for(int i=s; i<nums.size(); i++) {
            if(nums[i]>target) {
                break;
            }
            tmp.push_back(nums[i]);
            dfs(nums, tmp, target-nums[i], k-1, i+1);
            tmp.pop_back();
        }
    }
};
```
