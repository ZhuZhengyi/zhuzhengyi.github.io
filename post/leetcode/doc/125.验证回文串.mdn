# [验证回文串](https://leetcode-cn.com/problems/valid-palindrome/description/ "https://leetcode-cn.com/problems/valid-palindrome/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (46.93%) | 523   | -        |

**Tags**

[`two-pointers`](https://leetcode.com/tag/two-pointers "https://leetcode.com/tag/two-pointers") | [`string`](https://leetcode.com/tag/string "https://leetcode.com/tag/string")

**Companies**

`facebook` | `microsoft` | `uber` | `zenefits`

给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。

**说明：**本题中，我们将空字符串定义为有效的回文串。

**示例 1:**

```
输入: "A man, a plan, a canal: Panama"
输出: true
解释："amanaplanacanalpanama" 是回文串
```

**示例 2:**

```
输入: "race a car"
输出: false
解释："raceacar" 不是回文串
```

**提示：**

- `1 <= s.length <= 2 * 105`
- 字符串 `s` 由 ASCII 字符组成

---

[Discussion](https://leetcode-cn.com/problems/valid-palindrome/comments/ "https://leetcode-cn.com/problems/valid-palindrome/comments/") | [Solution](https://leetcode-cn.com/problems/valid-palindrome/solution/ "https://leetcode-cn.com/problems/valid-palindrome/solution/")

## 解法

```cpp
class Solution {
public:
    /**
     * ## 解题思路
     * * 双指针
     **/
    bool isPalindrome(string s) {
        int l=0, r=s.length()-1;
        while(l<r) {
            if(!isalnum(s[l])) {
                l++;
                continue;
            }
            if(!isalnum(s[r])) {
                r--;
                continue;
            }
            if(tolower(s[l++])!=tolower(s[r--])) {
                return false;
            }
        }
        return true;
    }
};
```
