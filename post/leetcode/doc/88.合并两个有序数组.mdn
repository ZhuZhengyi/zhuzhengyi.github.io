# [合并两个有序数组](https://leetcode.cn/problems/merge-sorted-array/description/ "https://leetcode.cn/problems/merge-sorted-array/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (52.47%) | 1932  | -        |

<details open=""><summary><strong>Tags</strong></summary>

[`array`](https://leetcode.com/tag/array "https://leetcode.com/tag/array") | [`two-pointers`](https://leetcode.com/tag/two-pointers "https://leetcode.com/tag/two-pointers")

</details>

<details open=""><summary><strong>Companies</strong></summary>

`bloomberg` | `facebook` | `microsoft`

</details>

给你两个按 **非递减顺序** 排列的整数数组 `nums1` 和 `nums2`，另有两个整数 `m` 和 `n` ，分别表示 `nums1` 和 `nums2` 中的元素数目。

请你 **合并** `nums2` 到 `nums1` 中，使合并后的数组同样按 **非递减顺序** 排列。

**注意：** 最终，合并后数组不应由函数返回，而是存储在数组 `nums1` 中。为了应对这种情况，`nums1` 的初始长度为 `m + n`，其中前 `m` 个元素表示应合并的元素，后 `n` 个元素为 `0` ，应忽略。`nums2` 的长度为 `n` 。

**示例 1：**

```
输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
输出：[1,2,2,3,5,6]
解释：需要合并 [1,2,3] 和 [2,5,6] 。
合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。
```

**示例 2：**

```
输入：nums1 = [1], m = 1, nums2 = [], n = 0
输出：[1]
解释：需要合并 [1] 和 [] 。
合并结果是 [1] 。
```

**示例 3：**

```
输入：nums1 = [0], m = 0, nums2 = [1], n = 1
输出：[1]
解释：需要合并的数组是 [] 和 [1] 。
合并结果是 [1] 。
注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。
```

**提示：**

- `nums1.length == m + n`
- `nums2.length == n`
- `0 <= m, n <= 200`
- `1 <= m + n <= 200`
- `-10<sup>9</sup> <= nums1[i], nums2[j] <= 10<sup>9</sup>`

  **进阶：** 你可以设计实现一个时间复杂度为 `O(m + n)` 的算法解决此问题吗？

---

[Discussion](https://leetcode.cn/problems/merge-sorted-array/comments/ "https://leetcode.cn/problems/merge-sorted-array/comments/") | [Solution](https://leetcode.cn/problems/merge-sorted-array/solution/ "https://leetcode.cn/problems/merge-sorted-array/solution/")

## 解法

```rust
// @lc code=start
impl Solution {
    /// ## 解题思路
    /// - 双指针
    pub fn merge(nums1: &mut Vec<i32>, m: i32, nums2: &mut Vec<i32>, n: i32) {
        let (mut i, mut j) = (m - 1, n - 1);
        nums1.resize((m + n) as usize, 0);
        while j >= 0 {
            let k = (i + j + 1) as usize;
            if i >= 0 && nums1[i as usize] > nums2[j as usize] {
                nums1[k] = nums1[i as usize];
                i -= 1;
            } else {
                nums1[k] = nums2[j as usize];
                j -= 1;
            }
        }
    }
}
// @lc code=end

struct Solution;

```
