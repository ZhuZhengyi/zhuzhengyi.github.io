# [岛屿数量](https://leetcode-cn.com/problems/number-of-islands/description/ "https://leetcode-cn.com/problems/number-of-islands/description/")

| Category   | Difficulty      | Likes | Dislikes |
| ---------- | --------------- | ----- | -------- |
| algorithms | Medium (47.04%) | 555   | -        |

**Tags**

[`depth-first-search`](https://leetcode.com/tag/depth-first-search "https://leetcode.com/tag/depth-first-search") | [`breadth-first-search`](https://leetcode.com/tag/breadth-first-search "https://leetcode.com/tag/breadth-first-search") | [`union-find`](https://leetcode.com/tag/union-find "https://leetcode.com/tag/union-find")

**Companies**

`amazon` | `facebook` | `google` | `microsoft` | `zenefits`

给你一个由 `'1'`（陆地）和 `'0'`（水）组成的的二维网格，请你计算网格中岛屿的数量。

岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。

此外，你可以假设该网格的四条边均被水包围。

**示例 1:**

```
输入:
11110
11010
11000
00000
输出: 1
```

**示例 2:**

```
输入:
11000
11000
00100
00011
输出: 3
解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。
```

---

[Discussion](https://leetcode-cn.com/problems/number-of-islands/comments/ "https://leetcode-cn.com/problems/number-of-islands/comments/") | [Solution](https://leetcode-cn.com/problems/number-of-islands/solution/ "https://leetcode-cn.com/problems/number-of-islands/solution/")

```cpp
class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = m ? grid[0].size() : 0;
        int islands = 0;
        for (int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(grid[i][j] == '1') {
                    islands++;
                    eraseIslands(grid, i, j);
                }
            }
        }
        return islands;
    }

private:
    void eraseIslands(vector<vector<char>>& grid, int i, int j) {
        int m = grid.size();
        int n = grid[0].size();
        if (i<0 || i==m || j<0 || j==n || grid[i][j] == '0') {
            return;
        }
        grid[i][j] = '0';

        eraseIslands(grid, i-1, j);
        eraseIslands(grid, i+1, j);
        eraseIslands(grid, i, j-1);
        eraseIslands(grid, i, j+1);
    }
};
```
