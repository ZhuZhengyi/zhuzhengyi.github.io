# [丢失的数字](https://leetcode-cn.com/problems/missing-number/description/ "https://leetcode-cn.com/problems/missing-number/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (65.63%) | 602   | -        |

**Tags**

[`array`](https://leetcode.com/tag/array "https://leetcode.com/tag/array") | [`math`](https://leetcode.com/tag/math "https://leetcode.com/tag/math") | [`bit-manipulation`](https://leetcode.com/tag/bit-manipulation "https://leetcode.com/tag/bit-manipulation")

**Companies**

`bloomberg` | `microsoft`

给定一个包含 `[0, n]` 中 `n` 个数的数组 `nums` ，找出 `[0, n]` 这个范围内没有出现在数组中的那个数。

**示例 1：**

```
输入：nums = [3,0,1]
输出：2
解释：n = 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。
```

**示例 2：**

```
输入：nums = [0,1]
输出：2
解释：n = 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。
```

**示例 3：**

```
输入：nums = [9,6,4,2,3,5,7,0,1]
输出：8
解释：n = 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。
```

**示例 4：**

```
输入：nums = [0]
输出：1
解释：n = 1，因为有 1 个数字，所以所有的数字都在范围 [0,1] 内。1 是丢失的数字，因为它没有出现在 nums 中。
```

**提示：**

- `n == nums.length`
- `1 <= n <= 104`
- `0 <= nums[i] <= n`
- `nums` 中的所有数字都 **独一无二**

**进阶**：你能否实现线性时间复杂度、仅使用额外常数空间的算法解决此问题?

---

[Discussion](https://leetcode-cn.com/problems/missing-number/comments/ "https://leetcode-cn.com/problems/missing-number/comments/") | [Solution](https://leetcode-cn.com/problems/missing-number/solution/ "https://leetcode-cn.com/problems/missing-number/solution/")

## 解法

```cpp
class Solution {
public:
    /**
     ## 解题思路
     * 按值将每个数放入到对应序号的位置中，
     * 则缺失的数字，其序号和值不相等；
    */
    int missingNumber(vector<int>& nums) {
        int n = nums.size();
        for(int i=0; i<n; i++) {
            while(nums[i]<n && nums[i]!=i) {
                swap(nums[i], nums[nums[i]]);
            }
        }
        int i = 0;
        for(;i<n; i++) {
            if (nums[i]!=i) {
                break;
            }
        }

        return i;
    }
};
```


