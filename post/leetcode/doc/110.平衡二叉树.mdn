# [平衡二叉树](https://leetcode-cn.com/problems/balanced-binary-tree/description/ "https://leetcode-cn.com/problems/balanced-binary-tree/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (56.52%) | 872   | -        |

**Tags**

[`tree`](https://leetcode.com/tag/tree "https://leetcode.com/tag/tree") | [`depth-first-search`](https://leetcode.com/tag/depth-first-search "https://leetcode.com/tag/depth-first-search")

**Companies**

`bloomberg`

给定一个二叉树，判断它是否是高度平衡的二叉树。

本题中，一棵高度平衡二叉树定义为：

> 一个二叉树*每个节点* 的左右两个子树的高度差的绝对值不超过 1 。

**示例 1：**

![](https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg)

```
输入：root = [3,9,20,null,null,15,7]
输出：true
```

**示例 2：**

![](https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg)

```
输入：root = [1,2,2,3,3,null,null,4,4]
输出：false
```

**示例 3：**

```
输入：root = []
输出：true
```

**提示：**

- 树中的节点数在范围 `[0, 5000]` 内
- `-104 <= Node.val <= 104`

---

[Discussion](https://leetcode-cn.com/problems/balanced-binary-tree/comments/ "https://leetcode-cn.com/problems/balanced-binary-tree/comments/") | [Solution](https://leetcode-cn.com/problems/balanced-binary-tree/solution/ "https://leetcode-cn.com/problems/balanced-binary-tree/solution/")

## 解法

```cpp
class Solution {
public:
    /*
    ## 解题思路
    * 平衡二叉树的条件：
      1. 左右子树均为平衡二叉树；
      2. 左右子树高度差不能大于1；
    */
    bool isBalanced(TreeNode* root) {
        if (!root) {
            return true;
        }

        return (isBalanced(root->left)
            && isBalanced(root->right)
            && abs(treeHeigh(root->left) - treeHeigh(root->right)) < 2 
            );
    }

    //二叉树的高度
    int treeHeigh(TreeNode *root) {
        if (!root) return 0;
        return max(treeHeigh(root->left), treeHeigh(root->right)) + 1;
    }
};
```
