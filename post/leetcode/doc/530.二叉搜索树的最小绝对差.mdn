# [二叉搜索树的最小绝对差](https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/description/ "https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (55.49%) | 99    | -        |

**Tags**

[`tree`](https://leetcode.com/tag/tree "https://leetcode.com/tag/tree")

**Companies**

`google`

给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。

**示例：**

```
输入：

   1
    \
     3
    /
   2

输出：
1

解释：
最小绝对差为 1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。
```

**提示：**

- 树中至少有 2 个节点。
- 本题与 783 https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/ 相同

---

[Discussion](https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/comments/ "https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/comments/") | [Solution](https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/solution/ "https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/solution/")

## 解法

```cpp
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        int last = INT_MAX, minm = INT_MAX;
        recur(root, last, minm);
        return minm;
    }

    void recur(TreeNode* root, int& last, int& minm) {
        if (!root) return;

        recur(root->left, last, minm);

        auto a = abs(root->val-last);
        if ( a < minm) {
            minm = a;
        }
        last = root->val;

        recur(root->right, last, minm);
    }
};
```
