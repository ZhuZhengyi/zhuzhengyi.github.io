# [子集](https://leetcode-cn.com/problems/subsets/description/ "https://leetcode-cn.com/problems/subsets/description/")

| Category   | Difficulty      | Likes | Dislikes |
| ---------- | --------------- | ----- | -------- |
| algorithms | Medium (80.45%) | 1604  | -        |

**Tags**

[`array`](https://leetcode.com/tag/array "https://leetcode.com/tag/array") | [`backtracking`](https://leetcode.com/tag/backtracking "https://leetcode.com/tag/backtracking") | [`bit-manipulation`](https://leetcode.com/tag/bit-manipulation "https://leetcode.com/tag/bit-manipulation")

**Companies**

`amazon` | `bloomberg` | `facebook` | `uber`

给你一个整数数组  `nums` ，数组中的元素  **互不相同** 。返回该数组所有可能的子集（幂集）。

解集  **不能**  包含重复的子集。你可以按  **任意顺序**  返回解集。

**示例 1：**

```
输入：nums = [1,2,3]
输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
```

**示例 2：**

```
输入：nums = [0]
输出：[[],[0]]
```

**提示：**

- `1 <= nums.length <= 10`
- `-10 <= nums[i] <= 10`
- `nums`  中的所有元素  **互不相同**

---

[Discussion](https://leetcode-cn.com/problems/subsets/comments/ "https://leetcode-cn.com/problems/subsets/comments/") | [Solution](https://leetcode-cn.com/problems/subsets/solution/ "https://leetcode-cn.com/problems/subsets/solution/")

## 解法// @lc code=start

```rust
impl Solution {
    /// ## 解题思路
    /// - 回溯法
    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> {
        // 遍历
        fn dfs(nums: &Vec<i32>, from: usize, tmp: &mut Vec<i32>, res: &mut Vec<Vec<i32>>) {
            // 终止条件
            if from > nums.len() {
                return;
            }
	    res.push(tmp.clone());
            // 遍历下一个
            for i in from..nums.len() {
                tmp.push(nums[i]);
                dfs(nums, i + 1, tmp, res);
                tmp.pop();
            }
        }

        let mut tmp = Vec::new();
        let mut res = Vec::new();
        dfs(&nums, 0, &mut tmp, &mut res);

        res
    }
}
// @lc code=end

struct Solution;
```

```cpp
class Solution {
    vector<vector<int>> result;
public:
    /*
    * ## 解题思路
    * - 深度遍历
    */
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<int> tmp;
        result.push_back(tmp);
        dfs(nums, tmp, 0);
        return result;
    }

    void dfs(vector<int> &nums, vector<int> &tmp, int s) {
        if(s >= nums.size()) {
            return;
        }
        for(int i=s; i<nums.size(); i++ ) {
            tmp.push_back(nums[i]);
            result.push_back(tmp);
            dfs(nums, tmp, i+1);
            tmp.pop_back();
        }
    }
};
```
