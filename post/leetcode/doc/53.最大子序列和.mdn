# [最大子序和](https://leetcode-cn.com/problems/maximum-subarray/description/ "https://leetcode-cn.com/problems/maximum-subarray/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (48.34%) | 1430  | -        |

**Tags**

[`array`](https://leetcode.com/tag/array "https://leetcode.com/tag/array") | [`divide-and-conquer`](https://leetcode.com/tag/divide-and-conquer "https://leetcode.com/tag/divide-and-conquer") | [`dynamic-programming`](https://leetcode.com/tag/dynamic-programming "https://leetcode.com/tag/dynamic-programming")

**Companies**

`bloomberg` | `linkedin` | `microsoft`

给定一个整数数组 `nums` ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

**示例:**

```
输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。
```

**进阶:**

如果你已经实现复杂度为 O(*n*) 的解法，尝试使用更为精妙的分治法求解。

---

[Discussion](https://leetcode-cn.com/problems/maximum-subarray/comments/ "https://leetcode-cn.com/problems/maximum-subarray/comments/") | [Solution](https://leetcode-cn.com/problems/maximum-subarray/solution/ "https://leetcode-cn.com/problems/maximum-subarray/solution/")

## 解法

## 代码

```python
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0
        passedSum = nums[0]
        maxSum = passedSum
        for current in nums[1:]:
            if passedSum > 0:
                passedSum += current
                maxSum = max(maxSum, passedSum)
            else:
                maxSum = max(maxSum, current, passedSum)
                passedSum = current

        return maxSum
```

```rust
impl Solution {
    /// ## 解题思路
    /// - 贪心法
    /// 1. 从左至右依次遍历nums;
    /// 2. 令cur_sub: 表示以当前元素时为末尾元素的最大连续子数组和;
    /// 3. 令max_sub: 表示到当前为止的最大连续子数组和;
    /// 4. cur_sub = max(cur_sub+n, n)
    /// 5  max_sub = max(max_sub, cur_sub)
    pub fn max_sub_array(nums: Vec<i32>) -> i32 {
        if nums.len() == 0 {
            return 0;
        }
        let mut cur_sub = 0; //当前临时子数组和
        let mut max_sub = i32::MIN; //最大子数组和
        for n in nums {
            cur_sub = std::cmp::max(cur_sub + n, n);
            max_sub = std::cmp::max(max_sub, cur_sub);
        }
        max_sub
    }
}
```
