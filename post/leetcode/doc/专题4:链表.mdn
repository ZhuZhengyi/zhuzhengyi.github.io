# 专题：链表

## 简介

链表是最基本，最常用的结构之一。

链表具有以下注意特性：

* 顺序访问；

* 离散；

* 迭代；

* 动态分配；

## 相关题目

* [206.反转链表](../206.反转链表)

* [21.合并两个有序链表](../21.合并两个有序链表)

* [23.合并k个有序链表](../23.合并k个有序链表)

* [24.两两交换链表中](../24.两两交换链表中)

* [86.分割链表](../86.分割链表)

* [61.旋转链表](../61.旋转链表)

* [92.反转链表II](../92.反转链表II)

* [876.链表中间节点](../876.链表中间节点)

* [19.删除链表倒数第K个节点](../19.删除链表倒数第K个节点)

## 各种链表实现

### rust中的链表

* 定义

```rust
#[derive(PartialEq, Eq, Clone, Debug)]
pub struct ListNode {
   pub val: i32,
   pub next: Option<Box<ListNode>>
}

impl ListNode {
   #[inline]
   fn new(val: i32) -> Self {
     ListNode {
      next: None,
      val
    }
  }
}
```

* 遍历

```rust
let head = Option::new(Box::new(ListNode::new(0)));
let mut p = head.unwrap().as_mut();
while p.next.is_some() {
    p = p.next.as_mut().unwrap();
}
```



## 参考
