# [二进制求和](https://leetcode.cn/problems/add-binary/description/ "https://leetcode.cn/problems/add-binary/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (53.04%) | 1026  | -        |

<details open=""><summary><strong>Tags</strong></summary>

[`math`](https://leetcode.com/tag/math "https://leetcode.com/tag/math") | [`string`](https://leetcode.com/tag/string "https://leetcode.com/tag/string")

<details open=""><summary><strong>Companies</strong></summary>

`facebook`

给你两个二进制字符串 `a` 和 `b` ，以二进制字符串的形式返回它们的和。

**示例 1：**

```
输入:a = "11", b = "1"
输出："100"
```

**示例 2：**

```
输入：a = "1010", b = "1011"
输出："10101"
```

**提示：**

- `1 <= a.length, b.length <= 10<sup>4</sup>`
- `a` 和 `b` 仅由字符 `'0'` 或 `'1'` 组成
- 字符串如果不是 `"0"` ，就不含前导零

[Discussion](https://leetcode.cn/problems/add-binary/comments/ "https://leetcode.cn/problems/add-binary/comments/") | [Solution](https://leetcode.cn/problems/add-binary/solution/ "https://leetcode.cn/problems/add-binary/solution/")

## 解法

```rust
struct Solution;

// @lc code=start
use std::iter;

impl Solution {
    /// ## 解题思路
    /// - iterator
    pub fn add_binary(a: String, b: String) -> String {
        // 处理长度
        let (a, b) = match (a.len(), b.len()) {
            (la, lb) if la > lb => (a, b),
            _ => (b, a),
        };

        let a = format!("0{}", a);

        //
        let ab = a
            .chars()
            .rev()
            .zip(b.chars().rev().chain(iter::repeat('0')))
            .scan(0_u32, |carry, (x, y)| {
                let s = x as u32 + y as u32 + *carry % 2;
                *carry = s / 2;
                Some(char::from_digit(s % 2, 2))
            })
            .map(|c| c.unwrap_or('0'))
            .collect::<String>()
            .chars()
            .rev()
            .collect::<String>();

        if ab.len() > 1 && ab.starts_with('0') {
            String::from(&ab[1..])
        } else {
            ab
        }
    }
}
// @lc code=end

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test() {
        assert_eq!(
            Solution::add_binary("11".into(), "1".into()),
            "100".to_string()
        );
    }
}

```
