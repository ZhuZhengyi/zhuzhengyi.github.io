# [实现 Trie (前缀树)](https://leetcode-cn.com/problems/implement-trie-prefix-tree/description/ "https://leetcode-cn.com/problems/implement-trie-prefix-tree/description/")

| Category   | Difficulty      | Likes | Dislikes |
| ---------- | --------------- | ----- | -------- |
| algorithms | Medium (64.69%) | 210   | -        |

**Tags**

[`design`](https://leetcode.com/tag/design "https://leetcode.com/tag/design") | [`trie`](https://leetcode.com/tag/trie "https://leetcode.com/tag/trie")

**Companies**

`bloomberg` | `facebook` | `google` | `microsoft` | `twitter` | `uber`

实现一个 Trie (前缀树)，包含 `insert`, `search`, 和 `startsWith` 这三个操作。

**示例:**

```
Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // 返回 true
trie.search("app");     // 返回 false
trie.startsWith("app"); // 返回 true
trie.insert("app");   
trie.search("app");     // 返回 true
```

**说明:**

- 你可以假设所有的输入都是由小写字母 `a-z` 构成的。
- 保证所有输入均为非空字符串。

---

[Discussion](https://leetcode-cn.com/problems/implement-trie-prefix-tree/comments/ "https://leetcode-cn.com/problems/implement-trie-prefix-tree/comments/") | [Solution](https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/ "https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/")

## 解法

## 代码

```python
class Trie:
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = {}  #dict 

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        node = self.root
        for c in word:
            if not c in node.keys():
                node[c] = {}
            node = node[c]
        node["is_word"] = True

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        node = self.root
        for c in word:
            if not c in node.keys():
                return False
            node = node[c]

        if 'is_word' in node.keys():
            return True
        else:
            return False

    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        node = self.root
        for c in prefix:
            if not c in node.keys():
                return False
            node = node[c]

        return True
```

* rust

```rust

```
