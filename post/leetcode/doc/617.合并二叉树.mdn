# [合并二叉树](https://leetcode-cn.com/problems/merge-two-binary-trees/description/ "https://leetcode-cn.com/problems/merge-two-binary-trees/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (74.90%) | 358   | -        |

**Tags**

[`tree`](https://leetcode.com/tag/tree "https://leetcode.com/tag/tree")

**Companies**

`amazon`

给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。

你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则**不为 **NULL 的节点将直接作为新二叉树的节点。

**示例 1:**

```
输入: 
    Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
输出: 
合并后的树:
         3
        / \
       4   5
      / \   \ 
     5   4   7
```

**注意:** 合并必须从两个树的根节点开始。

---

[Discussion](https://leetcode-cn.com/problems/merge-two-binary-trees/comments/ "https://leetcode-cn.com/problems/merge-two-binary-trees/comments/") | [Solution](https://leetcode-cn.com/problems/merge-two-binary-trees/solution/ "https://leetcode-cn.com/problems/merge-two-binary-trees/solution/")

```cpp
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if (t1==NULL) {
            return t2;
        }

        if (t2 == NULL) {
            return t1;
        }

        auto t = new TreeNode(t1->val + t2->val);
        t->left = this->mergeTrees(t1->left, t2->left);
        t->right = this->mergeTrees(t1->right, t2->right);

        return t;
    }
};
```
