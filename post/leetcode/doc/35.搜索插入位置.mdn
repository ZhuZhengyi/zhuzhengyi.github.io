# [搜索插入位置](https://leetcode.cn/problems/search-insert-position/description/ "https://leetcode.cn/problems/search-insert-position/description/")

| Category   | Difficulty    | Likes | Dislikes |
| ---------- | ------------- | ----- | -------- |
| algorithms | Easy (45.04%) | 1970  | -        |

**Tags**

[`array`](https://leetcode.com/tag/array "https://leetcode.com/tag/array") | [`binary-search`](https://leetcode.com/tag/binary-search "https://leetcode.com/tag/binary-search")

**Companies**

`Unknown`

给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。

请必须使用时间复杂度为 `O(log n)` 的算法。

**示例 1:**

```
输入: nums = [1,3,5,6], target = 5
输出: 2
```

**示例 2:**

```
输入: nums = [1,3,5,6], target = 2
输出: 1
```

**示例 3:**

```
输入: nums = [1,3,5,6], target = 7
输出: 4
```

**提示:**

- `1 <= nums.length <= 104`
- `-104 <= nums[i] <= 104`
- `nums` 为 **无重复元素** 的 **升序** 排列数组
- `-104 <= target <= 104`

---

[Discussion](https://leetcode.cn/problems/search-insert-position/comments/ "https://leetcode.cn/problems/search-insert-position/comments/") | [Solution](https://leetcode.cn/problems/search-insert-position/solution/ "https://leetcode.cn/problems/search-insert-position/solution/")

## 解法

```rust
struct Solution;

// @lc code=start
impl Solution {
    /// ## 解题思路
    /// * 二分查找
    /// * 注意边界条件
    pub fn search_insert(nums: Vec<i32>, target: i32) -> i32 {
        let (mut l, mut r) = (0, nums.len() - 1);
        // 边界条件
        if target > nums[r] {
            return (r + 1) as i32;
        }
        // 二分查找
        while l < r {
            let m = l + (r - l) / 2;
            if nums[m] == target {
                return m as i32;
            } else if nums[m] < target {
                l = m + 1;
            } else {
                r = m;
            }
        }

        return l as i32;
    }
}
// @lc code=end
```
