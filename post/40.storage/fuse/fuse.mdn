# FUSE简介

## 简介

FUSE（Filesystem in Userspace）是linux kernel中一个在用户空间的文件系统框架，通过FUSE内核模块的支持，使用者只需要根据fuse提供的接口实现具体的文件操作就可以实现一个文件系统。

fuse在linux kernel 2.6版本加入。

## 特点

- 用户空间文件系统——类Unix OS的框架
- 允许非超户在用户空间开发文件系统
- 内核的API接口，使用fs-type操作
- 支持多种编程语言（ c、c++、perl、java 等）
- 普通用户也可以挂载FUSE
- 不用重新编译内核

## FUSE组成

fuse主要由三部分组成：

- fuse内核模块：实现了和VFS的对接，实现了一个能被用户空间进程打开的设备，当VFS发来文件操作请求之后，将请求转化为特定格式，并通过设备传递给用户空间进程，用户空间进程在处理完请求后，将结果返回给fuse内核模块，内核模块再将其还原为Linux kernel需要的格式，并返回给VFS；
- fuse库libfuse：负责和内核空间通信，接收来自/dev/fuse的请求，并将其转化为一系列的函数调用，将结果写回到/dev/fuse；提供的函数可以对fuse文件系统进行挂载卸载、从linux内核读取请求以及发送响应到内核。libfuse提供了两个APIs：一个“high-level”同步API 和一个“low-level” 异步API 。这两种API 都从内核接收请求传递到主程序（fuse_main函数），主程序使用相应的回调函数进行处理。当使用high-level API时，回调函数使用文件名（file names）和路径（paths）工作，而不是索引节点inodes，回调函数返回时也就是一个请求处理的完成。使用low-level API 时，回调函数必须使用索引节点inode工作，响应发送必须显示的使用一套单独的API函数。
- 挂载工具：实现对用户态文件系统的挂载

## 架构

![](https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2022/01/10-12-17-08-2022-01-10-12-16-58-image.png)

Fuse包含一个内核模块和一个用户空间守护进程（下文称fuse daemon）。内核模块加载时被注册成 Linux 虚拟文件系统的一个 fuse 文件系统驱动。此外，还注册了一个/dev/fuse的块设备。该块设备作为fuse daemon与内核通信的桥梁，fuse daemon通过/dev/fuse读取fuse request，处理后将reply写入/dev/fuse。

![](https://raw.githubusercontent.com/ZhuZhengyi/notebook-images/master/2020/12/09-15-29-23-2020-12-09-15-29-18-image.png)

## 实现

编译过程中需要指定库文件：-lfuse -pthread

```c
struct fuse_operations {
int (*getattr) (const char *, struct stat *);
int (*readlink) (const char *, char *, size_t);
int (*mknod) (const char *, mode_t, dev_t);
int (*mkdir) (const char *, mode_t);
int (*unlink) (const char *);
int (*rmdir) (const char *);
int (*symlink) (const char *, const char *);
int (*rename) (const char *, const char *);
int (*link) (const char *, const char *);
int (*chmod) (const char *, mode_t);
int (*chown) (const char *, uid_t, gid_t);
int (*truncate) (const char *, off_t);
int (*utime) (const char *, struct utimbuf *);
int (*open) (const char *, struct fuse_file_info *);
int (*read) (const char *, char *, size_t, off_t, struct fuse_file_info *);
int (*write) (const char *, const char *, size_t, off_t, struct fuse_file_info *);
int (*statfs) (const char *, struct statvfs *);
int (*flush) (const char *, struct fuse_file_info *);
int (*release) (const char *, struct fuse_file_info *);
int (*fsync) (const char *, int, struct fuse_file_info *);
int (*setxattr) (const char *, const char *, const char *, size_t, int);
int (*getxattr) (const char *, const char *, char *, size_t);
int (*listxattr) (const char *, char *, size_t);
int (*removexattr) (const char *, const char *);
int (*opendir) (const char *, struct fuse_file_info *);
int (*readdir) (const char *, void *, fuse_fill_dir_t, off_t, struct fuse_file_info *);
int (*releasedir) (const char *, struct fuse_file_info *);
int (*fsyncdir) (const char *, int, struct fuse_file_info *);
void *(*init) (struct fuse_conn_info *conn);
void (*destroy) (void *);
int (*access) (const char *, int);
int (*create) (const char *, mode_t, struct fuse_file_info *);
int (*ftruncate) (const char *, off_t, struct fuse_file_info *);
int (*fgetattr) (const char *, struct stat *, struct fuse_file_info *);
int (*lock) (const char *, struct fuse_file_info *, int cmd, struct flock *);
int (*utimens) (const char *, const struct timespec tv[2]);
int (*bmap) (const char *, size_t blocksize, uint64_t *idx);
};

static struct fuse_operations memfs_oper = { 
    .getattr    = memfs_getattr,
    .access     = memfs_access,
    .readdir    = memfs_readdir,
    .open       = memfs_open,
    .read       = memfs_read,
    .write      = memfs_write,
    .release    = memfs_release,
    .mknod      = memfs_mknod,
    .unlink     = memfs_unlink,
    .mkdir      = memfs_mkdir,
    .rmdir      = memfs_rmdir,
    .statfs     = memfs_statfs,
};
```

## 参考

1. [Linux下使用fuse编写自己的文件系统_staticnetwind的专栏-CSDN博客](https://blog.csdn.net/stayneckwind2/article/details/82876330)

2. [用户态文件系统fuse学习_ty_laurel的博客-CSDN博客_fuse文件系统](https://blog.csdn.net/ty_laurel/article/details/51685193?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control)

3. [FUSE文件系统 - 内核工匠 - 博客园](https://www.cnblogs.com/Linux-tech/p/14110335.html)

4. 
