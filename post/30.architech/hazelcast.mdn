# Hazelcast

## 简介

Hazelcast作为一个高度可扩展的数据分发和集群平台，提供了高效的、可扩展的分布式数据存储、数据缓存。Hazelcast提供了十分友好的接口供开发者选择，如Map，Queue，ExecutorService, Lock和Jcache。 
Hazelcast的稳定性很高，分布式应用可以使用Hazelcast进行存储数据、同步数据、发布订阅消息等。基于Java开发的，其客户端有Java, C/C++, .NET以及REST。Hazelcast同时也支持memcache协议。它很好的支持了Hibernate，可以很容易的在当今流行的数据库系统中应用。 

## 特性

- 自治集群（无中心化）
- 简单，只要引入jar包
- 节点对等（Peer-to-Peer） 
- 线性扩展
- JCache (JSR 107)
- 

## 功能

- 提供java.util.{Queue, Set, List, Map}分布式实现。
- 提供java.util.concurrency.locks.Lock分布式实现。
- 提供java.util.concurrent.ExecutorService分布式实现。
- 提供用于一对多关系的分布式MultiMap。
- 提供用于发布/订阅的分布式Topic（主题）。
- 通过JCA与J2EE容器集成和事务支持。
- 提供用于安全集群的Socket层加密。
- 支持同步和异步持久化。
- 为Hibernate提供二级缓存Provider 。
- 支持动态HTTP Session集群。
- 利用备份实现动态分割。
- 支持动态故障恢复。

## 存储

Hazelcast 服务之间是端对端的，没有主从之分，因此也不存在单点故障。集群中所有的节点都存储等量的数据以及进行等量的计算。Hazelcast 缺省情况下把数据分为 271 个区。这个值可配置于系统属性 *hazelcast.partition.count。* 对于一个给定的键，在经过序列号、哈希并对分区总数取模之后能得到此键对应的分区号。所有的分区等量的分布与集群中所有的节点中，每个分区对应的备份也同样分布在集群中。Hazelcast 使用哈希算法进行数据分区。

## 使用方式

- 嵌入式：Hazelcast 服务器的 jar 包被导入宿主应用程序，服务器启动并存在于各个宿主应用中。优点是可以更低延迟的数据访问。
- 客户端服务器：Hazelcast 客户端的 jar 包被导入宿主应用程序，服务器 jar 包独立运行于 JVM 中。优点是更容易调试以及更可靠的性能，最重要的是更好的扩展性。

## 使用场景

* 分布式缓存，通常使用在数据库之前的那一层 
* 缓存服务器 
* NoSql的数据存储 
* Spring cache 
* 微服务的结构 
* 储存临时数据，如web的session等 
