<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>滴水穿石 on Justice的小站</title><link>https://justice.bj.cn/post/</link><description>Recent content in 滴水穿石 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://justice.bj.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title>ChubaoFS Master</title><link>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-master/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-master/</guid><description>ChubaoFS Master 简介 MetaNode管理 Metanode 是否可写 节点存活（isActive）: 心跳上报时间间隔&amp;lt;30s的节点isActive为false; met</description></item><item><title>Golang 调试工具</title><link>https://justice.bj.cn/post/14.language/golang/golang%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</guid><description>Golang 调试工具 简介 Golang程序的调试工具包括gdb调试、go pprof性能调试工具及go gc分析工具。熟练掌握这些工具的基本用法对golan</description></item><item><title>Golang基础</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</guid><description>Golang基础 简介 初始化 规则： 每个package 只会被初始化一次； 同一个 package，不同文件是按照文件名的顺序来初始化； 不能循环 import , 例</description></item><item><title>Rust 数据类型</title><link>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>Rust 数据类型 简介 Rust的数据类型分为标量(scalar)类型和复合(compound)类型、集合类型。 标量类型(scalar)：表示一个单独</description></item><item><title>Rust迭代器</title><link>https://justice.bj.cn/post/14.language/rust/rust%E8%BF%AD%E4%BB%A3%E5%99%A8/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid><description>Rust迭代器 简介 迭代器（iterator）负责遍历序列中的每一项和决定序列何时结束的逻辑； 迭代器是 惰性的（lazy），在调用方法使用迭代器</description></item><item><title>Systemd</title><link>https://justice.bj.cn/post/70.tool/systemd/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/systemd/</guid><description>Systemd 简介 用法 1 2 3 4 5 6 7 8 $ systemctl reload $ service &amp;lt;SERVICE_NAME&amp;gt; start # $ journalctl -b -u &amp;lt;SERVICE_NAME&amp;gt;.service 参考</description></item><item><title>专题10：动态规划</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9810-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9810-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid><description>专题10：动态规划 简介 动态规划问题的难点在于对问题进行子问题的合理划分， 函数定义：定义问题目标函数，目标函数可通过子目标函数组合而成，子函数</description></item><item><title>专题12-区间问题</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9812.%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9812.%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/</guid><description>专题12:区间问题 简介 相关题目 56.合并区间 435.无重叠区间</description></item><item><title>专题13：括号配对问题</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9813.%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9813.%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/</guid><description>专题13：括号配对问题 简介 相关题目 20.有效括号；栈 22.括号生成；回溯法 32.最长有效括号；</description></item><item><title>专题1：二叉树相关</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</guid><description>专题1：二叉树相关 简介 二叉树是一个递归的结构 相关题目 前序遍历 94.二叉树的中序遍历 后序遍历 102.二叉树的层序遍历； 路径和 543.二叉树的直</description></item><item><title>专题4：链表相关</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%984%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%984%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3/</guid><description>专题4：链表相关 相关题目 206.反转链表 21.合并两个有序链表 23.合并k个有序链表 24.两两交换链表中 86.分割链表 61.旋转链表 92.反</description></item><item><title>专题5：买卖股票</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%985%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9B%B8%E5%85%B3/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%985%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9B%B8%E5%85%B3/</guid><description>专题5：买卖股票 简介 相关题目 买卖股票最佳时机（1次买卖机会） 买卖股票最佳时机II（不限次数买卖机会） 买卖股票最佳时机III（限2次）</description></item><item><title>专题6：序列和子串</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%986%E5%BA%8F%E5%88%97%E5%92%8C/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%986%E5%BA%8F%E5%88%97%E5%92%8C/</guid><description>专题6：序列和子串 相关题目 53.最大子序列和 300.最长递增子序列</description></item><item><title>图解 Golang 的 GC 算法</title><link>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</guid><description>图解 Golang 的 GC 算法 简介 虽然 Golang 的 GC 自打一开始，就被人所诟病，但是经过这么多年的发展，Golang 的 GC 已经改善了非常多，变得非常优秀了。 以下是 Golang GC 算</description></item><item><title>括号生成</title><link>https://justice.bj.cn/post/leetcode/doc/22.%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/22.%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</guid><description>括号生成 Category Difficulty Likes Dislikes algorithms Medium (73.37%) 770 - Tags string | backtracking Companies google | uber | zenefits 给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。 例如，给</description></item><item><title>文件系统测试</title><link>https://justice.bj.cn/post/40.storage/%E5%AD%98%E5%82%A8%E6%B5%8B%E8%AF%95/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/%E5%AD%98%E5%82%A8%E6%B5%8B%E8%AF%95/</guid><description>文件系统测试 简介 1 2 3 # 安装mpirun openmpi 安装rsh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/bin/sh yum -y install rsh rsh-server systemctl restart rsh.socket systemctl restart rlogin.socket systemctl restart rexec.socket cat &amp;gt; /root/.rhosts &amp;lt;&amp;lt;EOF 192.168.100.210 root</description></item><item><title>最接近的三数之和</title><link>https://justice.bj.cn/post/leetcode/doc/16.%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/16.%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</guid><description>最接近的三数之和 Category Difficulty Likes Dislikes algorithms Medium (43.03%) 367 - Tags array | two-pointers Companies bloomberg 给定一个包括 n 个整数的数组 nums和 一个目标值 target。找出 nums中的三个整数，使得它们</description></item><item><title>有效的括号</title><link>https://justice.bj.cn/post/leetcode/doc/20.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/20.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</guid><description>有效的括号 Category Difficulty Likes Dislikes algorithms Easy (40.21%) 1262 - Tags string | stack Companies 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。 有效字符串需</description></item><item><title>逆波兰表达式求值</title><link>https://justice.bj.cn/post/leetcode/doc/150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</guid><description>逆波兰表达式求值 Category Difficulty Likes Dislikes algorithms Medium (49.14%) 111 - Tags stack Companies linkedin 根据逆波兰表示法，求表达式的值。 有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆</description></item><item><title>Bash基础</title><link>https://justice.bj.cn/post/14.language/shell/bash%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/bash%E5%9F%BA%E7%A1%80/</guid><description>Bash基础 简介 特殊变量 1 2 3 4 5 6 7 $# # 参数个数 $@ # 所有参数, 每个参数分别用&amp;#34;&amp;#34;包含 $* # 所有参数，所有参数使用一个外层&amp;#</description></item></channel></rss>