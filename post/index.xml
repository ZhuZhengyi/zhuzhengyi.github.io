<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>滴水穿石 on Justice的小站</title><link>https://justice.bj.cn/post/</link><description>Recent content in 滴水穿石 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://justice.bj.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang Runtime</title><link>https://justice.bj.cn/post/14.language/golang/golang-runtime/</link><pubDate>Fri, 24 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-runtime/</guid><description>Golang Runtime 简介 Go调度器的演化 源码分析 Go 程序启动后需要对自身运行时进行初始化，其真正的程序入口由 runtime 包控制。 以 AMD64 架构上的 Linux 和 macOS 为例，分别位于：src</description></item><item><title>Golang基础</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 24 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</guid><description>Golang基础 简介 初始化 规则： 每个package 只会被初始化一次； 同一个 package，不同文件是按照文件名的顺序来初始化； 不能循环 import , 例</description></item><item><title>全面介绍数砖开发 Delta Lake 的第一篇论文</title><link>https://justice.bj.cn/post/30.architech/deltalake/</link><pubDate>Fri, 24 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/deltalake/</guid><description>全面介绍数砖开发 Delta Lake 的第一篇论文 摘要 云对象存储如Amazon S3，作为目前最大且最节约成本的存储系统，用于实现数据仓库和数据湖的存储非常具有</description></item><item><title>Golang 调试</title><link>https://justice.bj.cn/post/14.language/golang/golang%E8%B0%83%E8%AF%95/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E8%B0%83%E8%AF%95/</guid><description>Golang 调试 简介 Golang程序的调试工具包括gdb调试、go pprof性能调试工具及go gc分析工具。熟练掌握这些工具的基本用法对golang的</description></item><item><title>Java锁</title><link>https://justice.bj.cn/post/14.language/java/java%E9%94%81/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/java/java%E9%94%81/</guid><description>Java锁 简介 乐观锁vs悲观锁 对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁</description></item><item><title>Rust 数据类型</title><link>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>Rust 数据类型 简介 Rust的数据类型分为标量(scalar)类型和复合(compound)类型、集合类型。 标量类型(scalar)：表示一个单独</description></item><item><title>专题- 区间问题</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9812.%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9812.%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/</guid><description>专题: 区间问题 简介 相关题目 56.合并区间 435.无重叠区间</description></item><item><title>专题：买卖股票</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%985%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9B%B8%E5%85%B3/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%985%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9B%B8%E5%85%B3/</guid><description>专题：买卖股票 简介 相关题目 买卖股票最佳时机（1次买卖机会） 买卖股票最佳时机II（不限次数买卖机会） 买卖股票最佳时机III（限2次）</description></item><item><title>专题：序列和子串</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%986%E5%BA%8F%E5%88%97%E5%92%8C/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%986%E5%BA%8F%E5%88%97%E5%92%8C/</guid><description>专题：序列和子串 相关题目 53.最大子序列和 300.最长递增子序列</description></item><item><title>专题：括号问题</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9813.%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9813.%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/</guid><description>专题：括号问题 简介 相关题目 20.有效括号；栈 22.括号生成；回溯法 32.最长有效括号；</description></item><item><title>专题：跳跃游戏</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%987.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%987.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</guid><description>专题：跳跃游戏 简介 题目 55.跳跃游戏： 45.跳跃游戏II: 贪心法</description></item><item><title>专题：链表</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%984%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%984%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3/</guid><description>专题：链表 相关题目 206.反转链表 21.合并两个有序链表 23.合并k个有序链表 24.两两交换链表中 86.分割链表 61.旋转链表 92.反转链表</description></item><item><title>查找算法</title><link>https://justice.bj.cn/post/13.algorithm/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</guid><description>查找算法 简介 查找算法是计算机科学中最基本的算法之一，其用途在查找给定序列中的特定值。 二分查找 二分查找法是对有序序列的快速查找方法，其时间复杂</description></item><item><title>跳跃游戏</title><link>https://justice.bj.cn/post/leetcode/doc/55.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/55.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</guid><description>跳跃游戏 Category Difficulty Likes Dislikes algorithms Medium (38.11%) 469 - Tags array | greedy Companies microsoft 给定一个非负整数数组，你最初位于数组的第一个位置。 数组中的每个元素代表你在该位置可以跳跃的最大长度。 判</description></item><item><title>跳跃游戏 II</title><link>https://justice.bj.cn/post/leetcode/doc/45.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8Fii/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/45.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8Fii/</guid><description>跳跃游戏 II Category Difficulty Likes Dislikes algorithms Medium (43.11%) 1270 - Tags array | greedy Companies Unknown 给你一个非负整数数组 nums ，你最初位于数组的第一个位置。 数组中的每个元素代表你在该位置可以跳跃的最大长度</description></item><item><title>C++11左值与右值</title><link>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid><description>C++11左值与右值 简介 在C++11之前，表达式的值按出现在=的位置不同可简单分为左值和右值2种； 在C++11中，为了实现函数参数传递的零拷</description></item><item><title>C++基础</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</guid><description>C++基础 简介 构造析构 默认函数(Defaulted 函数) 1 2 3 4 5 6 Object() {} //默认构造函数 ~Object() {} //析构函数 Object(const Object&amp;amp;) {} //复制构造函数 Object(Object&amp;amp;&amp;amp;) {} //移动构</description></item><item><title>Rust Trait</title><link>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</guid><description>Rust Trait 简介 trait(特性) 是一组方法的集合，实现trait的类型可以访问该 trait 中定义的其他方法。 任何类型都可以实现 trait； 要点 Trait必</description></item><item><title>STL容器</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl%E5%AE%B9%E5%99%A8/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl%E5%AE%B9%E5%99%A8/</guid><description>STL容器 简介 容器库是类模板与算法的汇集，允许程序员简单地访问常见数据结构，例如队列、链表和栈。有三类容器——顺序容器、关联容器和无序关联容</description></item><item><title>智能指针</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid><description>智能指针 简介 智能指针(smart pointer)是C++用来自动管理对象生命周期的模板类； 头文件 #include &amp;lt;memory&amp;gt;； unique_ptr 独占指针，</description></item></channel></rss>