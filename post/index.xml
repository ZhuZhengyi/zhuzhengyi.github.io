<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>滴水穿石 on Justice的小站</title><link>https://justice.bj.cn/post/</link><description>Recent content in 滴水穿石 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://justice.bj.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title>blockchain_rust</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%B9%8Bblockchain/</link><pubDate>Sun, 12 Jun 2022 20:44:24 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%B9%8Bblockchain/</guid><description>blockchain_rust 简介 blockchain_rust是github上一个基于rust的blockchain实现； 基本概念 block： 操作 1 2 3 4 5 6 7 8 9 10</description></item><item><title>IPFS(星际文件系统)</title><link>https://justice.bj.cn/post/60.blockchain/ipfs%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 12 Jun 2022 20:44:24 +0800</pubDate><guid>https://justice.bj.cn/post/60.blockchain/ipfs%E5%9F%BA%E7%A1%80/</guid><description>IPFS(星际文件系统) 简介 IPFS(InterPlanetary File System，星际文件系统), 是一个对等的分布式文件系统，用于存储和访问文件、网站、应用程序和数据。IPFS</description></item><item><title>Kademlia算法</title><link>https://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</link><pubDate>Sun, 12 Jun 2022 20:44:24 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</guid><description>Kademlia算法 简介 Kademlia算法是2002年由Petar Maymounkov 和 David Mazières 所设计，以异或距离来对哈希表进行分层是其特点 Kad</description></item><item><title>Rust模块及包管理</title><link>https://justice.bj.cn/post/14.language/rust/80.rust%E5%8C%85%E7%AE%A1%E7%90%86/</link><pubDate>Sun, 12 Jun 2022 20:44:24 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/80.rust%E5%8C%85%E7%AE%A1%E7%90%86/</guid><description>Rust模块及包管理 简介 Rust程序代码组织分为两个层级： 包(crate)：是一个独立的可编译单元； 模块(mod)：是包内代码组织单元； 包(</description></item><item><title>Rust特性(trait)</title><link>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</link><pubDate>Sun, 12 Jun 2022 20:44:24 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</guid><description>Rust特性(trait) 简介 trait(特性) 是一组方法的集合，实现trait的类型可以访问该 trait 中定义的其他方法。 任何类型都可以实现 tra</description></item><item><title>UTXO模型</title><link>https://justice.bj.cn/post/60.blockchain/utxo%E6%A8%A1%E5%9E%8B/</link><pubDate>Sun, 12 Jun 2022 20:44:24 +0800</pubDate><guid>https://justice.bj.cn/post/60.blockchain/utxo%E6%A8%A1%E5%9E%8B/</guid><description>UTXO模型 简介 UTXO(Unspent Transaction Output)是区块链中用来保存区块账户记录的方式之一。 参考</description></item><item><title>Linux系统调用之Futex</title><link>https://justice.bj.cn/post/21.linux/linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B9%8Bfutex/</link><pubDate>Mon, 06 Jun 2022 20:41:30 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B9%8Bfutex/</guid><description>Linux系统调用之Futex 简介 Futex（Fast Userspace muTexes）的缩写，由Hubertus Franke, Matthew Kirkwood, Ingo Molnar and Rusty Russell共同设计完成，</description></item><item><title>ToyDB</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%B9%8Btoydb/</link><pubDate>Mon, 06 Jun 2022 20:41:30 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%B9%8Btoydb/</guid><description>ToyDB 简介 toydb是Erik Grinaker为学习rust语言而开发的分布式sql数据库，支持分布式事务模型; 架构 toydb主要由3部分组成：</description></item><item><title>AF_XDP</title><link>https://justice.bj.cn/post/21.linux/af_xdp/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/af_xdp/</guid><description>AF_XDP 简介 AF_XDP是一种用于高性能包处理的地址簇(Address Family)。 使用XDP程序中的XDP_REDIRECT操作，可以使用bp</description></item><item><title>eBPF简史(转)</title><link>https://justice.bj.cn/post/21.linux/ebpf%E7%AE%80%E5%8F%B2/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/ebpf%E7%AE%80%E5%8F%B2/</guid><description>eBPF简史(转) 源头：一篇 1992 年的论文 考虑到 BPF 的知名度，在介绍 eBPF 之前，笔者自觉还是有必要先来回答另一个问题： 什么是 BPF? 笔者在前文中说过了，BP</description></item><item><title>Ext4文件系统架构分析(一)(转)</title><link>https://justice.bj.cn/post/21.linux/ext4%E4%BB%8B%E7%BB%8D/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/ext4%E4%BB%8B%E7%BB%8D/</guid><description>Ext4文件系统架构分析(一)(转) 本文描述Ext4文件系统磁盘布局和元数据的一些分析，同样适用于Ext3和Ext2文件系统，除了它们不支持</description></item><item><title>FUSE- linux用户空间文件系统(转)</title><link>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B9%8Bfuse/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B9%8Bfuse/</guid><description>FUSE: linux用户空间文件系统(转) 简介 架构 用户空间文件系统 是操作系统中的概念，指完全在用户态实现的文件系统。 目前Linux通过内核模块对此进</description></item><item><title>Linux IO 之 IO与网络模型</title><link>https://justice.bj.cn/post/21.linux/linux-io-%E4%B9%8B-io%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-io-%E4%B9%8B-io%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</guid><description>Linux IO 之 IO与网络模型 atomic 原子变量: x86在多核环境下，多核竞争数据总线时，提供Lock指令进行锁总线操作。保证“读-修改-写”的操作在芯片级的</description></item><item><title>Linux IO 之 文件系统的架构(转)</title><link>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9E%B6%E6%9E%84/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9E%B6%E6%9E%84/</guid><description>Linux IO 之 文件系统的架构(转) VFS和文件系统总结 一切都是文件： VFS 文件系统的设计，类似 抽象基类，面向对象的思想。 虚函数都必须由底层派生出的实例实</description></item><item><title>Linux 网络包发送过程(转)</title><link>https://justice.bj.cn/post/21.linux/linux-%E7%BD%91%E7%BB%9C%E5%8F%91%E5%8C%85%E8%BF%87%E7%A8%8B%E5%9B%BE%E8%A7%A3/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-%E7%BD%91%E7%BB%9C%E5%8F%91%E5%8C%85%E8%BF%87%E7%A8%8B%E5%9B%BE%E8%A7%A3/</guid><description>Linux 网络包发送过程(转) 在开始今天的文章之前，我先来请大家思考几个小问题。 问1：我们在查看内核发送数据消耗的 CPU 时，是应该看 sy 还是 si ？ 问2：为什</description></item><item><title>Linux内存管理</title><link>https://justice.bj.cn/post/21.linux/linux%E5%86%85%E6%A0%B8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%BC%99%E4%BC%B4%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux%E5%86%85%E6%A0%B8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%BC%99%E4%BC%B4%E7%AE%97%E6%B3%95/</guid><description>Linux内存管理 简介 kernel的内存管理是个2层分层系统，从下往上依次为： 第一层为全部物理内存：其管理器为伙伴系统，最小管理单位为pag</description></item><item><title>Linux文件系统基础知识(转)</title><link>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</guid><description>Linux文件系统基础知识(转) 文件系统的基本组成 文件系统是操作系统中负责管理持久数据的子系统，说简单点，就是负责把用户的文件存到磁盘硬件中</description></item><item><title>Rust安装配置</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>Rust安装配置 简介 rust官方提供了 安装 rust官方提供了rustup 1 2 3 4 5 6 7 8 9 10 11 12 # 安装rustup, rustc, cargo curl https://sh.rustup.rs -sSf | sh # 安装源码</description></item><item><title>内存分配器</title><link>https://justice.bj.cn/post/21.linux/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/</guid><description>内存分配器 简介 系统的物理内存是有限的，而对内存的需求是变化的, 程序的动态性越强，内存管理就越重要，选择合适的内存管理算法会带来明显的性能提升</description></item><item><title>Rust基础</title><link>https://justice.bj.cn/post/14.language/rust/01.rust%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 03 Jun 2022 16:07:01 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/01.rust%E5%9F%BA%E7%A1%80/</guid><description>Rust基础 简介 Rust是由Graydon Hoare于2009年发起的一门系统级、编译型编程语言，其设计准则为“安全，并发，实用”，支持函数</description></item></channel></rss>