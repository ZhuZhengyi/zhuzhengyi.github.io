<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>滴水穿石 on Justice的小站</title><link>https://justice.bj.cn/post/</link><description>Recent content in 滴水穿石 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://justice.bj.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title>apache arrow</title><link>https://justice.bj.cn/post/30.architech/arrow/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/arrow/</guid><description>apache arrow 简介 Apache Arrow 是一种基于内存的列式数据格式； 为了解决系统到系统之间的数据传输问题， 2016 年 2 月 Arrow 被提升为 Apache 的顶级项目。 和protobuf相比，pr</description></item><item><title>Apache Avro</title><link>https://justice.bj.cn/post/30.architech/avro/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/avro/</guid><description>Apache Avro 简介 Avro是Hadoop的一个数据序列化系统; 由Hadoop的创始人Doug Cutting（也是Lucene，Nutch等项目的创始人</description></item><item><title>Apache Hudi</title><link>https://justice.bj.cn/post/30.architech/hudi/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/hudi/</guid><description>Apache Hudi 简介 Hudi，全称是Hadoop Upsert Delete and Incremental, 最初的设计目标：在hadoop上实现update和delete操作； Hudi通过COW和MOR两</description></item><item><title>B-Link-Tree</title><link>https://justice.bj.cn/post/12.data_struct/tree/b-link-tree/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/b-link-tree/</guid><description>B-Link-Tree 简介 B-Link-Tree是B+ Tree的一个变种；优化了B+ Tree结构调整时的锁粒度，提升并发度，保持高并发下的性能稳定 在中间节点增加</description></item><item><title>B-Tree, B+Tree, B*Tree</title><link>https://justice.bj.cn/post/12.data_struct/tree/b-tree/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/b-tree/</guid><description>B-Tree, B+Tree, B*Tree B-Tree B-Tree(B树)又叫平衡多路查找树(Balance Multiple Search Tree); 是一种平衡多叉树； m阶B-Tree的每个节点最多有m个子节点； 特性 一棵 m</description></item><item><title>MySQL</title><link>https://justice.bj.cn/post/30.architech/mysql/mysql%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/mysql/mysql%E5%9F%BA%E7%A1%80/</guid><description>MySQL 简介 特点 设计范式 1NF: 原子性，保证每列不可再分, 保证表中无表； 2NF: 消除部分依赖，在满足1NF上，每个属性完全依赖于主键； 3NF: 消除传递依赖，在满足2</description></item><item><title>MySQL 索引</title><link>https://justice.bj.cn/post/30.architech/mysql/mysql%E7%B4%A2%E5%BC%95/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/mysql/mysql%E7%B4%A2%E5%BC%95/</guid><description>MySQL 索引 简介 mysql中的索引是用于提升查询效率的数据结构，其通过额外的存储空间换取查询的效率，通过索引可以快速的定位存储的数据，而不用每次都</description></item><item><title>Rust错误处理</title><link>https://justice.bj.cn/post/14.language/rust/40.rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/40.rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid><description>Rust错误处理 简介 Rust 将错误两个主要类别： 可恢复错误（recoverable） ： 由 Result&amp;lt;T, E&amp;gt; 表示，代表向用户报告错误和重试操作是合理的情况，比如未</description></item><item><title>SQL 查询引擎</title><link>https://justice.bj.cn/post/30.architech/sql-%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/sql-%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B/</guid><description>SQL 查询引擎 简介 select 这才是完整的SELECT查询 SELECT DISTINCT column, AGG_FUNC(*column_or_expression*), … FROM mytable JOIN another_table ON mytable.column = another_table.column WHERE *constraint_expression* GROUP BY column HAVING *constraint_expression* ORDER BY *column* ASC/DESC LIMIT *count* OFFSET *COUNT*; where 和 having区别 “Where” 是一个</description></item><item><title>ToyDB</title><link>https://justice.bj.cn/post/30.architech/toydb/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/toydb/</guid><description>ToyDB 简介 toydb是Erik Grinaker 为学习rust语言而开发的分布式sql数据库，支持分布式事务模型; 架构 toydb主要由两部分组成： toydb: 多个节点组成</description></item><item><title>红黑树(RB-Tree)</title><link>https://justice.bj.cn/post/12.data_struct/tree/rb-tree/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/tree/rb-tree/</guid><description>红黑树(RB-Tree) 定义 红黑树是一种二叉平衡树。 性质 每个节点要么是黑色，要么是红色； Root 节点是黑色； 每个叶子节点（NIL）是黑色； 每个红色</description></item><item><title>CubeFS Bcache</title><link>https://justice.bj.cn/post/40.storage/chubaofs/cubefs-bcache/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/chubaofs/cubefs-bcache/</guid><description>CubeFS Bcache 简介 CubeFS 3.0.0-beta增加了bcache功能， 新增blockcache节点，提供本地缓存能力； 新增preload模块，用于预加载； 增</description></item><item><title>Golang Channel</title><link>https://justice.bj.cn/post/14.language/golang/golang-channel/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-channel/</guid><description>Golang Channel 简介 Go语言channel是first-class的，可以被存储到变量中，可以作为参数传递给函数，也可以作为函数的返回值返回; chann</description></item><item><title>LRU缓存机制</title><link>https://justice.bj.cn/post/leetcode/doc/146.lru%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/146.lru%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid><description>LRU缓存机制 Category Difficulty Likes Dislikes algorithms Medium (44.70%) 332 - Tags design Companies amazon | bloomberg | facebook | google | microsoft | palantir | snapchat | twitter | uber | yahoo | zenefits 运用你所掌握的数据结构，设计和实现一个 LRU (最近最少使用) 缓存</description></item><item><title>Redis基础</title><link>https://justice.bj.cn/post/30.architech/redis/redis%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/redis/redis%E5%9F%BA%E7%A1%80/</guid><description>Redis基础 简介 Redis（Remote Dictionary Server，远程数据服务）是一款用C语言编写的内存高速缓存key-value存储系统； 支持丰富</description></item><item><title>Rust Trait</title><link>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</guid><description>Rust Trait 简介 trait(特性) 是一组方法的集合，实现trait的类型可以访问该 trait 中定义的其他方法。 任何类型都可以实现 trait； 要点 Trait必</description></item><item><title>Rust 基础</title><link>https://justice.bj.cn/post/14.language/rust/01.rust%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/01.rust%E5%9F%BA%E7%A1%80/</guid><description>Rust 基础 简介 Rust是由Graydon Hoare于2009年发起的一门系统级、编译型编程语言，其设计准则为“安全，并发，实用”，支持函数式，并</description></item><item><title>Rust 数据类型</title><link>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>Rust 数据类型 简介 Rust的数据类型分为标量(scalar)类型和复合(compound)类型、集合类型。 标量类型(scalar)：表示一个单独</description></item><item><title>Rust指针</title><link>https://justice.bj.cn/post/14.language/rust/10.rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/10.rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid><description>Rust指针 简介 Rust中的指针 裸指针 rust裸指针就像C++中的指针一样, 类型 *mut T和 *const t； 使用裸指针是不安全的，Rust不会追踪它指向的内</description></item><item><title>Spark 基础</title><link>https://justice.bj.cn/post/30.architech/spark/spark%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/spark/spark%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>Spark 基础 简介 Spark 是一种快速、通用、可扩展的大数据分析引擎，2009 年诞生于加州大学伯克利分校 AMPLab，2010 年开源，2013 年 6 月成为 Apache 孵</description></item></channel></rss>