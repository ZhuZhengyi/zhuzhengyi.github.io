<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>滴水穿石 on Justice的小站</title>
    <link>http://justice.bj.cn/post/</link>
    <description>Recent content in 滴水穿石 on Justice的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="http://justice.bj.cn/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>红黑树</title>
      <link>http://justice.bj.cn/post/12.data_struct/tree/rb-tree/</link>
      <pubDate>Fri, 10 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/tree/rb-tree/</guid>
      <description>红黑树(RB-Tree) 定义 红黑树是一种二叉平衡树。 性质 每个节点要么是黑色，要么是红色。 Root 节点是黑色。 每个叶子节点（NIL）是黑色。 每个红色</description>
    </item>
    
    <item>
      <title>LSMTree日志结构合并树</title>
      <link>http://justice.bj.cn/post/12.data_struct/tree/lsm-tree/</link>
      <pubDate>Thu, 09 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/tree/lsm-tree/</guid>
      <description>日志结构合并树(LSM-Tree) 简介 LSM-Tree全称Log Structured Merge Tree，是Google在2006年开源其BigTable中引入的一种数</description>
    </item>
    
    <item>
      <title>BIT-树状数组</title>
      <link>http://justice.bj.cn/post/12.data_struct/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</guid>
      <description>树状数组(BIT) 简介 树状数组或二元索引树（英语：Binary Indexed Tree），又以其发明者命名为 FenwickFenwick 树。最早由 PeterM.FenwickPeterM.Fenwick 于 1994 年以 《A New Data Structure for Cumulative Frequency Tabl</description>
    </item>
    
    <item>
      <title>B树</title>
      <link>http://justice.bj.cn/post/12.data_struct/tree/b-tree/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/tree/b-tree/</guid>
      <description>B-Tree 简介 B 树又叫平衡多路查找树。主要应用于数据库，文件等 一棵 m 阶的 B 树 (m 叉树)的特性如下： 树中每个结点最多含有 m 个孩子（m&amp;gt;=2）； 除根</description>
    </item>
    
    <item>
      <title>Disruptor</title>
      <link>http://justice.bj.cn/post/12.data_struct/%E9%AB%98%E6%95%88%E6%97%A0%E9%94%81%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97disruptor/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/%E9%AB%98%E6%95%88%E6%97%A0%E9%94%81%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97disruptor/</guid>
      <description>Disruptor: 一种高效无锁内存队列 简介 Disruptor 是 LMAX 公司开源的一个高效的内存无锁队列。</description>
    </item>
    
    <item>
      <title>kafka时间轮算法</title>
      <link>http://justice.bj.cn/post/12.data_struct/%E6%97%B6%E9%97%B4%E8%BD%AE/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/%E6%97%B6%E9%97%B4%E8%BD%AE/</guid>
      <description>Kafka 时间轮算法 Kafka中存在一些定时任务(DelayedOperation)，如DelayedFetch、DelayedProduce、De</description>
    </item>
    
    <item>
      <title>MassTree</title>
      <link>http://justice.bj.cn/post/12.data_struct/tree/masstree/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/tree/masstree/</guid>
      <description>MassTree 简介 masstree 来源于 2012 年发表的论文(Cache craftiness for fast multicore key-value storage)，可以理解为 B+ Tree 和 Radix Tree 的混合体，即将键切分成多个部分，每个部分为一个节点；</description>
    </item>
    
    <item>
      <title>MerkleTree</title>
      <link>http://justice.bj.cn/post/12.data_struct/tree/merkle-tree/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/tree/merkle-tree/</guid>
      <description>Merkle Tree 简介 Merkle Tree 是一种 Hash Tree，由 Ralph Merkle 在 1979 年发明。 Merkle Tree 的每个非叶节点通过其子节点的标记或者值（子节点为叶节点）的哈希值来进行标注，为大型的数据</description>
    </item>
    
    <item>
      <title>ProtoBuf</title>
      <link>http://justice.bj.cn/post/12.data_struct/protobuf/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/protobuf/</guid>
      <description>ProtoBuf 简介 protocol buffers 是一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于（数据）通信协议、数据存储等。 特点 语言无关、平台无关。即 ProtoBuf 支持 Ja</description>
    </item>
    
    <item>
      <title>Radix Tree</title>
      <link>http://justice.bj.cn/post/12.data_struct/tree/radixtree/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/tree/radixtree/</guid>
      <description>基数树(Radix Tree) 简介 Radix tree(也被称为 radix trie，或者 compact prefix tree)是一种空间优化的前缀树(prefix tree)数据结构。 针对这对这</description>
    </item>
    
    <item>
      <title>RoaringBitmap</title>
      <link>http://justice.bj.cn/post/12.data_struct/31.roaringbitmap/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/31.roaringbitmap/</guid>
      <description>RoaringBitmap:高效压缩位图的原理与应用 简介 RoaringBitmap（简称为 RBM）是 2016 年由 S. Chambi、D. Lemire、</description>
    </item>
    
    <item>
      <title>TAILQ-双向有尾队列</title>
      <link>http://justice.bj.cn/post/12.data_struct/tailq/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/tailq/</guid>
      <description>TAILQ: 双向有尾队列 简介 TAILQ(双向有尾队列)是 FreeBSD/linux 内核对双向队列操作的一种抽象，在/usr/include/sys/queue.h 文件中实现各</description>
    </item>
    
    <item>
      <title>分布式哈希表</title>
      <link>http://justice.bj.cn/post/12.data_struct/40.%E5%88%86%E5%B8%83%E5%BC%8F%E5%93%88%E5%B8%8C%E8%A1%A8dht/</link>
      <pubDate>Wed, 08 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/40.%E5%88%86%E5%B8%83%E5%BC%8F%E5%93%88%E5%B8%8C%E8%A1%A8dht/</guid>
      <description>分布式哈希表(DHT) 简介 分布式哈希表(DHT, Distributed Hash Table)是分布式系统中，用来将一个键（key）的集合分散到所有节点。这里的节点类似哈</description>
    </item>
    
    <item>
      <title>跳表</title>
      <link>http://justice.bj.cn/post/12.data_struct/20.%E8%B7%B3%E8%A1%A8/</link>
      <pubDate>Tue, 07 Jul 2020 00:02:06 +0800</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/20.%E8%B7%B3%E8%A1%A8/</guid>
      <description>跳表(skiplist) 简介 跳表(SkipList)由 William Pugh 于 1990 年发明。他在 Communications of the ACM June 1990, 33(6) 668-676 上发表了 Skip lists: a probabilistic alternative to balanced trees，在该论文中详细解</description>
    </item>
    
    <item>
      <title></title>
      <link>http://justice.bj.cn/post/12.data_struct/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/readme/</guid>
      <description>数据结构 基础数据结构 比特/字节 数组 树 B 树 红黑树 字典树 线段树</description>
    </item>
    
    <item>
      <title></title>
      <link>http://justice.bj.cn/post/12.data_struct/tree/segment-tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/tree/segment-tree/</guid>
      <description>线段树(Segment-Tree) 简介 线段树（Segment Tree）是一种二叉树形数据结构，1977 年由 Jon Louis Bentley 发明，用以存储区间或线段，并</description>
    </item>
    
    <item>
      <title></title>
      <link>http://justice.bj.cn/post/12.data_struct/tree/trietree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://justice.bj.cn/post/12.data_struct/tree/trietree/</guid>
      <description>TrieTree(字典树) 简介 Trie Tree前缀树或字典树，是一种有序树，用于保存关联数组。 其中的键通常是字符串。与二叉查找树不同，键不是直接保</description>
    </item>
    
    <item>
      <title></title>
      <link>http://justice.bj.cn/post/13.algorithm/jumpconsistenthash%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://justice.bj.cn/post/13.algorithm/jumpconsistenthash%E7%AE%97%E6%B3%95/</guid>
      <description>Jump一致性哈希算法 Jump consistent hash是一种一致性哈希算法, 此算法零内存消耗，均匀分配，快速，并且只有5行代码。 这个算法是 Google 的 John Lamping 和 Eric Veach 创造的。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://justice.bj.cn/post/13.algorithm/kademlia%E7%AE%97%E6%B3%95/</guid>
      <description>Kademlia算法 Kademlia算法是一种分布式存储及路由的算法。 什么是分布式存储？试想一下，一所1000人的学校，现在学校突然决定拆掉</description>
    </item>
    
    <item>
      <title></title>
      <link>http://justice.bj.cn/post/13.algorithm/kmp%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://justice.bj.cn/post/13.algorithm/kmp%E7%AE%97%E6%B3%95/</guid>
      <description>KMP算法 简介 KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt共同发明； KMP算法的关键</description>
    </item>
    
  </channel>
</rss>
