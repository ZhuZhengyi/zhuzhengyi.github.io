<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>滴水穿石 on Justice的小站</title><link>https://justice.bj.cn/post/</link><description>Recent content in 滴水穿石 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://justice.bj.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang 内存管理</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>Golang 内存管理 简介 Golang内存管理采用类似tcmalloc的分级分配算法，主要由MHeap、MCentral、MCache 3 级组成。按分配对</description></item><item><title>Golang之syscall</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bsyscall/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bsyscall/</guid><description>Golang之syscall 简介 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─</description></item><item><title>MySQL</title><link>https://justice.bj.cn/post/30.architech/mysql/mysql%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/30.architech/mysql/mysql%E5%9F%BA%E7%A1%80/</guid><description>MySQL 简介 特点 设计范式 1NF: 原子性，保证每列不可再分, 保证表中无表； 2NF: 消除部分依赖，在满足1NF上，每个属性完全依赖于主键； 3NF: 消除传递依赖，在满足2</description></item><item><title>专题：二叉树</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</guid><description>专题：二叉树 简介 二叉树是一个递归的结构 相关题目 题目 难度 解题思路 94.二叉树的中序遍历 ** 递归，栈 100.相同的树 ** 101.对称二叉树 * 102.</description></item><item><title>二叉搜索树的最近公共祖先</title><link>https://justice.bj.cn/post/leetcode/doc/235.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/235.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid><description>二叉搜索树的最近公共祖先 Category Difficulty Likes Dislikes algorithms Easy (66.85%) 743 - Tags tree Companies amazon | facebook | microsoft | twitter 给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖</description></item><item><title>二叉树的最小深度</title><link>https://justice.bj.cn/post/leetcode/doc/111.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/111.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</guid><description>二叉树的最小深度 Category Difficulty Likes Dislikes algorithms Easy (49.24%) 656 - Tags tree | depth-first-search | breadth-first-search Companies Unknown 给定一个二叉树，找出其最小深度。 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。 *</description></item><item><title>删除链表中的节点</title><link>https://justice.bj.cn/post/leetcode/doc/237.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/237.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</guid><description>删除链表中的节点 Category Difficulty Likes Dislikes algorithms Easy (85.71%) 1086 - Tags linked-list Companies adobe | apple | microsoft 请编写一个函数，用于 删除单链表中某个特定节点 。在设计函数时需要注意，你无法访问链表的头节点</description></item><item><title>另一棵树的子树</title><link>https://justice.bj.cn/post/leetcode/doc/527.%E5%8F%A6%E4%B8%80%E6%A3%B5%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/527.%E5%8F%A6%E4%B8%80%E6%A3%B5%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91/</guid><description>另一棵树的子树 Category Difficulty Likes Dislikes algorithms Easy (47.45%) 629 - Tags tree Companies ebay | facebook | google 给你两棵二叉树 root 和 subRoot 。检验 root 中是否包含和 subRoot 具有相同结构和节点值的子树。如果存在，返回 true ；否则</description></item><item><title>平衡二叉树</title><link>https://justice.bj.cn/post/leetcode/doc/110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>平衡二叉树 Category Difficulty Likes Dislikes algorithms Easy (56.52%) 872 - Tags tree | depth-first-search Companies bloomberg 给定一个二叉树，判断它是否是高度平衡的二叉树。 本题中，一棵高度平衡二叉树定义为： 一个二叉树每个节点 的</description></item><item><title>翻转二叉树</title><link>https://justice.bj.cn/post/leetcode/doc/226.%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/226.%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>翻转二叉树 Category Difficulty Likes Dislikes algorithms Easy (78.84%) 1145 - Tags tree Companies Unknown 翻转一棵二叉树。 示例： 输入： 1 2 3 4 5 4 / \ 2 7 / \ / \ 1 3 6 9 输出： 1 2 3 4 5 4 / \ 7 2 / \ / \ 9 6 3</description></item><item><title>专题：买卖股票</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%985%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%985%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8/</guid><description>专题：买卖股票 简介 相关题目 买卖股票最佳时机（1次买卖机会） 买卖股票最佳时机II（不限次数买卖机会） 买卖股票最佳时机III（限2次）</description></item><item><title>专题：区间问题</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9812%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9812%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/</guid><description>专题：区间问题 简介 相关题目 56.合并区间 435.无重叠区间</description></item><item><title>专题：序列和子串</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%986%E5%BA%8F%E5%88%97%E5%92%8C/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%986%E5%BA%8F%E5%88%97%E5%92%8C/</guid><description>专题：序列和子串 简介 序列： 子串： 相关题目 53.最大子序列和 300.最长递增子序列</description></item><item><title>专题：括号问题</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9813%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9813%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98/</guid><description>专题：括号问题 简介 相关题目 20.有效括号 22.括号生成 32.最长有效括号</description></item><item><title>专题：跳跃游戏</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%987%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%987%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</guid><description>专题：跳跃游戏 简介 题目 55.跳跃游戏： 45.跳跃游戏II:</description></item><item><title>专题：链表</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%984%E9%93%BE%E8%A1%A8/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%984%E9%93%BE%E8%A1%A8/</guid><description>专题：链表 相关题目 206.反转链表 21.合并两个有序链表 23.合并k个有序链表 24.两两交换链表中 86.分割链表 61.旋转链表 92.反转链表</description></item><item><title>将有序数组转换为二叉搜索树</title><link>https://justice.bj.cn/post/leetcode/doc/108.%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/108.%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid><description>将有序数组转换为二叉搜索树 Category Difficulty Likes Dislikes algorithms Easy (76.25%) 917 - Tags tree | depth-first-search Companies airbnb 给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 高度平衡 二叉搜索树。 高</description></item><item><title>专题：动态规划</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9810-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%9810-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid><description>专题：动态规划 简介 动态规划问题的难点在于对问题进行合理划分，将大问题转变为小问题的组合，形成递推关系，从而 函数定义：定义问题目标函数，目标函</description></item><item><title>环形数组是否存在循环</title><link>https://justice.bj.cn/post/leetcode/doc/457.%E7%8E%AF%E5%BD%A2%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%BE%AA%E7%8E%AF/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/457.%E7%8E%AF%E5%BD%A2%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%BE%AA%E7%8E%AF/</guid><description>环形数组是否存在循环 Category Difficulty Likes Dislikes algorithms Medium (43.55%) 174 - Tags array | two-pointers Companies Unknown 存在一个不含 0 的 环形 数组 nums ，每个 nums[i] 都表示位于下标 i 的角色应该向前或向后移动的下标个数： 如果</description></item><item><title>相同的树</title><link>https://justice.bj.cn/post/leetcode/doc/100.%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/100.%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/</guid><description>相同的树 Category Difficulty Likes Dislikes algorithms Easy (59.91%) 753 - Tags tree | depth-first-search Companies bloomberg 给你两棵二叉树的根节点 p 和 q ，编写一个函数来检验这两棵树是否相同。 如果两个树在结构上相同，并且节点具有</description></item></channel></rss>