<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>滴水穿石 on Justice的小站</title><link>https://justice.bj.cn/post/</link><description>Recent content in 滴水穿石 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://justice.bj.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Raft算法</title><link>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/raft%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/raft%E7%AE%97%E6%B3%95/</guid><description>Raft算法 简介 Raft算法是2013年斯坦福大学的Diego Ongaro、John Ousterhout 两人发布的一致性算法，论文：《In Search of an Understandable Consensus Algor</description></item><item><title>Rust 基础</title><link>https://justice.bj.cn/post/14.language/rust/01.rust%E5%9F%BA%E7%A1%80/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/01.rust%E5%9F%BA%E7%A1%80/</guid><description>Rust 基础 简介 Rust是由Graydon Hoare于2009年发起的一门系统级、编译型编程语言，其设计准则为“安全，并发，实用”，支持函数式，并</description></item><item><title>Rust 异步编程</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%82%E6%AD%A5/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%82%E6%AD%A5/</guid><description>Rust 异步编程 简介 异步编程经历了三个阶段： 第一阶段：异步回调模式，存在回调地狱问题； 第二阶段：nodejs 中的Promise/Future模式，</description></item><item><title>Rust异步框架之Tokio</title><link>https://justice.bj.cn/post/14.language/rust/rust-tokio/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust-tokio/</guid><description>Rust异步框架之Tokio 简介 参考 tokio 高级用法 - lack 的个人博客</description></item><item><title>vlang 基础</title><link>https://justice.bj.cn/post/14.language/vlang/vlang%E5%9F%BA%E7%A1%80/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/vlang/vlang%E5%9F%BA%E7%A1%80/</guid><description>vlang 基础 简介 特点 简单（作者声称可以在不到一小时内学习 V） 快速编译（编译器只有 400kb，而且无第三方依赖） 易于开发：V 在不到一秒钟的时间内完成</description></item><item><title>Hermes算法</title><link>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/hermes%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/hermes%E7%AE%97%E6%B3%95/</guid><description>Hermes算法 简介 基本思想 特性 Strong Consistency: linearizable reads and writes Fault Tolerance: live nodes unblock via write replays after faults High Performance Reads: reads are served locally from all replicas High Performance Writes: decentralized, fully concurrent and fast 1 RTT commit RMW Support: read-modify-write atomics almost as efficient as writes Formally Verified: Hermes is model checked through TLA+</description></item><item><title>Paxos算法</title><link>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/paxos%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/paxos%E7%AE%97%E6%B3%95/</guid><description>Paxos算法 简介 Paxos算法是Leslie Lamport在1990年提出的一种基于消息传递的一致性算法。由于算法难以理解，起初并没有引起</description></item><item><title>Rust测试</title><link>https://justice.bj.cn/post/14.language/rust/rust%E6%B5%8B%E8%AF%95/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E6%B5%8B%E8%AF%95/</guid><description>Rust测试 简介 Rust测试包括单元测试、集成测试、文档测试和性能测试； 单元测试一般和相应的源码位于同一个源文件中； 单元测试mod上一般增加</description></item><item><title>Rust错误处理</title><link>https://justice.bj.cn/post/14.language/rust/40.rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/40.rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid><description>Rust错误处理 简介 Rust 将错误两个主要类别： 可恢复错误（recoverable） ： 由 Result&amp;lt;T, E&amp;gt; 表示，代表向用户报告错误和重试操作是合理的情况，比如未</description></item><item><title>一致性Hash算法</title><link>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95/</guid><description>一致性Hash算法 一致性哈希算法在 1997 年由麻省理工学院的 Karger 等人在解决分布式 Cache 中提出; 设计目标是为了解决因特网中的热点(Hot spot)问题，初</description></item><item><title>分布式事务</title><link>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid><description>分布式事务 事务 事务是用来保证一组数据操作的完整性和一致性 满足ACID 具有四种隔离级别、七种传播行为 事务隔离级别 一致性读 事务实现 2PC、3PC</description></item><item><title>分布式系统Quorum机制</title><link>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/quorum%E6%9C%BA%E5%88%B6/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/quorum%E6%9C%BA%E5%88%B6/</guid><description>分布式系统Quorum机制 简介 分布式系统由于不同节点的存在，分区(Part)不可避免。为了保证数据的可用性(A)，一般可采用多副本，因此存在</description></item><item><title>分布式系统一致性</title><link>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%80%E8%87%B4%E6%80%A7/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%80%E8%87%B4%E6%80%A7/</guid><description>分布式系统一致性 简介 分布式系统中，为了保障数据的可靠性，需要将数据冗余存储，已保证在部分节点故障是，仍能提供稳定的服务。 数据的冗余一般通过数</description></item><item><title>分布式系统时钟</title><link>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/</guid><description>分布式系统时钟 时钟 物理时钟 物理时钟：物理节点的系统时钟； 逻辑时钟：逻辑上表示事件顺序的方法； Lamport 时钟 Leslie Lamport 在1978年提出逻辑时钟的概念，并描述</description></item><item><title>Python 基础</title><link>https://justice.bj.cn/post/14.language/python/python%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/python/python%E5%9F%BA%E7%A1%80/</guid><description>Python 基础 简介 包依赖 用法 1 2 import module_name # from module_name import module1, module2 import 搜索顺序: 当前目录 如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。 如果都找不到，Pyt</description></item><item><title>查找算法</title><link>https://justice.bj.cn/post/13.algorithm/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</guid><description>查找算法 简介 查找算法是计算机科学中最基本的算法之一，其用途在查找给定序列中的特定值。 二分查找 二分查找法是对有序序列的快速查找方法，其时间复杂</description></item><item><title>MarkDown</title><link>https://justice.bj.cn/post/70.tool/markdown/</link><pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/markdown/</guid><description>MarkDown 简介 Markdown（标记向下）是一种轻量级标记语言，创始人为约翰·格鲁伯。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的X</description></item><item><title>堆排序</title><link>https://justice.bj.cn/post/13.algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/</link><pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/</guid><description>堆排序 简介 堆排序是借助于堆这个数据结构来实现排序的一种算法。 堆(heap)的性质 堆是一个完全二叉树； 堆的每个非叶子结点值均大于(大顶堆)/小</description></item><item><title>C++ 队列设计</title><link>https://justice.bj.cn/post/14.language/c++/ulities/current-queue/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/current-queue/</guid><description>C++ 队列设计 简单 Queue 同步 Queue 无锁同步 Queue</description></item><item><title>ConcurrentHashMap 原理分析</title><link>https://justice.bj.cn/post/14.language/java/concurrenthashmap/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/java/concurrenthashmap/</guid><description>ConcurrentHashMap 原理分析 简介 java 中，hash 表总共有hashmap, hashtable,concurrenthashmap等多种实现方式。hashmap是从</description></item></channel></rss>