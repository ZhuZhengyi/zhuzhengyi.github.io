<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>滴水穿石 on Justice的小站</title><link>https://justice.bj.cn/post/</link><description>Recent content in 滴水穿石 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://justice.bj.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title>最深叶节点的最近公共祖先</title><link>https://justice.bj.cn/post/leetcode/1123.%E6%9C%80%E6%B7%B1%E5%8F%B6%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</link><pubDate>Wed, 06 Sep 2023 22:56:21 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/1123.%E6%9C%80%E6%B7%B1%E5%8F%B6%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</guid><description>最深叶节点的最近公共祖先 Category Difficulty Likes Dislikes algorithms Medium (71.90%) 220 - Tags Unknown Companies Unknown 给你一个有根节点 root 的二叉树，返回它 最深的叶节点的最近公共祖先 。 回想一下： 叶节点 是二叉树中没</description></item><item><title>最多可以摧毁的敌人城堡数目</title><link>https://justice.bj.cn/post/leetcode/2511.%E6%9C%80%E5%A4%9A%E5%8F%AF%E4%BB%A5%E6%91%A7%E6%AF%81%E7%9A%84%E6%95%8C%E4%BA%BA%E5%9F%8E%E5%A0%A1%E6%95%B0%E7%9B%AE/</link><pubDate>Tue, 05 Sep 2023 22:07:45 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/2511.%E6%9C%80%E5%A4%9A%E5%8F%AF%E4%BB%A5%E6%91%A7%E6%AF%81%E7%9A%84%E6%95%8C%E4%BA%BA%E5%9F%8E%E5%A0%A1%E6%95%B0%E7%9B%AE/</guid><description>最多可以摧毁的敌人城堡数目 题目描述 给你一个长度为 n ，下标从 0 开始的整数数组 forts ，表示一些城堡。forts[i] 可以是 -1 ，0 或者 1 ，其中： -1 表示</description></item><item><title>neovim</title><link>https://justice.bj.cn/post/70.tool/neovim/</link><pubDate>Sat, 02 Sep 2023 11:43:36 +0800</pubDate><guid>https://justice.bj.cn/post/70.tool/neovim/</guid><description>neovim 简介 mac 1 2 3 4 5 6 7 8 9 10 11 12 ## brew 安装neovim brew install neovim/neovim/neovim ## neovim 开发版本的安装 brew tap neovim/neovim brew install --HEAD neovim ## neovim安装稳定版本，不产生~/.nviml</description></item><item><title>Ozone</title><link>https://justice.bj.cn/post/30.architech/ozone/</link><pubDate>Sat, 02 Sep 2023 11:43:36 +0800</pubDate><guid>https://justice.bj.cn/post/30.architech/ozone/</guid><description>Ozone 简介 Ozone是专门为Hadoop设计的可扩展的分布式对象存储系统。Hadoop生态中的其它组件如Spark、Hive和Yarn不需要任何</description></item><item><title>Pow(x, n)</title><link>https://justice.bj.cn/post/leetcode/50.pow/</link><pubDate>Sat, 02 Sep 2023 11:43:36 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/50.pow/</guid><description>Pow(x, n) Category Difficulty Likes Dislikes algorithms Medium (37.83%) 944 - Tags math | binary-search Companies bloomberg | facebook | google | linkedin 实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn ）。 示例 1： 1 2 输入：x = 2.00000, n = 10 输出：1024.00</description></item><item><title>专题- 并查集</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link><pubDate>Mon, 21 Aug 2023 22:56:27 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid><description>专题: 并查集 简介 并查集是图论中计算「动态连通性」的一种数据结构, 可用于计算图的连通性相关问题. 基本操作 并查集支持两种操作： 合并（Union）</description></item><item><title>岛屿数量</title><link>https://justice.bj.cn/post/leetcode/200.%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</link><pubDate>Mon, 21 Aug 2023 22:56:27 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/200.%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</guid><description>岛屿数量 Category Difficulty Likes Dislikes algorithms Medium (47.04%) 555 - Tags depth-first-search | breadth-first-search | union-find Companies amazon | facebook | google | microsoft | zenefits 给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。</description></item><item><title>最长连续序列</title><link>https://justice.bj.cn/post/leetcode/128.%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/</link><pubDate>Mon, 21 Aug 2023 22:56:27 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/128.%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/</guid><description>最长连续序列 Category Difficulty Likes Dislikes algorithms Medium (55.14%) 1567 - Tags array | union-find Companies facebook | google 给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。 请你</description></item><item><title>移除最多的同行或同列石头</title><link>https://justice.bj.cn/post/leetcode/947.%E7%A7%BB%E9%99%A4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%90%8C%E8%A1%8C%E6%88%96%E5%90%8C%E5%88%97%E7%9F%B3%E5%A4%B4/</link><pubDate>Mon, 21 Aug 2023 17:12:32 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/947.%E7%A7%BB%E9%99%A4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%90%8C%E8%A1%8C%E6%88%96%E5%90%8C%E5%88%97%E7%9F%B3%E5%A4%B4/</guid><description>移除最多的同行或同列石头 Category Difficulty Likes Dislikes algorithms Medium (61.50%) 324 - Tags binary-search Companies Unknown n 块石头放置在二维平面中的一些整数坐标点上。每个坐标点上最多只能有一块石头。 如果一块石头的</description></item><item><title>被围绕的区域</title><link>https://justice.bj.cn/post/leetcode/130.%E8%A2%AB%E5%9B%B4%E7%BB%95%E7%9A%84%E5%8C%BA%E5%9F%9F/</link><pubDate>Mon, 21 Aug 2023 17:12:32 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/130.%E8%A2%AB%E5%9B%B4%E7%BB%95%E7%9A%84%E5%8C%BA%E5%9F%9F/</guid><description>被围绕的区域 Category Difficulty Likes Dislikes algorithms Medium (46.23%) 942 - Tags depth-first-search | breadth-first-search | union-find Companies Unknown 给你一个 m x n 的矩阵 board ，由若干字符 'X' 和 'O' ，找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填</description></item><item><title>统计公平数对的数目</title><link>https://justice.bj.cn/post/leetcode/2563.%E7%BB%9F%E8%AE%A1%E5%85%AC%E5%B9%B3%E6%95%B0%E5%AF%B9%E7%9A%84%E6%95%B0%E7%9B%AE/</link><pubDate>Sun, 20 Aug 2023 16:42:56 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/2563.%E7%BB%9F%E8%AE%A1%E5%85%AC%E5%B9%B3%E6%95%B0%E5%AF%B9%E7%9A%84%E6%95%B0%E7%9B%AE/</guid><description>统计公平数对的数目 Category Difficulty Likes Dislikes algorithms Medium (34.06%) 38 - Tags Unknown Companies Unknown 给你一个下标从 0 开始、长度为 n 的整数数组 nums ，和两个整数 lower 和 upper ，返回 公平数对的数目 。 如果 (i, j) 数对满</description></item><item><title>二叉树的中序遍历</title><link>https://justice.bj.cn/post/leetcode/94.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</link><pubDate>Sun, 20 Aug 2023 14:56:31 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/94.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</guid><description>二叉树的中序遍历 Category Difficulty Likes Dislikes algorithms Medium (68.96%) 339 - Tags Companies 给定一个二叉树，返回它的*中序 *遍历。 示例: 1 2 3 4 5 6 7 8 输入: [1,null,2,3] 1 \ 2 / 3 输出: [1,3,2] 进阶: 递归算法很</description></item><item><title>连续数组</title><link>https://justice.bj.cn/post/leetcode/525.%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/</link><pubDate>Sun, 20 Aug 2023 14:56:31 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/525.%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/</guid><description>连续数组 Category Difficulty Likes Dislikes algorithms Medium (54.72%) 671 - Tags hash-table Companies facebook 给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。 示例 1: 1 2 3 输入: nums</description></item><item><title>专题：买卖股票</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8/</link><pubDate>Sun, 20 Aug 2023 07:16:49 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8/</guid><description>专题：买卖股票 简介 股票买卖时机问题是 leetcode 中一类很常见的问题, 题目表述如下: 有一个数组 prices, 代表某支股票在每天的价格. 投资者在每天可以选择买入,卖出</description></item><item><title>专题：二分法</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E4%BA%8C%E5%88%86%E6%B3%95/</link><pubDate>Sun, 20 Aug 2023 07:16:49 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E4%BA%8C%E5%88%86%E6%B3%95/</guid><description>专题：二分法 简介 二分查找法是一种高效的查找方法, 其拥有$ln(n)$的时间复杂度. 其前置条件只有一个:有序数组. 因此在处理有序数组时, 可以优</description></item><item><title>专题：二叉树</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Sun, 20 Aug 2023 07:16:49 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>专题：二叉树 简介 二叉树是一个递归的结构 基本操作 遍历 计算高度 计算宽度 遍历 前序遍历: 又叫先根遍历, 递归顺序为: 根节点-&amp;gt;左子树-&amp;gt;右</description></item><item><title>专题：动态规划</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link><pubDate>Sun, 20 Aug 2023 07:16:49 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid><description>专题：动态规划 简介 动态规划问题的难点在于对问题进行合理划分，将大问题转变为小问题的组合，形成递推关系，通过归纳法将问题得到解决； 动态规划最关</description></item><item><title>专题：区间问题</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 20 Aug 2023 07:16:49 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%8C%BA%E9%97%B4%E9%97%AE%E9%A2%98/</guid><description>专题：区间问题 简介 相关题目 56.合并区间 435.无重叠区间</description></item><item><title>专题：回溯法</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%9B%9E%E6%BA%AF%E6%B3%95/</link><pubDate>Sun, 20 Aug 2023 07:16:49 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%9B%9E%E6%BA%AF%E6%B3%95/</guid><description>专题：回溯法 简介 回溯法是归纳法的一种。其基本思想是： 基本要点 先找出一种遍历问题的合理方法； 代码模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21</description></item><item><title>专题：堆</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%A0%86/</link><pubDate>Sun, 20 Aug 2023 07:16:49 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%A0%86/</guid><description>专题：堆 简介 堆(heap)是一个基本数据结构, 其主要特征为堆顶元素; 堆常用来解决 top-k 问题; 各语言中的堆 Rust rust 标准库中的堆结构为 BinaryHeap; BinaryHe</description></item></channel></rss>