<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>滴水穿石 on Justice的小站</title><link>https://justice.bj.cn/post/</link><description>Recent content in 滴水穿石 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://justice.bj.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://justice.bj.cn/post/12.data_struct/readme/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/12.data_struct/readme/</guid><description>数据结构 基础数据结构 比特/字节 数组 树 B 树 红黑树 字典树 线段树</description></item><item><title/><link>https://justice.bj.cn/post/14.language/asm/readme/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/asm/readme/</guid><description/></item><item><title/><link>https://justice.bj.cn/post/14.language/c++/readme/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/readme/</guid><description/></item><item><title/><link>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</guid><description>图解Golang的GC算法 简介 虽然Golang的GC自打一开始，就被人所诟病，但是经过这么多年的发展，Golang的GC已经改善了非常多，变</description></item><item><title/><link>https://justice.bj.cn/post/14.language/java/readme/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/java/readme/</guid><description/></item><item><title/><link>https://justice.bj.cn/post/14.language/python/readme/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/python/readme/</guid><description/></item><item><title/><link>https://justice.bj.cn/post/14.language/readme/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/readme/</guid><description/></item><item><title/><link>https://justice.bj.cn/post/14.language/rust/readme/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/readme/</guid><description/></item><item><title/><link>https://justice.bj.cn/post/14.language/shell/readme/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/readme/</guid><description/></item><item><title/><link>https://justice.bj.cn/post/70.tool/readme/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/readme/</guid><description/></item><item><title>ASM-汇编基础</title><link>https://justice.bj.cn/post/14.language/asm/asm/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/asm/asm/</guid><description>ASM-汇编基础 简介 Intel 和 AT&amp;amp;T 汇编语言区别 1 2 OP-code dst src //Intel语法 Op-code src dst //AT&amp;amp;T语法 Intel Code AT&amp;amp;T Code mov eax,1 movl $1,%eax mov ebx,0ffh movl $0xff,%ebx int 80h int $0x80 mov ebx, eax movl %eax, %ebx</description></item><item><title>awk</title><link>https://justice.bj.cn/post/14.language/shell/awk/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/awk/</guid><description>awk 简介 常用操作 1 2 3 4 5 6 7 8 9 10 ## 打印奇数行 $ awk &amp;#39;NR%2&amp;#39; file ## 打印偶数行 $ awk &amp;#39;!(NR%2)&amp;#39; file $ awk &amp;#39;NR==M, NR==N&amp;#39; filename #输出从M行N行之间的内容$ $ awk &amp;#34;/PARTERN1/,/PARTERN2/&amp;#34; filename #输出从PARTER</description></item><item><title>Bash基础</title><link>https://justice.bj.cn/post/14.language/shell/bash%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/bash%E5%9F%BA%E7%A1%80/</guid><description>Bash基础 简介 特殊变量 1 2 3 4 5 6 7 $# # 参数个数 $@ # 所有参数, 每个参数分别用&amp;#34;&amp;#34;包含 $* # 所有参数，所有参数使用一个外层&amp;#</description></item><item><title>Bash字符串操作</title><link>https://justice.bj.cn/post/14.language/shell/bash%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/bash%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</guid><description>Bash字符串操作 取长度 1 2 3 4 str=&amp;#34;abcd&amp;#34; expr length $str # 4 echo ${#str} # 4 expr &amp;#34;$str&amp;#34; : &amp;#34;.*&amp;#34; # 4 好像一般使用第二种 查找子串的位置 1 2 3 4 5 str=&amp;#34;abc&amp;#34; expr index $str &amp;#34;a&amp;#34; # 1 expr index $str &amp;#34;b&amp;#34; # 2 expr index $str &amp;#34;x&amp;#34;</description></item><item><title>Bash最佳实践</title><link>https://justice.bj.cn/post/14.language/shell/bash%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/bash%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>Bash最佳实践 基本规则 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58</description></item><item><title>Bazel</title><link>https://justice.bj.cn/post/70.tool/bazel/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/bazel/</guid><description>Bazel 简介 Bazel是Google开源的自动化构建工具， 特点 构建快。支持增量编译。对依赖关系进行了优化，从而支持并发执行。 可构建多种语言。baz</description></item><item><title>brew</title><link>https://justice.bj.cn/post/70.tool/brew/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/brew/</guid><description>brew 简介 操作 安装指定版本 1 2 3 $ git clone http://github.com/homebrew/homebrew-core $ vi homebrew-core/Formula/xxxx.rb $ brew install homebrew-core/Formula/xxxx.rb 更换Homebrew源 1 2 3 4 5 6 7 8 9 10 11 12 # 替换brew.git: cd &amp;#34;$(brew --repo)&amp;#34; git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git # 替</description></item><item><title>C++ 左值引用与右值引用</title><link>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid><description>C++ 左值引用与右值引用 左值、右值 左值： 可以放到等号左边; 可以取地址并且有名字 右值： 不可以放到等号左边的东西就叫右值。 不能取地址的没有名字的东西</description></item><item><title>C++11</title><link>https://justice.bj.cn/post/14.language/c++/c++11/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++11/</guid><description>C++11 左值与右值 可以取地址的，有名字的，非临时的就是左值； 不能取地址的，没有名字的，临时的就是右值； thread_local thread_local 变量是 C++ 11 新引入的一种存储类型,这些变量</description></item><item><title>c++基础</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</guid><description>c++基础 简介 构造析构 默认函数(Defaulted 函数) 1 2 3 4 5 6 Object() {} //默认构造函数 ~Object() {} //析构函数 Object(const Object&amp;amp;) {} //复制构造函数 Object(Object&amp;amp;&amp;amp;) {} //移动构</description></item></channel></rss>