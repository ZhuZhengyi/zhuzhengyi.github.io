<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>滴水穿石 on Justice的小站</title><link>https://justice.bj.cn/post/</link><description>Recent content in 滴水穿石 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://justice.bj.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title>专题：二叉树</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</link><pubDate>Sat, 30 Apr 2022 21:01:56 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</guid><description>专题：二叉树 简介 二叉树是一个递归的结构 相关题目 题目 难度 解题思路 94.二叉树的中序遍历 ** 递归，栈 100.相同的树 ** 101.对称二叉树 * 102.</description></item><item><title>旋转图像</title><link>https://justice.bj.cn/post/leetcode/doc/48.%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</link><pubDate>Sat, 30 Apr 2022 21:01:56 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/48.%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</guid><description>旋转图像 Category Difficulty Likes Dislikes algorithms Medium (74.04%) 1268 - Tags array Companies amazon | apple | microsoft 给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。 你必须在 原地 旋转图像，这意味着你</description></item><item><title>最长公共前缀</title><link>https://justice.bj.cn/post/leetcode/doc/14.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</link><pubDate>Sat, 30 Apr 2022 21:01:56 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/14.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</guid><description>最长公共前缀 Category Difficulty Likes Dislikes algorithms Easy (42.24%) 2215 - Tags string Companies yelp 编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 &amp;quot;&amp;quot;</description></item><item><title>验证回文串</title><link>https://justice.bj.cn/post/leetcode/doc/125.%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/</link><pubDate>Sat, 30 Apr 2022 21:01:56 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/125.%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/</guid><description>验证回文串 Category Difficulty Likes Dislikes algorithms Easy (46.93%) 523 - Tags two-pointers | string Companies facebook | microsoft | uber | zenefits 给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 **说明</description></item><item><title>有效的字母异位词</title><link>https://justice.bj.cn/post/leetcode/doc/242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</link><pubDate>Sat, 30 Apr 2022 19:58:18 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</guid><description>有效的字母异位词 Category Difficulty Likes Dislikes algorithms Easy (65.23%) 565 - Tags hash-table | sort Companies amazon | uber | yelp 给定两个字符串 *s* 和 *t* ，编写一个函数来判断 *t* 是否是 *s* 的字母异位词。 **注意：**若 *s* 和 *t*</description></item><item><title>clock缓存置换算法</title><link>https://justice.bj.cn/post/13.algorithm/clock%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 19:40:36 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/clock%E7%AE%97%E6%B3%95/</guid><description>clock缓存置换算法 简介 clock缓存置换算法(时钟置换算法)是LRU算法的一个变种，其使用环形数组代替链表； clock缓存置换算法的性能</description></item><item><title>SnowFlake 算法</title><link>https://justice.bj.cn/post/13.algorithm/snowflake%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 19:40:36 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/snowflake%E7%AE%97%E6%B3%95/</guid><description>SnowFlake 算法 概述 Snowflake 算法是 Twitter 发明的一种算法，用于在分布式的高并发环境中，生成 64 位自增 ID。这种算法产生的背景是，Twitter 每秒钟能产生上万条信息</description></item><item><title>反转字符串</title><link>https://justice.bj.cn/post/leetcode/doc/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Sat, 30 Apr 2022 19:40:36 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>反转字符串 Category Difficulty Likes Dislikes algorithms Easy (78.41%) 580 - Tags two-pointers | string Companies Unknown 编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。 不要给另外的数组分配</description></item><item><title>堆排序</title><link>https://justice.bj.cn/post/13.algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/</link><pubDate>Sat, 30 Apr 2022 19:40:36 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/</guid><description>堆排序 简介 堆排序是借助于堆这个数据结构来实现排序的一种算法。 堆(heap)的性质 堆是一个完全二叉树； 堆的每个非叶子结点值均大于(大顶堆)/小</description></item><item><title>字符串中的第一个唯一字符</title><link>https://justice.bj.cn/post/leetcode/doc/387.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</link><pubDate>Sat, 30 Apr 2022 19:40:36 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/387.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</guid><description>字符串中的第一个唯一字符 Category Difficulty Likes Dislikes algorithms Easy (54.73%) 548 - Tags hash-table | string Companies amazon | bloomberg | microsoft 给定一个字符串 s ，找到 它的第一个不重复的字符，并返回它的索引 。如果不存在，则返</description></item><item><title>Jump一致性哈希算法</title><link>https://justice.bj.cn/post/13.algorithm/jumpconsistenthash%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/jumpconsistenthash%E7%AE%97%E6%B3%95/</guid><description>Jump一致性哈希算法 简介 Jump consistent hash是一种一致性哈希算法, 此算法零内存消耗，均匀分配，快速，并且只有5行代码。 这个算法是 Google 的 John Lamping 和 Eric Veach 创造</description></item><item><title>KMP算法</title><link>https://justice.bj.cn/post/13.algorithm/kmp%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/kmp%E7%AE%97%E6%B3%95/</guid><description>KMP算法 简介 KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt共同发明； KMP算法的关键</description></item><item><title>一致性哈希算法</title><link>https://justice.bj.cn/post/13.algorithm/%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95/</guid><description>一致性哈希算法 一致性哈希算法在 1997 年由麻省理工学院的 Karger 等人在解决分布式 Cache 中提出的，设计目标是为了解决因特网中的热点(Hot spot)问题，初衷</description></item><item><title>并发</title><link>https://justice.bj.cn/post/13.algorithm/concurrent/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/concurrent/</guid><description>并发 进程 进程间通信 管道(Pipe) 共享内存(SharedMemory) 消息队列(MQ) 文件(File) socket 线程 线程间同步 互斥量(mutex) 条</description></item><item><title>设计模式及准则</title><link>https://justice.bj.cn/post/13.algorithm/design_pattern/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/design_pattern/</guid><description>设计模式及准则 设计准则 单一职责原则(SDP): 一个类自有一个引起变化的原因。 开发封闭原则(ODP): 对扩展开发, 对修改封闭。 依赖倒置原则(D</description></item><item><title>恢复二叉搜索树</title><link>https://justice.bj.cn/post/leetcode/doc/99.%E6%81%A2%E5%A4%8D%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link><pubDate>Sat, 30 Apr 2022 15:21:08 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/99.%E6%81%A2%E5%A4%8D%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid><description>恢复二叉搜索树 Category Difficulty Likes Dislikes algorithms Medium (60.48%) 708 - Tags tree | depth-first-search Companies Unknown 给你二叉搜索树的根节点 root ，该树中的 恰好 两个节点的值被错误地交换。请在不改变其结构的情况下，恢复这</description></item><item><title>Disruptor(高效无锁内存队列)</title><link>https://justice.bj.cn/post/12.data_struct/%E9%AB%98%E6%95%88%E6%97%A0%E9%94%81%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97disruptor/</link><pubDate>Sat, 30 Apr 2022 11:32:24 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/%E9%AB%98%E6%95%88%E6%97%A0%E9%94%81%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97disruptor/</guid><description>Disruptor(高效无锁内存队列) 简介 Disruptor 是 LMAX 公司开源的一个高效的内存无锁队列。</description></item><item><title>Kafka时间轮算法</title><link>https://justice.bj.cn/post/12.data_struct/%E6%97%B6%E9%97%B4%E8%BD%AE/</link><pubDate>Sat, 30 Apr 2022 11:32:24 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/%E6%97%B6%E9%97%B4%E8%BD%AE/</guid><description>Kafka时间轮算法 Kafka 中存在一些定时任务(DelayedOperation)，如 DelayedFetch、DelayedProduce、De</description></item><item><title>RoaringBitmap</title><link>https://justice.bj.cn/post/12.data_struct/31.roaringbitmap/</link><pubDate>Sat, 30 Apr 2022 11:32:24 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/31.roaringbitmap/</guid><description>RoaringBitmap 简介 RoaringBitmap（简称为 RBM）是 2016 年由 S. Chambi、D. Lemire、O. Kaser 等人在论文中提出的一种高效位图压缩算法; 用于</description></item><item><title>树状数组(BIT)</title><link>https://justice.bj.cn/post/12.data_struct/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</link><pubDate>Sat, 30 Apr 2022 11:32:24 +0800</pubDate><guid>https://justice.bj.cn/post/12.data_struct/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</guid><description>树状数组(BIT) 简介 树状数组或二元索引树（英语：Binary Indexed Tree），又以其发明者命名为 FenwickFenwick 树。最早由 PeterM.FenwickPeterM.Fenwick 于 1994 年以 《A New Data Structure for Cumulative Frequency Tabl</description></item></channel></rss>