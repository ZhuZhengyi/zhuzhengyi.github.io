<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>滴水穿石 on Justice的小站</title><link>https://justice.bj.cn/post/</link><description>Recent content in 滴水穿石 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://justice.bj.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title>C++11左值与右值</title><link>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid><description>C++11左值与右值 简介 在C++11之前，表达式的值按出现在=的位置不同可简单分为左值和右值2种； 在C++11中，为了实现函数参数传递的零拷</description></item><item><title>C++基础</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</guid><description>C++基础 简介 构造析构 默认函数(Defaulted 函数) 1 2 3 4 5 6 Object() {} //默认构造函数 ~Object() {} //析构函数 Object(const Object&amp;amp;) {} //复制构造函数 Object(Object&amp;amp;&amp;amp;) {} //移动构</description></item><item><title>Golang 调试</title><link>https://justice.bj.cn/post/14.language/golang/golang%E8%B0%83%E8%AF%95/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E8%B0%83%E8%AF%95/</guid><description>Golang 调试 简介 Golang程序的调试工具包括gdb调试、go pprof性能调试工具及go gc分析工具。熟练掌握这些工具的基本用法对golang的</description></item><item><title>Rust Trait</title><link>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</guid><description>Rust Trait 简介 trait(特性) 是一组方法的集合，实现trait的类型可以访问该 trait 中定义的其他方法。 任何类型都可以实现 trait； 要点 Trait必</description></item><item><title>Rust 数据类型</title><link>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>Rust 数据类型 简介 Rust的数据类型分为标量(scalar)类型和复合(compound)类型、集合类型。 标量类型(scalar)：表示一个单独</description></item><item><title>STL容器</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl%E5%AE%B9%E5%99%A8/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl%E5%AE%B9%E5%99%A8/</guid><description>STL容器 简介 容器库是类模板与算法的汇集，允许程序员简单地访问常见数据结构，例如队列、链表和栈。有三类容器——顺序容器、关联容器和无序关联容</description></item><item><title>智能指针</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid><description>智能指针 简介 智能指针(smart pointer)是C++用来自动管理对象生命周期的模板类； 头文件 #include &amp;lt;memory&amp;gt;； unique_ptr 独占指针，</description></item><item><title>汇编基础</title><link>https://justice.bj.cn/post/14.language/asm/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/asm/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</guid><description>汇编基础 一、基础知识 引言 基本了解硬件系统的结构； 利用硬件系统的编程结构和指令集，有效灵活地控制系统进行工作。 1.1 机器语言 机器语言是机器指令的集</description></item><item><title>Bash字符串操作</title><link>https://justice.bj.cn/post/14.language/shell/bash%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/shell/bash%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</guid><description>Bash字符串操作 取长度 1 2 3 4 str=&amp;#34;abcd&amp;#34; expr length $str # 4 echo ${#str} # 4 expr &amp;#34;$str&amp;#34; : &amp;#34;.*&amp;#34; # 4 好像一般使用第二种 查找子串的位置 1 2 3 4 5 str=&amp;#34;abc&amp;#34; expr index $str &amp;#34;a&amp;#34; # 1 expr index $str &amp;#34;b&amp;#34; # 2 expr index $str &amp;#34;x&amp;#34;</description></item><item><title>ChubaoFS Master</title><link>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-master/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-master/</guid><description>ChubaoFS Master 简介 MetaNode管理 Metanode 是否可写 节点存活（isActive）: 心跳上报时间间隔&amp;lt;30s的节点isActive为false; met</description></item><item><title>ChubaoFS 基础</title><link>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/chubaofs/chubaofs-%E5%9F%BA%E7%A1%80/</guid><description>ChubaoFS 基础 简介 ChubaoFS是一个开源的分布式文件存储系统，同时提供POSIX FS和S3两种访问接口。 2018年由JD TigLab开发，202</description></item><item><title>PromQL查询语言</title><link>https://justice.bj.cn/post/36.monitor/prometheus/prometheus%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/36.monitor/prometheus/prometheus%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</guid><description>PromQL查询语言 简介 PromQL（Prometheus Query Language）是 Prometheus 自己开发的表达式语言，语言表现力很丰富，内置函数也很多。使</description></item><item><title>vim</title><link>https://justice.bj.cn/post/70.tool/vim/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/vim/</guid><description>vim 简介 基本操作 设置 1 2 3 4 5 6 7 8 9 10 ## 查看设置 :set shiftwidth? :echo &amp;amp;option ## 重置为默认值 :set option&amp;amp; ## 查看option设置 在哪里配置 :verbose set option? 增加markdown tagbar ~/.ctags 中增</description></item><item><title>专题1：二叉树相关</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</guid><description>专题1：二叉树相关 简介 二叉树是一个递归的结构 相关题目 前序遍历 94.二叉树的中序遍历 后序遍历 102.二叉树的层序遍历； 路径和 543.二叉树的直</description></item><item><title>图解 Golang 的 GC 算法</title><link>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</guid><description>图解 Golang 的 GC 算法 简介 虽然 Golang 的 GC 自打一开始，就被人所诟病，但是经过这么多年的发展，Golang 的 GC 已经改善了非常多，变得非常优秀了。 以下是 Golang GC 算</description></item><item><title>文件系统测试</title><link>https://justice.bj.cn/post/40.storage/%E5%AD%98%E5%82%A8%E6%B5%8B%E8%AF%95/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/40.storage/%E5%AD%98%E5%82%A8%E6%B5%8B%E8%AF%95/</guid><description>文件系统测试 简介 1 # 安装mpirun openmpi 安装rsh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/bin/sh yum -y install rsh rsh-server systemctl restart rsh.socket systemctl restart rlogin.socket systemctl restart rexec.socket cat &amp;gt; /root/.rhosts &amp;lt;&amp;lt;EOF 192.168.100.210 root 192.168.100.211 root</description></item><item><title>组合总和 II</title><link>https://justice.bj.cn/post/leetcode/doc/40.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-ii/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/40.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-ii/</guid><description>组合总和 II Category Difficulty Likes Dislikes algorithms Medium (62.12%) 737 - Tags array | backtracking Companies snapchat 给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。 candidates 中的每个数字在每个组合中只能使用</description></item><item><title>Golang基础</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</guid><description>Golang基础 简介 初始化 规则： 每个package 只会被初始化一次； 同一个 package，不同文件是按照文件名的顺序来初始化； 不能循环 import , 例</description></item><item><title>Rust迭代器</title><link>https://justice.bj.cn/post/14.language/rust/rust%E8%BF%AD%E4%BB%A3%E5%99%A8/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid><description>Rust迭代器 简介 迭代器（iterator）负责遍历序列中的每一项和决定序列何时结束的逻辑； 迭代器是 惰性的（lazy），在调用方法使用迭代器</description></item><item><title>Systemd</title><link>https://justice.bj.cn/post/70.tool/systemd/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/systemd/</guid><description>Systemd 简介 用法 1 2 3 4 5 6 7 8 $ systemctl reload $ service &amp;lt;SERVICE_NAME&amp;gt; start # $ journalctl -b -u &amp;lt;SERVICE_NAME&amp;gt;.service 参考</description></item></channel></rss>