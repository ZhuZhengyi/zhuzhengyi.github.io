<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>滴水穿石 on Justice的小站</title><link>https://justice.bj.cn/post/</link><description>Recent content in 滴水穿石 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://justice.bj.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://justice.bj.cn/post/09.pub/%E9%92%A5%E5%8C%99%E4%B9%A6keybook/3.%E5%A4%8D%E6%9D%82%E6%80%A7/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E9%92%A5%E5%8C%99%E4%B9%A6keybook/3.%E5%A4%8D%E6%9D%82%E6%80%A7/</guid><description/></item><item><title/><link>https://justice.bj.cn/post/09.pub/%E9%92%A5%E5%8C%99%E4%B9%A6keybook/4.%E6%B3%9B%E5%8C%96%E7%95%8C/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E9%92%A5%E5%8C%99%E4%B9%A6keybook/4.%E6%B3%9B%E5%8C%96%E7%95%8C/</guid><description/></item><item><title/><link>https://justice.bj.cn/post/09.pub/%E9%92%A5%E5%8C%99%E4%B9%A6keybook/5.%E7%A8%B3%E5%AE%9A%E6%80%A7/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E9%92%A5%E5%8C%99%E4%B9%A6keybook/5.%E7%A8%B3%E5%AE%9A%E6%80%A7/</guid><description/></item><item><title/><link>https://justice.bj.cn/post/09.pub/%E9%92%A5%E5%8C%99%E4%B9%A6keybook/6.%E4%B8%80%E8%87%B4%E6%80%A7/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E9%92%A5%E5%8C%99%E4%B9%A6keybook/6.%E4%B8%80%E8%87%B4%E6%80%A7/</guid><description/></item><item><title/><link>https://justice.bj.cn/post/09.pub/%E9%92%A5%E5%8C%99%E4%B9%A6keybook/7.%E6%94%B6%E6%95%9B%E7%8E%87/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E9%92%A5%E5%8C%99%E4%B9%A6keybook/7.%E6%94%B6%E6%95%9B%E7%8E%87/</guid><description/></item><item><title/><link>https://justice.bj.cn/post/09.pub/%E9%92%A5%E5%8C%99%E4%B9%A6keybook/8.%E9%81%97%E6%86%BE%E7%95%8C/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E9%92%A5%E5%8C%99%E4%B9%A6keybook/8.%E9%81%97%E6%86%BE%E7%95%8C/</guid><description/></item><item><title>CPU异常</title><link>https://justice.bj.cn/post/09.pub/writing-an-os-in-rust/05-cpu-exceptions/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/writing-an-os-in-rust/05-cpu-exceptions/</guid><description>CPU异常 原文：https://os.phil-opp.com/cpu-exceptions/ 原作者：@phil-opp 译者：倪广野 触发CP</description></item><item><title>Go Channel</title><link>https://justice.bj.cn/post/14.language/golang/golang-channel/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-channel/</guid><description>Go Channel 简介 channel是first-class的，可以被存储到变量中，可以作为参数传递给函数，也可以作为函数的返回值返回; channel分为</description></item><item><title>Golang之syscall</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bsyscall/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bsyscall/</guid><description>Golang之syscall 简介 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─</description></item><item><title>Golang内存对齐</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid><description>Golang内存对齐 简介 CPU 始终以字长访问内存， 对齐保证(align guarantee) 结构体的成员变量，第一个成员变量的偏移量为 0。 往后的每个成员变量的对齐值</description></item><item><title>Golang内存管理</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>Golang内存管理 简介 Golang内存管理采用类似tcmalloc的分级分配算法，主要由MHeap、MCentral、MCache 3 级组成</description></item><item><title>Golang汇编</title><link>https://justice.bj.cn/post/14.language/golang/golang%E6%B1%87%E7%BC%96/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E6%B1%87%E7%BC%96/</guid><description>Golang汇编 简介 Go语言汇编基于plan9汇编,是一个中间汇编方式，以忽略底层不同架构之间的一些差别； 寄存器 Go汇编引入了4个伪寄存器，</description></item><item><title>Go语言基础</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</guid><description>Go语言基础 简介 初始化 规则： 每个package 只会被初始化一次； 同一个 package，不同文件是按照文件名的顺序来初始化； 不能循环 import , 例如：</description></item><item><title>Go语言运行时</title><link>https://justice.bj.cn/post/14.language/golang/golang-runtime/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-runtime/</guid><description>Go语言运行时 简介 Go调度器的演化 源码分析 Go 语言程序启动后，需要对自身运行时进行初始化，其真正的程序入口由 runtime 包控制。 以 AMD64 架构上的 Linux 和 macOS 为例，</description></item><item><title>HBase</title><link>https://justice.bj.cn/post/30.architech/hbase/hbase%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/30.architech/hbase/hbase%E5%9F%BA%E7%A1%80/</guid><description>HBase 简介 Apache HBase是基于Hadoop构建的一个分布式、可伸缩的海量数据存储系统。 HDFS为Hbase提供底层数据存储服务， Zookeeper</description></item><item><title>HBase协处理器</title><link>https://justice.bj.cn/post/30.architech/hbase/hbase-%E5%8D%8F%E5%A4%84%E7%90%86%E5%99%A8/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/30.architech/hbase/hbase-%E5%8D%8F%E5%A4%84%E7%90%86%E5%99%A8/</guid><description>HBase协处理器 简介 HBase 的协处理器是从 0.92.0 开始引入的，参见 HBASE-2000。它的实现灵感来源于 Jeff Dean 在 LADIS 2009 分享主题 《Designs, Lessons and Advice fromBuilding</description></item><item><title>Helyim</title><link>https://justice.bj.cn/post/40.storage/helyim/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/40.storage/helyim/</guid><description>Helyim 简介 Helyim是seaweedfs的一个rust语言实现。 参考 https://github.com/helyim/helyim</description></item><item><title>Linux IO 之 IO与网络模型</title><link>https://justice.bj.cn/post/21.linux/linux-io-%E4%B9%8B-io%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-io-%E4%B9%8B-io%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</guid><description>Linux IO 之 IO与网络模型 atomic 原子变量: x86在多核环境下，多核竞争数据总线时，提供Lock指令进行锁总线操作。保证“读-修改-写”的操作在芯片级的</description></item><item><title>Linux IO 多路复用</title><link>https://justice.bj.cn/post/21.linux/linux-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</guid><description>Linux IO 多路复用 简介 linux io 多路复用是用来实现单进程同时处理多个io请求的有效方法。 linux的io多路复用主要有以下3中方式： select poll epoll select ​ selec</description></item><item><title>Lua 基础</title><link>https://justice.bj.cn/post/14.language/lua/lua%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/lua/lua%E5%9F%BA%E7%A1%80/</guid><description>Lua 基础 简介 Lua 是一种轻量小巧的脚本语言，由巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组于 1993 年开发的</description></item></channel></rss>