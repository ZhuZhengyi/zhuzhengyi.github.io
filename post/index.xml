<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>滴水穿石 on Justice的小站</title><link>https://justice.bj.cn/post/</link><description>Recent content in 滴水穿石 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://justice.bj.cn/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Pow(x, n)</title><link>https://justice.bj.cn/post/leetcode/doc/50.pow/</link><pubDate>Sun, 01 May 2022 18:25:57 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/50.pow/</guid><description>Pow(x, n) Category Difficulty Likes Dislikes algorithms Medium (37.83%) 944 - Tags math | binary-search Companies bloomberg | facebook | google | linkedin 实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn ）。 示例 1： 1 2 输入：x = 2.00000, n = 10 输出：1024.00</description></item><item><title>字母异位词分组</title><link>https://justice.bj.cn/post/leetcode/doc/49.%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</link><pubDate>Sun, 01 May 2022 18:25:57 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/49.%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</guid><description>字母异位词分组 Category Difficulty Likes Dislikes algorithms Medium (67.20%) 1117 - Tags hash-table | string Companies amazon | bloomberg | facebook | uber | yelp 给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。 字母</description></item><item><title>螺旋矩阵</title><link>https://justice.bj.cn/post/leetcode/doc/54.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</link><pubDate>Sun, 01 May 2022 18:25:57 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/54.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</guid><description>螺旋矩阵 Category Difficulty Likes Dislikes algorithms Medium (48.67%) 1079 - Tags array Companies google | microsoft | uber 给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。 示例 1： 1 2 输入：matri</description></item><item><title>螺旋矩阵 II</title><link>https://justice.bj.cn/post/leetcode/doc/59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5ii/</link><pubDate>Sun, 01 May 2022 18:25:57 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5ii/</guid><description>螺旋矩阵 II Category Difficulty Likes Dislikes algorithms Medium (76.50%) 696 - Tags array Companies Unknown 给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。 示例 1： 1</description></item><item><title>打家劫舍</title><link>https://justice.bj.cn/post/leetcode/doc/198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</link><pubDate>Sun, 01 May 2022 15:29:04 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</guid><description>打家劫舍 Category Difficulty Likes Dislikes algorithms Medium (52.98%) 2095 - Tags dynamic-programming Companies airbnb | linkedin 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房</description></item><item><title>第一个错误的版本</title><link>https://justice.bj.cn/post/leetcode/doc/278.%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/</link><pubDate>Sun, 01 May 2022 13:13:08 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/278.%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/</guid><description>第一个错误的版本 Category Difficulty Likes Dislikes algorithms Easy (45.15%) 673 - Tags binary-search Companies facebook 你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于</description></item><item><title>环形链表</title><link>https://justice.bj.cn/post/leetcode/doc/141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</link><pubDate>Sun, 01 May 2022 10:53:18 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</guid><description>环形链表 Category Difficulty Likes Dislikes algorithms Easy (51.39%) 1476 - Tags linked-list | two-pointers Companies amazon | bloomberg | microsoft | yahoo 给你一个链表的头节点 head ，判断链表中是否有环。 如果链表中有某个节点，可以通过连续跟踪 next 指针再</description></item><item><title>回文链表</title><link>https://justice.bj.cn/post/leetcode/doc/234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</link><pubDate>Sun, 01 May 2022 10:38:59 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</guid><description>回文链表 Category Difficulty Likes Dislikes algorithms Easy (51.35%) 1365 - Tags linked-list | two-pointers Companies amazon | facebook 给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。 示例 1： 1 2</description></item><item><title>专题：二叉树</title><link>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</link><pubDate>Sat, 30 Apr 2022 21:01:56 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/%E4%B8%93%E9%A2%981%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</guid><description>专题：二叉树 简介 二叉树是一个递归的结构 相关题目 题目 难度 解题思路 94.二叉树的中序遍历 ** 递归，栈 100.相同的树 ** 101.对称二叉树 * 102.</description></item><item><title>旋转图像</title><link>https://justice.bj.cn/post/leetcode/doc/48.%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</link><pubDate>Sat, 30 Apr 2022 21:01:56 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/48.%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</guid><description>旋转图像 Category Difficulty Likes Dislikes algorithms Medium (74.04%) 1268 - Tags array Companies amazon | apple | microsoft 给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。 你必须在 原地 旋转图像，这意味着你</description></item><item><title>最长公共前缀</title><link>https://justice.bj.cn/post/leetcode/doc/14.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</link><pubDate>Sat, 30 Apr 2022 21:01:56 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/14.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</guid><description>最长公共前缀 Category Difficulty Likes Dislikes algorithms Easy (42.24%) 2215 - Tags string Companies yelp 编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 &amp;quot;&amp;quot;</description></item><item><title>验证回文串</title><link>https://justice.bj.cn/post/leetcode/doc/125.%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/</link><pubDate>Sat, 30 Apr 2022 21:01:56 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/125.%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/</guid><description>验证回文串 Category Difficulty Likes Dislikes algorithms Easy (46.93%) 523 - Tags two-pointers | string Companies facebook | microsoft | uber | zenefits 给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 **说明</description></item><item><title>有效的字母异位词</title><link>https://justice.bj.cn/post/leetcode/doc/242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</link><pubDate>Sat, 30 Apr 2022 19:58:18 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</guid><description>有效的字母异位词 Category Difficulty Likes Dislikes algorithms Easy (65.23%) 565 - Tags hash-table | sort Companies amazon | uber | yelp 给定两个字符串 *s* 和 *t* ，编写一个函数来判断 *t* 是否是 *s* 的字母异位词。 **注意：**若 *s* 和 *t*</description></item><item><title>clock缓存置换算法</title><link>https://justice.bj.cn/post/13.algorithm/clock%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 19:40:36 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/clock%E7%AE%97%E6%B3%95/</guid><description>clock缓存置换算法 简介 clock缓存置换算法(时钟置换算法)是LRU算法的一个变种，其使用环形数组代替链表； clock缓存置换算法的性能</description></item><item><title>SnowFlake 算法</title><link>https://justice.bj.cn/post/13.algorithm/snowflake%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 19:40:36 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/snowflake%E7%AE%97%E6%B3%95/</guid><description>SnowFlake 算法 概述 Snowflake 算法是 Twitter 发明的一种算法，用于在分布式的高并发环境中，生成 64 位自增 ID。这种算法产生的背景是，Twitter 每秒钟能产生上万条信息</description></item><item><title>反转字符串</title><link>https://justice.bj.cn/post/leetcode/doc/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Sat, 30 Apr 2022 19:40:36 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>反转字符串 Category Difficulty Likes Dislikes algorithms Easy (78.41%) 580 - Tags two-pointers | string Companies Unknown 编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。 不要给另外的数组分配</description></item><item><title>堆排序</title><link>https://justice.bj.cn/post/13.algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/</link><pubDate>Sat, 30 Apr 2022 19:40:36 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/</guid><description>堆排序 简介 堆排序是借助于堆这个数据结构来实现排序的一种算法。 堆(heap)的性质 堆是一个完全二叉树； 堆的每个非叶子结点值均大于(大顶堆)/小</description></item><item><title>字符串中的第一个唯一字符</title><link>https://justice.bj.cn/post/leetcode/doc/387.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</link><pubDate>Sat, 30 Apr 2022 19:40:36 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/doc/387.%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</guid><description>字符串中的第一个唯一字符 Category Difficulty Likes Dislikes algorithms Easy (54.73%) 548 - Tags hash-table | string Companies amazon | bloomberg | microsoft 给定一个字符串 s ，找到 它的第一个不重复的字符，并返回它的索引 。如果不存在，则返</description></item><item><title>Jump一致性哈希算法</title><link>https://justice.bj.cn/post/13.algorithm/jumpconsistenthash%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/jumpconsistenthash%E7%AE%97%E6%B3%95/</guid><description>Jump一致性哈希算法 简介 Jump consistent hash是一种一致性哈希算法, 此算法零内存消耗，均匀分配，快速，并且只有5行代码。 这个算法是 Google 的 John Lamping 和 Eric Veach 创造</description></item><item><title>KMP算法</title><link>https://justice.bj.cn/post/13.algorithm/kmp%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 30 Apr 2022 17:04:39 +0800</pubDate><guid>https://justice.bj.cn/post/13.algorithm/kmp%E7%AE%97%E6%B3%95/</guid><description>KMP算法 简介 KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt共同发明； KMP算法的关键</description></item></channel></rss>