# 设计模式及准则

## 设计准则

1. 单一职责原则(SDP): 一个类自有一个引起变化的原因。
2. 开发封闭原则(ODP): 对扩展开发, 对修改封闭。
3. 依赖倒置原则(DIP): 具体依赖于抽象。
4. 里氏替换原则(LSP): 子类能够替换父类。
5. 接口隔离原则: 类间的依赖关系应该建立在最小的接口上，客户端不应该依赖它不需要的接口。
6. 迪米特法则: 如果不直接通信，那么两个类就不应当发生直接作用。
7. RAII: 资源分配即初始化。
8. PIMPL: 用声明代替头文件引用, 同时用指针代替对象定义。

## 设计模式

### 创建型

- 简单工厂(Simple Factory)
- 工厂方法(Factory Method)
- 抽象工厂(Abstract Factory)
- 建造器模式(Builder)
- 原型模式(Prototype)
- 单例模式(Singleton): 一个类只能有一个对象。

### 结构型

- 适配器类(Adapter_Class)
- 适配器对象(Adapter_Object)
- 桥接模式(Bridge)
- 组合器(Composite)
- 装饰器模式(Decorator)
- 外观模式(Facade)
- 代理模式(Proxy)
- 享元模式(Flyweight)

### 行为型

- 职责链(Chain of Responsibility)
- 命令(Command)
- 解释器(Interpreter)
- 迭代器(Iterator)
- 中介者(Mediator)
- 备忘录(Memento)
- 观察者模式(Observer)
- 状态模式(State)
- 策略模式(Strategy)
- 模板方法(Template Method)
- 访问者模式(Visitor)
