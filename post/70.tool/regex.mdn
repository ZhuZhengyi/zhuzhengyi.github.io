# 正则表达式

## 普通正则表达式

### 位置相关

```
^        表示锚定行首，此字符后面的任意内容必需出现在行首，可能匹配。  
$        表示锚定行尾，此字符前面的任意内容必须出现在行尾，才能匹配。  
^$       表示匹配空行，这里所描述的空行表示"回车"，而"空格"或"tab"等都不能算作此处所描述的空行。  
^abc$    表示abc独占一行时，会被匹配到。  
\<或者\b  匹配单词边界，表示锚定词首，其后面的字符必须作为单词首部出现。  
\>或者\b  匹配单词边界，表示锚定词尾，其前面的字符必须作为单词尾部出现。  
\B       匹配非单词边界，与\b正好相反。
```

### 次数相关

```
*     表示前面的字符连续出现任意次，包括0次  
. 表示任意单个字符。  
.* 表示任意长度的任意字符，与通配符中的*的意思相同  
\? 表示匹配其前面的字符0或1次  
\+ 表示匹配其前面的字符至少1次，或者连续多次，连续次数上不封顶。  
\{n\} 表示前面的字符连续出现n次，将要被匹配  
\{x,y\} 表示之前的字符至少连续出现x次，最多连续出现y次，都能被匹配到，换句话说，只要之前的字符连续出现的次数在x与y之间，即可被匹配到  
\{,n\} 表示之前的字符连续出现至多n次，最少0次，都会被匹配到  
\{n,\} 表示之前的字符连续出现至少n次，才会被匹配到
```

### 常用字符匹配

```
.        表示匹配任意单个字符  
*        表示匹配前面的字符任意次，包括0次

[  ]     表示匹配指定范围内的任意单个字符  
[^  ]    表示匹配指定范围外的任意单个字符  
   
[[:alpha:]]  表示任意大小写字母  
[[:lower:]]  表示任意小写字母  
[[:upper:]]  表示任意大写字母  
[[:digit:]]  表示0到9之间的任意单个数字（包括0和9）  
[[:alnum:]]  表示任意数字或字母  
[[:space:]]  表示任意空白字符，包括"空格"、"tab键"等。  
[[:punct:]]  表示任意标点符号  
   
[0-9]        与[[:digit:]]等效  
[a-z]        与[[:lower:]]等效  
[A-Z]        与[[:upper:]]等效  
[a-zA-Z]     与[[:alpha:]]等效  
[a-zA-Z0-9]  与[[:alnum:]]等效  
   
[^0-9]       与[^[:digit:]]等效  
[^a-z]       与[^[:lower:]]等效  
[^A-Z]       与[^[:upper:]]等效  
[^a-zA-Z]    与[^[:alpha:]]等效  
[^a-zA-Z0-9] 与[^[:alnum:]]等效  
```

### 简短格式并非所有正则表达式解析器都可以识别

```
\d    表示任意单个0到9的数字  
\D    表示任意单个非数字字符  
\t    表示匹配单个横向制表符（相当于一个tab键）  
\s    表示匹配单个空白字符，包括"空格"，"tab制表符"等  
\S    表示匹配单个非空白字符
```

### 分组和嵌套

```
\( \)     表示分组，我们可以将其中的内容当做一个整体，分组可以嵌套。  
\(ab\)    表示将ab当做一个整体去处理。  
\1        表示引用整个表达式中第1个分组中的正则匹配到的结果。  
\2        表示引用整个表达式中第2个分组中的正则匹配到的结果。
```

### 转义符-反斜杠

```
\
```

## 扩展正则表达式

在普通正则符号再进行扩展。

### 常用符号

```
*.     表示任意单个字符。  
*      表示前面的字符连续出现任意次，包括0次。  
.*     表示任意长度的任意字符，与通配符中的*的意思相同。  
\      表示转义符，当与正则表达式中的符号结合时表示符号本身。  
|      表示"或者"之意  
[  ]   表示匹配指定范围内的任意单个字符。  
[^  ]  表示匹配指定范围外的任意单个字符。  
```

   

### 单个字符匹配相关

```
[[:alpha:]]   表示任意大小写字母。  
[[:lower:]]   表示任意小写字母。  
[[:upper:]]   表示任意大写字母。  
[[:digit:]]   表示0到9之间的任意单个数字（包括0和9）。  
[[:alnum:]]   表示任意数字或字母。  
[[:space:]]   表示任意空白字符，包括"空格"、"tab键"等。  
[[:punct:]]   表示任意标点符号。  
[^[:alpha:]]  表示单个非字母字符。  
[^[:lower:]]  表示单个非小写字母字符。  
[^[:upper:]]  表示单个非大写字母字符。  
[^[:digit:]]  表示单个非数字字符。  
[^[:alnum:]]  表示单个非数字非字母字符。  
[^[:space:]]  表示单个非空白字符。  
[^[:punct:]]  表示单个非标点符号字符。  
[0-9]         与[[:digit:]]等效。  
[a-z]         与[[:lower:]]等效。  
[A-Z]         与[[:upper:]]等效。  
[a-zA-Z]      与[[:alpha:]]等效。  
[a-zA-Z0-9]   与[[:alnum:]]等效。  
[^0-9]        与[^[:digit:]]等效。  
[^a-z]        与[^[:lower:]]等效。  
[^A-Z]        与[^[:upper:]]等效  
[^a-zA-Z]     与[^[:alpha:]]等效  
[^a-zA-Z0-9]  与[^[:alnum:]]等效  
```

   

### 次数匹配相关

```
?       表示匹配其前面的字符0或1次  
+       表示匹配其前面的字符至少1次，或者连续多次，连续次数上不封顶。  
{n}     表示前面的字符连续出现n次，将会被匹配到。  
{x,y}   表示之前的字符至少连续出现x次，最多连续出现y次，都能被匹配到，换句话说，只要之前的字符连续出现的次数在x与y之间，即可被匹配到。  
{,n}    表示之前的字符连续出现至多n次，最少0次，都会陪匹配到。  
{n,}    表示之前的字符连续出现至少n次，才会被匹配到。  
```

   

### 位置边界匹配

```
^         表示锚定行首，此字符后面的任意内容必须出现在行首，才能匹配。  
$         表示锚定行尾，此字符前面的任意内容必须出现在行尾，才能匹配。  
^$        表示匹配空行，这里所描述的空行表示"回车"，而"空格"或"tab"等都不能算作此处所描述的空行。  
^abc$     表示abc独占一行时，会被匹配到。  
\<或者\b   匹配单词边界，表示锚定词首，其后面的字符必须作为单词首部出现。  
\>或者\b   匹配单词边界，表示锚定词尾，其前面的字符必须作为单词尾部出现。  
\B        匹配非单词边界，与\b正好相反。  
```

   

### 分组与后向引用

```
( )    表示分组，我们可以将其中的内容当做一个整体，分组可以嵌套。  
(ab)   表示将ab当做一个整体去处理。  
\1     表示引用整个表达式中第1个分组中的正则匹配到的结果。  
\2     表示引用整个表达式中第2个分组中的正则匹配到的结果。*
```

## 零宽断言

在使用正则表达式时，有时我们需要捕获的内容前后必须是特定内容，但又不捕获这些特定内容的时候，零宽断言就起到作用了。

零宽断言正如它的名字一样，是一种零宽度的匹配，它最终匹配结果只是一个位置而已。

零宽断言有正向（positive）、负向（negative）、先行（lookahead）、后行（lookbehind），一共有4种组合形式：

- **(?=exp)**     零宽正向先行断言(zero-width positive lookahead assertion)
- **(?<=exp)**   零宽正向后行断言(zero-width positive lookbehind assertion)
- **(?!exp)**      零宽负向先行断言(zero-width negative lookahead assertion)
- **(?<!exp)**    零宽负向后行断言(zero-width negative lookbehind assertion)

其中exp是一个正则表达式。

##### （1）先行（lookahead） & 后行（lookbehind）

先行断言，是当扫描指针位于某处时，引擎会尝试匹配指针还未扫过的字符，先于指针到达该字符，故称为先行。

后行断言，引擎会尝试匹配指针已扫过的字符，后于指针到达该字符，故称为后行。

##### （2）正向（positive）和负向（negative）

正向就表示匹配括号中的表达式，负向表示不匹配。

##### （3）表达式详解

eg.：`(?<=exp)`

- `?`表示零宽；
- `reg`表示这个宽度为零的（边界）的表达式；
- `<`箭头向后，就是lookbehind；没有箭头，默认为正向lookahead;
- `=`等于，就是匹配，positive；`!`不等于就是不匹配，negative;

| 操作符         | 说明                                                 | 实例                                                              |
| ----------- | -------------------------------------------------- | --------------------------------------------------------------- |
| `(?=exp)`   | **正向先行断言**，代表字符串中的一个位置，**紧接该位置之后**的字符序列能够匹配exp     | `echo "a regular expression" \| grep -oP 're(?=gular)'`, 匹配`re` |
| `(?<=exp )` | **正向后行断言**，代表字符串中的一个位置，**紧接该位置之前**的字符序列能够匹配exp     | `echo "ip: 11.0.1.2" \| grep -oP "(?<=ip:)\s.*"`, 匹配`11.0.1.2`  |
| `(?!exp)`   | **负向先行断言**，代表字符串中的一个位置，**紧接该位置之后**的字符序列**不能匹配exp** |                                                                 |
| `(?<!exp)`  | **负向后行断言**，代表字符串中的一个位置，**紧接该位置之前**的字符序列**不能匹配exp** |                                                                 |
