<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>第2部分 on Justice的小站</title><link>https://justice.bj.cn/categories/%E7%AC%AC2%E9%83%A8%E5%88%86/</link><description>Recent content in 第2部分 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 02 Jan 2024 18:45:57 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/categories/%E7%AC%AC2%E9%83%A8%E5%88%86/index.xml" rel="self" type="application/rss+xml"/><item><title>大名鼎鼎的进程调度就是从这里开始的</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/18.%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%88%9D%E5%A7%8B%E5%8C%96sched_init/</link><pubDate>Tue, 02 Jan 2024 18:45:57 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/18.%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%88%9D%E5%A7%8B%E5%8C%96sched_init/</guid><description>大名鼎鼎的进程调度就是从这里开始的 书接上回，上回书咱们说到，time_init 方法通过与 CMOS 端口进行读写交互，获取到了年月日时分秒等数据，并通</description></item><item><title>操作系统就是用这两个面试常考的结构管理的缓冲区</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/19.%E7%BC%93%E5%86%B2%E5%8C%BA%E5%88%9D%E5%A7%8B%E5%8C%96buffer_init/</link><pubDate>Tue, 02 Jan 2024 18:45:57 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/19.%E7%BC%93%E5%86%B2%E5%8C%BA%E5%88%9D%E5%A7%8B%E5%8C%96buffer_init/</guid><description>操作系统就是用这两个面试常考的结构管理的缓冲区 书接上回，上回书我们说到了进程调度的初始化，定义了一个长度为 64 的 task 数组用于管理全部进程的结构。</description></item><item><title>你的键盘是什么时候生效的？</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/14.%E4%B8%AD%E6%96%AD%E5%88%9D%E5%A7%8B%E5%8C%96trap_init/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/14.%E4%B8%AD%E6%96%AD%E5%88%9D%E5%A7%8B%E5%8C%96trap_init/</guid><description>你的键盘是什么时候生效的？ 当你的计算机刚刚启动时，你按下键盘是不生效的，但是过了一段时间后，再按下键盘就有效果了。 那我们今天就来刨根问底一下</description></item><item><title>原来操作系统获取时间的方式也这么low</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/17.%E6%97%B6%E9%97%B4%E5%88%9D%E5%A7%8B%E5%8C%96time_init/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/17.%E6%97%B6%E9%97%B4%E5%88%9D%E5%A7%8B%E5%8C%96time_init/</guid><description>原来操作系统获取时间的方式也这么low 书接上回，上回书咱们说到，通过初始化控制台的 tty_init 操作，内核代码可以很方便地在控制台输出字符啦！ 作为用户也</description></item><item><title>按下键盘后为什么屏幕上就会有输出</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/16.%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%88%9D%E5%A7%8B%E5%8C%96tty_init/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/16.%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%88%9D%E5%A7%8B%E5%8C%96tty_init/</guid><description>按下键盘后为什么屏幕上就会有输出 继内存管理结构 mem_map 和中断描述符表 idt 建立好之后，我们又在内存中倒腾出一个新的数据结构 request。 并且把它们都</description></item><item><title>第二部分小结</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E9%A1%BE/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E9%A1%BE/</guid><description>第二部分小结 第二部分所讲的代码，就和第二部分的目录一样规整，一个 init 方法对应一个章节，简单粗暴。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void main(void) {</description></item><item><title/><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/20.%E7%A1%AC%E7%9B%98%E5%88%9D%E5%A7%8B%E5%8C%96hd_init/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/20.%E7%A1%AC%E7%9B%98%E5%88%9D%E5%A7%8B%E5%8C%96hd_init/</guid><description/></item><item><title>操作系统就用一张大表管理内存？</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/13.%E4%B8%BB%E5%86%85%E5%AD%98%E5%88%9D%E5%A7%8B%E5%8C%96mem_init/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/13.%E4%B8%BB%E5%86%85%E5%AD%98%E5%88%9D%E5%A7%8B%E5%8C%96mem_init/</guid><description>操作系统就用一张大表管理内存？ 今天我们不聊具体内存管理的算法，我们就来看看，操作系统用什么样的一张表，达到了管理内存的效果。 我们以 Linux 0.11 源码为</description></item><item><title>整个操作系统就 20 几行代码</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/11.%E6%95%B4%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B0%B120%E5%87%A0%E8%A1%8C%E4%BB%A3%E7%A0%81/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/11.%E6%95%B4%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B0%B120%E5%87%A0%E8%A1%8C%E4%BB%A3%E7%A0%81/</guid><description>整个操作系统就 20 几行代码 在第一部分，用了总共十回的篇章，把进入 main 方法前的苦力工作都完成了，我们的程序终于跳到第一个由 c 语言写的，也是操作系统</description></item><item><title>管理内存前先划分出三个边界值</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/12.%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98%E5%89%8D%E5%85%88%E5%88%92%E5%88%86%E5%87%BA%E4%B8%89%E4%B8%AA%E8%BE%B9%E7%95%8C%E5%80%BC/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/12.%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98%E5%89%8D%E5%85%88%E5%88%92%E5%88%86%E5%87%BA%E4%B8%89%E4%B8%AA%E8%BE%B9%E7%95%8C%E5%80%BC/</guid><description>管理内存前先划分出三个边界值 上回书咱们回顾了一下 main.c 函数之前我们做的全部工作，给进入 main 函数做了一个充分的准备。 那今天我们就话不多说，从 main 函数的</description></item><item><title>读取硬盘前的准备工作有哪些？</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/15.%E5%9D%97%E8%AE%BE%E5%A4%87%E8%AF%B7%E6%B1%82%E9%A1%B9%E5%88%9D%E5%A7%8B%E5%8C%96blk_dev_init/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/15.%E5%9D%97%E8%AE%BE%E5%A4%87%E8%AF%B7%E6%B1%82%E9%A1%B9%E5%88%9D%E5%A7%8B%E5%8C%96blk_dev_init/</guid><description>读取硬盘前的准备工作有哪些？ 读取硬盘数据到内存中，是操作系统的一个基础功能。 读取硬盘需要有块设备驱动程序，而以文件的方式来读取则还有要再上面</description></item></channel></rss>