<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c++ on Justice的小站</title><link>https://justice.bj.cn/categories/c++/</link><description>Recent content in c++ on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 07 Mar 2024 11:58:54 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/categories/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>STL容器</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl%E5%AE%B9%E5%99%A8/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl%E5%AE%B9%E5%99%A8/</guid><description>STL容器 简介 容器库是类模板与算法的汇集，允许程序员简单地访问常见数据结构，例如队列、链表和栈。 有三类容器——顺序容器、关联容器和无序关联容</description></item><item><title>C++基础</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 26 Apr 2022 16:43:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%9F%BA%E7%A1%80/</guid><description>C++基础 简介 内存分配 构造析构 默认函数(Defaulted 函数) 1 2 3 4 5 6 Object() {} //默认构造函数 ~Object() {} //析构函数 Object(const Object&amp;amp;) {} //复制构造函数 Object(Object&amp;amp;&amp;amp;) {} /</description></item><item><title>C++11左值与右值</title><link>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link><pubDate>Tue, 26 Apr 2022 15:22:45 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++-%E5%B7%A6%E5%80%BC%E5%BC%95%E7%94%A8%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid><description>C++11左值与右值 简介 在C++11之前，表达式的值按出现在=的位置不同可简单分为左值和右值2种； 在C++11中，为了实现函数参数传递的零拷</description></item><item><title>C++ string</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Wed, 20 Apr 2022 21:59:14 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>C++ string 简介 std::string C++ 字符串库支持三种通用字符串类型： std::basic_string ——为操作任何字符类型的字符串设计的模板类。 std::basic_string_view (C++17) ——对于字符串子序列的轻量无所有权的只读视图。</description></item><item><title>C++11</title><link>https://justice.bj.cn/post/14.language/c++/c++11/</link><pubDate>Fri, 15 Apr 2022 23:32:23 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++11/</guid><description>C++11 左值与右值 可以取地址的，有名字的，非临时的就是左值； 不能取地址的，没有名字的，临时的就是右值； thread_local thread_local 变量是 C++ 11 新引入的一种存储类型,这些变量</description></item><item><title>STL迭代器</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl%E8%BF%AD%E4%BB%A3%E5%99%A8/</link><pubDate>Fri, 15 Apr 2022 23:32:23 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid><description>STL迭代器 简介 STL迭代器为STL容器提供遍历相关的操作的统一接口 参考 cppreferenc.com迭代器库</description></item><item><title>STL简介</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl%E7%AE%80%E4%BB%8B/</link><pubDate>Thu, 20 Jan 2022 22:03:10 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl%E7%AE%80%E4%BB%8B/</guid><description>STL简介 简介 STL，Standard Template Library，是C++标准委员会推出的c++标准库。主要由6大组成部分：容器（containers</description></item><item><title>STL-deque</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl-deque/</link><pubDate>Mon, 17 Jan 2022 09:36:57 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl-deque/</guid><description>STL-deque 简介 参考</description></item><item><title>智能指针</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link><pubDate>Tue, 11 Jan 2022 20:36:42 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid><description>智能指针 简介 智能指针(smart pointer)是C++用来自动管理对象生命周期的模板类； 头文件 #include &amp;lt;memory&amp;gt;； unique_ptr 独占指针，</description></item><item><title>C++ 队列设计</title><link>https://justice.bj.cn/post/14.language/c++/ulities/current-queue/</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/current-queue/</guid><description>C++ 队列设计 简单 Queue 同步 Queue 无锁同步 Queue</description></item><item><title>fastcommon</title><link>https://justice.bj.cn/post/14.language/c++/ulities/fastcommon/</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/fastcommon/</guid><description>fastcommon 简介 build error Fixes deprecated syscall issue on macOS 10.12 gettid 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include &amp;lt;pthread.h&amp;gt; pid_t GetCurrentThreadId(){ pid_t tid = 0; #if defined(__linux__) tid = syscall(SYS_gettid); #elif defined(__APPLE__) &amp;amp;&amp;amp; defined(__MACH__) tid = syscall(SYS_thread_selfid); uint64_t tid64; pthread_threadid_np(NULL, &amp;amp;tid64); tid = (pid_t)tid64; #endif return tid; }</description></item><item><title>jsoncpp</title><link>https://justice.bj.cn/post/14.language/c++/ulities/jsoncpp/</link><pubDate>Tue, 28 Sep 2021 23:23:44 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/jsoncpp/</guid><description>jsoncpp 简介 用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // build: -ljson #include &amp;#34;json/json.h&amp;#34; string func() { Json::Value person; person[&amp;#34;ID&amp;#34;] = student.ID; person[&amp;#34;name&amp;#34;] = student.name; person[&amp;#34;age&amp;#34;]=student.age; person[&amp;#34;gender&amp;#34;]=student.gender; person[&amp;#34;major&amp;#34;]=student.major; Json::StreamWriterBuilder builder; ostringstream oss; //builder.settings_[&amp;#34;indentation&amp;#34;] = &amp;#34;&amp;#34;; std::unique_ptr&amp;lt;Json::StreamWriter&amp;gt; writer(builder.newStreamWriter()); writer-&amp;gt;write(person, &amp;amp;oss); return oss.str(); }</description></item><item><title>C++并发</title><link>https://justice.bj.cn/post/14.language/c++/c++%E5%B9%B6%E5%8F%91/</link><pubDate>Fri, 25 Dec 2020 10:57:29 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E5%B9%B6%E5%8F%91/</guid><description>C++并发 多线程 同步 互斥量(mutex) mutex: lock_guard: 严格基于作用域的互斥体所有权包装器, 通过 RAII 机制实现 mutex 的封装，创建 lock_guard 对象时，它试图接收给定互斥的所</description></item><item><title>C++日志</title><link>https://justice.bj.cn/post/14.language/c++/ulities/c++log/</link><pubDate>Fri, 25 Dec 2020 10:57:29 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/c++log/</guid><description>C++日志 muduo-AsyncLog 双缓冲异步日志 双缓冲buffer 优化时间 zlog z-log是一个高性能、线程安全、灵活、概念清晰的纯C日志函数库。 g3log G3log 是一个开源、支持</description></item><item><title>c++时钟</title><link>https://justice.bj.cn/post/14.language/c++/c++%E6%97%B6%E9%92%9F/</link><pubDate>Fri, 25 Dec 2020 10:57:29 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/c++%E6%97%B6%E9%92%9F/</guid><description>c++时钟 简介 ratio 时间间隔(duration) 时间点(time_point) 时钟(clock) system_clock steady_clock High_resolution_clock 参考 https://blog.csdn.net/luotuo44/article/details/39374759#t0</description></item><item><title>动态内存管理</title><link>https://justice.bj.cn/post/14.language/c++/%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Fri, 25 Dec 2020 10:57:29 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>动态内存管理 智能指针 智能指针使得自动、异常安全的对象生存期管理可行。 定义于头文件 &amp;lt;memory&amp;gt; 指针类别 unique_ptr 拥有独有对象所有权语义的智能指针 (类模板) shared_ptr (C++11) 拥</description></item></channel></rss>