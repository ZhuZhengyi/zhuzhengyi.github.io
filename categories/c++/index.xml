<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c++ on Justice的小站</title><link>https://justice.bj.cn/categories/c++/</link><description>Recent content in c++ on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://justice.bj.cn/categories/c++/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://justice.bj.cn/post/14.language/c++/ulities/current-queue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/current-queue/</guid><description>C++ 队列设计 简单Queue 同步Queue 无锁同步Queue</description></item><item><title/><link>https://justice.bj.cn/post/14.language/c++/ulities/jsoncpp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/c++/ulities/jsoncpp/</guid><description>jsoncpp 简介 用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // build: -ljson #include &amp;#34;json/json.h&amp;#34; string func() { Json::Value person; person[&amp;#34;ID&amp;#34;] = student.ID; person[&amp;#34;name&amp;#34;] = student.name; person[&amp;#34;age&amp;#34;]=student.age; person[&amp;#34;gender&amp;#34;]=student.gender; person[&amp;#34;major&amp;#34;]=student.major; Json::StreamWriterBuilder builder; ostringstream oss; //builder.settings_[&amp;#34;indentation&amp;#34;] = &amp;#34;&amp;#34;; std::unique_ptr&amp;lt;Json::StreamWriter&amp;gt; writer(builder.newStreamWriter()); writer-&amp;gt;write(person, &amp;amp;oss); return oss.str(); }</description></item></channel></rss>