<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux-0.11源码解读 on Justice的小站</title><link>https://justice.bj.cn/categories/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</link><description>Recent content in linux-0.11源码解读 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 06 Jan 2024 09:05:06 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/categories/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/index.xml" rel="self" type="application/rss+xml"/><item><title>20.1.第2部分小结</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E9%A1%BE/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E9%A1%BE/</guid><description>20.1.第2部分小结 第二部分所讲的代码，就和第二部分的目录一样规整，一个 init 方法对应一个章节，简单粗暴。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description></item><item><title>22.从内核态到用户态</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC3%E9%83%A8%E5%88%86/22.%E4%BB%8E%E5%86%85%E6%A0%B8%E6%80%81%E5%88%87%E6%8D%A2%E5%88%B0%E7%94%A8%E6%88%B7%E6%80%81/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC3%E9%83%A8%E5%88%86/22.%E4%BB%8E%E5%86%85%E6%A0%B8%E6%80%81%E5%88%87%E6%8D%A2%E5%88%B0%E7%94%A8%E6%88%B7%E6%80%81/</guid><description>22.从内核态到用户态 书接上回，上回书咱们从整体上鸟瞰了一下第三部分要讲的内容，代码上就是还差四句话就走到了 main 函数的尽头。 1 2 3 4 5 6 7 8 9</description></item><item><title>23.进程调度</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC3%E9%83%A8%E5%88%86/23.%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC3%E9%83%A8%E5%88%86/23.%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid><description>23.进程调度 书接上回，上回书咱们说到，操作系统通过 move_to_user_mode 方法，通过伪造一个中断和中断返回，巧妙地从内核态切换到了用户态。 1 2 3 4 5 6 7 8 void main(void) {</description></item><item><title>24.定时器</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC3%E9%83%A8%E5%88%86/24.%E4%BB%8E%E4%B8%80%E6%AC%A1%E5%AE%9A%E6%97%B6%E5%99%A8%E6%BB%B4%E7%AD%94%E6%9D%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC3%E9%83%A8%E5%88%86/24.%E4%BB%8E%E4%B8%80%E6%AC%A1%E5%AE%9A%E6%97%B6%E5%99%A8%E6%BB%B4%E7%AD%94%E6%9D%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid><description>24.定时器 书接上回，上回书咱们说到，我们完全由自己从零到有设计出了进程调度的大体流程，以及它需要的数据结构。 1 2 3 4 5 6 7 struct task_struct { long state; long counter; long</description></item><item><title>26.fork中进程基本信息的复制</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC3%E9%83%A8%E5%88%86/26.fork%E4%B8%AD%E8%BF%9B%E7%A8%8B%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E7%9A%84%E5%A4%8D%E5%88%B6/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC3%E9%83%A8%E5%88%86/26.fork%E4%B8%AD%E8%BF%9B%E7%A8%8B%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E7%9A%84%E5%A4%8D%E5%88%B6/</guid><description>26.fork中进程基本信息的复制 书接上回，上回书咱们说到，fork 触发系统调用中断，最终调用到了 sys_fork 函数，借这个过程介绍了一次系统调用的流程</description></item><item><title>27.进程的内存规划</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC3%E9%83%A8%E5%88%86/27.fork%E4%B8%AD%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E8%A7%84%E5%88%92%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC3%E9%83%A8%E5%88%86/27.fork%E4%B8%AD%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E8%A7%84%E5%88%92%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>27.进程的内存规划 书接上回，上回书咱们说到，fork 函数为新的进程（进程 1）申请了槽位，并把全部 task_struct 结构的值都从进程零复制了过来。 之后，覆盖</description></item><item><title>30.写时复制</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC3%E9%83%A8%E5%88%86/30.%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6%E5%B0%B1%E8%BF%99%E4%B9%88%E5%87%A0%E8%A1%8C%E4%BB%A3%E7%A0%81/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC3%E9%83%A8%E5%88%86/30.%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6%E5%B0%B1%E8%BF%99%E4%B9%88%E5%87%A0%E8%A1%8C%E4%BB%A3%E7%A0%81/</guid><description>30.写时复制 储备知识 32 位模式下，Intel 设计了页目录表和页表两种结构，用来给程序员们提供分页机制。 在 Intel Volume-3 Chapter 4.3 Figure 4-4 中给出了页表和页目录表的</description></item><item><title>32.加载根文件系统</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC4%E9%83%A8%E5%88%86/32.%E5%8A%A0%E8%BD%BD%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC4%E9%83%A8%E5%88%86/32.%E5%8A%A0%E8%BD%BD%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid><description>32.加载根文件系统 书接上回，上回书咱们说到，我们已经把硬盘的基本信息存入了 hd_info[]。 把硬盘的分区信息存入了 hd[]。 并且留了个读</description></item><item><title>33.打开终端设备文件</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC4%E9%83%A8%E5%88%86/33.%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC4%E9%83%A8%E5%88%86/33.%E6%89%93%E5%BC%80%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6/</guid><description>33.打开终端设备文件 书接上回，上回书咱们说到， setup 函数的一番折腾，加载了根文件系统，顺着根 inode 可以找到所有文件，为后续工作奠定了基础。 而有了这</description></item><item><title>35.扒开execve的皮</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC4%E9%83%A8%E5%88%86/35.execve%E5%8A%A0%E8%BD%BD%E5%B9%B6%E6%89%A7%E8%A1%8Cshell%E7%A8%8B%E5%BA%8F/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC4%E9%83%A8%E5%88%86/35.execve%E5%8A%A0%E8%BD%BD%E5%B9%B6%E6%89%A7%E8%A1%8Cshell%E7%A8%8B%E5%BA%8F/</guid><description>35.扒开execve的皮 书接上回，上回书咱们说到，进程 1 再次通过 fork 函数创建了进程 2，且进程 2 通过 close 和 open 函数，将 0 号文件描述符指向的标准输入</description></item><item><title>36.缺页中断</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC4%E9%83%A8%E5%88%86/36.%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC4%E9%83%A8%E5%88%86/36.%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD/</guid><description>36.缺页中断 书接上回，上回书咱们说到，进程 2 通过 execve 函数，将自己摇身一变成为 /bin/sh 程序，也就是 shell 程序开始执行。 1 2 3 4 5 6 7 8 9 10 11 // main.c void init(void) { ...</description></item><item><title>39.调试Linux最早期的代码</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC4%E9%83%A8%E5%88%86/39.%E7%95%AA%E5%A4%96%E7%AF%87-linux_0.11%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC4%E9%83%A8%E5%88%86/39.%E7%95%AA%E5%A4%96%E7%AF%87-linux_0.11%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95/</guid><description>39.调试Linux最早期的代码 Linux 0.11 是 Linux 最早期的代码，非常适合作为第一款深入探索操作系统原理的代码。 但同时，Linux 0.11 因为很多古老工具链的</description></item><item><title>41.命令执行过程</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/41.%E7%95%AA%E5%A4%96%E7%AF%87-%E8%B7%B3%E7%A5%A8%E6%98%AF%E4%B8%8D%E5%8F%AF%E8%83%BD%E7%9A%84/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/41.%E7%95%AA%E5%A4%96%E7%AF%87-%E8%B7%B3%E7%A5%A8%E6%98%AF%E4%B8%8D%E5%8F%AF%E8%83%BD%E7%9A%84/</guid><description>41.命令执行过程 这部分要讲啥呢？很简单。 新建一个非常简单的 info.txt 文件。 1 2 3 name:flash age:28 language:java 在命令行输入一条十分简单的命令。 1 2 [root@linux0.11] cat info.txt | wc -l 3 这条命令的</description></item><item><title>42.用键盘输入一条命令</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/42.%E7%94%A8%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/42.%E7%94%A8%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4/</guid><description>42.用键盘输入一条命令 新建一个非常简单的 info.txt 文件。 1 2 3 name:flash age:28 language:java 在命令行输入一条十分简单的命令。 1 2 [root@linux0.11] cat info.txt | wc -l 3 这条命令的意思是读取刚刚的 info.txt</description></item><item><title>43.shell 程序读取你的命令</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/43.shell%E7%A8%8B%E5%BA%8F%E8%AF%BB%E5%8F%96%E4%BD%A0%E7%9A%84%E5%91%BD%E4%BB%A4/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/43.shell%E7%A8%8B%E5%BA%8F%E8%AF%BB%E5%8F%96%E4%BD%A0%E7%9A%84%E5%91%BD%E4%BB%A4/</guid><description>43.shell 程序读取你的命令 新建一个非常简单的 info.txt 文件。 1 2 3 name:flash age:28 language:java 在命令行输入一条十分简单的命令。 1 [root@linux0.11] cat info.txt | wc -l3 这条命令的意思是读取刚刚的 info.txt 文件，输出</description></item><item><title>44.进程的阻塞与唤醒</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/44.%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%98%BB%E5%A1%9E%E4%B8%8E%E5%94%A4%E9%86%92/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/44.%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%98%BB%E5%A1%9E%E4%B8%8E%E5%94%A4%E9%86%92/</guid><description>44.进程的阻塞与唤醒 新建一个非常简单的 info.txt 文件。 1 2 3 name:flash age:28 language:java 在命令行输入一条十分简单的命令。 1 [root@linux0.11] cat info.txt | wc -l3 这条命令的意思是读取刚刚的 info.txt 文件，</description></item><item><title>45.解析并执行 shell 命令</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/45.%E8%A7%A3%E6%9E%90%E5%B9%B6%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/45.%E8%A7%A3%E6%9E%90%E5%B9%B6%E6%89%A7%E8%A1%8Cshell%E5%91%BD%E4%BB%A4/</guid><description>45.解析并执行 shell 命令 新建一个非常简单的 info.txt 文件。 1 2 3 name:flash age:28 language:java 在命令行输入一条十分简单的命令。 1 [root@linux0.11] cat info.txt | wc -l3 这条命令的意思是读取刚刚的 info.txt 文件，</description></item><item><title>46.读硬盘数据全流程</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/46.%E8%AF%BB%E7%A1%AC%E7%9B%98%E6%95%B0%E6%8D%AE%E5%85%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/46.%E8%AF%BB%E7%A1%AC%E7%9B%98%E6%95%B0%E6%8D%AE%E5%85%A8%E6%B5%81%E7%A8%8B/</guid><description>46.读硬盘数据全流程 新建一个非常简单的 info.txt 文件。 1 2 3 4 5 $ cat &amp;gt; info.txt &amp;lt;&amp;lt;EOF name:flash age:28 language:java EOF 在命令行输入一条十分简单的命令。 1 [root@linux0.11] cat info.txt | wc -l3 这条命令的意思是读</description></item><item><title>47.读取硬盘数据的细节</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/47.%E8%AF%BB%E5%8F%96%E7%A1%AC%E7%9B%98%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%86%E8%8A%82/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/47.%E8%AF%BB%E5%8F%96%E7%A1%AC%E7%9B%98%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%86%E8%8A%82/</guid><description>47.读取硬盘数据的细节 新建一个非常简单的 info.txt 文件。 1 2 3 4 5 cat &amp;gt; info.txt &amp;lt;&amp;lt;EOF name:flash age:28 language:java EOF 在命令行输入一条十分简单的命令。 1 2 [root@linux0.11]$ cat info.txt | wc -l 3 这条命令的意思</description></item><item><title>48.信号</title><link>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/48.%E4%BF%A1%E5%8F%B7/</link><pubDate>Sat, 06 Jan 2024 09:05:06 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC5%E9%83%A8%E5%88%86/48.%E4%BF%A1%E5%8F%B7/</guid><description>48.信号 新建一个非常简单的 info.txt 文件。 1 2 3 4 5 [root@linux0.11]$ cat &amp;gt; info.txt &amp;lt;&amp;lt;EOF name:flash age:28 language:java EOF 在命令行输入一条十分简单的命令。 1 2 [root@linux0.11]$ cat info.txt | wc -l 3 这条命令的意思是读取刚刚的</description></item></channel></rss>