<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>leetcode on Justice的小站</title><link>https://justice.bj.cn/categories/leetcode/</link><description>Recent content in leetcode on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 17 Sep 2023 09:23:03 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/categories/leetcode/index.xml" rel="self" type="application/rss+xml"/><item><title>专题：二分查找</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link><pubDate>Sun, 17 Sep 2023 09:23:03 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid><description>专题：二分查找 简介 二分查找法是一种高效的查找方法, 其拥有$log(n)$的时间复杂度. 其前置条件只有一个:有序数组. 在处理有序数组时, 可以优</description></item><item><title>打家劫舍</title><link>https://justice.bj.cn/post/leetcode/198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</link><pubDate>Sun, 17 Sep 2023 09:23:03 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</guid><description>打家劫舍 Category Difficulty Likes Dislikes algorithms Medium (52.98%) 2095 - Tags dynamic-programming Companies airbnb | linkedin 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房</description></item><item><title>绝对差值和</title><link>https://justice.bj.cn/post/leetcode/1818.%E7%BB%9D%E5%AF%B9%E5%B7%AE%E5%80%BC%E5%92%8C/</link><pubDate>Sun, 17 Sep 2023 09:23:03 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/1818.%E7%BB%9D%E5%AF%B9%E5%B7%AE%E5%80%BC%E5%92%8C/</guid><description>绝对差值和 Category Difficulty Likes Dislikes algorithms Medium (37.55%) 156 - Tags Unknown Companies Unknown 给你两个正整数数组 nums1 和 nums2 ，数组的长度都是 n 。 数组 nums1 和 nums2 的 绝对差值和 定义为所有 |nums1[i] - nums2[i]|（0 &amp;lt;=</description></item><item><title>二叉树的层序遍历</title><link>https://justice.bj.cn/post/leetcode/102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</link><pubDate>Wed, 13 Sep 2023 21:40:20 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</guid><description>二叉树的层序遍历 Category Difficulty Likes Dislikes algorithms Medium (60.88%) 391 - Tags tree | breadth-first-search Companies amazon | apple | bloomberg | facebook | linkedin | microsoft 给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点</description></item><item><title>翻转对</title><link>https://justice.bj.cn/post/leetcode/493.%E7%BF%BB%E8%BD%AC%E5%AF%B9/</link><pubDate>Wed, 13 Sep 2023 21:40:20 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/493.%E7%BF%BB%E8%BD%AC%E5%AF%B9/</guid><description>翻转对 Category Difficulty Likes Dislikes algorithms Hard (36.60%) 418 - Tags binary-search | divide-and-conquer | sort | binary-indexed-tree | segment-tree Companies google 给定一个数组 nums ，如果 i &amp;lt; j 且 nums[i] &amp;gt; 2*nums[j] 我们就将 (i, j) 称作一个重要翻转对。 你需要返回给定数组中的重要</description></item><item><title>专题：二叉树</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/</link><pubDate>Tue, 12 Sep 2023 08:46:11 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><description>专题：二叉树 简介 二叉树是一个递归的结构 基本操作 遍历 计算高度 计算宽度 遍历 前序遍历: 又叫先根遍历, 递归顺序为: 根节点-&amp;gt;左子树-&amp;gt;右</description></item><item><title>二叉树展开为链表</title><link>https://justice.bj.cn/post/leetcode/114.%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</link><pubDate>Tue, 12 Sep 2023 08:46:11 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/114.%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</guid><description>二叉树展开为链表 Category Difficulty Likes Dislikes algorithms Medium (68.83%) 340 - Tags tree | depth-first-search Companies microsoft 给定一个二叉树，原地将它展开为一个单链表。 例如，给定二叉树 1 2 3 4 5 1 / \ 2 5 / \ \ 3 4 6 将其</description></item><item><title>二叉树的右视图</title><link>https://justice.bj.cn/post/leetcode/199.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/</link><pubDate>Tue, 12 Sep 2023 08:46:11 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/199.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/</guid><description>二叉树的右视图 Category Difficulty Likes Dislikes algorithms Medium (65.76%) 827 - Tags tree | depth-first-search | breadth-first-search Companies amazon 给定一个二叉树的 根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能</description></item><item><title>二叉树的最大深度</title><link>https://justice.bj.cn/post/leetcode/104.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</link><pubDate>Tue, 12 Sep 2023 08:46:11 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/104.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</guid><description>二叉树的最大深度 Category Difficulty Likes Dislikes algorithms Easy (77.12%) 1655 - Tags tree | depth-first-search Companies apple | linkedin | uber | yahoo 给定一个二叉树 root ，返回其最大深度。 二叉树的 最大深度 是指从根节点到最远叶子节点的最长</description></item><item><title>二叉树的最小深度</title><link>https://justice.bj.cn/post/leetcode/111.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</link><pubDate>Tue, 12 Sep 2023 08:46:11 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/111.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</guid><description>二叉树的最小深度 Category Difficulty Likes Dislikes algorithms Easy (49.24%) 656 - Tags tree | depth-first-search | breadth-first-search Companies Unknown 给定一个二叉树，找出其最小深度。 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。 说</description></item><item><title>专题：堆</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%A0%86/</link><pubDate>Mon, 11 Sep 2023 10:17:31 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%A0%86/</guid><description>专题：堆 简介 堆(heap)是一个基本数据结构, 其主要特征为堆顶元素为所有元素中的最大(大顶堆)或最小(小顶堆)元素; 堆常用来解决 top-k 问题; 堆的</description></item><item><title>专题：归并排序</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</link><pubDate>Mon, 11 Sep 2023 10:17:31 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid><description>专题：归并排序 简介 归并排序是一种$ Nlog(N) $时间复杂度的排序算法, 其主要使用了分治的思想，是一种不稳定排序算法。 归并排序法主要由以下3个阶段组成：</description></item><item><title>二叉树的层序遍历 II</title><link>https://justice.bj.cn/post/leetcode/107.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86ii/</link><pubDate>Mon, 11 Sep 2023 10:17:31 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/107.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86ii/</guid><description>二叉树的层序遍历 II Category Difficulty Likes Dislikes algorithms Medium (72.24%) 666 - Tags tree | breadth-first-search Companies Unknown 给你二叉树的根节点 root ，返回其节点值 自底向上的层序遍历 。 （即按从叶子节点所在层到根节点所在的层</description></item><item><title>最大数</title><link>https://justice.bj.cn/post/leetcode/179.%E6%9C%80%E5%A4%A7%E6%95%B0/</link><pubDate>Mon, 11 Sep 2023 10:17:31 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/179.%E6%9C%80%E5%A4%A7%E6%95%B0/</guid><description>最大数 Category Difficulty Likes Dislikes algorithms Medium (40.98%) 1185 - Tags sort Companies Unknown 给定一组非负整数 nums，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数。 **注意：**输出结</description></item><item><title>区域和检索 - 数组可修改</title><link>https://justice.bj.cn/post/leetcode/307.%E5%8C%BA%E5%9F%9F%E5%92%8C%E6%A3%80%E7%B4%A2-%E6%95%B0%E7%BB%84%E5%8F%AF%E4%BF%AE%E6%94%B9/</link><pubDate>Sun, 10 Sep 2023 17:31:20 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/307.%E5%8C%BA%E5%9F%9F%E5%92%8C%E6%A3%80%E7%B4%A2-%E6%95%B0%E7%BB%84%E5%8F%AF%E4%BF%AE%E6%94%B9/</guid><description>区域和检索 - 数组可修改 Category Difficulty Likes Dislikes algorithms Medium (52.17%) 619 - Tags binary-indexed-tree | segment-tree Companies Unknown 给你一个数组 nums ，请你完成两类查询。 其中一类查询要求 更新 数组 nums 下标对应的值 另一类查询要求返</description></item><item><title>计算右侧小于当前元素的个数</title><link>https://justice.bj.cn/post/leetcode/315.%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0/</link><pubDate>Sun, 10 Sep 2023 17:31:20 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/315.%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0/</guid><description>计算右侧小于当前元素的个数 Category Difficulty Likes Dislikes algorithms Hard (43.45%) 1009 - Tags binary-search | divide-and-conquer | sort | binary-indexed-tree | segment-tree Companies google 给你一个整数数组 nums ，按要求返回一个新数组 counts 。数组 counts 有该性质： counts[i] 的值是 nums[i] 右</description></item><item><title>区间和的个数</title><link>https://justice.bj.cn/post/leetcode/327.%E5%8C%BA%E9%97%B4%E5%92%8C%E7%9A%84%E4%B8%AA%E6%95%B0/</link><pubDate>Sat, 09 Sep 2023 18:46:13 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/327.%E5%8C%BA%E9%97%B4%E5%92%8C%E7%9A%84%E4%B8%AA%E6%95%B0/</guid><description>区间和的个数 Category Difficulty Likes Dislikes algorithms Hard (40.58%) 557 - Tags binary-search | divide-and-conquer | sort | binary-indexed-tree | segment-tree Companies google 给你一个整数数组 nums 以及两个整数 lower 和 upper 。求数组中，值位于范围 [lower, upper] （包含 lower 和 upper）之</description></item><item><title>专题：树状数组</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</link><pubDate>Sat, 09 Sep 2023 10:21:17 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</guid><description>专题：树状数组 简介 树状数组是一种用来计算区间和(涉及元素修改)的高效数据结构，其查询(计算区间和)和更新(修改单个元素值)操作都能只有O(l</description></item><item><title>专题- 并查集</title><link>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link><pubDate>Fri, 08 Sep 2023 16:58:39 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/%E4%B8%93%E9%A2%98/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid><description>专题: 并查集 简介 并查集是图论中计算「动态连通性」的一种数据结构, 可用于计算图的连通性相关问题. 基本操作 并查集支持两种基本操作： 合并（Unio</description></item><item><title>寻找峰值</title><link>https://justice.bj.cn/post/leetcode/162.%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/</link><pubDate>Fri, 08 Sep 2023 16:58:39 +0800</pubDate><guid>https://justice.bj.cn/post/leetcode/162.%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/</guid><description>寻找峰值 Category Difficulty Likes Dislikes algorithms Medium (49.31%) 1113 - Tags array | binary-search Companies google | microsoft 峰值元素是指其值严格大于左右相邻值的元素。 给你一个整数数组 nums，找到峰值元素并返回其索引。数组</description></item></channel></rss>