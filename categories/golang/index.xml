<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Justice的小站</title><link>https://justice.bj.cn/categories/golang/</link><description>Recent content in golang on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 02 Apr 2022 10:47:30 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang_Runtime</title><link>https://justice.bj.cn/post/14.language/golang/golang-runtime/</link><pubDate>Sat, 02 Apr 2022 10:47:30 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-runtime/</guid><description>Golang Runtime 简介 Go调度器的演化 源码分析 Go 程序启动后需要对自身运行时进行初始化，其真正的程序入口由 runtime 包控制。 以 AMD64 架构上的 Linux 和 macOS 为例，分别位于：src</description></item><item><title>Golang_内存管理</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 02 Apr 2022 10:47:30 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>Golang 内存管理 简介 Golang内存管理采用类似tcmalloc的分级分配算法，主要由MHeap、MCentral、MCache 3 级组成。按分配对</description></item><item><title>Golang_Channel</title><link>https://justice.bj.cn/post/14.language/golang/golang-channel/</link><pubDate>Thu, 17 Mar 2022 09:56:25 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-channel/</guid><description>Golang Channel 简介 Go语言channel是first-class的，可以被存储到变量中，可以作为参数传递给函数，也可以作为函数的返回值返回; chann</description></item><item><title>Golang_调试</title><link>https://justice.bj.cn/post/14.language/golang/golang%E8%B0%83%E8%AF%95/</link><pubDate>Mon, 07 Mar 2022 16:37:39 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E8%B0%83%E8%AF%95/</guid><description>Golang 调试 简介 Golang程序的调试工具包括gdb调试、go pprof性能调试工具及go gc分析工具。熟练掌握这些工具的基本用法对golang的</description></item><item><title>Golang数据结构之map</title><link>https://justice.bj.cn/post/14.language/golang/go%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bmap/</link><pubDate>Fri, 25 Feb 2022 22:06:38 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/go%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bmap/</guid><description>Golang数据结构之map 简介 用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //字面量初始化 hash1 := map[string]int{ &amp;#34;1&amp;#34;: 2, &amp;#34;3&amp;#34;: 4, &amp;#34;5&amp;#34;: 6, } //make初始化 hash2</description></item><item><title>Golang内存对齐</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link><pubDate>Fri, 18 Feb 2022 10:14:15 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid><description>Golang内存对齐 简介 CPU 始终以字长访问内存， 对齐保证(align guarantee) 结构体的成员变量，第一个成员变量的偏移量为 0。往后的每个成员变量的对齐值</description></item><item><title>Golang之interface</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Binterface/</link><pubDate>Fri, 11 Feb 2022 20:24:35 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Binterface/</guid><description>Golang之interface 简介 接口是一个或多个方法签名的集合 只要某个类型拥有该接口的所有方法签名，即算实现该接口，无需显示声明实现了哪</description></item><item><title>Golang之syscall</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bsyscall/</link><pubDate>Tue, 25 Jan 2022 09:54:18 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bsyscall/</guid><description>Golang之syscall 简介 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─</description></item><item><title>Golang汇编</title><link>https://justice.bj.cn/post/14.language/golang/golang%E6%B1%87%E7%BC%96/</link><pubDate>Tue, 11 Jan 2022 20:36:42 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E6%B1%87%E7%BC%96/</guid><description>Golang汇编 简介 golang的汇编基于plan9汇编,是一个中间汇编方式，以忽略底层不同架构之间的一些差别； 寄存器 各种伪计数器: FP: Frame pointer: arguments</description></item><item><title>Golang之mutex</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bmutex/</link><pubDate>Mon, 10 Jan 2022 09:25:01 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bmutex/</guid><description>Golang之mutex 简介 sync.Mutex是一个不可重入的排他锁; 当一个 goroutine 获得了这个锁的拥有权后， 其它请求锁的 goroutine 就会阻塞在 Lock 方法的调用</description></item><item><title>go常用技巧</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%B8%B8%E8%A7%81%E6%8A%80%E5%B7%A7/</link><pubDate>Sat, 08 Jan 2022 12:19:20 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%B8%B8%E8%A7%81%E6%8A%80%E5%B7%A7/</guid><description>go常用技巧 1 2 3 4 // []byte -&amp;gt; string</description></item><item><title>可视化Go内存管理</title><link>https://justice.bj.cn/post/14.language/golang/go%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Thu, 30 Dec 2021 21:26:14 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/go%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>可视化Go内存管理 这篇文章基于Go 1.13的默认官方实现，有些概念细节可能会在Go的未来版本中发生变化 Go内部内存结构 首先，让我们看看Go内</description></item><item><title>Golang基础</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 24 Dec 2021 18:21:29 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</guid><description>Golang基础 简介 初始化 规则： 每个package 只会被初始化一次； 同一个 package，不同文件是按照文件名的顺序来初始化； 不能循环 import , 例</description></item><item><title>图解_Golang_的_GC_算法</title><link>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 25 Nov 2021 15:52:28 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-gc%E7%AE%97%E6%B3%95/</guid><description>图解 Golang 的 GC 算法 简介 虽然 Golang 的 GC 自打一开始，就被人所诟病，但是经过这么多年的发展，Golang 的 GC 已经改善了非常多，变得非常优秀了。 以下是 Golang GC 算</description></item><item><title>Golang_BTree</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%B8%B8%E7%94%A8%E5%BA%93/golang-btree.go/</link><pubDate>Wed, 03 Nov 2021 09:41:23 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%B8%B8%E7%94%A8%E5%BA%93/golang-btree.go/</guid><description>Golang BTree 简介 1</description></item><item><title>Golang_context</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%B8%B8%E7%94%A8%E5%BA%93/context/</link><pubDate>Sun, 31 Oct 2021 07:44:24 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%B8%B8%E7%94%A8%E5%BA%93/context/</guid><description>Golang context 简介 context 是 go 1.7 引入，用于在 goroutine之间传递上下文信息，包括：取消信号、超时时间、截止时间、k-v 等。 context.Contex</description></item><item><title>Golang错误处理</title><link>https://justice.bj.cn/post/14.language/golang/golang%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link><pubDate>Fri, 29 Oct 2021 21:50:00 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid><description>Golang错误处理 简介 参考 https://coolshell.cn/articles/21140.html</description></item><item><title>Golang测试</title><link>https://justice.bj.cn/post/14.language/golang/golang%E6%B5%8B%E8%AF%95/</link><pubDate>Sat, 23 Oct 2021 20:27:22 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E6%B5%8B%E8%AF%95/</guid><description>Golang测试 简介 单元测试 1 2 3 4 5 ## 执行所有的单元测试 $ go test -v *.go ## 执行指定的单元测试用例 $ go test -v *.go -test.run TestFuncName 参考</description></item><item><title>Goroutine</title><link>https://justice.bj.cn/post/14.language/golang/goroutine/</link><pubDate>Mon, 27 Sep 2021 10:15:08 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/goroutine/</guid><description>Goroutine 简介 goroutine是go中的协程。goroutine基于线程池+任务队列模型，实现了用户态的任务调度功能。 历史演化 历史上几个不同版本的</description></item><item><title>Go语言之cgo</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bcgo/</link><pubDate>Mon, 21 Jun 2021 09:41:23 +0000</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bcgo/</guid><description>Go语言之cgo 简介 Go语言通过自带的CGO的工具来支持C语言函数调用，也可以用Go语言导出C动态库接口给其它语言使用。 原理 Go的代码执行环</description></item></channel></rss>