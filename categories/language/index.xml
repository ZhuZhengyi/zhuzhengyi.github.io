<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>language on Justice的小站</title><link>https://justice.bj.cn/categories/language/</link><description>Recent content in language on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 13 Nov 2022 18:29:15 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/categories/language/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust数据类型</title><link>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sun, 13 Nov 2022 18:29:15 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>Rust数据类型 简介 Rust的数据类型分为标量(scalar)、复合(compound)和集合3种类型： 类型写法 描述 值举例 i8, i16, i32, i64, u8, u16, u32, u64 i</description></item><item><title>Rust模块及包管理</title><link>https://justice.bj.cn/post/14.language/rust/80.rust%E5%8C%85%E7%AE%A1%E7%90%86/</link><pubDate>Fri, 11 Nov 2022 10:32:40 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/80.rust%E5%8C%85%E7%AE%A1%E7%90%86/</guid><description>Rust模块及包管理 简介 Rust程序代码组织分为三个层级： 项目(package)：一个项目工程，一个项目通常由一个cargo.toml定义，</description></item><item><title>scala的monad(转)</title><link>https://justice.bj.cn/post/14.language/scala/scala%E4%B9%8Bmonad/</link><pubDate>Sat, 15 Oct 2022 10:19:58 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/scala/scala%E4%B9%8Bmonad/</guid><description>scala的monad(转) 转自我所理解的monad(1)：半群(semigroup)与幺半群(monoid) google到数学里定义的群(</description></item><item><title>Rust安装配置</title><link>https://justice.bj.cn/post/14.language/rust/85.rust%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 25 Sep 2022 18:42:51 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/85.rust%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>Rust安装配置 简介 rust官方提供了一系列工具，用于rust的开发及管理, 包括： rustup cargo 安装 rust官方提供了rustup用于rust的安装管</description></item><item><title>Rust枚举(enum)</title><link>https://justice.bj.cn/post/14.language/rust/22.rust%E6%9E%9A%E4%B8%BEenum/</link><pubDate>Sun, 25 Sep 2022 18:42:51 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/22.rust%E6%9E%9A%E4%B8%BEenum/</guid><description>Rust枚举(enum) 简介 enum是rust中用于表示同一个可能拥有可数不同状态对象的结构； enum包含枚举类型和枚举值, 枚举类型是该枚举</description></item><item><title>Rust泛型(generic)</title><link>https://justice.bj.cn/post/14.language/rust/25.rust%E6%B3%9B%E5%9E%8Bgenric/</link><pubDate>Sun, 25 Sep 2022 18:42:51 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/25.rust%E6%B3%9B%E5%9E%8Bgenric/</guid><description>Rust泛型(generic) 简介 泛型（generic）是关于泛化类型和函数功能, 以扩大其适用范围, 泛型极大地减少了代码的重复。 Rust泛型</description></item><item><title>Rust错误处理</title><link>https://justice.bj.cn/post/14.language/rust/40.rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link><pubDate>Sun, 25 Sep 2022 18:42:51 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/40.rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid><description>Rust错误处理 简介 Rust将错误分为两个主要类别： 可恢复错误（recoverable） : 由 Result&amp;lt;T, E&amp;gt; 表示，代表向用户报告错误和重试操作是合理的情</description></item><item><title>Python量化库之efinance</title><link>https://justice.bj.cn/post/14.language/python/python%E5%BA%93%E4%B9%8Befinace/</link><pubDate>Sat, 20 Aug 2022 17:48:25 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/python/python%E5%BA%93%E4%B9%8Befinace/</guid><description>Python量化库之efinance 简介 efinance是 安装 1 $ pip install efinance 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import efinance as ef # 股票代码 stock_code =</description></item><item><title>blockchain_rust</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%B9%8Bblockchain/</link><pubDate>Sun, 12 Jun 2022 20:44:24 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%B9%8Bblockchain/</guid><description>blockchain_rust 简介 blockchain_rust是github上一个基于rust的blockchain实现； 基本概念 block： 操作 1 2 3 4 5 6 7 8 9 10</description></item><item><title>Rust特性(trait)</title><link>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</link><pubDate>Sun, 12 Jun 2022 20:44:24 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</guid><description>Rust特性(trait) 简介 trait(特性) 是一组方法的集合，实现trait的类型可以访问该 trait 中定义的其他方法。 任何类型都可以实现 tra</description></item><item><title>ToyDB</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%B9%8Btoydb/</link><pubDate>Mon, 06 Jun 2022 20:41:30 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%B9%8Btoydb/</guid><description>ToyDB 简介 toydb是Erik Grinaker为学习rust语言而开发的分布式sql数据库，支持分布式事务模型; 架构 toydb主要由3部分组成：</description></item><item><title>Rust指针</title><link>https://justice.bj.cn/post/14.language/rust/10.rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link><pubDate>Fri, 03 Jun 2022 16:07:01 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/10.rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid><description>Rust指针 简介 Rust中的指针是一个包含了内存地址的变量，该内存地址引用或者指向了另外的数据。 裸指针 rust裸指针就像C++中的指针一样;</description></item><item><title>ConcurrentHashMap 原理分析</title><link>https://justice.bj.cn/post/14.language/java/concurrenthashmap/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/java/concurrenthashmap/</guid><description>ConcurrentHashMap 原理分析 简介 java 中，hash 表总共有hashmap, hashtable,concurrenthashmap等多种实现方式。hashmap是从</description></item><item><title>Golang Channel</title><link>https://justice.bj.cn/post/14.language/golang/golang-channel/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-channel/</guid><description>Golang Channel 简介 Go语言channel是first-class的，可以被存储到变量中，可以作为参数传递给函数，也可以作为函数的返回值返回; chann</description></item><item><title>Golang Runtime</title><link>https://justice.bj.cn/post/14.language/golang/golang-runtime/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-runtime/</guid><description>Golang Runtime 简介 Go调度器的演化 源码分析 Go 程序启动后需要对自身运行时进行初始化，其真正的程序入口由 runtime 包控制。 以 AMD64 架构上的 Linux 和 macOS 为例，分别位于：src</description></item><item><title>Golang 内存管理</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>Golang 内存管理 简介 Golang内存管理采用类似tcmalloc的分级分配算法，主要由MHeap、MCentral、MCache 3 级组成。按分配对</description></item><item><title>Golang之interface</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Binterface/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Binterface/</guid><description>Golang之interface 简介 接口是一个或多个方法签名的集合 只要某个类型拥有该接口的所有方法签名，即算实现该接口，无需显示声明实现了哪</description></item><item><title>Golang之unsafe</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bunsafe/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bunsafe/</guid><description>Golang之unsafe 简介 unsafe包 unsafe 包中的几个函数都是在编译期间执行的。 1 2 3 4 5 6 type ArbitraryType int type Pointer *ArbitraryType func Sizeof(x ArbitraryType) uintptr func Offsetof(x ArbitraryType) uintptr func Alignof(x ArbitraryType) uintptr Pointer unsa</description></item><item><title>Golang基础</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</guid><description>Golang基础 简介 初始化 规则： 每个package 只会被初始化一次； 同一个 package，不同文件是按照文件名的顺序来初始化； 不能循环 import , 例</description></item><item><title>Golang数据结构之map</title><link>https://justice.bj.cn/post/14.language/golang/go%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bmap/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/go%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bmap/</guid><description>Golang数据结构之map 简介 用法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //字面量初始化 hash1 := map[string]int{ &amp;#34;1&amp;#34;: 2, &amp;#34;3&amp;#34;: 4, &amp;#34;5&amp;#34;: 6, } //make初始化 hash2</description></item></channel></rss>