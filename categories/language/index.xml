<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>language on Justice的小站</title><link>https://justice.bj.cn/categories/language/</link><description>Recent content in language on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 16 Apr 2024 17:06:35 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/categories/language/index.xml" rel="self" type="application/rss+xml"/><item><title>Tauri</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%BA%93%E4%B9%8Btauri/</link><pubDate>Tue, 16 Apr 2024 17:06:35 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%BA%93%E4%B9%8Btauri/</guid><description>Tauri 简介 Tauri是一个类似electron的跨平台基于web的客户端框架。奥法队是非得失通过Tauri可以将web网站已本地客户端的方式在p</description></item><item><title>Go Channel</title><link>https://justice.bj.cn/post/14.language/golang/golang-channel/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-channel/</guid><description>Go Channel 简介 channel是first-class的，可以被存储到变量中，可以作为参数传递给函数，也可以作为函数的返回值返回; channel分为</description></item><item><title>Golang之syscall</title><link>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bsyscall/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E4%B9%8Bsyscall/</guid><description>Golang之syscall 简介 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─</description></item><item><title>Golang内存对齐</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid><description>Golang内存对齐 简介 CPU 始终以字长访问内存， 对齐保证(align guarantee) 结构体的成员变量，第一个成员变量的偏移量为 0。 往后的每个成员变量的对齐值</description></item><item><title>Golang内存管理</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>Golang内存管理 简介 Golang内存管理采用类似tcmalloc的分级分配算法，主要由MHeap、MCentral、MCache 3 级组成</description></item><item><title>Golang汇编</title><link>https://justice.bj.cn/post/14.language/golang/golang%E6%B1%87%E7%BC%96/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E6%B1%87%E7%BC%96/</guid><description>Golang汇编 简介 Go语言汇编基于plan9汇编,是一个中间汇编方式，以忽略底层不同架构之间的一些差别； 寄存器 Go汇编引入了4个伪寄存器，</description></item><item><title>Go语言基础</title><link>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang%E5%9F%BA%E7%A1%80/</guid><description>Go语言基础 简介 初始化 规则： 每个package 只会被初始化一次； 同一个 package，不同文件是按照文件名的顺序来初始化； 不能循环 import , 例如：</description></item><item><title>Go语言运行时</title><link>https://justice.bj.cn/post/14.language/golang/golang-runtime/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/golang/golang-runtime/</guid><description>Go语言运行时 简介 Go调度器的演化 源码分析 Go 语言程序启动后，需要对自身运行时进行初始化，其真正的程序入口由 runtime 包控制。 以 AMD64 架构上的 Linux 和 macOS 为例，</description></item><item><title>Lua 基础</title><link>https://justice.bj.cn/post/14.language/lua/lua%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/lua/lua%E5%9F%BA%E7%A1%80/</guid><description>Lua 基础 简介 Lua 是一种轻量小巧的脚本语言，由巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组于 1993 年开发的</description></item><item><title>Python 基础</title><link>https://justice.bj.cn/post/14.language/python/python%E5%9F%BA%E7%A1%80/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/python/python%E5%9F%BA%E7%A1%80/</guid><description>Python 基础 简介 包依赖 用法 1 2 import module_name # from module_name import module1, module2 import 搜索顺序: 当前目录 如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。 如果都找不到，Pyt</description></item><item><title>Python量化库之efinance</title><link>https://justice.bj.cn/post/14.language/python/python%E5%BA%93%E4%B9%8Befinace/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/python/python%E5%BA%93%E4%B9%8Befinace/</guid><description>Python量化库之efinance 简介 efinance是 安装 1 $ pip install efinance 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import efinance as ef # 股票代码 stock_code = &amp;#39;600519&amp;#39;</description></item><item><title>Rust 数据类型</title><link>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/02.rust%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>Rust 数据类型 简介 Rust 的数据分为 标量(scalar)、复合(compound)和 集合3 种类型： 类型写法 描述 值举例 i8, i16, i32, i64,&amp;lt;br&amp;gt;u8, u16, u32, u64 i:带符号 &amp;lt;b</description></item><item><title>Rust并发</title><link>https://justice.bj.cn/post/14.language/rust/rust%E5%B9%B6%E5%8F%91/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E5%B9%B6%E5%8F%91/</guid><description>Rust并发 简介 线程 线程同步 互斥量 锁 原子量 Send和Sync std::marker 中的 Sync 和 Send Send Send允许在线程间转移所有权; Send 标记 trait 表明类型的所有权可以在线程</description></item><item><title>Rust指针</title><link>https://justice.bj.cn/post/14.language/rust/10.rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/10.rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid><description>Rust指针 简介 Rust中的指针是一个包含了内存地址的变量，该内存地址引用或者指向了另外的数据。 裸指针 rust裸指针就像C++中的指针一样;</description></item><item><title>Rust特性(Trait)</title><link>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/20.rust%E7%89%B9%E6%80%A7trait/</guid><description>Rust特性(Trait) 简介 Trait(特性) 是一组方法的集合，实现trait的类型可以访问该 trait 中定义的其他方法。 任何类型都可以实现 tra</description></item><item><title>Rust迭代器</title><link>https://justice.bj.cn/post/14.language/rust/rust%E8%BF%AD%E4%BB%A3%E5%99%A8/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/rust/rust%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid><description>Rust迭代器 简介 迭代器是一个trait； 迭代器（iterator）负责遍历序列中的每一项和决定序列何时结束的逻辑； 迭代器是 惰性的（lazy</description></item><item><title>STL容器</title><link>https://justice.bj.cn/post/14.language/c++/stl/stl%E5%AE%B9%E5%99%A8/</link><pubDate>Thu, 07 Mar 2024 11:58:54 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/c++/stl/stl%E5%AE%B9%E5%99%A8/</guid><description>STL容器 简介 容器库是类模板与算法的汇集，允许程序员简单地访问常见数据结构，例如队列、链表和栈。 有三类容器——顺序容器、关联容器和无序关联容</description></item><item><title>ASM汇编语言基础</title><link>https://justice.bj.cn/post/14.language/asm/asm/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/asm/asm/</guid><description>ASM汇编语言基础 简介 计算机最底层的语言是机器语言； 机器语言由一系列机器指令组成，现代二进制计算机的机器指令都是一系列01串，对应硬件中的高</description></item><item><title>x86指令编码</title><link>https://justice.bj.cn/post/14.language/asm/x86%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/asm/x86%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81/</guid><description>x86指令编码 简介 参考 X86汇编入门-机器码 - 弦外之音 https://zhuanlan.zhihu.com/p/464774687</description></item><item><title>汇编基础</title><link>https://justice.bj.cn/post/14.language/asm/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 05 Jan 2024 22:16:21 +0800</pubDate><guid>https://justice.bj.cn/post/14.language/asm/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</guid><description>汇编基础 基础知识 1.1 机器语言 机器语言是机器指令的集合。 机器指令是一系列二进制数字，计算机将之转换为一系列高低电平脉冲信号来驱动硬件工作的。 1.2 汇</description></item></channel></rss>