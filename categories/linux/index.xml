<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on Justice的小站</title><link>https://justice.bj.cn/categories/linux/</link><description>Recent content in linux on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 11 Jun 2023 07:49:26 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>多 CPU 处理架构</title><link>https://justice.bj.cn/post/21.linux/%E5%A4%9Acpu%E5%A4%84%E7%90%86%E6%9E%B6%E6%9E%84/</link><pubDate>Sun, 11 Jun 2023 07:49:26 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/%E5%A4%9Acpu%E5%A4%84%E7%90%86%E6%9E%B6%E6%9E%84/</guid><description>多 CPU 处理架构 简介 多 cpu 系统架构上大概分为三种： SMP(Symmetric Multi Processing): 对称多处理器，所有 cpu 都是对等的, 一起共享全部资源，如总线，内存和 I/O 系统等; NUMA(Non-Uniform Memory Access): 非均匀访问</description></item><item><title>mmap</title><link>https://justice.bj.cn/post/21.linux/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90mmap/</link><pubDate>Fri, 03 Mar 2023 14:04:58 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90mmap/</guid><description>mmap 概述 对于mmap，您是否能从原理上解析以下三个问题： mmap比物理内存+swap空间大情况下，是否有问题？ MAP_SHARED，MAP_P</description></item><item><title>Linux系统调用之Futex</title><link>https://justice.bj.cn/post/21.linux/linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B9%8Bfutex/</link><pubDate>Mon, 06 Jun 2022 20:41:30 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B9%8Bfutex/</guid><description>Linux系统调用之Futex 简介 Futex（Fast Userspace muTexes）的缩写，由Hubertus Franke, Matthew Kirkwood, Ingo Molnar and Rusty Russell共同设计完成，</description></item><item><title>AF_XDP</title><link>https://justice.bj.cn/post/21.linux/af_xdp/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/af_xdp/</guid><description>AF_XDP 简介 AF_XDP是一种用于高性能包处理的地址簇(Address Family)。 使用XDP程序中的XDP_REDIRECT操作，可以使用bp</description></item><item><title>eBPF简史(转)</title><link>https://justice.bj.cn/post/21.linux/ebpf%E7%AE%80%E5%8F%B2/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/ebpf%E7%AE%80%E5%8F%B2/</guid><description>eBPF简史(转) 源头：一篇 1992 年的论文 考虑到 BPF 的知名度，在介绍 eBPF 之前，笔者自觉还是有必要先来回答另一个问题： 什么是 BPF? 笔者在前文中说过了，BP</description></item><item><title>Ext4文件系统架构分析(一)(转)</title><link>https://justice.bj.cn/post/21.linux/ext4%E4%BB%8B%E7%BB%8D/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/ext4%E4%BB%8B%E7%BB%8D/</guid><description>Ext4文件系统架构分析(一)(转) 本文描述Ext4文件系统磁盘布局和元数据的一些分析，同样适用于Ext3和Ext2文件系统，除了它们不支持</description></item><item><title>FUSE- linux用户空间文件系统(转)</title><link>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B9%8Bfuse/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B9%8Bfuse/</guid><description>FUSE: linux用户空间文件系统(转) 简介 架构 用户空间文件系统 是操作系统中的概念，指完全在用户态实现的文件系统。 目前Linux通过内核模块对此进</description></item><item><title>Linux IO 之 IO与网络模型</title><link>https://justice.bj.cn/post/21.linux/linux-io-%E4%B9%8B-io%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-io-%E4%B9%8B-io%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</guid><description>Linux IO 之 IO与网络模型 atomic 原子变量: x86在多核环境下，多核竞争数据总线时，提供Lock指令进行锁总线操作。保证“读-修改-写”的操作在芯片级的</description></item><item><title>Linux IO 之 文件系统的架构(转)</title><link>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9E%B6%E6%9E%84/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9E%B6%E6%9E%84/</guid><description>Linux IO 之 文件系统的架构(转) VFS和文件系统总结 一切都是文件： VFS 文件系统的设计，类似 抽象基类，面向对象的思想。 虚函数都必须由底层派生出的实例实</description></item><item><title>Linux 网络包发送过程(转)</title><link>https://justice.bj.cn/post/21.linux/linux-%E7%BD%91%E7%BB%9C%E5%8F%91%E5%8C%85%E8%BF%87%E7%A8%8B%E5%9B%BE%E8%A7%A3/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-%E7%BD%91%E7%BB%9C%E5%8F%91%E5%8C%85%E8%BF%87%E7%A8%8B%E5%9B%BE%E8%A7%A3/</guid><description>Linux 网络包发送过程(转) 在开始今天的文章之前，我先来请大家思考几个小问题。 问1：我们在查看内核发送数据消耗的 CPU 时，是应该看 sy 还是 si ？ 问2：为什</description></item><item><title>Linux内存管理</title><link>https://justice.bj.cn/post/21.linux/linux%E5%86%85%E6%A0%B8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%BC%99%E4%BC%B4%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux%E5%86%85%E6%A0%B8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%BC%99%E4%BC%B4%E7%AE%97%E6%B3%95/</guid><description>Linux内存管理 简介 kernel的内存管理是个2层分层系统，从下往上依次为： 第一层为全部物理内存：其管理器为伙伴系统，最小管理单位为pag</description></item><item><title>Linux文件系统基础知识(转)</title><link>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</guid><description>Linux文件系统基础知识(转) 文件系统的基本组成 文件系统是操作系统中负责管理持久数据的子系统，说简单点，就是负责把用户的文件存到磁盘硬件中</description></item><item><title>内存分配器</title><link>https://justice.bj.cn/post/21.linux/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/</link><pubDate>Sat, 04 Jun 2022 10:26:13 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/</guid><description>内存分配器 简介 系统的物理内存是有限的，而对内存的需求是变化的, 程序的动态性越强，内存管理就越重要，选择合适的内存管理算法会带来明显的性能提升</description></item><item><title>CPU基础</title><link>https://justice.bj.cn/post/21.linux/cpu%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/cpu%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>CPU基础 简介 CPU(Center Process Unit, 中央处理单元)是计算机的核心部件，在冯诺依曼体系架构中，位于中心位置，负责进行算术运算。 冯诺依曼架构 冯诺依曼架构对通用图</description></item><item><title>DMA &amp; RDMA 基本概念</title><link>https://justice.bj.cn/post/21.linux/dma_rdma-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/dma_rdma-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid><description>DMA &amp;amp; RDMA 基本概念 DMA 系统架构 先来看一个典型的系统架构，其中，CPU 通过某种内存总线（memory bus）或互连电缆连接到系统内存。图像或者其他高</description></item><item><title>DPDK</title><link>https://justice.bj.cn/post/21.linux/dpdk/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/dpdk/</guid><description>DPDK 简介 DPDK（Data Plane Development Kit）是由Intel提出的linux 网络加速方案，其完全绕开内核实现的协议栈，把数据包直接从网卡拉到用户态，依</description></item><item><title>linux 文件系统之VFS</title><link>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B9%8Bvfs/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B9%8Bvfs/</guid><description>linux 文件系统之VFS 简介 基本概念 VFS VFS(Vritual Filesystem) 是给用户空间程序提供统一的文件和文件系统访问接口的内核子系统。借助 VFS，即使文件系统的类型不同（比如 NTFS</description></item><item><title>linux-0.11 启动流程</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid><description>linux-0.11 启动流程 1. BIOS 引导 BIOS将 bootsect(启动盘第一个扇区)加载到内存 0x7C00 处，并跳转到 bootsect 处。 1.1 加电 初始化 CS,IP 寄存器. CS=0xFFFF, IP=0x0000, CS:IP=0xFFFF0, 执行该处 BIOS 程序。 1.2</description></item><item><title>Linux内存基础</title><link>https://justice.bj.cn/post/21.linux/linux-%E5%86%85%E5%AD%98/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-%E5%86%85%E5%AD%98/</guid><description>Linux内存基础 Linux内核地址类型 物理地址：CPU和MM之间使用。（内存在总线上的编号） 总线地址：外围总线和内存之间。（外部总线到内存</description></item><item><title>Linux内嵌链表</title><link>https://justice.bj.cn/post/21.linux/linux%E5%86%85%E5%B5%8C%E9%93%BE%E8%A1%A8/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux%E5%86%85%E5%B5%8C%E9%93%BE%E8%A1%A8/</guid><description>Linux内嵌链表 简介 linux 内嵌链表sys/queue.h移植自FreeBSD queue 分为 SLIST、LIST、STAILQ、TAILQ、CIRCLE</description></item></channel></rss>