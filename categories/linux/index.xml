<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on Justice的小站</title><link>https://justice.bj.cn/categories/linux/</link><description>Recent content in linux on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 08 Jan 2024 06:47:33 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>01.最开始的两行代码</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/01.%E6%9C%80%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%A4%E8%A1%8C%E4%BB%A3%E7%A0%81/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/01.%E6%9C%80%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%A4%E8%A1%8C%E4%BB%A3%E7%A0%81/</guid><description>01.最开始的两行代码 当你按下开机键的那一刻，在主板上提前写死的固件程序 BIOS 会将硬盘中启动区的 512 字节的数据，原封不动复制到内存中的 0x7c00 这个位置，</description></item><item><title>02.自己给自己挪个地儿</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/02.%E8%87%AA%E5%B7%B1%E7%BB%99%E8%87%AA%E5%B7%B1%E6%8C%AA%E4%B8%AA%E5%9C%B0%E5%84%BF/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/02.%E8%87%AA%E5%B7%B1%E7%BB%99%E8%87%AA%E5%B7%B1%E6%8C%AA%E4%B8%AA%E5%9C%B0%E5%84%BF/</guid><description>02.自己给自己挪个地儿 书接上回，上回书咱们说到，CPU 执行操作系统的最开始的两行代码。 1 2 movax,0x07c0 movds,ax 将数据段寄存器 ds 的值变成了 0x07c0，方便</description></item><item><title>03.做好最最基础的准备工作</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/03.%E5%81%9A%E5%A5%BD%E6%9C%80%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/03.%E5%81%9A%E5%A5%BD%E6%9C%80%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</guid><description>03.做好最最基础的准备工作 上回说到，操作系统的代码最开头的 512 字节的数据，从硬盘的启动区先是被移动到了内存 0x7c00 处，然后又立刻被移动到 0x90000 处，并且</description></item><item><title>04.把自己在硬盘里的其他部分也放到内存来</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/04.%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%9C%A8%E7%A1%AC%E7%9B%98%E9%87%8C%E7%9A%84%E5%85%B6%E4%BB%96%E9%83%A8%E5%88%86%E4%B9%9F%E6%94%BE%E5%88%B0%E5%86%85%E5%AD%98%E6%9D%A5/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/04.%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%9C%A8%E7%A1%AC%E7%9B%98%E9%87%8C%E7%9A%84%E5%85%B6%E4%BB%96%E9%83%A8%E5%88%86%E4%B9%9F%E6%94%BE%E5%88%B0%E5%86%85%E5%AD%98%E6%9D%A5/</guid><description>04.把自己在硬盘里的其他部分也放到内存来 书接上回，上回书咱们说到，操作系统的一些最最最最基础的准备工作，已经准备好了。 如这张图所示，此时操</description></item><item><title>05.进入保护模式前的最后一次折腾内存</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/05.%E8%BF%9B%E5%85%A5%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E5%89%8D%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E6%8A%98%E8%85%BE%E5%86%85%E5%AD%98/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/05.%E8%BF%9B%E5%85%A5%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E5%89%8D%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E6%8A%98%E8%85%BE%E5%86%85%E5%AD%98/</guid><description>05.进入保护模式前的最后一次折腾内存 上回书咱们说到，操作系统已经完成了各种从硬盘到内存的加载，以及内存到内存的复制。 至此，整个 bootsect.s 的使命就完</description></item><item><title>06.先解决段寄存器的历史包袱问题</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/06.%E5%85%88%E8%A7%A3%E5%86%B3%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%8E%86%E5%8F%B2%E5%8C%85%E8%A2%B1%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/06.%E5%85%88%E8%A7%A3%E5%86%B3%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E5%8E%86%E5%8F%B2%E5%8C%85%E8%A2%B1%E9%97%AE%E9%A2%98/</guid><description>06.先解决段寄存器的历史包袱问题 上回书咱们说到，操作系统又折腾了一下内存，之后的很长一段时间内存布局就不会变了，终于稳定下来了，目前它长这</description></item><item><title>07.六行代码就进入了保护模式</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/07.%E5%85%AD%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%B0%B1%E8%BF%9B%E5%85%A5%E4%BA%86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/07.%E5%85%AD%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%B0%B1%E8%BF%9B%E5%85%A5%E4%BA%86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/</guid><description>07.六行代码就进入了保护模式 上回书咱们说到，操作系统设置了个全局描述符表 gdt。 为后面切换到保护模式后，能去那里寻找到段描述符，然后拼凑成</description></item><item><title>08.烦死了又要重新设置一遍 idt 和 gdt</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/08.%E7%83%A6%E6%AD%BB%E4%BA%86%E5%8F%88%E8%A6%81%E9%87%8D%E6%96%B0%E8%AE%BE%E7%BD%AE%E4%B8%80%E9%81%8Didt%E5%92%8Cgdt/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/08.%E7%83%A6%E6%AD%BB%E4%BA%86%E5%8F%88%E8%A6%81%E9%87%8D%E6%96%B0%E8%AE%BE%E7%BD%AE%E4%B8%80%E9%81%8Didt%E5%92%8Cgdt/</guid><description>08.烦死了又要重新设置一遍 idt 和 gdt 上回书咱们说到，CPU 进入了 32 位保护模式，我们快速回顾一下关键的代码。 首先配置了全局描述符表 gdt 和中断描述符</description></item><item><title>09.Intel 内存管理两板斧：分段与分页</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/09.intel%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%A4%E6%9D%BF%E6%96%A7_%E5%88%86%E6%AE%B5%E4%B8%8E%E5%88%86%E9%A1%B5/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/09.intel%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%A4%E6%9D%BF%E6%96%A7_%E5%88%86%E6%AE%B5%E4%B8%8E%E5%88%86%E9%A1%B5/</guid><description>09.Intel 内存管理两板斧：分段与分页 head.s 代码在重新设置了 gdt 与 idt 后。 来到了这样一段代码。 1 2 3 4 5 6 7 8 9 10 11 jmp after_page_tables ... after_page_tables: push 0 push 0 push 0 push L6 push _main jmp setup_paging L6: jmp L6 那就</description></item><item><title>10.1.小结</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/10.1.%E5%B0%8F%E7%BB%93/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/10.1.%E5%B0%8F%E7%BB%93/</guid><description>10.1.小结 当你按下开机键的那一刻，在主板上提前写死的固件程序 BIOS 会将硬盘中启动区的 512 字节的数据，原封不动复制到内存中的 0x7c00 这个位置，并跳转到</description></item><item><title>10.进入 main 函数前的最后一跃</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/10.%E8%BF%9B%E5%85%A5main%E5%87%BD%E6%95%B0%E5%89%8D%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E8%B7%83/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC1%E9%83%A8%E5%88%86/10.%E8%BF%9B%E5%85%A5main%E5%87%BD%E6%95%B0%E5%89%8D%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E8%B7%83/</guid><description>10.进入 main 函数前的最后一跃 上回书咱们说到，我们终于把这些杂七杂八的，idt、gdt、页表都设置好了，并且也开启了保护模式，相当于所有苦力活</description></item><item><title>11.整个操作系统就 20 几行代码</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/11.%E6%95%B4%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B0%B120%E5%87%A0%E8%A1%8C%E4%BB%A3%E7%A0%81/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/11.%E6%95%B4%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B0%B120%E5%87%A0%E8%A1%8C%E4%BB%A3%E7%A0%81/</guid><description>11.整个操作系统就 20 几行代码 在第一部分，用了总共十回的篇章，把进入 main 方法前的苦力工作都完成了，我们的程序终于跳到第一个由 c 语言写的，也是操</description></item><item><title>12.管理内存前先划分出三个边界值</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/12.%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98%E5%89%8D%E5%85%88%E5%88%92%E5%88%86%E5%87%BA%E4%B8%89%E4%B8%AA%E8%BE%B9%E7%95%8C%E5%80%BC/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/12.%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98%E5%89%8D%E5%85%88%E5%88%92%E5%88%86%E5%87%BA%E4%B8%89%E4%B8%AA%E8%BE%B9%E7%95%8C%E5%80%BC/</guid><description>12.管理内存前先划分出三个边界值 上回书咱们回顾了一下 main.c 函数之前我们做的全部工作，给进入 main 函数做了一个充分的准备。 那今天我们就话不多说，从 main</description></item><item><title>13.主内存初始化mem_init</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/13.%E4%B8%BB%E5%86%85%E5%AD%98%E5%88%9D%E5%A7%8B%E5%8C%96mem_init/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/13.%E4%B8%BB%E5%86%85%E5%AD%98%E5%88%9D%E5%A7%8B%E5%8C%96mem_init/</guid><description>13.主内存初始化mem_init 今天我们不聊具体内存管理的算法，我们就来看看，操作系统用什么样的一张表，达到了管理内存的效果。 我们以 Linux 0.11 源</description></item><item><title>14.中断初始化trap_init</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/14.%E4%B8%AD%E6%96%AD%E5%88%9D%E5%A7%8B%E5%8C%96trap_init/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/14.%E4%B8%AD%E6%96%AD%E5%88%9D%E5%A7%8B%E5%8C%96trap_init/</guid><description>14.中断初始化trap_init 当你的计算机刚刚启动时，你按下键盘是不生效的，但是过了一段时间后，再按下键盘就有效果了。 那我们今天就来刨根</description></item><item><title>15.块设备初始化blk_dev_init</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/15.%E5%9D%97%E8%AE%BE%E5%A4%87%E8%AF%B7%E6%B1%82%E9%A1%B9%E5%88%9D%E5%A7%8B%E5%8C%96blk_dev_init/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/15.%E5%9D%97%E8%AE%BE%E5%A4%87%E8%AF%B7%E6%B1%82%E9%A1%B9%E5%88%9D%E5%A7%8B%E5%8C%96blk_dev_init/</guid><description>15.块设备初始化blk_dev_init 读取硬盘数据到内存中，是操作系统的一个基础功能。 读取硬盘需要有块设备驱动程序，而以文件的方式来读取</description></item><item><title>16.控制台初始化tty_init</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/16.%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%88%9D%E5%A7%8B%E5%8C%96tty_init/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/16.%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%88%9D%E5%A7%8B%E5%8C%96tty_init/</guid><description>16.控制台初始化tty_init 继内存管理结构 mem_map 和中断描述符表 idt 建立好之后，我们又在内存中倒腾出一个新的数据结构 request。 并且把它们</description></item><item><title>17.时间初始化time_init</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/17.%E6%97%B6%E9%97%B4%E5%88%9D%E5%A7%8B%E5%8C%96time_init/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/17.%E6%97%B6%E9%97%B4%E5%88%9D%E5%A7%8B%E5%8C%96time_init/</guid><description>17.时间初始化time_init 书接上回，上回书咱们说到，通过初始化控制台的 tty_init 操作，内核代码可以很方便地在控制台输出字符啦！ 作为用户也可以</description></item><item><title>18.进程调度初始化sched_init</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/18.%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%88%9D%E5%A7%8B%E5%8C%96sched_init/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/18.%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%88%9D%E5%A7%8B%E5%8C%96sched_init/</guid><description>18.进程调度初始化sched_init 书接上回，上回书咱们说到，time_init 方法通过与 CMOS 端口进行读写交互，获取到了年月日时分秒等数据</description></item><item><title>19.缓冲区初始化buffer_init</title><link>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/19.%E7%BC%93%E5%86%B2%E5%8C%BA%E5%88%9D%E5%A7%8B%E5%8C%96buffer_init/</link><pubDate>Mon, 08 Jan 2024 06:47:33 +0800</pubDate><guid>https://justice.bj.cn/post/21.linux/linux-0.11%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E7%AC%AC2%E9%83%A8%E5%88%86/19.%E7%BC%93%E5%86%B2%E5%8C%BA%E5%88%9D%E5%A7%8B%E5%8C%96buffer_init/</guid><description>19.缓冲区初始化buffer_init 书接上回，上回书我们说到了进程调度的初始化，定义了一个长度为 64 的 task 数组用于管理全部进程的结构。 之后在</description></item></channel></rss>