<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tool on Justice的小站</title><link>https://justice.bj.cn/categories/tool/</link><description>Recent content in tool on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 13 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://justice.bj.cn/categories/tool/index.xml" rel="self" type="application/rss+xml"/><item><title>SaltStack</title><link>https://justice.bj.cn/post/70.tool/saltstack/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/saltstack/</guid><description>SaltStack 简介 Salt是一个使用Python开发的，非常简单易用和轻量级的管理工具。由Master和Minion构成，通过ZeroMQ进行通信。 核心</description></item><item><title>MarkDown</title><link>https://justice.bj.cn/post/70.tool/markdown/</link><pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/markdown/</guid><description>MarkDown 简介 Markdown（标记向下）是一种轻量级标记语言，创始人为约翰·格鲁伯。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的X</description></item><item><title>Hugo</title><link>https://justice.bj.cn/post/70.tool/hugo/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/hugo/</guid><description>Hugo 简介 hugo是使用golang开发的一个静态blog生成工具，支持，可结合github page方便完成个人博客站点的搭建； 安装 下载地址：h</description></item><item><title>Git LFS-git的大文件管理</title><link>https://justice.bj.cn/post/70.tool/git-lfs/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/git-lfs/</guid><description>Git LFS-git的大文件管理 简介 Git 在克隆过程中会将仓库的整个历史记录传输到客户端。对于包涵大文件的项目，初始克隆需要大量时间，因为客户端会下</description></item><item><title>GDB</title><link>https://justice.bj.cn/post/70.tool/gdb/</link><pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/gdb/</guid><description>GDB 简介 GDB（Gnu Debugger） 用法 屏蔽信号 1 2 3 4 5 # 屏蔽PIPE信号，在接收到SIGINT时不要停止、打印出来、传递给调试目标程序</description></item><item><title>Rsync</title><link>https://justice.bj.cn/post/70.tool/rsync/</link><pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/rsync/</guid><description>Rsync msrsync 1 2 $ wget -O /usr/bin/msrsync https://raw.githubusercontent.com/jbd/msrsync/master/msrsync &amp;amp;&amp;amp; chmod +x /usr/bin/msrsync $ msrsync -P -p 8 --rsync &amp;#34;-auh&amp;#34; src_dir/ dest_dir</description></item><item><title>SQLite</title><link>https://justice.bj.cn/post/70.tool/sqlite/</link><pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/sqlite/</guid><description>SQLite 简介 SQLite是一种开源，零配置，独立的，独立的，事务关系数据库引擎，旨在嵌入到应用程序中。 用法 参考</description></item><item><title>JQ</title><link>https://justice.bj.cn/post/70.tool/jq/</link><pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/jq/</guid><description>JQ 简介 用法 select 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { &amp;#34;ID&amp;#34;: 0, &amp;#34;Name&amp;#34;: &amp;#34;ltptest&amp;#34;, &amp;#34;Owner&amp;#34;: &amp;#34;ltptest&amp;#34;, &amp;#34;DpReplicaNum&amp;#34;: 3, &amp;#34;MpReplicaNum&amp;#34;: 3, &amp;#34;Status&amp;#34;: 0, &amp;#34;Capacity&amp;#34;: 30, &amp;#34;RwDpCnt&amp;#34;: 25, &amp;#34;MpCnt&amp;#34;: 1, &amp;#34;DpCnt&amp;#34;: 25, &amp;#34;AvailSpaceAllocated&amp;#34;: 3000, &amp;#34;Tokens&amp;#34;: { &amp;#34;bHRwdGVzdCMxIzE1NzY4MjU1MzY=&amp;#34;: { &amp;#34;TokenType&amp;#34;: 1, &amp;#34;Value&amp;#34;: &amp;#34;bHRwdGVzdCMxIzE1NzY4MjU1MzY=&amp;#34;, &amp;#34;VolName&amp;#34;: &amp;#34;ltptest&amp;#34; }, &amp;#34;bHRwdGVzdCMyIzE1NzY4MjU1MzY=&amp;#34;: { &amp;#34;TokenType&amp;#34;: 2, &amp;#34;Value&amp;#34;:</description></item><item><title>fio</title><link>https://justice.bj.cn/post/70.tool/fio/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/fio/</guid><description>fio 简介 FIO（Flexible I/O Tester） 是一款由 Jens Axboe 开发的用于测评和压力/硬件验证的自由开源的软件，支持 19 种不同类型的 I/O 引擎 (sync</description></item><item><title>GCC</title><link>https://justice.bj.cn/post/70.tool/gcc/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/gcc/</guid><description>GCC 简介 gcc 编译链接 编译选项 -shared ：指定生成动态链接库。 -static ：指定生成静态链接库。 -fPIC ：生成可用于共享库的位置独立代码。所有的内部寻址均通过全局偏移表完</description></item><item><title>macos问题</title><link>https://justice.bj.cn/post/70.tool/mac/</link><pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/mac/</guid><description>macos问题 samba连接慢 请进入应用程序 &amp;gt; 实用工具打开终端机。 创建空文件 /etc/nsmb.conf： sudo touch /etc/nsmb.conf 使用 vi 打开 /etc/nsmb</description></item><item><title>Jupyter Notebook</title><link>https://justice.bj.cn/post/70.tool/jupyter-notebook/</link><pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/jupyter-notebook/</guid><description>Jupyter Notebook 简介 Jupyter是 Julia、Python 以及 R 语言的组合，是一个开源的Web应用程序，允许用户创建和共享包含代码、方程式、可视化和文</description></item><item><title>ssh</title><link>https://justice.bj.cn/post/70.tool/ssh/</link><pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/ssh/</guid><description>ssh 简介 常用配置 1. 关闭ssh 首次连接确认提示(yes/no) 两种方式： a. 修改ssh客户端配置文件/etc/ssh/ssh_config： 1 2 Host</description></item><item><title>Bazel</title><link>https://justice.bj.cn/post/70.tool/bazel/</link><pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/bazel/</guid><description>Bazel 简介 Bazel是Google开源的自动化构建工具， 特点 构建快。支持增量编译。对依赖关系进行了优化，从而支持并发执行。 可构建多种语言。baz</description></item><item><title>brew</title><link>https://justice.bj.cn/post/70.tool/brew/</link><pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/brew/</guid><description>brew 简介 操作 安装指定版本 1 2 3 $ git clone http://github.com/homebrew/homebrew-core $ vi homebrew-core/Formula/xxxx.rb $ brew install homebrew-core/Formula/xxxx.rb 更换Homebrew源 1 2 3 4 5 6 7 8 9 10 11 12 # 替换brew.git: cd &amp;#34;$(brew --repo)&amp;#34; git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git # 替</description></item><item><title>clonezilla</title><link>https://justice.bj.cn/post/70.tool/clonezilla/</link><pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/clonezilla/</guid><description>clonezilla 简介 1. initrd.img修改 1 2 3 4 5 6 7 8 9 ### 解压initrd.img $ xz -d initrd.img.xz #Xz格式 $ gunzip initrd.img.gz #Gz格式 ### 解压cpio $ cpio -i -d &amp;lt; initrd.img ### 打</description></item><item><title>curl</title><link>https://justice.bj.cn/post/70.tool/curl/</link><pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/curl/</guid><description>curl 简介 常用操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ## GET ## PUT json data $ curl -X PUT $consul_url -d @- &amp;lt;&amp;lt;EOF { &amp;#34;id&amp;#34;: &amp;#34;${id}&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;${name}&amp;#34;, &amp;#34;address&amp;#34;: &amp;#34;${addr}&amp;#34;, &amp;#34;port&amp;#34;: ${port}, &amp;#34;tags&amp;#34;: [ &amp;#34;role=$role&amp;#34;, &amp;#34;cluster=$cluster&amp;#34;, &amp;#34;env=$env&amp;#34; ] } EOF 参考 https://www.jianshu.com/p/fc0eb6c60816</description></item><item><title>Electron</title><link>https://justice.bj.cn/post/70.tool/electron/</link><pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/electron/</guid><description>Electron 简介 mark-text 编译 1 $ yarn run dev 签名 mac 下，用electron-builder 打包dmg，关闭签名： 1 2 $ export CSC_IDENTITY_AUTO_DISCOVERY=false $ yarn release:mac</description></item><item><title>GitHub 相关工具</title><link>https://justice.bj.cn/post/70.tool/github/</link><pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/github/</guid><description>GitHub 相关工具 简介 travis-ci(持续集成) codecov(代码测试覆盖率) https://github.com/codecov/example-go</description></item><item><title>Git内部原理揭秘</title><link>https://justice.bj.cn/post/70.tool/git%E5%8E%9F%E7%90%86/</link><pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate><guid>https://justice.bj.cn/post/70.tool/git%E5%8E%9F%E7%90%86/</guid><description>Git内部原理揭秘 Git是怎么储存信息的 这里会用一个简单的例子让大家直观感受一下git是怎么储存信息的。 首先我们先创建两个文件 1 2 3 4 $ git init</description></item></channel></rss>