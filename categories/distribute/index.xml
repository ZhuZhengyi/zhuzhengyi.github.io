<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>distribute on Justice的小站</title><link>https://justice.bj.cn/categories/distribute/</link><description>Recent content in distribute on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 17 Nov 2023 20:12:27 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/categories/distribute/index.xml" rel="self" type="application/rss+xml"/><item><title>Raft算法</title><link>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/raft%E7%AE%97%E6%B3%95/</link><pubDate>Fri, 17 Nov 2023 20:12:27 +0800</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/raft%E7%AE%97%E6%B3%95/</guid><description>Raft算法 简介 Raft算法是2013年由斯坦福大学的Diego Ongaro、John Ousterhout 共同提出的一种共识算法1； 与Paxos相比，Raft</description></item><item><title>Hermes算法</title><link>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/hermes%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/hermes%E7%AE%97%E6%B3%95/</guid><description>Hermes算法 简介 基本思想 特性 Strong Consistency: linearizable reads and writes Fault Tolerance: live nodes unblock via write replays after faults High Performance Reads: reads are served locally from all replicas High Performance Writes: decentralized, fully concurrent and fast 1 RTT commit RMW Support: read-modify-write atomics almost as efficient as writes Formally Verified: Hermes is model checked through TLA+</description></item><item><title>Percolator模型</title><link>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%B9%8Bpercolar/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%B9%8Bpercolar/</guid><description>Percolator模型 简介 Percolator模型是Google提出的构建在BigTable之上的分布式事务解决方案; Percolator</description></item><item><title>一致性Hash算法</title><link>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95/</guid><description>一致性Hash算法 一致性哈希算法在 1997 年由麻省理工学院的 Karger 等人在解决分布式 Cache 中提出; 设计目标是为了解决因特网中的热点(Hot spot)问题，初</description></item><item><title>分布式系统时钟</title><link>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/</link><pubDate>Sat, 21 May 2022 21:27:53 +0800</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%92%9F/</guid><description>分布式系统时钟 时钟 物理时钟 物理时钟：物理节点的系统时钟； 逻辑时钟：逻辑上表示事件顺序的方法； Lamport 时钟 Leslie Lamport 在1978年提出逻辑时钟的概念，并描述</description></item><item><title>Paxos算法</title><link>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/paxos%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 02 Apr 2022 10:47:30 +0800</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/paxos%E7%AE%97%E6%B3%95/</guid><description>Paxos算法 简介 Paxos算法是Leslie Lamport在1990年提出的一种基于消息传递的一致性算法。由于算法难以理解，起初并没有引起</description></item><item><title>分布式系统Quorum机制</title><link>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/quorum%E6%9C%BA%E5%88%B6/</link><pubDate>Tue, 05 Oct 2021 20:20:03 +0800</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/quorum%E6%9C%BA%E5%88%B6/</guid><description>分布式系统Quorum机制 简介 分布式系统由于不同节点的存在，分区(Part)不可避免。为了保证数据的可用性(A)，一般可采用多副本，因此存在</description></item><item><title>分布式系统一致性</title><link>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%80%E8%87%B4%E6%80%A7/</link><pubDate>Tue, 05 Oct 2021 20:20:03 +0800</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%80%E8%87%B4%E6%80%A7/</guid><description>分布式系统一致性 简介 分布式系统中，为了保障数据的可靠性，需要将数据冗余存储，已保证在部分节点故障是，仍能提供稳定的服务。 数据的冗余一般通过数</description></item><item><title>分布式事务</title><link>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link><pubDate>Fri, 25 Dec 2020 10:57:29 +0800</pubDate><guid>https://justice.bj.cn/post/31.distribute/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid><description>分布式事务 事务 事务是用来保证一组数据操作的完整性和一致性 满足ACID 具有四种隔离级别、七种传播行为 事务隔离级别 一致性读 事务实现 2PC、3PC</description></item></channel></rss>