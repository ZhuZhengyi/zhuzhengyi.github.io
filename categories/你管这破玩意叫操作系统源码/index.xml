<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>你管这破玩意叫操作系统源码 on Justice的小站</title><link>https://justice.bj.cn/categories/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/</link><description>Recent content in 你管这破玩意叫操作系统源码 on Justice的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 02 Jan 2024 18:45:57 +0800</lastBuildDate><atom:link href="https://justice.bj.cn/categories/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml"/><item><title>Intel 内存管理两板斧：分段与分页</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC1%E9%83%A8%E5%88%86/09.intel%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%A4%E6%9D%BF%E6%96%A7_%E5%88%86%E6%AE%B5%E4%B8%8E%E5%88%86%E9%A1%B5/</link><pubDate>Tue, 02 Jan 2024 18:45:57 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC1%E9%83%A8%E5%88%86/09.intel%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%A4%E6%9D%BF%E6%96%A7_%E5%88%86%E6%AE%B5%E4%B8%8E%E5%88%86%E9%A1%B5/</guid><description>Intel 内存管理两板斧：分段与分页 head.s 代码在重新设置了 gdt 与 idt 后。 来到了这样一段代码。 1 2 3 4 5 6 7 8 9 10 11 jmp after_page_tables ... after_page_tables: push 0 push 0 push 0 push L6 push _main jmp setup_paging L6: jmp L6 那就</description></item><item><title>一个新进程的诞生（七）透过 fork 来看进程的内存规划</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/27.fork%E4%B8%AD%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E8%A7%84%E5%88%92%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 02 Jan 2024 18:45:57 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/27.fork%E4%B8%AD%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E8%A7%84%E5%88%92%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>一个新进程的诞生（七）透过 fork 来看进程的内存规划 书接上回，上回书咱们说到，fork 函数为新的进程（进程 1）申请了槽位，并把全部 task_struct 结构的值都从进</description></item><item><title>一个新进程的诞生（三）如果让你来设计进程调度</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/23.%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E6%9D%A5%E8%AE%BE%E8%AE%A1%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</link><pubDate>Tue, 02 Jan 2024 18:45:57 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/23.%E5%A6%82%E6%9E%9C%E8%AE%A9%E4%BD%A0%E6%9D%A5%E8%AE%BE%E8%AE%A1%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid><description>一个新进程的诞生（三）如果让你来设计进程调度 书接上回，上回书咱们说到，操作系统通过 move_to_user_mode 方法，通过伪造一个中断和中断返回，巧妙地从内核态切换到了</description></item><item><title>大名鼎鼎的进程调度就是从这里开始的</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/18.%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%88%9D%E5%A7%8B%E5%8C%96sched_init/</link><pubDate>Tue, 02 Jan 2024 18:45:57 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/18.%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%88%9D%E5%A7%8B%E5%8C%96sched_init/</guid><description>大名鼎鼎的进程调度就是从这里开始的 书接上回，上回书咱们说到，time_init 方法通过与 CMOS 端口进行读写交互，获取到了年月日时分秒等数据，并通</description></item><item><title>操作系统就是用这两个面试常考的结构管理的缓冲区</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/19.%E7%BC%93%E5%86%B2%E5%8C%BA%E5%88%9D%E5%A7%8B%E5%8C%96buffer_init/</link><pubDate>Tue, 02 Jan 2024 18:45:57 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/19.%E7%BC%93%E5%86%B2%E5%8C%BA%E5%88%9D%E5%A7%8B%E5%8C%96buffer_init/</guid><description>操作系统就是用这两个面试常考的结构管理的缓冲区 书接上回，上回书我们说到了进程调度的初始化，定义了一个长度为 64 的 task 数组用于管理全部进程的结构。</description></item><item><title>调试 Linux 最早期的代码</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC4%E9%83%A8%E5%88%86/39.%E7%95%AA%E5%A4%96%E7%AF%87-linux_0.11%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95/</link><pubDate>Tue, 02 Jan 2024 18:45:57 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC4%E9%83%A8%E5%88%86/39.%E7%95%AA%E5%A4%96%E7%AF%87-linux_0.11%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95/</guid><description>调试 Linux 最早期的代码 Linux 0.11 是 Linux 最早期的代码，非常适合作为第一款深入探索操作系统原理的代码。 但同时，Linux 0.11 因为很多古老工具链的缺失，以及一些</description></item><item><title>进入 main 函数前的最后一跃</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC1%E9%83%A8%E5%88%86/10.%E8%BF%9B%E5%85%A5main%E5%87%BD%E6%95%B0%E5%89%8D%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E8%B7%83/</link><pubDate>Tue, 02 Jan 2024 18:45:57 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC1%E9%83%A8%E5%88%86/10.%E8%BF%9B%E5%85%A5main%E5%87%BD%E6%95%B0%E5%89%8D%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E8%B7%83/</guid><description>进入 main 函数前的最后一跃 上回书咱们说到，我们终于把这些杂七杂八的，idt、gdt、页表都设置好了，并且也开启了保护模式，相当于所有苦力活都做好</description></item><item><title>一个新进程的诞生 完结撒花</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E9%A1%BE/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E9%A1%BE/</guid><description>一个新进程的诞生 完结撒花 整个第三部分，我们用前四回的内容讲述了进程调度机制，又用后三回内容讲述了 fork 函数的全部细节。先看进程调度机制。 进程调度</description></item><item><title>一个新进程的诞生（四）从一次定时器滴答来看进程调度</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/24.%E4%BB%8E%E4%B8%80%E6%AC%A1%E5%AE%9A%E6%97%B6%E5%99%A8%E6%BB%B4%E7%AD%94%E6%9D%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/24.%E4%BB%8E%E4%B8%80%E6%AC%A1%E5%AE%9A%E6%97%B6%E5%99%A8%E6%BB%B4%E7%AD%94%E6%9D%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid><description>一个新进程的诞生（四）从一次定时器滴答来看进程调度 书接上回，上回书咱们说到，我们完全由自己从零到有设计出了进程调度的大体流程，以及它需要的数</description></item><item><title>你的键盘是什么时候生效的？</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/14.%E4%B8%AD%E6%96%AD%E5%88%9D%E5%A7%8B%E5%8C%96trap_init/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/14.%E4%B8%AD%E6%96%AD%E5%88%9D%E5%A7%8B%E5%8C%96trap_init/</guid><description>你的键盘是什么时候生效的？ 当你的计算机刚刚启动时，你按下键盘是不生效的，但是过了一段时间后，再按下键盘就有效果了。 那我们今天就来刨根问底一下</description></item><item><title>原来操作系统获取时间的方式也这么low</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/17.%E6%97%B6%E9%97%B4%E5%88%9D%E5%A7%8B%E5%8C%96time_init/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/17.%E6%97%B6%E9%97%B4%E5%88%9D%E5%A7%8B%E5%8C%96time_init/</guid><description>原来操作系统获取时间的方式也这么low 书接上回，上回书咱们说到，通过初始化控制台的 tty_init 操作，内核代码可以很方便地在控制台输出字符啦！ 作为用户也</description></item><item><title>按下键盘后为什么屏幕上就会有输出</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/16.%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%88%9D%E5%A7%8B%E5%8C%96tty_init/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/16.%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%88%9D%E5%A7%8B%E5%8C%96tty_init/</guid><description>按下键盘后为什么屏幕上就会有输出 继内存管理结构 mem_map 和中断描述符表 idt 建立好之后，我们又在内存中倒腾出一个新的数据结构 request。 并且把它们都</description></item><item><title>第二部分小结</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E9%A1%BE/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93%E4%B8%8E%E5%9B%9E%E9%A1%BE/</guid><description>第二部分小结 第二部分所讲的代码，就和第二部分的目录一样规整，一个 init 方法对应一个章节，简单粗暴。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void main(void) {</description></item><item><title>缺页中断</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC4%E9%83%A8%E5%88%86/36.%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC4%E9%83%A8%E5%88%86/36.%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD/</guid><description>缺页中断 书接上回，上回书咱们说到，进程 2 通过 execve 函数，将自己摇身一变成为 /bin/sh 程序，也就是 shell 程序开始执行。 1 2 3 4 5 6 7 8 9 10 11 // main.c void init(void) { ... if (!(pid=fork())) {</description></item><item><title>进程2的创建</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC4%E9%83%A8%E5%88%86/34.%E8%BF%9B%E7%A8%8B2%E7%9A%84%E5%88%9B%E5%BB%BA/</link><pubDate>Tue, 02 Jan 2024 18:45:22 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC4%E9%83%A8%E5%88%86/34.%E8%BF%9B%E7%A8%8B2%E7%9A%84%E5%88%9B%E5%BB%BA/</guid><description>进程2的创建 书接上回，上回书咱们说到，进程 1 通过 open 函数建立了与外设交互的能力，具体其实就是打开了 tty0 这个设备文件，并绑定了标准输入 0，标准输出</description></item><item><title/><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/20.%E7%A1%AC%E7%9B%98%E5%88%9D%E5%A7%8B%E5%8C%96hd_init/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC2%E9%83%A8%E5%88%86/20.%E7%A1%AC%E7%9B%98%E5%88%9D%E5%A7%8B%E5%8C%96hd_init/</guid><description/></item><item><title/><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC5%E9%83%A8%E5%88%86/41.%E7%95%AA%E5%A4%96%E7%AF%87-%E8%B7%B3%E7%A5%A8%E6%98%AF%E4%B8%8D%E5%8F%AF%E8%83%BD%E7%9A%84/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC5%E9%83%A8%E5%88%86/41.%E7%95%AA%E5%A4%96%E7%AF%87-%E8%B7%B3%E7%A5%A8%E6%98%AF%E4%B8%8D%E5%8F%AF%E8%83%BD%E7%9A%84/</guid><description/></item><item><title>shell 程序读取你的命令</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC5%E9%83%A8%E5%88%86/43.shell%E7%A8%8B%E5%BA%8F%E8%AF%BB%E5%8F%96%E4%BD%A0%E7%9A%84%E5%91%BD%E4%BB%A4/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC5%E9%83%A8%E5%88%86/43.shell%E7%A8%8B%E5%BA%8F%E8%AF%BB%E5%8F%96%E4%BD%A0%E7%9A%84%E5%91%BD%E4%BB%A4/</guid><description>shell 程序读取你的命令 新建一个非常简单的 info.txt 文件。 1 name:flashage:28language:java 在命令行输入一条十分简单的命令。 1 [root@linux0.11] cat info.txt | wc -l3 这条命令的意思是读取刚刚的 info.txt 文件，输出它的行数</description></item><item><title>shell 程序跑起来了</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC4%E9%83%A8%E5%88%86/37.shell%E7%A8%8B%E5%BA%8F%E8%B7%91%E8%B5%B7%E6%9D%A5%E4%BA%86/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC4%E9%83%A8%E5%88%86/37.shell%E7%A8%8B%E5%BA%8F%E8%B7%91%E8%B5%B7%E6%9D%A5%E4%BA%86/</guid><description>shell 程序跑起来了 书接上回，上回书咱们说到，Linux 通过缺页中断处理过程，将 /bin/sh 的代码从硬盘加载到了内存，此时便可以正式执行 shell 程序了。 这个 shell 程序</description></item><item><title>一个新进程的诞生（一）先整体看一下</title><link>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/21.%E6%96%B0%E8%BF%9B%E7%A8%8B%E8%AF%9E%E7%94%9F%E5%85%A8%E5%B1%80%E6%A6%82%E8%BF%B0/</link><pubDate>Tue, 02 Jan 2024 17:09:40 +0800</pubDate><guid>https://justice.bj.cn/post/09.pub/%E4%BD%A0%E7%AE%A1%E8%BF%99%E7%A0%B4%E7%8E%A9%E6%84%8F%E5%8F%AB%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81/%E7%AC%AC3%E9%83%A8%E5%88%86/21.%E6%96%B0%E8%BF%9B%E7%A8%8B%E8%AF%9E%E7%94%9F%E5%85%A8%E5%B1%80%E6%A6%82%E8%BF%B0/</guid><description>一个新进程的诞生（一）先整体看一下 一个新进程的诞生，从操作系统的源码角度来说，其实就两行代码。而关于创建进程的重点，其实就一行代码，就是大名</description></item></channel></rss>